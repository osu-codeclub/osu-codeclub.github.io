{
  "hash": "361c9d6c08663148973b59401d1069e7",
  "result": {
    "markdown": "---\ntitle: \"Shiny 02: Intro to Shiny (cont.)\"\nsubtitle: Explore additional features in Shiny App.\nauthor: \"Horacio Lopez-Nicora\"\ndate: \"2023-11-06\"\ncategories: [shiny, quarto]\ntitle-block-banner: false\nimage: img/shiny_logo.png\ndf-print: kable\ncode-fold: false\n---\n\n\nWelcome to our `shiny` app development class! Throughout this session, we will continue diving into the world of Shiny and explore its incredible potential for creating interactive web applications. Today we will use the function `reactiveVal`.\n\nThe `reactiveVal` function is utilized to create a \"reactive value\" object which has special capabilities for reactive programming. It serves as a variable that allows both reading and writing of values. Whenever the value is read from a `reactiveVal` object, the calling reactive expression becomes dependent on it. Similarly, when the value is altered, any reactives that were previously dependent on it are notified.\n\nLet's make a `shiny` app and see how this works!  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(DT)\n\n# Initialize an empty data frame to store the collected data\ncollected_data <- data.frame(\n  Treatment = character(0),\n  PlotNumber = numeric(0),\n  StandCount = numeric(0),\n  PlantHeight = numeric(0),\n  Severity = numeric(0)\n)\n\n# Create a variable to store the selected rows\nselected_rows <- reactiveVal()\n\n# Define the UI\nui <- fluidPage(\n  titlePanel(\"Soybean Field Data Collection\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"treatment\", \"Select Treatment:\", c(\"T1\", \"T2\", \"T3\")),\n      numericInput(\"plot\", \"Enter Plot Number:\", value = 101, min = 101, max = 304),\n      numericInput(\"stand_count\", \"Enter Stand Count:\", value = 0),\n      numericInput(\"plant_height\", \"Enter Plant Height (in cm):\", value = 0),\n      numericInput(\"severity\", \"Enter Severity Rating:\", value = 0),\n      actionButton(\"submit\", \"Submit Data\"),\n      actionButton(\"delete\", \"Delete Selected Row\"),\n      downloadButton(\"downloadData\", \"Download Data\")\n    ),\n    \n    mainPanel(\n      DTOutput(\"dataTable\")\n    )\n  )\n)\n\n# Define the server\nserver <- function(input, output, session) {\n  collected_data_reactive <- reactiveVal(NULL)\n  \n  observeEvent(input$submit, {\n    new_entry <- data.frame(\n      Treatment = input$treatment,\n      PlotNumber = input$plot,\n      StandCount = input$stand_count,\n      PlantHeight = input$plant_height,\n      Severity = input$severity\n    )\n    # Append the new entry to the collected data\n    collected_data <- rbind(collected_data_reactive(), new_entry)\n    collected_data_reactive(collected_data)\n    \n    # Reset input fields\n    updateSelectInput(session, \"treatment\", selected = \"T1\")\n    updateNumericInput(session, \"plot\", value = 101)\n    updateNumericInput(session, \"stand_count\", value = 0)\n    updateNumericInput(session, \"plant_height\", value = 0)\n    updateNumericInput(session, \"severity\", value = 0)\n  })\n  \n  observeEvent(input$delete, {\n    # Get the selected row(s) and remove them from the collected data\n    selected_rows(input$dataTable_rows_selected)\n    if (length(selected_rows()) > 0) {\n      collected_data <- collected_data_reactive()\n      collected_data <- collected_data[-selected_rows(), ]\n      collected_data_reactive(collected_data)\n    }\n  })\n  \n  output$dataTable <- renderDT({\n    datatable(collected_data_reactive(), options = list(select = \"multi\"))\n  })\n  \n  # Download data as a CSV file\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      \"collected_data.csv\"\n    },\n    content = function(file) {\n      write.csv(collected_data_reactive(), file)\n    }\n  )\n}\n\n# Run the app\nshinyApp(ui, server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
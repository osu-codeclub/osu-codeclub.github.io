{
  "hash": "e3cf87a5996303c984fac2924f963d64",
  "result": {
    "markdown": "---\ntitle: \"Introduction to `ggplot`\"\nsubtitle: \"Code structure, data, aesthetic mappings, and geoms\"\nauthor:\n  - \"Jessica Cooperstone\"\ndate: \"2025-01-14\"\ncategories: [ggplot, dataviz, plotting, tidyverse]\ntitle-block-banner: false\nimage: img/ggplot2_masterpiece.png\nalttext: \"A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads “ggplot2: build a data masterpiece. Art by Allison Horst\"\n---\n\n\n# Introduction\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Figure from [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/ggplot2_masterpiece.png){fig-align='center' fig-alt='A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads “ggplot2: build a data masterpiece.' width=70%}\n:::\n:::\n\n\nThe very popular R package [`ggplot2`](https://ggplot2.tidyverse.org/index.html) is based on a system called the [Grammar of Graphics](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448/ref=as_li_ss_tl) by Leland Wilkinson which aims to create a grammatical rules for the development of graphics. It is part of a larger group of packages called \"the tidyverse.\"\n\n## What is the tidyverse?\n\nThe package `ggplot2` is a part of a larger collection of packages called [\"the tidyverse\"](https://www.tidyverse.org/) that are designed for data science. You can certainly use R without using the tidyverse, but it has many packages that I think will make your life a lot easier. \nWe can install just `ggplot2` or install all of the packages in the core tidyverse (which is what I'd recommend since we will use the others too), which include:\n\n- [`dplyr`](https://dplyr.tidyverse.org/): for data manipulation\n- [`ggplot2`](https://ggplot2.tidyverse.org/): a \"grammar of graphics\" for creating beautiful plots\n- [`readr`](https://readr.tidyverse.org/): for reading in rectangular data (i.e., Excel-style formatting)\n- [`tibble`](https://tibble.tidyverse.org/): using tibbles as modern/better dataframes\n- [`stringr`](https://stringr.tidyverse.org/): handling strings (i.e., text or stuff in quotes)\n- [`forcats`](https://forcats.tidyverse.org/): for handling categorical variables (i.e., factors) (meow!)\n- [`tidyr`](https://tidyr.tidyverse.org/): to make \"tidy data\"\n- [`purrr`](https://purrr.tidyverse.org/): for enhancing functional programming (also meow!)\n- [`lubridate`](https://lubridate.tidyverse.org/): for working with dates\n\nWe have used many of these other packages in Code Club. There are more tidyverse packages outside of these core nine, and we will talk about some of them another time.\n\n> **tl;dr** Tidyverse has a lot of packages that make data analysis easier.  None of them are required, but I think you'll find many tidyverse approaches  easier and more intuitive than using base R.  \n\nYou can find [here](https://tavareshugo.github.io/data_carpentry_extras/base-r_tidyverse_equivalents/base-r_tidyverse_equivalents.html) some examples of comparing tidyverse and base R syntax.\n\n## Installing ggplot & tidyverse \n\nTo install packages in R that are on the [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/), you can use the function `install.packages()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\nWe only need to install packages once. But, every time we want to use them, we need to \"load\" them, and can do this using the function `library()`. Since you will likely often use the `tidyverse` functions, it's a good habit to add the code `library(tidyverse)` to the top of each of your scripts/RMarkdown/Quarto documents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n# What is \"ggplot?\"\n\nThe \"gg\" in ggplot stands for \"grammar of graphics\" and all plots share a common template. This is fundamentally different than plotting using a program like Excel, where you first pick your plot type, and then you add your data. With ggplot, you start with data, add a coordinate system, and then add \"geoms,\" which indicate what type of plot you want. A cool thing about ggplot is that you can add and layer different geoms together, to create a fully customized plot that is exactly what you want. If this sounds nebulous right now, that's okay, we are going to talk more about this.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Figure from [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/ggplot2_exploratory.png){fig-align='center' fig-alt='A group of fuzzy round monsters with binoculars, backpacks and guide books looking up a graphs flying around with wings (like birders, but with exploratory data visualizations). Stylized text reads “ggplot2: visual data exploration.”' width=70%}\n:::\n:::\n\n\n# What can you do with ggplot?\n\nLet's start by looking at the different types of plots that can be made using `ggplot2`. We will do this by looking at the [`ggplot2` cheatsheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf).\n\n# A plotting framework\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Figure from [Andrew Heiss](https://datavizs21.classes.andrewheiss.com/)](img/plotting_framework.png){fig-align='center' fig-alt='A pictorial depiction of the different ggplot layers, starting with data, aesthetics, geometries, scales, facets, coordinates, labels, and themes' width=70%}\n:::\n:::\n\n\nYou can think about a ggplot as being composed of layers. You start with your data, and continue to add layers until you get the plot that you want. This might sound a bit abstract so I am going to talk through this with an example.\n\nFirst, let's load some practice data. We are going to use a fun 🐧 data set from the package\n[`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/). If you don't already have this, you can download it with the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\nThen we can load the data.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\nThe dataset itself is called `penguins`. Let's look at it using the function `glimpse()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\nLet's start by trying to make a simple scatterplot, where we see the relationship between `bill_length_mm` and `bill_depth_mm`.\n\n## Data\nThe first argument passed to your plot is the data. How did I know that? It's in the documentation.\n\n::: {.cell}\n\n```{.r .cell-code}\n?ggplot()\n```\n:::\n\n\nThe simplest ggplot code you can write, just using the `ggplot()` function and indicating the data we want to use. Because data is the default first argument, you can actually omit the `data =` part of this code and it will work just the same.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/data only-1.png){width=672}\n:::\n:::\n\n\nWhy do we not see a plot? Well we haven't told R what to plot! We are getting the first \"base\" layer of the plot.\n\nYou can also pipe `|>` or `%>%`, the data to the ggplot function. When reading code, you can interpret the pipe as \"and then.\" Here, take the `penguins` data, and then, run `ggplot()`. Writing code in this way is my preference so I tend to code like this. We talked in more detail about the pipe in past Code Clubs.\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/data and pipe-1.png){width=672}\n:::\n:::\n\n\nStill nothing. Well that's what we would expect.\n\n## Aesthetic mappings `aes()`\nNow that we've indicated our data, we can add aesthetics mapping so we can work towards actually see a plot. We want to make a scatterplot where on the x-axis we have bill length (`bill_length_mm`), and on the y-axis we have bill depth (`bill_depth_mm`).\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/aes-1.png){width=672}\n:::\n:::\n\n\nSo we have progressed from a blank plot, but we still do not have a plot by basically anyone's defintion. Why not?\n\nEven though we have indicated to R our data and aesthetic mappings, we have not indicated what precisely to do with our data. We have said what we want on x and y (and now we can see those labelled appearing) but we have not indicated what *type* of plot we want. And, we can do that in the next step, by adding a `geom_`.\n\n## Geoms `geom_`\n\nNow let's indicate what type of plot we want. In this example, we are going to make a scatterplot, and to do that we will use [`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html)\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/geom point-1.png){width=672}\n:::\n:::\n\n\nWe have a plot! It's not a finished plot, but its a plot and we can work from here.\n\nLet's say we wanted to see whether penguins of different `species` are in different places on our plot.  We can take the variable `species` and map it to the aesthetic `color`.\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/color-1.png){width=672}\n:::\n:::\n\n\nNote what R has done for us - we now see each dot colored based on which species it is, and we also have a new legend.\n\nWhat if we wanted to add a line that shows the relationship between `bill_length_mm` and `bill_depth_mm` for each `species`? We can layer in another geom, here we will use [geom_smooth](https://ggplot2.tidyverse.org/reference/geom_smooth.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") # the method is a linear model\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Global vs. local `aes()`\nA note about aesthetic mappings now that we have introduced geoms -`aes()` can go in two places:\n\n* in the `ggplot()` call, and this means they will inherit for every layer of the plot\n* in a specific `geom_`, and those aesthetics will only be for that specific geom.\n\nSo we can make the same plot we saw above by mapping aesthetics within `geom_point()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm, color = species))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/local aes-1.png){width=672}\n:::\n:::\n\n\nLet's look at example where changing the location of the aesthetic mappings does make a difference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") # the method is a linear model\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_smooth(method = \"lm\") # the method is a linear model\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in `geom_smooth()`:\n! Problem while computing stat.\nℹ Error occurred in the 2nd layer.\nCaused by error in `compute_layer()`:\n! `stat_smooth()` requires the following missing aesthetics: x and y.\n```\n:::\n:::\n\n\nWhat happened here? We got an \"error in `geom_smooth()... `stat_smooth()` requires the following miss aesthetics: x and y\".\n\nThis happened because we have only set our x and y aesthetics in `geom_point()` and not in `geom_smooth()` so R doesn't know what to map x and y to. When we map our aesthetics globally, we don't have this problem because x and y inherit for every subsequent layer.\n\nWe can also do a combination of global and local setting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(method = \"lm\") # the method is a linear model\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(aes(color = species), method = \"lm\") +\n  geom_smooth(method = \"lm\", color = \"black\") # the method is a linear model\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range (`stat_smooth()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\nWhen we set `color` only in `geom_point()`, we do not \"group\" by `color` (here, by `species`) so we get our smoothed line for all the data (instead of by `species`).\n\n### Mapping vs. 'setting'\n\nIf you want to map a variable to an aesthetic, it MUST be within the `aes()` statement. If you just want to change the color to \"blue\" for example, it should be outside the `aes()` statement. Look at the difference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(color = \"#088F8F\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nIf we put \"blue\" instead our aesthetic mappings, we get something that doesn't make sense.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = \"blue\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n> **tl:dr** if mapping a variable to an aesthetic, inside `aes()`, if not, then outside.\n\n# Practice\n\nCreate a plot that shows the relationship between flipper length and body mass. Color your points based on the sex of the penguins.\n\n<details>\n\n<summary>Need a hint?</summary>\n\nTry using the variables `flipper_length`, `body_mass_g`, and `sex`. You can make `x`, `y`, and `color`.\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = sex)) + \n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNot happy with the missing value? We can remove it.\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  drop_na(flipper_length_mm, body_mass_g, sex) |> # drop missing values \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = sex)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n</details>\n\n## Different geoms\n\nCreate a boxplot that shows the distribution of body mass for penguins on the different islands.\n\n<details>\n\n<summary>Need a hint?</summary>\n\nThe geom for a boxplot is called [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html).\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = island, y = body_mass_g)) +\n  geom_boxplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n</details>\n\n## Mapping to other aesthetics\n\nCreate a scatterplot that shows the relationship between bill length and bill depth, but color the points based on what island the penguins are from, and make the points a different shape based on sex.\n\n<details>\n\n<summary>Need a hint?</summary>\n\nYou can make the aesthetic `shape = ` in the same way you use color.\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, bill_depth_mm, \n             color = island, shape = sex)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nNot happy with missing values? We can remove them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  drop_na(bill_length_mm, bill_depth_mm, island, sex) |>  # drop missing values\n  ggplot(aes(x = bill_length_mm, bill_depth_mm, \n             color = island, shape = sex)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n</details>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
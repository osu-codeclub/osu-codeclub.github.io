{
  "hash": "277c9178e062974f0e502b6fd5ec013f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quarto website 2\"\nsubtitle: Adding a new page to your site & using YAML to modify the look and configuration of our new page and the entire site\nauthor: \"Jelmer Poelstra\"\ndate: \"2023-09-11\"\ncategories: [website]\ntitle-block-banner: false\nimage: img/lux_theme.png\n---\n\n::: {.cell}\n\n:::\n\n\n------\n\n<br>\n\nIn today's session,\nyou will add a new page to the website that you created in the first session.\n\nThen, we will talk about the \"YAML\" markup mini-language that is used\nto configure your website,\nand will make some changes to the YAML header for your new page\n_and_ the YAML in the `_quarto.yml` file with site-wide settings. \n\n<br>\n\n## Adding a new page to your site\n\nLet's create a new page for your site.\nIf you already have an idea for a page that you would like to add to your site,\nyou can go with that.\nOtherwise, you can follow along with my example,\nwhich will be **a page about research projects on a personal website**.\n\nEach page on your website has a corresponding `.qmd` source document.\nCurrently, we just have two pages:\n\n- A home page, for which `index.qmd` is the source.\n- An \"about page\", for which `about.qmd` is the source. \n\n**So, to create a new page, we will create a new Quarto document** &mdash;\nin RStudio, click `File` => `New File` => `Quarto Document`:\n\n![The window to create a new Quarto document](img/new_file.png){width=60% fig-align=\"center\"}\n\nUnlike last week, make sure the **\"Use visual markdown editor\" box is checked**,\nand then click the \"Create Empty Document\" button in the bottom left.\n\nOnce the file has been created, let's save it straight away:\npress <kbd>Ctrl</kbd>/<kbd>Cmd</kbd>+<kbd>S</kbd>.\n**Save it in the top-level folder for your website**,\ni.e. the same folder that contains `index.qmd` and `about.qmd`.\nIf you're making a page for which you have your own ideas,\nyou can name it accordingly &mdash; otherwise, save it as **`research.qmd`**.\n\n![Your near-empty document should look something like this](img/new_page.png){width=90% fig-align=\"center\"}\n\nThe newly created document will only contain a few lines,\nas shown in the screenshot above.\nThis is the so-called \"**YAML header**\".\n\nWe talked a bit about the YAML \"markup language\" last week,\nmostly in the context of the `_quarto.yml` file,\nwhich consists _only_ of YAML content, unlike this `.qmd` file.\nLet's dive a little deeper into YAML,\nbecause it's one of the key components of your website's source.\n\n<br>\n\n## A little more about YAML\n\nYAML (“YAML Ain’t Markup Language”, a silly joke of a name)\nis a simple format commonly used for **configuration**.\nIn the source files for your website, there is a lot of YAML content straight away.\n\nFirst, you have the `_quarto.yml` file that configures your website,\nincluding its navigation elements that are visible on every page of the site,\nlike the \"navbar\" at the top.\nBut there is also YAML in the headers of all `.qmd` files.\nFor example, the top of our newly created `research.qmd` should read:\n\n```yaml\n---\ntitle: \"Untitled\"\n---\n```\n\nAs opposed to the `_quarto.yml` file, this YAML header:\n\n- Is surrounded by lines that only contain three dashes `---`,\n  that mark the beginning and the end of this YAML header.\n- Configures just _this individual page_,\n  whereas the YAML in `_quarto.yml` specifies _site-wide configurations_.\n\n<br>\n\n**YAML consists of entries of key-value pairs**:\nin the example above,\n`title` is the key that determines what the document's title will be,\nand `\"Untitled\"` is the current value.\n\nValid YAML **keys** are limited to what has been pre-defined by others\n(i.e., in this case, the developers of Quarto),\nand the list of possible keys depends on the document type.\nThe Quarto website has\n[a full list of valid YAML keys for the `_quarto.yml` file](https://quarto.org/docs/reference/projects/websites.html)\nas well as a [a list for HTML pages](https://quarto.org/docs/reference/formats/html.html),\nwhich is the kind of output that your `.qmd` files will produce when rendered.\n\nDepending on the key, the **value** can be:\n\n- A \"_free-form string_\" of text, like for a title\n- _Constrained to a series of possible values_,\n  like for the `theme` key, which can set the overall look of a page to one of\n  a few dozen available \"themes\"\n- An _on/off switch_ using `true`/`false`,\n  like whether to show a Table of Contents using the `toc` key.\n\n<br>\n\n### YAML's structure\n\nYAML's structure is quite simple, but it does have a few rules.\nEach entry is generally on its own line.\nIt has a _hierarchical structure_ in that many values can itself be given\nkey-value pairs to specify additional options.\nFor example, see this section from your `_quarto.yml` file:\n\n```yaml\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n```\n\n- Note how the values for _keys that simply take a value_ (above: `theme`, `css`, and `toc`)\n  and have no \"child keys\" are on the same line as the key.\n\n- In contrast, keys whose values are really \"_child keys_\" (above: `format` and `html`):\n  \n  - Are followed by a colon `:`\n  \n  - Are on a line by themselves\n  \n  - Have their child keys on the next line(s), **indented** one more level.\n\n- Indentation in YAML has to use _either two or four spaces_ (no tabs!)\n  per indentation level,\n  and YAML is *sensitive to indentation errors*.\n  (Note that RStudio will by default insert multiple spaces instead of a true tab\n  when you press the <kbd>Tab</kbd> key, so you can still use that just fine.)\n\n::: {.callout-tip}\n#### Site-wide vs. page-specific configuration\nThis `format` => `html` section in the `_quarto.yml` file will set defaults for\nthe formatting of individual pages on your website.\nYou can use the same keys (e.g. `theme`, `css`, and `toc` shown above)\nin the YAML header of your `qmd` files,\nwhich would override these site-wide settings.\n:::\n\n<br>\n\nA final component of YAML syntax, with lists of entries,\nis used in the `website` section of `_quarto.yml`:\n\n```yaml\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n```\n\nHere, each entry (= each page on your website) is preceded by a dash `-`, and:\n\n- The top entry, for the homepage, has an `href` key pointing to the relevant file,\n  as well as a `text` key (**note: same indentation level, no additional dash**)\n  that will set what text is being displayed for this link.\n\n- The bottom entry uses an alternative specification method,\n  with just a pointer to the file.\n  When you do this, the displayed test on the website would be the same as the\n  file name without the `.qmd` extension, namely \"About\". \n\n::: {.callout-important collapse=\"true\"}\n#### YAML errors (Click to expand)\n\nIf you made a mistake in the YAML,\nyou will see an ominous-looking box like this pop up:\n\n![You'll see this error if you specified an invalid key in your YAML. Don't panic! If you don't already know what's wrong, carefully read the error which is quite informative.](img/yaml_error.png){width=60% fig-align=\"center\"}\n\n:::\n\n<br>\n\n## Modifying the YAML header of our new page\n\nLet's start by **changing the page's title** to `title: \"My Research\"`.\n\nThen, we can **add a few new YAML entries** to further populate the \"title block\"\n(top part) of your page:\n\n- `subtitle: \"These are my ongoing and past research projects\"`\n   \n- `date: 2023-09-11`\n\n- `author: \"Lucy T. Hedgehog\"`, or for multiple authors, use the following syntax:\n\n  ```yaml\n  author:\n    - Lucy T. Hedgehog\n    - Lucy T. Hedgehog's advisor \n  ```\n\n::: {.callout-tip collapse=\"true\"}\n#### YAML auto-complete and quoting (Click to expand)\n\n- Note that when you type a new entry in the YAML header,\n  RStudio will have an auto-completion feature with information boxes:\n\n![](img/autocomplete.png){width=85% fig-align=\"center\"}\n\n- In the examples above, we have **double-quoted** (\"...\") free-form YAML values\n  like `title`.\n  This is optional: as long as your title doesn't contain any special characters,\n  it would also work without quotes. \n\n:::\n\n<br>\n\nHere are a few of the\n[many other **possible HTML page YAML keys**](https://quarto.org/docs/reference/formats/html.html)\nthat are particularly useful:\n\n- `date-modified`: If you wrote a page originally on a certain date,\n  but made some modifications afterwards,\n  you can get a separate date entry for the modifications.\n  Useful for e.g. blog posts and reports.\n\n- `title-block-banner: true`:\n   Put the title block (title and subtitle) in a \"banner\"\n   by adding a background color.\n\n- `number-sections: true`: Number sections (as determined using headers and their levels)\n  hierarchically.\n\n- `toc-location`: Where the Table of Contents should show up &mdash;\n   one of `left`, `right` (default), or `body`\n\n:::{.exercise}\n## Exercises I\n#### Experiment with YAML header options {-}\n\n<br>\n\nOn your new page:\n\n- Try adding the `title-block-banner` and see if you like that kind of format.\n\n- Add a few headers of different levels\n  (start with \"Header 2\", the title is basically the one level 1 header) &mdash;\n  you can do so by clicking the dropdown menu that will say Normal:\n\n  ![](img/add_headers.png){width=75% fig-align=\"center\"}\n\n- Try turning on `number-sections` and play around with the `toc-location`\n  (Your `_quarto.yml` has an entry `toc: true`, so a table of contents will\n  by default be shown on very page).\n\n:::\n\n<br>\n\n## Modifying the `_quarto.yml` file\n\nAs mentioned above, the `_quarto.yml` file solely consists of YAML configurations,\nand these settings apply to the entire website.\n\nThe two most important \"sections\" in this file are:\n\n- `website`, where we can control things like the site's navigation elements\n  that will show up on every page\n\n- `format` => `html`,\n  where we can specify page-level formatting settings.\n  Here, we can use the same YAML keys that we could use in the YAML header of our\n  new page (and any other page), except that the settings will be applied across\n  all pages on the site.\n\n<br>\n\n### The `website` section\n\nIn my example, this section currently reads as follows --\nyours should be the same except for the title unless you did some customization\nyourself already:\n\n```yaml\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n```\n\nThe `navbar` key represents\n**a navigation bar that is always shown across the top of the site**,\nwhich should be a good default for most websites.\nBut if you want a website navigation bar on the side,\nor combined top and side navigation\n(the latter is useful for sites with a lot of contents, and is used for example\non [Quarto's own documentation website](https://quarto.org/)),\nthis is possible: see [Quarto's Website Navigation docs](https://quarto.org/docs/websites/website-navigation.html).\n\nAny entries under the **`left` key** will be left-aligned on the navbar,\ni.e. consecutive entries start on the left-hand side of the navbar,\nmoving rightward with every added entry.\nWe could also add right-aligned entries with a **`right` key**\n(see the exercise below).\n\n::: {.callout-tip collapse=\"true\"}\n#### Navbar auto-collapse (Click to expand)\nIf the width of your viewing window is narrow\n(like it often is in RStudio's \"Viewer\", as well as on phones),\nthe navbar will be automatically collapsed into a \"Hamburger menu:\"\n\n![](img/hamburger_menu.png){width=65% fig-align=\"center\"}\n\n:::\n\n<br>\n\n**If we want our new page to show up in the navbar**,\nwe'll have to add it as a new entry:\n\n```yaml\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n      - href: research.qmd\n        text: My Research\n```\n\n<br>\n\n**Some other useful keys for the `website` section** include\n(see this [Quarto docs page](https://quarto.org/docs/reference/projects/websites.html) for a full list):\n\n- `back-to-top-navigation` (a child key of `website`):\n  When set to `true`, this will show a \"Back to top\" button once you reach the\n  bottom of a page.\n\n- `favicon` (a child key of `website`):\n  A favicon is an icon or small image that shows up in your browser next to\n  the name of the website, see the icons shown in screenshot:\n\n![](img/favicon.png){width=65% fig-align=\"center\"}\n\n- `icon` (a navbar entry like `href` and `text`):\n  This will allow you to show an icon instead of (default for external links)\n  or in addition to text (default for internal links)\n  for a link in your navbar.\n  See [here](https://icons.getbootstrap.com/) for a list of available icons.\n  For example:\n\n```yaml\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n        icon: house\n```\n\n![](img/home_icon.png){width=65% fig-align=\"center\"}\n\n<br>\n\n### The `html` `format` section\n\nHere is what the `format` section of your `_quarto.yaml` should look like:\n\n```yaml\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n```\n\nAs mentioned before,\nthe configuration done in this section can use the same keys as those in the YAML\nheader for individual pages,\nbut the settings done in `_quarto.yaml` will apply across the entire website.\n\nFor now, we'll only talk about one key: **`theme`**.\nThis will change the overall look of your website to a number of preset themes,\neach with different fonts and colors.\nWhile you can also completely customize your website's look yourself,\nusing one of these themes should work well for most of us.\n\nYou can see a visual list of available themes at <https://bootswatch.com/>.\nThe default theme is `cosmo`, as you can see above.\nAs an example, if we change Lucie's website theme to `lux`:\n\n![](img/lux_theme.png){width=65% fig-align=\"center\"}\n\n<br>\n\n:::{.exercise}\n## Exercises II\n#### Site-wide configuration {-}\n\n<br>\n\n**Modify your `_quarto.yml` to configure your website**.\nYou can play around with whatever you prefer,\nbut here are some suggestions:\n\n- Try several different themes and pick one for your website.\n\n- Move the navbar entry for the `about.qmd` page to the right-hand side.\n\n- Add one more icons to the Navbar, for example:\n  - Add a link to your Twitter account and use the `twitter` icon\n  - If you have one, add a link to your GitHub account and use the `github` icon\n  - Add e.g. a question mark icon to your About page link\n    (search for one [here](https://icons.getbootstrap.com)).\n  - Take a look at the [visual list of possible icons](https://icons.getbootstrap.com)\n    and see if there are some that you'd like to use.\n\n- Add a favicon for your `website`.\n\n:::\n\n::: {.callout-tip}\n#### RStudio's visual editor\nThe visual editor should give you some easy-to-use, Word-processor like options\nto format the content on your website, add images, and so on &mdash;\nfeel free to add some more content to your website!\n:::\n\n::: {.callout-tip}\n#### Check out the Code Club site source code\nIf you're wondering how certain elements or configuration of the Code Club website\nwas done, feel free to look at source code for the Code Club website,\nwhich is at: <https://github.com/osu-codeclub/osu-codeclub.github.io>.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
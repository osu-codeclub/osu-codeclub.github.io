{
  "hash": "f9bf3f9a820a65d80bf611aff0d824ae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Basics 5: Data Manipulation With Base R\"\nauthor: \"Horacio Lopez-Nicora\"\ndate: \"2024-02-09\"\ncategories: [r-basics]\ntitle-block-banner: false\nnumber-depth: 3\nexecute: \n  eval: false\nimage: img/Allison_Horst.png\n---\n\n\n------------------------------------------------------------------------\n\n<br>\n\n## Introduction\n\n#### **Recap of last week**\n\nLast week, we discussed vectorized operations and introduced the concept of a data frame. Furthermore, you successfully created a data frame containing multiple columns and rows.\n\nToday, we will explore data manipulation using base R syntax. It is important to note that there are countless ways to achieve the same objective, particularly in base R. Whenever possible, let us consider simpler syntax.\n\n<br>\n\n## Data manipulation with (base) R\n\n### Create a new dataset\n\n\\###\n\n<details>\n\n<summary><b>Please create a new data frame and name it df. This data frame should consist of three columns (Control, Trt1, and Trt2) with 50 observations each. The Control column should contain 50 data points that follow a normal distribution with a mean of 35 and a standard deviation of 10. Likewise, the Trt1 column should have a mean of 37 and a standard deviation of 10, and the Trt2 column should have a mean of 75 and a standard deviation of 10. Additionally, add five blocks (a, b, c, d, e), each repeating 10 times. Let's use the function `set.seed(1234)` to work with the same values.</b> **(Click for the answer)**</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ndf <- data.frame(Control = rnorm(50, 35, 10),\n                 Trt1 = rnorm(50, 37, 10),\n                 Trt2 = rnorm(50, 75, 10),\n                 Block = rep(c(\"a\", \"b\", \"c\", \"d\", \"e\"), 10))\n```\n:::\n\n\n</details>\n\n<details>\n\n<summary>\n\n<b>Data mostly come in two shapes – “long” format and “wide” format.\n\nWhat type of data do you think is `df`?</b> **(Click for the answer)**</summary>\n\nOur data frame `df` is in **wide** format.\n\n</details>\n\n### Extract variables (columns)\n\nThere are multiple ways to extract/select variables/columns. Here are two methods that we have previously used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[, c(\"Control\", \"Trt2\")] # by name\n\ndf[, c(1, 2)]  # by column index\n```\n:::\n\n\n### Make new variables (columns)\n\nLet's create two new variables from existing ones:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Trt1.log <- log(df$Trt1)\ndf$Trt2.log <- log(df$Trt2)\n```\n:::\n\n\n### Extract observations (rows)\n\nThere are multiple ways to extract/filter observations/rows. Here are two ways we can do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using [,]\ndf[df$Trt1.log < 3.5, ]\n\ndf[df$Trt2.log > 4.2 & df$Block == \"a\", ]\n\n# Using subset\nsubset(df, df$Trt2.log > 4.2 & df$Block == \"a\")\n```\n:::\n\n\n### Arrange observations (rows)\n\nSorting is an operation that we typically perform when manipulating our dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ascending order of Block (alphabetic) followed by ascending order of Trt2.log\ndf[order(df$Block, df$Trt2.log) , ]\n\n# descending order of Block (alphabetic) followed by ascending order of Trt2.log\ndf[order(rev(df$Block), df$Trt2.log) , ]\n```\n:::\n\n\n### Summarize observations (rows)\n\nThere are numerous ways to accomplish this task, and we will discover additional methods as we progress to the `tidyverse` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Manually create a data.frame\ndata.frame(Trt1.mean = mean(df$Trt1),\n           Trt1.sd = sd(df$Trt1),\n           Trt2.mean = mean(df$Trt2),\n           Trt2.sd = sd(df$Trt2))\n```\n:::\n\n\n### Summarize rows within groups\n\nTypically, our goal is to summarize data according to specific variables. Below is how we can achieve this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First operate in the data.frame by group\ndf_by <- by(df, \n   INDICES = list(df$Block),\n   FUN = function(x){\n     data.frame(Block = unique(x$Block),\n                Control.mean = mean(x$Control),\n                Control.sd = sd(x$Control),\n                Trt1.mean = mean(x$Trt1),\n                Trt1.sd = sd(x$Trt1),\n                Trt2.mean = mean(x$Trt2),\n                Trt2.sd = sd(x$Trt2))\n   })\n\n# Then combine the results into a data.frame\ndo.call(rbind, df_by)\n```\n:::\n\n\nAlternatively, we can use the `aggregate()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf.by <- do.call(data.frame, aggregate(cbind(Control, Trt1, Trt2) ~ Block, data = df, FUN = function(x) c(mean = mean(x), sd = sd(x) ) ))\ndf.by\n```\n:::\n\n\nLet's take a look at each treatment graphically (**we will do more data viz soon!**):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(df.by$Control.mean, names.arg =  paste(df.by$Block)) \n\nbarplot(df.by$Trt1.mean, names.arg =  paste(df.by$Block))\n\nbarplot(df.by$Trt2.mean, names.arg =  paste(df.by$Block))\n```\n:::\n\n\n### Reshape our data frame\n\nWide to long format:\n\nIn data analysis, the need to reshape the data frequently arises in order to enhance manageability and usefulness. Reshaping the data entails converting it from one format, such as wide, to another, like long, or vice versa. Such transformations aid in facilitating data accessibility, simplifying analysis, and providing more information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- reshape(df, \n             varying = c(\"Control\", \"Trt1\", \"Trt2\", \"Trt1.log\", \"Trt2.log\"), \n             v.names = \"Yield\", \n             timevar = \"Treatment\", \n             times = c(\"Control\", \"Trt1\", \"Trt2\", \"Trt1.log\", \"Trt2.log\"), \n             new.row.names = 1:1000, \n             direction = \"long\")\n\nl\n```\n:::\n\n\n<br>\n\n## Practice\n\nBefore seeking assistance from others, it is generally advisable for you to attempt to resolve the problem on your own. R provides comprehensive tools for accessing documentation and searching for help.\n\n### **Exercise 1**\n\n<details>\n\n<summary>\n\n<b>Let's use the same data frame `df` we created at the beginning of this session</b> **(Click for the answer)**</summary>\n\nPlease go to the beginning of this session and re-run the code.\n\n</details>\n\n### Exercise 2\n\n<details>\n\n<summary>\n\n<b>A more informative variable could be one showing the difference between the treatment and the control. Create two new variables: `Trt1.Delta` and `Trt2.Delta`.</b> **(Click for the answer)**</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Trt1.Delta <- df$Trt1 - df$Control\ndf$Trt2.Delta <- df$Trt2 - df$Control\n```\n:::\n\n\n</details>\n\n### Exercise 3\n\n<details>\n\n<summary>\n\n<b>Create a new data frame `df_delta` containing the following variables (columns): `Block`, `Trt1.Delta`, and `Trt2.Delta`.</b> **(Click for the answer)**</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_delta <- df[, c(\"Block\", \"Trt1.Delta\", \"Trt2.Delta\")]\n```\n:::\n\n\n</details>\n\n### Exercise 4\n\n<details>\n\n<summary>\n\n<b>Summarize `Trt1.Delta` and `Trt2.Delta` by `Block`. Produce the mean and standard deviation for each variable.</b> **(Click for the answer)**</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf.by <- do.call(data.frame, aggregate(cbind(Trt1.Delta, Trt2.Delta) ~ Block, data = df, FUN = function(x) c(mean = mean(x), sd = sd(x) ) ))\ndf.by\n```\n:::\n\n\n</details>\n\n### Exercise 5\n\n<details>\n\n<summary>\n\n<b>In the end, our goal is to conduct statistical analysis to assess the impact of the treatment. However, the current data format does not allow us to proceed with our analysis. To fix this, please transform the data frame `df_delta` from a wide format to a long format. Please name this new data frame as `long_delta`.</b> **(Click for the answer)**</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- reshape(df_delta, \n             varying = c(\"Trt1.Delta\", \"Trt2.Delta\"), \n             v.names = \"Yield\", \n             timevar = \"Treatment\", \n             times = c(\"Trt1.Delta\", \"Trt2.Delta\"), \n             new.row.names = 1:1000, \n             direction = \"long\")\n```\n:::\n\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "992f9255d953908eacb5f03aa6ecd1ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducibility 3:<br>File Organization and RStudio Projects\"\nsubtitle: \"File-related recommendations to improve the reproducibility of you research\"\npagetitle: \"Reproducibility 3\"\nauthor: \"Jelmer Poelstra\"\ndate: \"2025-09-22\"\ncategories: [reproducibility]\ntitle-block-banner: false\nnumber-depth: 3\nexecute: \n  eval: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n------------------------------------------------------------------------\n\n![Artwork by [\\@allison_horst](https://twitter.com/allison_horst)](img/rproj.png)\n\n<br>\n\n## Introduction: Reproducibility\n\nAfter covering Quarto in the first two sessions,\ntoday is the third of a series of Code Club sessions covering several\ntopics under the umbrella of \"reproducibility\".\n\nI would like to start by taking a step back to talk about reproducibility in general.\nWhat do we mean by **reproducibility**?\nYour research is reproducible when third parties are \n_able to perform the same analysis on your data, and produce the same results._\n\nReproducibility is perhaps a low bar compared to the related concept of **replicability**,\nwhich is the ability to produce the same (qualitative) results when applying the\n_same analysis to different data_.\nHere is a helpful table showing these two and two other related concepts:\n\n![From [The Turing Way](https://book.the-turing-way.org/reproducible-research/reproducible-research)](img/reproducible-matrix.jpg){fig-align=\"center\" width=\"65%\"}\n\nFor example:\n\n- Say that you've written a paper in which you present the results of one of your\n  research projects.\n  When this research is fully reproducible,\n  it means that someone else should be able to be able to run the exact same analysis\n  and produce all the results and figures using your paper and its associated documentation.\n\n- Relatedly, when you work in a reproducible manner and you abandon an analysis for say two years,\n  you will be able to pick up from where you left off without much trouble.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Using R is already a big step in the right direction!\n\nIt is inherently more reproducible to write code, such as in R,\nas opposed to clicking around in a program with a Graphical User Interface (GUI).\nThis is because it would generally be necessary but very tedious to record every\nsingle click that you make in a GUI,\nwhereas it is easy to save your code.^[\nThough this is not without caveats.\nFor example, some programs with GUIs may be able to report the exact procedure\nthat was used along with the results.<br><br>\nConversely, if you also save say alternative R code that gives different results,\nand do so without annotation, you may not know what produced the results that you\nended up writing down in your manuscripts.\n]\n\nIn addition, R is open source and freely available.\nIf you use a proprietary program that requires an expensive license,\nyour work may be reproducible in principle,\nbut won't be in practice for many people.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Additional aspects & the plan for this series\n\nResearch that is fully reproducible should use a set of tools and best-practice\nrelated to:\n\n- File organization [_(this session)_]{style=\"color:darkgrey\"}\n- Code style and organization [_(next two sessions)_]{style=\"color:darkgrey\"}\n- File version management [_(Git at the end of the semester)_]{style=\"color:darkgrey\"}\n- Data and code sharing [_(In part: Git at the end of the semester)_]{style=\"color:darkgrey\"}\n- Software management [_(Within R with renv - may cover this later?)_]{style=\"color:darkgrey\"}\n- Project documentation\n\n### Today\n\nToday, we'll go over the following four recommendations related to file organization\nthat improve your research projects' reproducibility.\n\n1. Use a self-contained folder for each project\n2. Separate files using a consistent subfolder structure\n3. Use relative paths\n4. Use RStudio Projects\n\nAnd at the bottom of the page, there is some reading material for fifth recommendation:\n\n5. Use good file names\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Use a self-contained folder for each project\n\nUsing one folder, or really a hierarchy of folders, for one project means that you:\n\n- Don't mix files for multiple distinct projects inside one folder.\n- Don't keep files for one project in multiple places.\n\nFor example:\n\n![_Two project folder hierarchies, nicely separated and self-contained.<br>The gray `$HOME` folder is a Home folder which exists for Mac and Linux users.<br>For Windows users, you can think of this e.g. as your Documents or Desktop folder._](img/proj-dirs-1.svg){fig-align=\"center\" width=\"60%\"}\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nWhen you have a single folder hierarchy for each project, it is:\n\n- Easier to find files and to share your project, harder to accidentally throw away stuff, etc.\n- Possible to use *relative paths* within a project's scripts,\n  which improves reproducibility (see below).\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Separate files using a consistent subfolder structure\n\nWithin your project's directory hierarchy, you should:\n\n- Separate code from data.\n- Separate raw data from processed data and from results.\n\nFor example,\nhere is one good way of organizing a (bioinformatics) research project:\n\n![_An example research project folder structure.<br>Folders are shown in blue and the README Markdown (`.md`) file is shown in black._](img/proj-ex_annot.png){fig-align=\"center\" width=\"70%\"}\n\nAlso:\n\n- Treat raw data as read-only and as highly valuable.\n- Treat generated output as somewhat disposable and as possible to regenerate.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Use relative paths\n\nA next reproducibility-related recommendation is to\n**use relative paths in your R code**.\nTo understand this recommendation, we'll go over the following key terms:\n\n1. **\"Directory\"** (**\"dir\"** for short) is just _another word for folder_\n   commonly used in coding contexts.\n\n2. Your **\"working directory\"** is the _directory where you are currently located_.\n   When you open R (or Python, or a Terminal, etc.),\n   it will always have a starting point at a specific location in your computer^[\n   You can think of this along the lines of opening a file browser (Finder / File Explorer etc.) --\n   it will always have a starting point, and you can move around to go to other locations.].\n\nThere are functions to _change your working dir_ as well as ways to refer to\nany location on the computer regardless of whether you are there.\nThat brings us to the third term:\n\n3. A **path** specifies the location of a file or folder on the computer.\n\n### Absolute and relative paths\n\nIn paths, folders are separated by slashes -- \nforward slashes in Mac and Linux:\n\n```{.bash-out-solo}\n/Users/John Doe/Desktop/cats.png\n```\n\n...and backward slashes in Windows:\n\n```{.bash-out-solo}\nC:\\Users\\John Doe\\Desktop\\cats.png\n```\n\nThere are two types of paths:\n\n- **Absolute paths** (AKA full paths) start from a root (top-level) directory,\n  and correctly point to a file or folder regardless of what your working dir is.\n  If you think of a path as a way to point to a geographic location,\n  then absolute paths are like GPS coordinates.\n  The two paths above are examples of absolute paths.\n\n- **Relative paths** start from a specific *working dir*,\n  and won't work if you're located elsewhere.\n  Again thinking of a path as a way to point to a geographic location,\n  then relative paths are like directions like \"Take the second left\".\n  For example:\n  \n  ```{.bash-out-solo}\n  results/summary.tsv\n  my_script.R\n  ```\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Why prefer relative paths\n\n<details><summary>Don't absolute paths sound better? What could be a disadvantage of them?</summary>\n\nAbsolute paths:\n\n- Don't generally work across computers\n- Break when your move a project folder hierarchy to a a different place on your computer\n\nOn the other hand, relative paths that use the root of the project folder hierarchy\nas the working dir, also work when moving the folder within and between computers.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n![Two project dir hierarchies, and the absolute and relative path to a (FASTQ) file.](img/proj-dirs-2.svg){fig-align=\"center\" width=\"70%\"}\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n![Now everything was moved into `Dropbox`.<br>The absolute path has changed, but the relative path remains the same.](img/proj-dirs-3.svg){fig-align=\"center\" width=\"70%\"}\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Use RStudio Projects\n\n### Getting and setting the working directory in R\n\nIn R, you can see what your working directory is with the function `getwd()`\n(short for \"get working dir\"):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/poelstra.1/Library/CloudStorage/Dropbox/mcic/teach/codeclub/codeclub-site/posts/S10E03_reprod_03\"\n```\n\n\n:::\n:::\n\n\n\nYou can see that the output path is **my** working directory --\nyours will be different as the set up of your computer organization structure is different from mine\n(and recall that you will see backslashes if you have Windows).\n\nYou can change your working directory using the function `setwd()`...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/this/should/be/your/working-directory/path\")\n```\n:::\n\n\n\n::: callout-tip\n### We recommend always using forward slashes, even on Windows!\n\nThis may seem strange given what I explained above ---\nbut even though Windows natively uses backslashes,\nyou can use backslashes in R as it will take care of the conversion.\n\nSpecifically, using forward slashes even on Windows is better for two reasons:\n\n1. It makes the path specification universal (independent of the operating system).\n2. Backslashes have a separate purpose in R.\n   Therefore, you would actually need to use **two** backslashes inside `setwd()`\n   (e.g. `setwd(\"C:\\\\Users\\\\John Doe\")`) and in other contexts where you use paths.\n   This gets confusing and error-prone!\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n\n### Exercise: Change your working dir {-}\n\nFind a location on your computer that you would like to move to\n(it doesn't matter where or what that is, this is just for practice).\nThen, move to that directory using `setwd()`.\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### RStudio Projects\n\nInstead of changing working directories whenever you fire up R,\nyou can (and should!) use an RStudio Project instead. \n**RStudio Projects are an RStudio-specific concept that create a special file (`.Rproj`)**,\nprimarily to designate a directory as the working directory for everything within it,\nand to make it easy to switch between projects.\n\nLet's create an RStudio Project for Code Club:\n\n1. You may already have a folder on your computer for all things Code Club.\n  **If not, please create one now**.\n\n2. Click `File` > `New Project`, and then select `Existing Directory`.\n   Select your folder for Code Club.\n  \nAfter RStudio automatically reloads,\n**the R working directory will be set to the place where your RStudio Project file is located.**\nTherefore, you should see the file ending in `.Rproj`\nin the RStudio `Files` tab in the lower right pane.\nAlso, you can check your working dir:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Why RStudio Projects are useful\n\nIn brief, RStudio Projects help you to organize your work and make it more reproducible:\n\n- When using Projects, you can avoid manually setting your working directory altogether.\n  To refer to files within the project, you **can use relative file paths**.\n  This way, even if you move the project directory,\n  or copy it to a different computer, the same paths will still work.\n\n- Projects encourage you to organize research projects inside self-contained folder\n  hierarchies exactly as recommended above.\n  \n- When you switch between Projects, R will restart ---\n  and this is a good thing, since you don't want to randomly carry over objects and\n  loaded packages across research projects.\n\n- Convenience in RStudio:\n  - Projects record which scripts (and R Markdown files) are open in RStudio,\n    and will reopen all of those when you reopen the project.\n    This becomes quite handy, say, when you work on three different projects,\n    each of which uses a number of different scripts.\n  - Files pane in sync with your working dir\n  \n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Using relative paths to refer to files within the project\n\nAs mentioned above, a main function of RStudio Projects is that you should not\nhave to use `setwd()` at all.\nBut of course, not all files will be -nor should they be!- in the very same top-level\nproject folder that your RStudio Project will set your working dir to.\n\nSo, to refer to files you will (still) be using paths, and you should prefer\nrelative paths -- for example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# [Don't run - fictional examples]\nread_tsv(\"data/experiment1.tsv\")\nggsave(\"results/figures/barplot.png\")\n```\n:::\n\n\n\n::: callout-note\n#### Accessing files that aren't in the project dir\n\nOccasionally, you may need to access a file that is outside of your project dir\n(but the less that happens, the better!).\nIn that case, you can either use an absolute path,\nor a relative path that starts by going \"up\" one or more levels.\nYou can do the latter with the `..` notation, for example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# [Don't run - fictional examples]\n# The file is located in the dir:\nread_tsv(\"../myfile.tsv\")\n\n# The file is located in the dir Downloads, which is two levels up:\nread_tsv(\"../../Downloads/myfile.tsv\")\n```\n:::\n\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n### Exercise: Create an RStudio Project for a research project folder {-}\n\nThen, practice with finding files: open quotes (`\"`) and press Tab!\n:::\n\n<br>\n\n---------------\n\n---------------\n\n## Bonus: Use good file names\n\nHere are three principles for good file names\n([from Jenny Bryan](https://speakerdeck.com/jennybc/how-to-name-files)) ---\ngood file names:\n\n- Are machine-readable\n- Are human-readable\n- Play well with default file ordering\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Machine-readable\n\nConsistent and informative naming helps you to programmatically find and process files.\n\n- Avoid spaces in file names.\n  More generally, only use the following in file names:\n  - Alphanumeric characters <kbd>A-Z</kbd>, <kbd>a-z</kbd>, <kbd>0-9</kbd>\n  - Underscores <kbd>_</kbd> and hyphens (dashes) <kbd>-</kbd>\n  - Periods (dots) <kbd>.</kbd>\n  \n- In file names, you may provide **metadata** like Sample ID and date --\n  (allowing you to easily select samples from e.g. a certain month):\n  `sample032_2016-05-03.txt`  \n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Human-readable\n\nOne good way to combine machine- and human-readable (opinionated recommendations):\n\n- Use **underscores** (<kbd>_</kbd>) to delimit units you may later want to\n  separate on: sampleID, treatment, date.\n- Within such units, use **dashes** (<kbd>-</kbd>) to delimit words: `grass-samples`.\n- Limit the use of **periods** (<kbd>.</kbd>) to indicate file extensions.\n- Generally *avoid capitals*.\n\nFor example:\n  \n```{.bash-out-solo}\nmmus001_treatmentA_filtered.tsv\nmmus002_treatmentA_filtered.tsv\n.\n.\nmmus086_treatmentA_filtered.tsv\n```\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Play well with default file ordering\n\n- Use **leading zeros** for lexicographic sorting: `sample005`.\n- **Dates** should always be written as `YYYY-MM-DD`: `2020-10-11`.\n- **Group similar files together** by starting with same phrase,\n  and **number scripts** by execution order:\n  \n```{.bash-out-solo}\nDE-01_normalize.R\nDE-02_test.R\nDE-03_process-significant.R\n```\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Further resources\n\n- [\"The Turing Way\" E-book on Reproducible Research](https://book.the-turing-way.org/reproducible-research)\n- Wilson et al. 2017, PLOS Computational Biology:\n  \"[Good enough practices in scientific computing](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510)\"\n- Kieran Healy:\n  [\"The Plain Person's Guide to Plain Text Social Science\"](https://plain-text.co/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
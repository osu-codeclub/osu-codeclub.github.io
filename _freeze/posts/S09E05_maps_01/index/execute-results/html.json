{
  "hash": "a3ed06130744e9fe7e8ef6667a1f9ab1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plotting geographical maps in R: part I\"\nsubtitle: \"Using _ggplot_ to make maps and adding custom information to them.\"\npagetitle: \"Maps I\"\nauthor: \"Jelmer Poelstra\"\ndate: \"2025-02-18\"\ncategories: [maps, ggplot2, dataviz]\ntitle-block-banner: false\nnumber-depth: 2\nexecute: \n  eval: true\n  cache: false\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n------------------------------------------------------------------------\n\n<br>\n\n## Intro\n\nToday is the first of three Code Club sessions on **making maps with R**.\nWe will:\n\n- Plot maps of various regions and learn how to format them (part I, today)\n- Add **points/markers and text** (part II)\n- Make **\"choropleth\" maps**, where areas are colored depending on a variable\n  like mean temperature (part III)\n- Use different **map backgrounds**, like those of Google Maps,\n  and make **interactive maps** (part IV??)\n\nThis content builds to some extent on the previous series of sessions on\nmaking plots with _ggplot2_, as we will mainly use this package to make maps.\n\n### Setting up\n\nWe'll load the entire tidyverse because we'll be using functions from _dplyr_\nas well as today's main package, _ggplot2_.\nYou probably have the tidyverse installed already, but if not, run:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Only run this if you have not yet installed the tidyverse\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\nAnd to actually load it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\nWe will also need to install two spatial packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maps\")\ninstall.packages(\"sf\")\n```\n:::\n\n\n\nWe don't need to load these,\nthey are used in the \"background\" by some of the ggplot functions we'll use.\n\n<br>\n\n## Basic maps\n\n### Map data to draw states in the US\n\nWhen plotting maps, we typically need a base map that has outlines like \nadministrative borders and coastlines.\nFor today's maps,\nwe will get this type of map data through _ggplot2_'s `map_data()` function.\n\nLet's get a dataframe with the outlines of the lower 48 states of the US\n(i.e., without Alaska and Hawaii), and take a look at what it contains:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates <- map_data(map = \"state\")\n\nhead(states)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      <NA>\n2 -87.48493 30.37249     1     2 alabama      <NA>\n3 -87.52503 30.37249     1     3 alabama      <NA>\n4 -87.53076 30.33239     1     4 alabama      <NA>\n5 -87.57087 30.32665     1     5 alabama      <NA>\n6 -87.58806 30.32665     1     6 alabama      <NA>\n```\n\n\n:::\n:::\n\n\n\nEach row in this dataframe makes up a single point along the outline of a state:\n\n- The `long` and `lat` columns contain **longitudes and latitudes** in decimal\n  format.\n  In the US, all longitudes are negative as we are west of the prime meridian\n  that runs through the UK,\n  and all latitudes are positive as we are north of the equator.\n- The `group` column groups the rows (points) into **shapes/\"polygons\"** that\n  outline the borders of a state, or in some cases, parts of a state^[\n  Michigan for example, has a polygon for the lower part of the state, and one\n  for the Upper Peninsula.\n  ]. \n  (This is complemented by the `order` column which provides the drawing order.) \n- The `region` column contains the name of the state that the point applies to.\n\n![Recall: latitude (left) determines the position along the north-south axis,<br> and longitude (right) the position along the east-west axis. [Source: Wikipedia](https://commons.wikimedia.org/wiki/File:Latitude_and_Longitude_of_the_Earth.svg)](img/Latitude_and_Longitude_of_the_Earth.svg){fig-align=\"center\" width=\"70%\"}\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Our first map\n\nTo make a first map, we pass our dataframe to _ggplot_ as per usual,\nand then use the geom **`geom_polygon()`** to draw the polygons that make up the\nstates, mapping:\n\n- Longitude (`long`, east-west axis) to the `x` aesthetic\n- Latitude (`lat`, north-south axis) to the `y` aesthetic\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=85%}\n:::\n:::\n\n\n\nThat doesn't look so good -- what could be the problem here?\n\nWe need to tell ggplot which **groups of points** together form discrete shapes\nlike an individual state's outline,\nand can do so by additionally mapping our data frame's `group` column to the\nplot's `group` aesthetic:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat, group = group))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=85%}\n:::\n:::\n\n\n\nMuch better!\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Map projections\n\nWhen creating maps, especially for large geographic areas like the world,\ncontinents, or big countries like the US, you need to consider the \"projection\".\nWe will not go into the details of map projections here, but will note that:\n\n- Different projections are suitable for different geographic areas \n- The _ggplot_ function `coord_sf()` sets a geographic coordinate system for the\n  plot and with its argument `crs` (Coordinate Reference System, CRS),\n  we can set the specific projection.\n- CRS projections have numbers, e.g.:\n  - `5070` is a projection suitable for the lower 48\n  - `4326` is what GPS coordinates like those in our `states` dataframe are\n    based on\n- Below, we'll use `coord_sf(crs = 5070, default_crs = 4326)`, to state that:\n  - We want to plot the map with the `5070` CRS\n  - Our data has `4326`-style GPS coordinates\n\nIn the map below, note the curvature of especially the latitudinal lines,\nwhich our previous maps didn't have:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat, group = group)) +\n  coord_sf(crs = 5070, default_crs = 4326)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=85%}\n:::\n:::\n\n\n\n### Map theming\n\nWith maps, more basic _ggplot2_ themes like `theme_minimal()` or `theme_void()`\ntend to look better since we're often not that interested in the background\npanel and the axes.\n\n- With `theme_minimal()` -- something like this could be useful for a map\n  in a scientific paper:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Code is the same as above, just with `theme_minimal()` added:\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat, group = group)) +\n  coord_sf(crs = 5070, default_crs = 4326) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=85%}\n:::\n:::\n\n\n\n- With `theme_void()`, which omits the plotting panel and axis altogether: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Code is the same as above, just with `theme_void()` added:\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat, group = group)) +\n  coord_sf(crs = 5070, default_crs = 4326) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=85%}\n:::\n:::\n\n\n\nWhen you make many plots that should have similar theming,\na nice _ggplot_ trick is to **set an overall theme for the entire session**\nwith the `theme_set()` function,\nand optionally modify that with the `theme_update()` function.\n\nLet's do that here,\nso we don't have to keep adding the `theme_void()` line to every plot ---\nand we're also saying that we want any legends above the plot rather than besides\nit:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_void())\ntheme_update(legend.position = \"top\")\n```\n:::\n\n\n\nWe may also want to change the **fill and outline colors of the states** ---\nand let's save this map as an object `p` so we can build on it in the next section:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey85\",\n    color = \"grey40\",\n    linewidth = 0.1\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=85%}\n:::\n:::\n\n\n\n::: exercise\n### {{< fa user-edit >}} Exercise\n\n**A)** Create a map that _does not have visible state lines_.\nWhile you're at it, you can also play around with the settings inside `geom_polygon()`\nto get a map look that you like --- or one that you hate, just for the fun of it.\nAnd how about a map with a blue panel background?\nAfter all, most (but not all) of the area surrounding the US is water.\n\n<details><summary>Click here for hints</summary>\n\n- If the `fill` and `color`(=outlines) colors are assigned the same color,\n  no state lines will be visible.\n  \n- You can set the panel background (which in this case is the area around the US\n  stated) with `theme(panel.background = element_rect(...))`.\n\n</details>\n\n<details><summary>Click here to see some examples</summary>\n\n- You can make sure that the state lines aren't visible by providing the same color\n  for the `color` and `fill` aesthetics:\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"palevioletred\",\n    color = \"palevioletred\"\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=85%}\n:::\n:::\n\n\n\n- Why should the map look good, anyway?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"lightblue\",\n    color = \"darkred\",\n    linewidth = 1\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=85%}\n:::\n:::\n\n\n\n- A blue panel background:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey85\",\n    color = \"grey40\",\n    linewidth = 0.1\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326) +\n  theme(\n    panel.background = element_rect(fill = \"dodgerblue\", color = \"grey20\")\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=85%}\n:::\n:::\n\n\n  \n</details>\n\n**B)** Still using the `states` dataframe as a starting point,\ncan you make a map that only shows Ohio?\nAnd/or another state,\nor a combination of neighboring states that you would like to see?\n\n<details><summary>Click here to see hints</summary>\n\n- Rather than trying to zoom in by setting different axis limits,\n  try to use `filter()` to subset `states` to only Ohio (and/or other states)\n  before you pass the data to `ggplot()`.\n  \n- When plotting individual states, our current CFS does not look that great\n  as states are \"tilted\". When you're not interested in looking up a correct\n  projection, just adding `coord_sf()` with no arguments can give a reasonable look.\n\n</details>\n\n<details><summary>Click here to see some examples</summary>\n\n- What are the state names like? Turns out they are all in lowercase:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(states$region)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"alabama\"              \"arizona\"              \"arkansas\"            \n [4] \"california\"           \"colorado\"             \"connecticut\"         \n [7] \"delaware\"             \"district of columbia\" \"florida\"             \n[10] \"georgia\"              \"idaho\"                \"illinois\"            \n[13] \"indiana\"              \"iowa\"                 \"kansas\"              \n[16] \"kentucky\"             \"louisiana\"            \"maine\"               \n[19] \"maryland\"             \"massachusetts\"        \"michigan\"            \n[22] \"minnesota\"            \"mississippi\"          \"missouri\"            \n[25] \"montana\"              \"nebraska\"             \"nevada\"              \n[28] \"new hampshire\"        \"new jersey\"           \"new mexico\"          \n[31] \"new york\"             \"north carolina\"       \"north dakota\"        \n[34] \"ohio\"                 \"oklahoma\"             \"oregon\"              \n[37] \"pennsylvania\"         \"rhode island\"         \"south carolina\"      \n[40] \"south dakota\"         \"tennessee\"            \"texas\"               \n[43] \"utah\"                 \"vermont\"              \"virginia\"            \n[46] \"washington\"           \"west virginia\"        \"wisconsin\"           \n[49] \"wyoming\"             \n```\n\n\n:::\n:::\n\n\n\n- Plotting only Ohio -- first use `filter()` to only keep the outline for the\n  state of Ohio, then plot like before:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates |>\n  filter(region == \"ohio\") |> \n  ggplot() +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"skyblue\",\n    color = \"grey40\",\n    linewidth = 0.5\n    ) +\n  coord_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=85%}\n:::\n:::\n\n\n\n- Plotting Ohio along with two neighboring states:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates |>\n  filter(region %in% c(\"ohio\", \"indiana\", \"michigan\")) |> \n  ggplot() +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"azure4\",\n    color = \"grey40\",\n    linewidth = 0.5\n    ) +\n  coord_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=85%}\n:::\n:::\n\n\n\n</details>\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Zooming in\n\nIn the exercise above, we plotted only Ohio by filtering the input data frame.\nAlternatively, we may want to zoom in to a region without considering\nadministrative borders.\nWe can do so with the `xlim` and `ylim` arguments of `coord_sf()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey85\",\n    color = \"grey40\",\n    linewidth = 0.2\n    ) +\n  # Set the x and y limits inside coord_sf:\n  coord_sf(xlim = c(-79, -89), ylim = c(35, 45)) +\n  # We may now want to draw a border around the plot since we're cutting of\n  # landmasses:\n  theme(\n    panel.border = element_rect(fill = NA, color = \"grey20\", linewidth = 0.5)\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=85%}\n:::\n:::\n\n\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "4aaf4b00bcd7393993aa8c6afaaec4a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quarto website 4\"\nsubtitle: Interacting with our GitHub repository\nauthor: \"Jelmer Poelstra\"\ndate: \"2023-09-25\"\ncategories: [website]\ntitle-block-banner: false\nimage: img/github_overview.png\n---\n\n::: {.cell}\n\n:::\n\n\n------\n\n<br>\n\nWe are continuing this semester's Code Club series on making yourself a website.\n**So far**, we have gone through:\n\n- How to [create your site](/posts/website_01_initiation/)\n- How to [add a page to your site](/posts/website_02/#adding-a-new-page-to-your-site)\n- How to [customize your site's look](/posts/website_02/#modifying-the-yaml-header-of-our-new-page)\n- How to [publish your site using Git and GitHub](/posts/website_03_deploy-github/)\n\n**Today**, we are going to focus on interacting with our GitHub repository\n(or \"repo\" for short):\n\n- We'll start with a recap on Git and GitHub repositories\n- For those of you who would like to have a shorter URL for your website,\n  we'll change your GitHub repository name\n- We'll add some info to our repository, including a README file\n- We'll practice with saving your local updates and pushing them to remote\n- If time allows, we'll add links to your repo on your website\n\n<br>\n\n## Git and GitHub repository recap\n\nNow that you have actually created a local Git and a remote GitHub repository\nfor your website,\nlet's revisit this illustration that Jess explained last week:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Figure by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/github-cartoon.png){fig-align='center' width=70%}\n:::\n:::\n\n\nAnd here is a graphic depicting our workflow more specifically,\nwhere we basically have a fourth area: the actual website.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/github_overview.png){fig-align='center' width=85%}\n:::\n:::\n\n\nLet's go through the four different \"areas\" in this illustration and how they\ninteract:\n\n- Your **working directory[^1]** (bottom right in the illustration)\n  is the folder on your computer that contains all the files for your website.\n  Within that folder:\n  - The `docs` folder contains HTML and other files representing your _rendered website_\n  - Everything else (`.qmd`, `.yml` etc.) is the _source code for your website_\n\n  In the workflow we are showing you here,\n  you're modifying the files in your working directory predominantly **using RStudio**.\n\n[^1]: Directory (or \"dir\" for short) is just another word for a folder on your computer.\n\n- Your **local Git repo** (bottom left in the illustration)\n  contains one or more saved snapshots (versions through time) of your working\n  directory.\n\n  The most recent snapshot of the local repo does not _necessarily_ correspond\n  to the state of your working directory:\n  there is purposefully no auto-saving,\n  so saving a snapshot (i.e. `commit`ing) is something you always have to actively do[^2].\n\n  Saving a snapshot of the current state of your working dir can be done in a\n  number of ways,\n  such as using Git commands in a terminal\n  (the `add` and `commit` verbs in the illustration) or using the Git pane in RStudio,\n  but the method we have shown you here uses the **GitHub Desktop app**.\n\n[^2]: It is also possible to save to a snapshot with only _some_ of the changes\n      that you've made to your working dir:\n      you can `add` changed files individually rather than all at once, too.\n\n- Your **remote GitHub repo** (top in the illustration)\n  is simply the _online counterpart of your local repo_.\n\n  Just like changes to your working dir aren't automatically saved to your local repo,\n  new snapshots in your local repo aren't automatically published to your remote repo:\n  to do so, we have to `push` our changes online.\n  (The counterpart to `push` is `pull`, which we won't talk more about here,\n  will pull in changes from the online repo to your local repo.[^3])\n\n  Just like for committing, we will use **GitHub Desktop** to push our changes online.\n\n- We \"activated\" the **website** area last week using some settings for the online repo.\n  Therefore, we don't have to think much about this aspect --\n  there basically is an _automatic connection between the remote repo and the website_:\n  GitHub will detect whenever we've changed our online repo,\n  and will update the website for us.\n\n**In summary,**\n**when you have made changes to your website that you would like to put online,**\n**go to GitHub Desktop to save a snapshot to your local repo (i.e., to commit)**\n**and then push those changes to your remote (online) repo.**\nGitHub will then detect the changes to your online repo and update your website.\n\nWe will practice this routine today.\n\n[^3]: Pulling in changes from the online repo is only relevant either\n      when you are collaborating with others on a repo,\n      such that sharing of changes happens via the online repo,\n      or when you have made changes directly to the online repo\n      (this is possible but generally not recommended).\n\n<br>\n\n## Changing the URL to your website\n\nThe URLs to your repository and website are automatically determined based\non your GitHub username and repo name as follows:\n\n- Website: `https://<github-username>.github.io/<github-repo-name>`\n- GitHub repo: `https://github.com/<github-username>/<github-repo-name>`\n\nFor instance, the Code Club practice website is under the GitHub username\n`osu-codeclub` and the repository name `practice-website`,\nand therefore, it has the following URLs:\n\n- GitHub repo: <https://github.com/osu-codeclub/practice-website>\n- Website: <https://osu-codeclub.github.io/practice-website>\n\nHowever,\nthe main Code Club website has a shorter URL that only contains the GitHub username:\n<https://osu-codeclub.github.io>.\nYou, too, can change your website's URL so that it only contains your GitHub username. \n\n- If you're making a personal website, you'll likely want to make this change.\n- If you're making a website covering a specific topic or project,\n  and could see yourself making other similar websites,\n  this URL change doesn't make as much sense.\n\nHow can you get such an URL for your website?\n**You can do so by giving your GitHub repo the name `<github-username>.github.io`.**\n\n{{< fa user-edit >}} So, for whoever would like to have the shorter URL format,\nlet's change the GitHub repo name to your GitHub username.\nIn your GitHub repository, click \"Settings\":\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/settings.png){fig-align='center' width=80%}\n:::\n:::\n\n\nThen, right at the top of the General page (the one that should open by default),\nclick inside the \"Repository name\" box,\nand you'll notice that you can type to change the name.\nThe new name of the repo should by your GitHub username\n(which should e.g. show in the URL to your repo) followed by `.github.io`.\nFor example, if your username is `lucy`, your new repo name should be `lucy.github.io`.\nAfter you've typed the new name, click the \"Rename\" button:xxx\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![You can type directly in the box to change the repo's name](img/rename.png){fig-align='center' width=60%}\n:::\n:::\n\n\nThat should send you back to your repository's main page,\nand if all went well, your URL should have been updated immediately.\nTo check this, you can go back to your repo's settings and then click on \"Pages\"\non the left-hand side, as shown below:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![On the GitHub Pages page, you can check the URL to your site](img/check_pages.png){fig-align='center' width=95%}\n:::\n:::\n\n\n<br>\n\n## Adding About info and a README\n\n### About\n\nWhile we're making edits on GitHub,\nlet's first add a very brief description of our repo,\nand the URL to the website,\nto the \"About\" section on the main page of your repo.\n\n{{< fa user-edit >}} Click the cog wheel icon shown below, and then:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/about1.png){fig-align='center' width=45%}\n:::\n:::\n\n\n- Enter a one-sentence description of your repo in the \"_Description_\" box.\n\n- Below \"_Website_\", you can simply check the box\n  \"_Use your GitHub Pages website_\" to add your website's URL to this About section.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/about2.png){fig-align='center' width=75%}\n:::\n:::\n\n\nNow, your About section should look something like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/about3.png){fig-align='center' width=45%}\n:::\n:::\n\n\n----------\n\n### README\n\nNext, let's add a README file to our repo.\n\nIf we create a file that is called e.g. `README` or `README.md` in the top-level\nfolder of our repo,\nGitHub will automatically show it \n(in _rendered_ form, if the file is written in Markdown)\non the main page of our repository.\nBesides the About section,\nthis is another customary way you can make it clear to people that visit your\nrepo on GitHub,\nwhat this repo is all about.\n\nUnlike the changes we made so far today (our website URL, the About info),\n**creating a README file will actually modify the contents of our repo**.\nTherefore, it will be easiest to create this file on our own computer, \ncommit it to our local repo, and push the changes to the remote repo[^4].\n\n[^4]: Alternatively, we could create and write this file directly on the GitHub website,\n      but if we would do this, we would need to \"pull\" in these changes from remote,\n      which is something we won't cover here.\n\n:::{.exercise}\n#### Your turn: Create a README file for your website's repo {-}\n\n- Switch to your RStudio window with your website RStudio project open,\n  then click on \"File\" => \"New File\" => \"Markdown File\" (halfway down).\n\n- If the new file doesn't automatically open in \"Visual\" mode,\n  you can click the \"Visual\" button to do so,\n  unless you would like to practice with Markdown syntax.\n\n- **Save the file** straight away as `README.md`,\n  in the top-level folder where you also have, e.g., the `_quarto.yml` file.\n\n- **Add some text** to the file, which can be as long or short as you want;\n  you'll mostly just want to make it clear (again) that this repo is the source\n  for your website.\n  For example, I'll add for this practice website:\n\n```md\n## This is the repository for a practice website part of OSU's Code Club\n\n- OSU Code Club: <https://osu-codeclub.github.io>\n\n- OSU Code Club practice website: <https://osu-codeclub.github.io/practice-website>\n```\n\n:::\n\n<br>\n\n::: {.callout-tip}\n#### Your README plain Markdown file\n\n- The \"README\" in the filename doesn't have to be in all-caps, but this is customary.\n\n- The `.md` extension stands for (plain) Markdown,\n  as opposed to Quarto Markdown (`.qmd`) or R Markdown (`.Rmd`).\n  The difference between plain Markfown and Quarto/R Markdown files is that the\n  latter can _execute code_ (usually but not limited to R code).\n  \n  An interesting side note is that the conversion of a `.qmd`/`.Rmd` file to the\n  final output file (HTML in our case, could e.g. also be PDF) takes place\n  in _two steps_:\n  first, it is rendered to `.md`, which is then rendered to the final output format.\n\n:::\n\n<br>\n\n## Updating the online repo\n\nNow that we have made changes to our \"working directory\" by adding a README file,\nwe should commit these changes to our local repo and then push them to the remote repo.\nFor that, we'll **switch to GitHub Desktop**.\n\n{{< fa user-edit >}} When you open GitHub Desktop,\nit should automatically focus on your website's repo,\nand you should see a bunch of changes listed in the left-hand panel.\n\nTo commit all of these changes at once, focus on the bottom-left part,\nwhere you can leave the \"_Description_\" box empty,\nbut you **have to** fill out something in the \"_Summary (required)_\" box,\nwhich should ideally summarize the changes you just made, e.g.:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![After entering something in the Summary box, click 'Commit to main'](img/commit.png){fig-align='center' width=55%}\n:::\n:::\n\n\nThen, click on the large blue \"_Commit to main_\" button\n(this button may also say \"_Commit to master_\") to commit your changes to your local repo.\n\nNext, the following should appear in the main GitHub Desktop pane,\nand you can click \"_Push origin_\":\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Click 'Push origin' to push your local repo changes to remote](img/push.png){fig-align='center' width=70%}\n:::\n:::\n\n\n::: {.callout-tip}\n#### Git terminology\n\n- The \"master\" or \"main\" in e.g. \"**Commit to main**\" refers to a specific so-called\n  branch of your repository.\n  With Git version control,\n  it is for example common to work on experimental changes in your code in a\n  separate (non-main) branch,\n  so that your code in main keeps working in the meantime.\n\n- \"Origin\" is the default name that is given to the default connection with your\n  remote repo, so \"**Push origin**\" means push to the default remote repo. \n\n:::\n\n<br>\n\n------\n\nLet's switch to our repo page on GitHub in our browser,\nwhere we should immediately see our new commit referenced at the top:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![You should see your changes referred to in the online repo](img/commit_on_gh.png){fig-align='center' width=90%}\n:::\n:::\n\n\nAnd if you scroll down,\nthe `README.md` should appear in rendered form below the file listing:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![GitHub will render and display a README file in your repo automatically](img/readme.png){fig-align='center' width=90%}\n:::\n:::\n\n\nFinally, a couple of things to note about what we just did:\n\n- Unlike most changes you'll make to your repo,\n  this change did not affect our website at all.\n\n- We can freely change our GitHub repo name without having to change the name\n  of our folder with the website:\n  these two can be the same, but they can also differ.\n\n<br>\n\n## Referencing our repo on the website\n\nFinally, we can **reference our GitHub repo on our website** in two ways,\nby making changes in our `_quarto.yml`.\n\nFirst, we can add a GitHub icon to the right-hand end of our top navigation bar,\nwhich will link to our GitHub repom as follows:\n\n```yaml\nwebsite:\n  navbar:\n    right:\n      - href: \"https://github.com/osu-codeclub/practice-website\"\n        icon: github\n```\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Making the change above should produce this icon in the navbar on your website](img/repo_link.png){fig-align='center' width=40%}\n:::\n:::\n\n\nSecond, we can add one or two \"repo actions\" links to the Table of Contents that\non each page on our website,\nwhich will allow people to:\n\n- Action `issue`: Report an \"issue\" on GitHub, e.g. report that a link on your site is broken.\n  This will open a new so-called _issue for your repo_ --\n  you should get an email when this happens. \n\n- Action `edit`: Make a suggestion for a change (\"Edit this page\"), e.g. fix the broken link.\n  This will open a new so-called _pull request for your repo_,\n  and you can choose whether you want to accept this request,\n  in which case it should automatically update your repo and website.\n\nIf you want both of these type of links,\nyou should add the following to your `_quarto.yml`:\n\n```yaml\nwebsite:\n  repo-url: https://github.com/osu-codeclub/osu-codeclub.github.io\n  repo-actions: [edit, issue]\n```\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Making the change above should produce these entries in the TOC of every page on your website](img/repo_actions.png){fig-align='center' width=40%}\n:::\n:::\n\n\n:::{.exercise}\n#### Your turn: update `_quarto.yml` and get the changes to your website {-}\n\n1. Make some or all of the suggested changes to your `_quarto.yml` file.\n\n2. Render your _entire website_, so the changes will be included in the website's HTML\n   files in your `docs` folder.\n   (Recall that to render your full website, as opposed to a single document,\n   click the \"Render Website\" button in **RStudio's \"Build\" Tab**.)\n\n3. Go to GitHub Desktop and commit the changes to your local repo.\n\n4. Still in GitHub Desktop, push the changes to your remote repo.\n\n5. Go to you GitHub repo, and check that you see your most recent push.\n\n6. Go to / refresh your website, and see if the changes are there.\n   (You may have to wait a minute or so.)\n\n:::\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
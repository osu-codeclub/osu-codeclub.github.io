{
  "hash": "8ea24f3433783d43a418526abd210534",
  "result": {
    "markdown": "---\ntitle: \"Data wrangling: using `select()`, `arrange()`, and `mutate()`\"\nauthor:\n  - \"Jessica Cooperstone\"\ndate: \"2024-09-09\"\ncategories: [r-basics, tidyverse]\ntitle-block-banner: false\nimage: img/go-wrangling.png\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\n    fig.align: 'center'\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n------------------------------------------------------------------------\n\n![Artwork by [\\@allison_horst](https://twitter.com/allison_horst)](img/go-wrangling.png)\n\n# Introduction\n\nWe are going to start off this semester of code club with a series of sessions on how to \"wrangle\" your data. It can be a struggle to get data into a format that is amenable for analysis, so we will be going through a series of functions and approaches that will get you more comfortable with manipulating your data.\n\nLast Code Club, we didn't get to go over the function `select()` - so we are going to do that today, along with the function `mutate()`. In brief:\n\n-   [`select()`](https://dplyr.tidyverse.org/reference/select.html) picks columns\n-   [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) sorts columns based on their values\n-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) creates new columns based on existing ones\n\n## Load libraries\nFirst we will load the packages that we will use today.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(janitor) # for cleaning column names\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n:::\n\n\n## Data\n\nWe are going to use data from [The World Factbook](https://www.cia.gov/the-world-factbook/), put together by the CIA to \"provides basic intelligence on the history, people, government, economy, energy, geography, environment, communications, transportation, military, terrorism, and transnational issues for 265 world entities.\" I thought this data would give us some opportunities to flex our R skills, and learn a bit about the world.\n\nThe data we are going to download can be found [here](https://www.cia.gov/the-world-factbook/field/population/country-comparison/), though I have saved the file, added it to our Code Club Github, and included some code below for you to download it.\n\nIf you downloaded this file two weeks ago, you don't need to download it again, you just need to make sure you know where it is on your computer to read it in.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndownload.file(\n  url = \"https://raw.githubusercontent.com/osu-codeclub/osu-codeclub.github.io/main/posts/S08E01_wrangling_01/data/factbook-2015.csv\",\n  destfile = \"factbook_download_2015.csv\"\n)\n```\n:::\n\n\nWe can read it in using the tidyverse function from the [`readr`](https://readr.tidyverse.org/index.html) package called [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 <- read_csv(\"factbook_download_2015.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 217 Columns: 53\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country Name, Country Code\ndbl (51): Population, total, Population growth (annual %), Surface area (sq....\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n\nWe can look at this data another way, using the function `head()` to look at the first six rows, and every column.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(factbook_2015)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 6 × 53\n  `Country Name` `Country Code` `Population, total` Population growth (annual …¹\n  <chr>          <chr>                        <dbl>                        <dbl>\n1 Afghanistan    AFG                       33753499                        3.12 \n2 Albania        ALB                        2880703                       -0.291\n3 Algeria        DZA                       39543154                        2.00 \n4 American Samoa ASM                          51368                       -1.64 \n5 Andorra        AND                          71746                        0.174\n6 Angola         AGO                       28127721                        3.62 \n# ℹ abbreviated name: ¹​`Population growth (annual %)`\n# ℹ 49 more variables: `Surface area (sq. km)` <dbl>,\n#   `Poverty headcount ratio at national poverty lines (% of population)` <dbl>,\n#   `GNI, Atlas method (current US$)` <dbl>,\n#   `GNI per capita, Atlas method (current US$)` <dbl>,\n#   `GNI, PPP (current international $)` <dbl>,\n#   `GNI per capita, PPP (current international $)` <dbl>, …\n```\n:::\n:::\n\n\nTwo weeks ago, we cleaned up the column names, so let's do that again. If you want to remember why, you can go back to [that lesson](https://osu-codeclub.github.io/posts/S08E01_wrangling_01/#cleaning-column-names).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 <- clean_names(factbook_2015)\n```\n:::\n\n\n# Choose columns with `select()`\n\nOften you will want to pick only certain columns in your dataframe, and you can do this with the function [`select()`](https://dplyr.tidyverse.org/reference/select.html). You can pick columns generally by:\n\n-   their names\n-   their position\n-   characteristics of that column\n\nIf we want to know how the arguments to `select()` work, we can access the documentation material about the function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n?select()\n```\n:::\n\n\nLet's first select columns by their names. Let's pick just the `country_name`, `population_total`, and `surface_area_sq_km`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(country_name, population_total, surface_area_sq_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 3\n   country_name        population_total surface_area_sq_km\n   <chr>                          <dbl>              <dbl>\n 1 Afghanistan                 33753499             652860\n 2 Albania                      2880703              28750\n 3 Algeria                     39543154            2381741\n 4 American Samoa                 51368                200\n 5 Andorra                        71746                470\n 6 Angola                      28127721            1246700\n 7 Antigua and Barbuda            89941                440\n 8 Argentina                   43131966            2780400\n 9 Armenia                      2878595              29740\n10 Aruba                         104257                180\n# ℹ 207 more rows\n```\n:::\n:::\n\n\nThose columns are also the 1st, 3rd, and 5th columns in our data frame, do we can select them by their indices, or by their location.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(1, 3, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 3\n   country_name        population_total surface_area_sq_km\n   <chr>                          <dbl>              <dbl>\n 1 Afghanistan                 33753499             652860\n 2 Albania                      2880703              28750\n 3 Algeria                     39543154            2381741\n 4 American Samoa                 51368                200\n 5 Andorra                        71746                470\n 6 Angola                      28127721            1246700\n 7 Antigua and Barbuda            89941                440\n 8 Argentina                   43131966            2780400\n 9 Armenia                      2878595              29740\n10 Aruba                         104257                180\n# ℹ 207 more rows\n```\n:::\n:::\n\n\nIn general I would recommend against this because its really hard to remember which column indices are which variables today, nevermind returning back to old code 1 year from now.\n\nWe can also select columns that are consecutive, using the `:` operator. Below I'm selecting the columns `country_name` through `population_growth_annual_percent`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(country_name:population_growth_annual_percent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 4\n   country_name        country_code population_total population_growth_annual_…¹\n   <chr>               <chr>                   <dbl>                       <dbl>\n 1 Afghanistan         AFG                  33753499                       3.12 \n 2 Albania             ALB                   2880703                      -0.291\n 3 Algeria             DZA                  39543154                       2.00 \n 4 American Samoa      ASM                     51368                      -1.64 \n 5 Andorra             AND                     71746                       0.174\n 6 Angola              AGO                  28127721                       3.62 \n 7 Antigua and Barbuda ATG                     89941                       0.787\n 8 Argentina           ARG                  43131966                       1.08 \n 9 Armenia             ARM                   2878595                      -0.393\n10 Aruba               ABW                    104257                       0.638\n# ℹ 207 more rows\n# ℹ abbreviated name: ¹​population_growth_annual_percent\n```\n:::\n:::\n\n\nWe can remove columns using the `!` operator:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(!country_code)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 52\n   country_name       population_total population_growth_an…¹ surface_area_sq_km\n   <chr>                         <dbl>                  <dbl>              <dbl>\n 1 Afghanistan                33753499                  3.12              652860\n 2 Albania                     2880703                 -0.291              28750\n 3 Algeria                    39543154                  2.00             2381741\n 4 American Samoa                51368                 -1.64                 200\n 5 Andorra                       71746                  0.174                470\n 6 Angola                     28127721                  3.62             1246700\n 7 Antigua and Barbu…            89941                  0.787                440\n 8 Argentina                  43131966                  1.08             2780400\n 9 Armenia                     2878595                 -0.393              29740\n10 Aruba                        104257                  0.638                180\n# ℹ 207 more rows\n# ℹ abbreviated name: ¹​population_growth_annual_percent\n# ℹ 48 more variables:\n#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population <dbl>,\n#   gni_atlas_method_current_us <dbl>,\n#   gni_per_capita_atlas_method_current_us <dbl>,\n#   gni_ppp_current_international <dbl>, …\n```\n:::\n:::\n\n\nWe can also select data based on its characteristics. We can select using [selection helpers](https://dplyr.tidyverse.org/reference/select.html) like:\n\n-   [`everything()`](https://tidyselect.r-lib.org/reference/everything.html): picks all variables\n-   [`starts_with()`](https://tidyselect.r-lib.org/reference/starts_with.html): starts with some prefix\n-   [`ends_with()`](): ends with some suffix\n-   [`contains()`](https://tidyselect.r-lib.org/reference/starts_with.html): contains a specific string\n-   [`matches()`](https://tidyselect.r-lib.org/reference/starts_with.html): matches a regular expression\n-   [`num_range()`](https://tidyselect.r-lib.org/reference/starts_with.html): matches a numeric range\n-   [`where()`](https://tidyselect.r-lib.org/reference/where.html): selects columns where the statement given in the argument is TRUE\n-   [`all_of()`](https://tidyselect.r-lib.org/reference/all_of.html): matches all of the variable names in a character vector\n-   [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html): matches any of the names in a character vector\n\nFor example, we might want each column that has anything to do with gross domestic product, or gdp. We can select all of the columns which contain the string \"gdp\" in their name. I'm also going to add `country_name` so we know what we're working with.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(country_name, contains(\"gdp\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 15\n   country_name     water_productivity_t…¹ gdp_current_us gdp_growth_annual_pe…²\n   <chr>                             <dbl>          <dbl>                  <dbl>\n 1 Afghanistan                       0.943    19134221645                  1.45 \n 2 Albania                          12.4      11386853113                  2.22 \n 3 Algeria                          20.9     187494000000                  3.2  \n 4 American Samoa                   NA          673000000                  3.15 \n 5 Andorra                          NA         2789881259                  1.43 \n 6 Angola                          128.       90496420507                  0.944\n 7 Antigua and Bar…                327.        1437755556                  1.45 \n 8 Argentina                        15.8     594749000000                  2.73 \n 9 Armenia                           3.23     10553337518                  3.20 \n10 Aruba                            NA         2962907263                 -0.624\n# ℹ 207 more rows\n# ℹ abbreviated names:\n#   ¹​water_productivity_total_constant_2015_us_gdp_per_cubic_meter_of_total_freshwater_withdrawal,\n#   ²​gdp_growth_annual_percent\n# ℹ 11 more variables: inflation_gdp_deflator_annual_percent <dbl>,\n#   agriculture_forestry_and_fishing_value_added_percent_of_gdp <dbl>,\n#   industry_including_construction_value_added_percent_of_gdp <dbl>, …\n```\n:::\n:::\n\n\nWe can also select all column that meet a certain predicate. For example, we can pick all of the column that are of the type character.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(where(is.character))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 2\n   country_name        country_code\n   <chr>               <chr>       \n 1 Afghanistan         AFG         \n 2 Albania             ALB         \n 3 Algeria             DZA         \n 4 American Samoa      ASM         \n 5 Andorra             AND         \n 6 Angola              AGO         \n 7 Antigua and Barbuda ATG         \n 8 Argentina           ARG         \n 9 Armenia             ARM         \n10 Aruba               ABW         \n# ℹ 207 more rows\n```\n:::\n:::\n\n\nWe can also combine selections using the `&` (and), `|` (or), and `!` (not) operators. For example, if I want the columns about GNI but only the international ones I can:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(starts_with(\"gni\") & ends_with(\"international\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 2\n   gni_ppp_current_international gni_per_capita_ppp_current_international\n                           <dbl>                                    <dbl>\n 1                   77739869000                                     2300\n 2                   33981401261                                    11800\n 3                  541234000000                                    13690\n 4                            NA                                       NA\n 5                            NA                                       NA\n 6                  190283000000                                     6760\n 7                    1766297473                                    19640\n 8                  848960000000                                    19680\n 9                   30505448341                                    10600\n10                    3718236361                                    35660\n# ℹ 207 more rows\n```\n:::\n:::\n\n\nWe can also use `select()` to order our columns, as the order we select them in dictates the order they will exist in our dataframe.\n\n## Practice\n\nCome up with 3 different ways to select the columns about children, and make sure you also include a country column so you know what you're looking at.\n\n<details>\n\n<summary>Need a hint?</summary>\n\nHere are the columns that I'm considering to be about children:\n\n\\[1\\] \"country_name\"\\\n\\[17\\] \"mortality_rate_under_5_per_1_000_live_births\"\\\n\\[18\\] \"prevalence_of_underweight_weight_for_age_percent_of_children_under_5\"\\\n\\[19\\] \"immunization_measles_percent_of_children_ages_12_23_months\"\\\n\\[20\\] \"primary_completion_rate_total_percent_of_relevant_age_group\"\\\n\\[21\\] \"school_enrollment_secondary_percent_gross\"\\\n\\[22\\] \"school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi\"\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\nBy name and for columns in a row, using the `:`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(country_name, \n         mortality_rate_under_5_per_1_000_live_births:\n         school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 7\n   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²\n   <chr>                                            <dbl>                  <dbl>\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ℹ 207 more rows\n# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,\n#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ℹ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months <dbl>,\n#   primary_completion_rate_total_percent_of_relevant_age_group <dbl>,\n#   school_enrollment_secondary_percent_gross <dbl>, …\n```\n:::\n:::\n\n\nBy index:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(1, 17:22) \n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 7\n   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²\n   <chr>                                            <dbl>                  <dbl>\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ℹ 207 more rows\n# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,\n#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ℹ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months <dbl>,\n#   primary_completion_rate_total_percent_of_relevant_age_group <dbl>,\n#   school_enrollment_secondary_percent_gross <dbl>, …\n```\n:::\n:::\n\n\nBy name characteristics:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(country_name, contains(\"under_5\"), contains(\"children\"),\n         contains(\"primary\"), contains(\"school\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 7\n   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²\n   <chr>                                            <dbl>                  <dbl>\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ℹ 207 more rows\n# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,\n#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ℹ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months <dbl>,\n#   primary_completion_rate_total_percent_of_relevant_age_group <dbl>,\n#   school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi <dbl>, …\n```\n:::\n:::\n\n\nThese are just some ways!\n\n</details>\n\n# Sorting data with `arrange()`\n\nA nice helper function for looking at your data is [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) which sorts your data.\n\nWe can sort our data based on how much forest (`forest_area_sq_km`) each country has.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  arrange(forest_area_sq_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 53\n   country_name             country_code population_total population_growth_an…¹\n   <chr>                    <chr>                   <dbl>                  <dbl>\n 1 Gibraltar                GIB                     32520                  0.209\n 2 Monaco                   MCO                     36760                  1.78 \n 3 Nauru                    NRU                     11185                  2.21 \n 4 Qatar                    QAT                   2414573                  8.65 \n 5 Curacao                  CUW                    157980                  1.32 \n 6 Faroe Islands            FRO                     48816                  0.722\n 7 Greenland                GRL                     56114                 -0.322\n 8 Malta                    MLT                    445053                  2.39 \n 9 Sint Maarten (Dutch par… SXM                     38825                  2.98 \n10 Aruba                    ABW                    104257                  0.638\n# ℹ 207 more rows\n# ℹ abbreviated name: ¹​population_growth_annual_percent\n# ℹ 49 more variables: surface_area_sq_km <dbl>,\n#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population <dbl>,\n#   gni_atlas_method_current_us <dbl>,\n#   gni_per_capita_atlas_method_current_us <dbl>,\n#   gni_ppp_current_international <dbl>, …\n```\n:::\n:::\n\n\nBy default, `arrange()` sorts small to big, if we want to go from big to small we can set `arrange(desc())` to sort by descending.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  arrange(desc(forest_area_sq_km))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 53\n   country_name       country_code population_total population_growth_annual_p…¹\n   <chr>              <chr>                   <dbl>                        <dbl>\n 1 Russian Federation RUS                 144640716                        0.279\n 2 Brazil             BRA                 205188205                        0.846\n 3 Canada             CAN                  35704498                        0.760\n 4 United States      USA                 320738994                        0.736\n 5 China              CHN                1379860000                        0.581\n 6 Australia          AUS                  23815995                        1.44 \n 7 Congo, Dem. Rep.   COD                  78656904                        3.39 \n 8 Indonesia          IDN                 259091970                        1.11 \n 9 Peru               PER                  30711863                        1.17 \n10 India              IND                1322866505                        1.19 \n# ℹ 207 more rows\n# ℹ abbreviated name: ¹​population_growth_annual_percent\n# ℹ 49 more variables: surface_area_sq_km <dbl>,\n#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population <dbl>,\n#   gni_atlas_method_current_us <dbl>,\n#   gni_per_capita_atlas_method_current_us <dbl>,\n#   gni_ppp_current_international <dbl>, …\n```\n:::\n:::\n\n\nIt's not too surprising that the biggest countries in forest-feasible lattitudes have the most forest.\n\nWe can also add `select()` into our pipe, so that we don't have to scroll so far to see what the actual amount of forest is.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(country_name, surface_area_sq_km, forest_area_sq_km) |> \n  arrange(desc(forest_area_sq_km))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 3\n   country_name       surface_area_sq_km forest_area_sq_km\n   <chr>                           <dbl>             <dbl>\n 1 Russian Federation           17098250          8149305.\n 2 Brazil                        8515770          5038848 \n 3 Canada                        9879750          3471157.\n 4 United States                 9831510          3100950 \n 5 China                         9562911          2102942.\n 6 Australia                     7741220          1330945 \n 7 Congo, Dem. Rep.              2344860          1316621.\n 8 Indonesia                     1913580           950279 \n 9 Peru                          1285220           731945.\n10 India                         3287260           708280 \n# ℹ 207 more rows\n```\n:::\n:::\n\n\nWow almost 50% of Russia is forested.\n\n## Practice\nWhich countries have the lowest cell phone subscriptions? `mobile_cellular_subscriptions_per_100_people`\n\n<details>\n\n<summary>Need a hint?</summary>\n\nYou can use the function `arrange()` to sort your columns. The default arranging is from low to high, so if you want to go from high to low, you can set `arrange(desc())`.\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(country_name, mobile_cellular_subscriptions_per_100_people) |> \n  arrange(mobile_cellular_subscriptions_per_100_people)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 2\n   country_name              mobile_cellular_subscriptions_per_100_people\n   <chr>                                                            <dbl>\n 1 Korea, Dem. People's Rep.                                         12.8\n 2 Eritrea                                                           14.2\n 3 Micronesia, Fed. Sts.                                             20.6\n 4 Central African Republic                                          25.8\n 5 South Sudan                                                       25.9\n 6 Cuba                                                              29.4\n 7 Djibouti                                                          31.2\n 8 Marshall Islands                                                  31.4\n 9 Kiribati                                                          35.1\n10 Chad                                                              38.7\n# ℹ 207 more rows\n```\n:::\n:::\n\n\n\n</details>\n\n# Creating new columns with `mutate()`\n\nSometimes we might want to use our existing columns to create new ones. For example, we might want to know which country has the highest percentage of its land as forest. In our current data set, we can see amount of forested land (`forest_area_sq_km`) but this doesn't take into account the size of the country. Fortunately, we also have the variable `surface_area_sq_km` so this is something we can calculate ourselves.\n\nConceptually, a new variable representing the percentage of forested land by taking `forest_area_sq_km`, dividing it by `surface_area_sq_km` and multiplying by 100. \n\nThe function `mutate()` uses the syntax `new_variable = existing_variables`. I am also saving over our existing dataframe so we can see our new variable. I am then using `select()` to see only the variables I want, and order by `desc(forest_percent)` to see the countries with the highest percentage of forest at the top.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 <- factbook_2015 |> \n  mutate(forest_percent = (forest_area_sq_km / surface_area_sq_km)*100)\n\nfactbook_2015 |> \n  select(country_name, forest_area_sq_km, surface_area_sq_km, forest_percent) |> \n  arrange(desc(forest_percent))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 4\n   country_name          forest_area_sq_km surface_area_sq_km forest_percent\n   <chr>                             <dbl>              <dbl>          <dbl>\n 1 Suriname                        152517.             163820           93.1\n 2 Micronesia, Fed. Sts.              643.                700           91.8\n 3 Palau                              410.                460           89.1\n 4 Equatorial Guinea                24902.              28050           88.8\n 5 Gabon                           235900              267670           88.1\n 6 Solomon Islands                  25266.              28900           87.4\n 7 American Samoa                     173.                200           86.4\n 8 Guyana                          184614.             214970           85.9\n 9 Papua New Guinea                360244.             462840           77.8\n10 Seychelles                         337                 460           73.3\n# ℹ 207 more rows\n```\n:::\n:::\n\n\nWow! Suriname is 93% forested!\n\nIt's a little bit annoying that `forest_percent` is now showing up in scientific notation, let's fix that. We will use the function `format()` within a `mutate()` function to indicate that scientific notation should be false (i.e., `scientific = FALSE`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 <- factbook_2015 |> \n  mutate(forest_percent = format(forest_percent, scientific = FALSE))\n```\n:::\n\n\nDid it work?\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  select(country_name, forest_percent) |> \n  arrange(desc(forest_percent))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 2\n   country_name          forest_percent\n   <chr>                 <chr>         \n 1 Suriname              93.1001709193 \n 2 Micronesia, Fed. Sts. 91.8142857143 \n 3 Palau                 89.1086956522 \n 4 Equatorial Guinea     88.7778966132 \n 5 Gabon                 88.1309074607 \n 6 Solomon Islands       87.4262975779 \n 7 American Samoa        86.4000000000 \n 8 Guyana                85.8787737824 \n 9 Papua New Guinea      77.8334217008 \n10 Seychelles            73.2608695652 \n# ℹ 207 more rows\n```\n:::\n:::\n\n\nExcellent.\n\n## Practice\nWhich country has the highest dollar amount of GDP due to agricultlure, foresty and fishing products? What is that amount in US dollars?\n\n<details>\n\n<summary>Need a hint?</summary>\n\nOur data has `gdp_current_us` and `agriculture_forestry_and_fishing_value_added_percent_of_gdp`. From this you can calculate how much the total GDP from these sources.\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactbook_2015 |> \n  mutate(\n    ag_gdp = agriculture_forestry_and_fishing_value_added_percent_of_gdp * gdp_current_us) |> \n  select(country_name, ag_gdp, agriculture_forestry_and_fishing_value_added_percent_of_gdp, gdp_current_us) |> \n  arrange(desc(ag_gdp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\n# A tibble: 217 × 4\n   country_name        ag_gdp agriculture_forestry_and_fishing_…¹ gdp_current_us\n   <chr>                <dbl>                               <dbl>          <dbl>\n 1 China              9.28e13                                8.39        1.11e13\n 2 India              3.40e13                               16.2         2.10e12\n 3 United States      1.88e13                                1.03        1.83e13\n 4 Indonesia          1.16e13                               13.5         8.61e11\n 5 Nigeria            1.02e13                               20.6         4.93e11\n 6 Brazil             7.78e12                                4.32        1.80e12\n 7 Pakistan           6.98e12                               23.3         3.00e11\n 8 Turkiye            5.94e12                                6.87        8.64e11\n 9 Russian Federation 5.28e12                                3.87        1.36e12\n10 Japan              4.60e12                                1.03        4.44e12\n# ℹ 207 more rows\n# ℹ abbreviated name:\n#   ¹​agriculture_forestry_and_fishing_value_added_percent_of_gdp\n```\n:::\n:::\n\n\n\n</details>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
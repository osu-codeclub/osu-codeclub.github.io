{
  "hash": "db7706a0dd970aaf19586569888fac09",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Basics 2: Scripts and Objects\"\nauthor: \"Jelmer Poelstra\"\ndate: \"2024-01-19\"\ncategories: [r-basics]\ntitle-block-banner: false\nnumber-depth: 3\nimage: img/r_environment.png\n---\n\n\n------------------------------------------------------------------------\n\n<br>\n\n## Introduction\n\n#### Recap of last week\n\nLast week, we installed R and RStudio, learned about the distinction between the two, familiarized ourselves with RStudio, learned about \"working directories\" and RStudio Projects, and had our first interactions with R by using it as a calculator.\n\n#### Learning objectives for today\n\n-   A little more basic interaction with R: **missing prompts** and **data types**\n\n-   Writing code in **R scripts** instead of the console, and **commenting** your code\n\n-   Using and naming **R objects**, and (not) saving your **environment**\n\n#### Setting up\n\nIf you created an RStudio Project for Code Club last week, then be sure to **have that Project open before we get started**. When you start RStudio, it may well have already opened that project for you (check the top-right corner, and see the screenshots below) — if not, click `File` (top menu bar) \\> `Recent Projects`, and select your Project for Code Club from the list.\n\n::: columns\n::: {.column width=\"45%\"}\n![You have an open project \"codeclub\"](img/project_open.png){fig-align=\"center\" width=\"50%\"}\n:::\n\n::: {.column width=\"45%\"}\n![You have no Project open](img/project_none.png){fig-align=\"center\" width=\"60%\"}\n:::\n:::\n\nIf you don't have an RStudio Project, no worries. We'll be saving a file today, but you can always save it in an appropriate directory on the fly.\n\n<br>\n\n## A little more basic interaction with R\n\n### The R prompt, revisited\n\nThe **`>`** sign in your console is the R \"prompt\". It indicates that R is ready for you to type something.\n\nWhen you are not seeing the `>` prompt, R is either **busy** (because you asked it to do a longer-running computation) or **waiting** for you to complete an incomplete command.\n\nType the following into your console, and press <kbd>Enter</kbd> (called <kbd>Return</kbd> on a Mac, but you get the idea):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n203 /\n```\n:::\n\n\nYou should notice that your prompt turned into a **`+`**.\n\n<details>\n\n<summary><b>What is going on here?</b> (Click for the answer)</summary>\n\n**R is waiting for you to finish the command, since you typed an incomplete command**: something has to follow the division sign `/`.\n\n</details>\n\nTo get out of this situation, one option is to try and finish the command (in this case, by typing another number) — but here, let's practice another option: **aborting** **the command by pressing** <kbd>**Esc**</kbd>.\n\nWhile it was obvious here that our command was incomplete, you will often type incomplete commands without realizing you did so (typical cases include forgetting a closing parenthesis `)`). Aborting and fixing the command in full is often the way to go, especially if you're writing code in a script (as we'll do below).\n\n<br>\n\n### R data types\n\nIf we just type a **number** and press <kbd>Enter</kbd>...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n203\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 203\n```\n\n\n:::\n:::\n\n\n... then R will simply **print the number back to us**.\n\nUnder the hood, R is calling a *function* called `print()`[^1], and we saw an example of this last week, too — typing the name of an object will print it's value:\n\n[^1]: We'll talk about functions soon, likely next week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\nRather than a number, what if we want R to print back to us some **text**, which in programming lingo is called a \"**character string**\"?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFantastic\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Fantastic' not found\n```\n\n\n:::\n:::\n\n\n<details>\n\n<summary><b>What seems to be going wrong?</b> (Click for the answer)</summary>\n\nWhenever you type a character string, **R expects to find an *object* with that name** (we saw our first object `x` last week, and will talk more about them today).\n\nWhen no object exists with that name, R will throw an error.\n\n</details>\n\nWe *can* get R to print character strings back to us, and use them in other ways, as long as they are quoted:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Fantastic\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Fantastic\"\n```\n\n\n:::\n\n```{.r .cell-code}\n\"Code Club\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Code Club\"\n```\n\n\n:::\n:::\n\n\nSo, R treats numbers and character strings differently: **unlike numbers, character strings need to be quoted.** This *avoids confusion with objects* because unquoted character strings are assumed to be objects, and also *allows for \"special characters\"* like spaces.\n\n::: callout-tip\n## Quote types\n\nDouble quotes (`\"Fantastic\"`) and single quotes (`'Fantastic'`) can be used interchangeably in R. Double quotes are preferred by most \"style guides\".\n:::\n\nA little more on R's main \"data types\":\n\n-   Numbers are by default of the data type **`numeric`** (and can also be `integer` - whole numbers only)\n\n-   Character strings are by default of the data type **`character`** (and can also be `factor` for categorical data)\n\n-   The final main data type is `logical`, which can be either `TRUE` or `FALSE`.\n\n<br>\n\n## Exercises 1\n\n**A)** Which of the following do you think would work and which would return an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsession_topic <- \"introduction\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsession_topic <- introduction\n```\n:::\n\n\nTry both to see which works and what error you get for the other one. Also, try to describe in words what the correct line of code is doing.\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\nThe first of the two options was correct R code, while the second returns an error.\n\nIn general, keep in mind that **unquoted character strings represent objects** whereas **quoted character strings are \"literals\"**. Here, we wanted to assign the literal string `\"introduction\"` to the object `session_topic` — so the former should be quoted and the latter not.\n\nAn error is produced when you run the second option, because the object `introduction` does not exist (unless, of course, you had created an object of that name!):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsession_topic <- introduction\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'introduction' not found\n```\n\n\n:::\n:::\n\n\n</details>\n\n**B)** Having run the code above, which of the following would make R print `\"introduction\"`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"session_topic\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsession_topic\n```\n:::\n\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\nThe second option is the correct one: here, we want to have R print the value of the **object `session_topic`** (which we had just created in exercise A), so we shouldn't use quotes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsession_topic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"introduction\"\n```\n\n\n:::\n:::\n\n\n</details>\n\n**C)** Do you think the following code would successfully add `5` and `7`? If not, what might happen instead?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"5\" + \"7\"\n```\n:::\n\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\nIn the code above, the \"numbers\" are saved not as numbers (in R lingo: as a `numeric`) but as character strings (`character`).\n\nR can't add character strings, so it will return an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"5\" + \"7\"\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in \"5\" + \"7\": non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n(Perhaps you expected it to combine/\"concatenate\" the two strings in some way — this is in fact what Python would do. Or to automatically convert the characters to numbers, since you're clearly wanting them to be numbers — but it doesn't do that either.)\n\n</details>\n\n**D) (Bonus)** Execute the following code and check its output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE + FALSE\n```\n:::\n\n\nHad you expected this result? If not, can you make sense of it: the fact that it works, the specific results, and the fact that we are not using quotes in the code.\n\nAnd based on your deliberations, what do you expect the following code to return?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE + TRUE\n```\n:::\n\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\n-   Logicals (`TRUE` and `FALSE`) can be used as numbers, in which case `TRUE` is equivalent to 1, and `FALSE` is equivalent to 0.\n\n-   Therefore, `TRUE + FALSE` will return `1`, and `TRUE + TRUE` will therefore return `2`.\n\n-   Logicals (`TRUE` and `FALSE`) are made up of letters but are **not** character strings, so they shouldn't be quoted.\n\n</details>\n\n<br>\n\n## R scripts\n\n### The editor pane\n\nJess showed us the four quadrants of RStudio last week:\n\n![](img/rstudio-ide-simplified.png){fig-align=\"center\" width=\"85%\"}\n\nOne of those contains a \"**Source Editor**\" pane, as in a *Text Editor*. Here, we can open and edit all sorts of text files --- including R scripts. This quadrant will disappear if you have no files open:\n\n> **Create and open a new R script by clicking** **`File` (top menu bar) \\> `New File` \\> `R Script`.**\n\n<br>\n\n### Why use a script?\n\nAn R script is a text file that contains R code.\n\nSo far, we have been typing commands directly into the R console. But it's a good idea to write and save most of our code in scripts.\n\nThis helps us **keep track of what we've been doing**, especially in the longer run, and to **re-run our code** after modifying input data or one of the lines of code.\n\n::: callout-tip\n## Interactive scripts\n\nFor those of you who are familiar with the notion of a script from other contexts or programming languages — saving our code as a script does not mean that we necessarily need to run the entire script all at once.\n\nIn R, it is instead most common to write and run code interactively, often line by line.\n:::\n\n<br>\n\n### Saving the script\n\nLet's save this new script right away...\n\n> **Click `File` \\> `Save As`**\n\n... and give it a descriptive name like `codeclub_02.R`:\n\n-   You may want to put the script in a folder for Code Club — which should be automatically selected if you are using your Code Club RStudio Project.\n\n-   Make sure it has the **file extension `.R`** — which should also have been automatically suggested by the pop-up window.\n\n::: callout-warning\n## File extensions\n\nAn R script is just a **plain-text file** and you *could* also save it with, for example, a `.txt` extension — this will not break the file, but does have drawbacks.\n\nWhen you use a `.R` extension, your computer and RStudio alike will recognize it as an R script. In RStudio, this means you'll get some formatting that helps when writing your R code, and it can even recognize and warn you about certain errors in your code.\n:::\n\n<br>\n\n### Sending code to the console\n\nIf you write most of your code in a script in the Editor, as we recommended above, wouldn't it be a hassle to execute it? Do you need to copy-and-paste the code into the console? Luckily not.\n\nStart by by typing another simple calculation, this time **in your R script**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n203 / 2.54\n```\n:::\n\n\nWith the cursor still on this line of code in the script, **press** <kbd>**Ctrl**</kbd> **+** <kbd>**Enter**</kbd> (or, on a Mac: <kbd>Cmd</kbd> + <kbd>Enter</kbd>).\n\nThe code will be *copied to the R console and executed* (so you should see the result printed as shown below), and additionally, the *cursor will move* to the next line in the script.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 79.92126\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n## More on sending code to the console\n\nNote that it *doesn't matter where on the line your cursor is*: <kbd>Ctrl</kbd> + <kbd>Enter</kbd> will always **execute the entire line** unless you have selected only part of it. (And when you have selected multiple lines of code, it will execute them all.)\n\nTo execute a line of code, an alternative to the keyboard shortcut is to **click the `Run` button** in the bar right above your script, but we recommend using the keyboard shortcut — it is much faster, at least once you get used to it.\n:::\n\nFor the rest of this Code Club session, try to write your code in your script, and send it to the console using the keyboard shortcut.\n\n<br>\n\n### Commenting\n\nYou can use **`#` signs** to comment your code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Divide by 2.54 to get the wingspan in inches:\n203 / 2.54    # Original measurement was in cm\n```\n:::\n\n\n-   Anything to the right of a `#` is ignored by R, meaning it won't be executed\n\n-   You can use `#` both **at the start of a line** (entire line is a comment) or anywhere in a line **following code** (rest of the line is a comment)\n\n-   In your R script, comments are formatted differently so you can clearly distinguish them from code\n\nWe recommend that you **use lots of comments in your R scripts**! They are useful not only for others that you may share your code with, but also for yourself when you look back at your code a day, a month, or a year later.\n\n<br>\n\n## R Objects\n\n### Assigning stuff to R objects\n\nAs we've seen a couple of times now, we can assign a value to an object with the **assignment operator `<-`**. A few more examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwingspan_cm <- 203\nconversion <- 2.54\n```\n:::\n\n\nType that into your script, and use <kbd>Ctrl/Cmd</kbd> + <kbd>Enter</kbd> twice to send it to the console.\n\n::: callout-tip\n## The Environment tab\n\nRecall also that the objects you create get added to your \"environment\", which RStudio shows in the **Environment tab** in the top-right panel — check that `wingspan_cm` and `conversion` are indeed there.\n:::\n\nAfter you've assigned a number to an object, you can use it in calculations like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwingspan_cm / conversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 79.92126\n```\n\n\n:::\n:::\n\n\nOr, similarly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwingspan_inch <- wingspan_cm / conversion\nwingspan_inch\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 79.92126\n```\n\n\n:::\n:::\n\n\nThis illustrates that when you execute code with objects, R substitutes the object name that you provide by its contents under the hood. In other words, *the object is just a reference to the underlying value(s)*.\n\n\"Object\" is a general term that encompasses R items of any size or complexity:\n\n-   Objects can also contain character strings, collections of numbers or character strings (including in table or matrix format), and functions.\n\n-   The above does not mean that \"anything goes\" — R distinguishes between a limited number of \"**data structures**\", each with their own defined structure. We'll learn about the most important ones next week.\n\n-   The objects we created so far are called **vectors**, which are more commonly thought of as containing a *series of values*, but in R, can have a length of one[^2].\n\n[^2]: Objects that contain a single value are a distinct data structure called \"**scalars**\" in some languages, and are more informally also called \"**variables**\".\n\n::: callout-tip\n## More on assignment operators\n\nThe keyboard shortcut for the assignment operator is <kbd>Alt/Option</kbd> + <kbd>-</kbd>.\n\nNote that **you can also use `=` as an assignment operator**, as is common in other programming languages. But because `=` can have other meanings, we recommend sticking with the `<-` combination.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This also works to assign the value 5 to x (but we recommend using <- instead)\nx = 5\n```\n:::\n\n:::\n\n<br>\n\n### Object names\n\nObjects can be given almost any name such as `x`, `current_temperature`, or `subject_id`. Some pointers on object names:\n\n-   Because R is **case sensitive**, `wingspan_inch` is different from `Wingspan_inch`!\n\n-   An object name **cannot contain spaces** — so for readability, you should *separate words* using:\n\n    -   **Underscores:** `wingspan_inch` (this is called \"snake case\", which we often use in Code Club)\n    -   **Periods**: `wingspan.inch`\n    -   **Capitalization:** `wingspanInch` or `WingspanInch` (\"camel case\")\n\n-   You will make things easier for yourself by naming objects in a consistent way, for instance by always sticking to your favorite case style like \"snake case.\"[^3]\n\n-   Object names can *contain* but cannot *start* with a number: `x2` is valid but `2x` is not. (There are also some other restrictions that are beyond the scope of this introduction[^4].)\n\n-   Make object names descriptive yet not too long — this is not always easy!\n\n[^3]: It is also recommended to use *nouns* for variable names, and *verbs* for function names. For more, two popular R style guides are [Hadley Wickham's](http://adv-r.had.co.nz/Style.html) and [Google's](https://google.github.io/styleguide/Rguide.xml).\n\n[^4]: For example, there are some names that cannot be used because they are the names of fundamental keywords in R (e.g., `if`, `else`, `for`, see [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html) for a complete list). In general, it's also best not to use the names of existing **functions**, even though this *is* possible.\n\n<br>\n\n> There are only two hard things in Computer Science: cache invalidation and naming things.\n>\n> -- Phil Karlton\n\n<br>\n\n### Saving the environment\n\nRecall that your environment contains all the R objects that you created. When you close R, it will probably ask you whether you want to save your environment (AKA workspace) — something like:\n\n![](img/rdata-popup.png){fig-align=\"center\" width=\"55%\"}\n\nWhen you do save this, the next time you start R, R will reload your environment so you can pick up right where you left off. While this may seem convenient, we recommend that you don't do this.\n\n<details>\n\n<summary><b>Can you think of a reason why automatically saving and reloading your workspace may not be a good idea?</b> (Click for the answer)</summary>\n\nThe main reason why this is generally not considered good practice relates to the idea that you should be able to *reproduce your* environment *(and more broadly speaking, your analysis) from the code in your script*.\n\nRemember that you can modify your environment either by entering commands in the console directly, or by running them from a script — or even from multiple different scripts. Additionally, it is common to run lines in a script out of order, or write lines in the script that you don't execute.\n\nTherefore, if you \"carry around\" the same environment across multiple different sessions, you run a greater risk of not having a reproducible set of steps in your script.\n\n</details>\n\nGenerally, a better way of working in R than saving your entire environment is to **use and save script**s (as we've seen today) and to **save *specific* outputs** such as tables and plots (as we'll see soon).\n\nTo make RStudio stop asking you about saving your workspace, click `Tools` \\> `Global Options` \\> `General` and (un)check the boxes as follows:\n\n![](img/r_environment.png){fig-align=\"center\" width=\"50%\"}\n\n::: callout-tip\n## Restarting R\n\nTaking the ideas about reproducibility a step further, it can be a good idea to **occasionally restart R** in the middle of working on some code.\n\nThat way, you can check whether the code in your script is correct and complete, that you are not relying on code that is not in the script, and so on.\n\nTo do so, you don't need to close and reopen RStudio itself: under `Session` in the top menu bar, you can click `Restart R` (and you should also see the keyboard shortcut for it in the menu bar: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F10</kbd> (Windows) / <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>0</kbd> (Mac).\n:::\n\n<br>\n\n## Exercises 2\n\n**A)** Why do the following bits of code fail with an error?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsession number <- 2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nExpert_Level <- 3\nExpert_level\n```\n:::\n\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\nThe first fails because an object name cannot contain a space.\n\nThe second fails because of a difference in capitalization (`Level` vs `level)`: recall that R is case sensitive.\n\n</details>\n\n**B)** What will be the value of `distance_miles` after executing the following lines in R: `31` or `62`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_km <- 50\ndistance_miles <- distance_km * 0.62    # distance_miles is now 31 \ndistance_km <- 100\n\ndistance_miles                          # What is the value of distance_miles now?\n```\n:::\n\n\nCome up with an expectation, then run the code above and see if you were right. What does this tell you about \"linkage\" between objects in R?\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\nObjects don't get \"linked\" to each other at all in R.\n\nIn other words, `distance_miles` was really assigned **the outcome** of `distance_km * 2`, which is `31`, rather than its \"formula\".\n\nTherefore, `distance_miles` wasn't (and couldn't be!) \"updated\" after we changed the value of `distance_km`, and continued to be `31`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_km <- 50\ndistance_miles <- distance_km * 0.62    # distance_miles is now 31.07 \ndistance_km <- 100\n\ndistance_miles                          # What is the value of distance_miles now?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31\n```\n\n\n:::\n:::\n\n\n</details>\n\n<br>\n\n------------------------------------------------------------------------\n\n<br>\n\n**Attribution**\n\nThis was modified after material from [The Carpentries](https://carpentries.org/), especially from [this Data Carpentry workshop](http://uw-madison-aci.github.io/2016-06-01-uwmadison/) and [this \"R for Ecology\" workshop](https://datacarpentry.org/R-ecology-lesson).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "6177ef10845e16e5ec372ca0f1ceee28",
  "result": {
    "markdown": "---\ntitle: \"Plotting 3: Intro to ggplot2\"\nauthor:\n  - \"Horacio Lopez-Nicora\"\ndate: \"2024-04-12\"\ncategories: [plotting, ggplot2]\ntitle-block-banner: false\nnumber-depth: 3\nimage: img/ggplot2_exploratory.png\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\n    fig.align: 'center'\neditor: source\neditor_options: \n  chunk_output_type: console\n---\n\n\n------------------------------------------------------------------------\n\n## Introduction\n\n#### Recap of the past session\n\nIn last week's session, we delved into aesthetics and gained a deeper understanding of the topic. Additionally, we introduced the theme() function. We also acquired knowledge on the fundamentals of geom_boxplot(), geom_violin(), and stat_summary.\n\n#### Session Goals\n\n-   Let's explore our **palmerpinguins** dataset using histogram and density plots. We will learn about **geom_histogram()** and **geom_density()**.\n-   Learn the basic of bar graph in **ggplot2**.\n\n<br>\n\n## Our data set\n\n![Artwork by [Allison Horst](https://twitter.com/allison_horst).](img/dashboard.jpeg){fig-align=\"center\" width=\"80%\"}\n\n<br>\n\nWe are going to continue using our 🐧 data set from the package [`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/). If you haven't done so, please install that package first:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\n[`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/index.html) is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr. Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.\n\nWe'll now load the package, along with the tidyverse (which includes ggplot2):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nOnce you've loaded that package you will have a data frame called `penguins` at your disposal --- let's take a look:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.styled-output}\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\n<br>\n\n## Histograms: `geom_histogram()`\n\nA histogram provides a precise graphical portrayal of the distribution of numerical data. It only necessitates one aesthetic, which is the `x` variable.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm)) + geom_histogram() +\n    labs(title = \"Histogram of penguin bill length\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: callout-warning\n#### It is crucial to have good [labels](https://ggplot2.tidyverse.org/reference/labs.html) to ensure the accessibility of your plots to a broader audience. Always make sure that the axis and legend labels display the complete variable name.\n:::\n\nThe default computation of `geom_histogram` through `stat_bin` uses 30 bins, which is not always an optimal choice.\n\nThere are possible options to address this issue. One option is to set the number of bins using the `bins` argument. Another option is to adjust the width of each bin using the `binwidth` argument.\n\nThe number of bins or bars in the histogram can be customized using the `bins` argument in the geom_histogram function.\n\nAn alternative option involves utilizing the `binwidth` argument in the `geom_histogram` function, which dictates the width of each bin on the X-axis. It is important to note that this argument takes priority over the bin argument.\n\n<br>\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 1\n\n-   Using the example from above, within use the `bins` and `binwidth` arguments to change the size of each bar/bin.\n\n<details>\n\n<summary>Hints (click here)</summary>\n\nYou can use the following argument `geom_histogram(bins = TRY DIFFERENT VALUES)` or `geom_histogram(binwidth = TRY DIFFERENT VALUES)`.\n\n</details>\n\n<details>\n\n<summary>Solutions (click here)</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm)) + geom_histogram(binwidth = 2) +\n    labs(title = \"Histogram of penguin bill length\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=85%}\n:::\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm)) + geom_histogram(bins = 13) +\n    labs(title = \"Histogram of penguin bill length\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){fig-align='center' width=85%}\n:::\n:::\n\n\n</details>\n:::\n\n<br>\n\n\n\n### Is the distribution bimodal? \n\nLast week we **added a third aesthetic** to our graph, `color`. Our current plot mapped `bill_length_mm` to the `x` aesthetic, and `bill_depth_mm` to the `y` aesthetic --- , we then added a mapping of `species` to the `color` aesthetic:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins) +\n  aes(x = flipper_length_mm, colour = species) +\n  geom_histogram(bins = 30) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: callout-warning\n#### Please note that we begin by using our data set to create a **plot object** with the function `ggplot()`. We then assign this object to the variable **p**. From this point forward, we can add layers by using the `+` operator.\n:::\n\n### What if we want to customize our plot?\n\nWe can do this using [`theme()`](https://ggplot2.tidyverse.org/reference/ggtheme.html). There are several options of themes which control all non-data display. Use `theme()` if you just need to tweak the display of an existing theme.\n\nFor this session, let's utilize `theme_bw()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- ggplot(data = penguins) + theme_bw() +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species))\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n### What if we want to change colors?\n\nWe can manually change colors.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Manual color change\n# By using scale_colour_manual(),\n# we can specify the exact colours we want to use\np + \nscale_color_manual(\n  # Note that the color order will correspond to\n  # the order of the species given in the legend\n  values = c(\"grey55\", \"orange\", \"skyblue\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nBy using the `colors()` function, you can explore numerous color options that are available for selection.\n\n### Using a different color palette: `RColorBrewer`\n\nThere is a wide variety of `R` color packages specifically designed to offer a range of color palette options, each evoking a distinct mood. For instance, the `RColorBrewer` package provides a choice of 35 palettes!\n\n*At this point, you have become an expert in the fundamentals of `R`. Installing packages and loading them with `library()` is now second nature to you.*\n\nNow, we can install `RColorBrewer` and choose one from the many palettes it offers.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nRColorBrewer::display.brewer.all(type = \"qual\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nAbove, you can observe the organization of the colors into distinct groups based on their sequential, diverging, or mixed characteristics. It is important to note that varied palettes are advantageous for varying data types.\n\nLet's use these palettes with our original penguin graph. Here is an example demonstrating how the **Set1** palette is utilized to group data points with the function `scale_color_brewer()` and the palette argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + \nscale_color_brewer(palette = \"Set1\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nIn addition, the `ggplot2` package offers other functions. Two such functions are `scale_color_viridis()` and `scale_color_grey()`, which allows us to convert colors to **grayscale** without sacrificing information. This is especially important for individuals with colorblindness.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + \nscale_color_viridis_d()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: callout-warning\n#### Please note that when using `scale_color_viridis()` to color data points, we need to specify whether our variable is continuous \\[using `scale_color_viridis_c()`\\] or discrete \\[using `scale_color_viridis_d()`\\]. In this case, the variable **species** is discrete.\n:::\n\n<br>\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 1\n\n-   Let us revisit the scatter plot depicting the correlation between bill length and depth, distinguished by different species using colored data points.\n\n-   What if we want to use only a grayscale palette for publication purposes?\n\n<details>\n\n<summary>Hints (click here)</summary>\n\nWe can use the `scale_color_grey()` function to color our grouped data points.\n\n</details>\n\n<details>\n\n<summary>Solutions (click here)</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + \nscale_color_grey()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n</details>\n:::\n\n<br>\n\n### Colorblind-friendly palettes\n\nHave you ever contemplated how your figure might appear when viewed by individuals with different types of color blindness? We can utilize the [`colorBlindness`](https://cran.r-project.org/web/packages/colorBlindness/index.html) package to explore this aspect.\n\nLet's install the `colorBlindness` package and load it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Let's install the colorBlindness package\ninstall.packages(\"colorBlindness\")\nlibrary(colorBlindness)\n```\n:::\n\n\nTo begin with, let's test out various colors using the `cvdPlot()` function. This will demonstrate how our current plot appears to individuals with different types of color blindness.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncolorBlindness::cvdPlot(p)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nOur current color palette is not accessible, as can be observed. However, by using `viridis` palettes, we can ensure that our plots consistently convey the same information, regardless of the audience.\n\nLet's use the same `viridis` palette we used above to make our plot more accessible.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_viridis <- p + \nscale_color_viridis_d()\n```\n:::\n\n\nWere we successful? Let's use `cvdPlot()` to check again.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncolorBlindness::cvdPlot(p_viridis)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n### Providing transparency with `alpha`\n\nHow can we incorporate transparency into the data points in our graph? One way to achieve this is by utilizing the `alpha` feature.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins) +\n  geom_point(alpha = 0.5, mapping = aes(x = bill_length_mm, \n                                        y = bill_depth_mm, \n                                        color = species))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nHere, we present an example of how to utilize the `alpha` function to incorporate transparency into our data points. By doing so, we are able to exhibit four variables within a single graph.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species,\n                           alpha = flipper_length_mm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 2\n\n-   We like the graph we produced above. We want, however, to also display `body_mass_g`.\n\n-   How can we add this additional variable to our graph?\n\n<details>\n\n<summary>Hints (click here)</summary>\n\nWe can use the `size` function within `aes()`.\n\n</details>\n\n<details>\n\n<summary>Solutions (click here)</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species,\n                           alpha = flipper_length_mm,\n                           size = body_mass_g))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n</details>\n:::\n\n<br>\n\n## Boxplot: `geom_boxplot()`\n\nA boxplot gives a nice summary of one or more numeric variables. A boxplot is composed of several elements:\n\n[![Anatomy of a boxplot.](img/Boxplot.png)](https://leansigmacorporation.com/box-plot-with-minitab/)\n\nLet's use `geom_boxplot` to explore the **bill_length_mm** for the penguien species.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, \n       aes(x = species, \n           y = bill_length_mm,\n           fill = species)) + # specify species as a grouping variable\n  geom_boxplot() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: callout-warning\n#### Please note that we add color to the boxplot by applying the `fill` option. You may want to experiment with using the `color` option to observe the differences.\n:::\n\n::: exercise\n#### {{< fa user-edit >}} Challenge - Let's work together!\n\nLet's consider using a different color palette for the boxplot. Additionally, we might prefer to show the mean value instead of the median value and add some transparency. Lastly, we would like to display our data points to provide information on the sample size for each species.\n\n<details>\n\n<summary>Hints (click here)</summary>\n\nTo change the color palette for the boxplot, we can utilize the `scale_fill_brewer()` function. To include the mean value, we can employ the `stat_summary()` function. If we want to add transparency, we can use the `alpha` parameter. Lastly, to overlay the data points, we can utilize the `geom_jitter()` function.\n\n</details>\n\n<details>\n\n<summary>Solutions (click here)</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, \n       aes(x = species, \n           y = bill_length_mm,\n           fill = species)) + # specify species as a grouping variable\n  geom_boxplot(alpha = 0.5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  stat_summary(fun = \"mean\", color = \"red3\") + \n  geom_jitter(alpha = .5) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n</details>\n:::\n\n<br>\n\n## Violin plot: `geom_violin()`\n\nSimilar to boxplots, violin plots visualize the distribution of a numerical variable for one or multiple groups. However, the shape of a violin graphically represents the distribution of data points that is not easily visible in a boxplot's summary, leading to a more precise representation of the data ([Data-to-Viz](https://www.data-to-viz.com/graph/violin.html)).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, \n       aes(x = species, \n           y = bill_length_mm,\n           fill = species)) + # specify species as a grouping variable\n  geom_violin(alpha = 0.5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  stat_summary(fun = \"mean\", color = \"red3\") + \n  geom_jitter(alpha = .5) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 3\n\n1.  To keep only the `Gentoo` data, pipe your dataset into the `filter()` function.\n2.  Create a boxplot examining `bill_length_mm` by `sex` by piping the filtered data into `ggplot()`.\n3.  Ensure that the points with unknown sex (`NA`) are removed.\n4.  Include the mean value of `bill_length_mm` in the boxplots.\n5.  Display all data points on top of the boxplot.\n6.  Lastly, display the distribution of each dataset.\n7.  To achieve the graph displaying all the above requirements, you will need to add transparency.\n\n<details>\n\n<summary>Solutions (click here)</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Gentoo\", !is.na(sex)) |> \n  ggplot(aes(x = sex, y = bill_length_mm, color = sex)) + \n  geom_boxplot() + \n  scale_color_brewer(palette = \"Dark2\") + \n  stat_summary(fun = \"mean\", color = \"red3\") + \n  geom_jitter(alpha = .5) + \n  geom_violin(alpha = .1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n</details>\n:::\n\n<br>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
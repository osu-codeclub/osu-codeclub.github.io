{
  "hash": "f69f50516b32c272aed0485a838ee734",
  "result": {
    "markdown": "---\ntitle: \"Shiny 04: Deploying Shiny App\"\nsubtitle: Deploying Shiny App using ShinyLive .\nauthor: \"Horacio Lopez-Nicora\"\ndate: \"2023-12-04\"\ncategories: [shiny, quarto]\ntitle-block-banner: false\nimage: img/shiny_logo.png\ndf-print: kable\ncode-fold: false\n\nformat: \n  html: \n    grid: \n      body-width: 1400px\n    resources: \n      - shinylive-sw.js\nfilters: \n  - shinylive\n---\n\n\nWelcome to our `shiny` app development class! We are now fully prepared to deploy our `shiny` app to our website.\n\nThere are several options available for deploying a `shiny` app, and we will utilize our knowledge of using the `quarto` website to accomplish this task.\n\n# Deploying Shiny App using Quarto with R Shinylive\n\nWe are going to use the following tutorial: *Using r-shinylive for Serverless Shiny Apps in Quarto Documents*\n\n-   [Creating a Serverless R Shiny App using Quarto with R Shinylive](https://www.youtube.com/watch?v=6y2FnAugP8E)\n-   Links:\n    -   [Github Repo](https://github.com/coatless-quarto/r-shinylive-demo)\n    -   [R-shinylive app in Quarto!](https://quarto.thecoatlessprofessor.com/r-shinylive-demo/)\n\n## Step 1\n\nTo begin, you'll need to install the `r-shinylive` R package. This package is currently hosted on GitHub and can be easily obtained from the R console by executing the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install the 'pak' package manager if you haven't already\ninstall.packages(\"pak\")\n# Install 'r-shinylive' using 'pak'\npak::pak(\"posit-dev/r-shinylive\")\n```\n:::\n\n\n## Step 2\n\nTo install the Quarto extension for `shinylive`, follow these steps:\n\n1. Open the Terminal tab.\n2. Run the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# quarto add quarto-ext/shinylive\n```\n:::\n\n\n## Step 3\n\nTo include a Shiny app directly in your `Quarto` file (.qmd), you need to add a filter key for `shinylive` at the top of the desired `Quarto` file. Open your `Quarto` file and insert the following YAML header:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilters:\n  - shinylive\n```\n:::\n\n\n## Step 4\n\nHere is an example of a 'shiny' app deployed on our website!\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n\nlibrary(shiny)\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Hello Shiny!\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n\n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot <- renderPlot({\n\n    x    <- faithful$waiting\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(x, breaks = bins, col = \"#75AADB\", border = \"white\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\")\n\n    })\n\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n```\n\n## Step 5\n\nIf you have encountered issues with the `quarto publish` function, you can easily resolve them by adding the following steps:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat:\n  html:\n    resources: \n      - shinylive-sw.js\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
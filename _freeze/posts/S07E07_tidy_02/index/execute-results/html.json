{
  "hash": "3c73807e514484f27faf58eff3392fd2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidyverse 2: More _dplyr_ Data Wrangling\"\nauthor: \"Jelmer Poelstra\"\ndate: \"2024-02-23\"\ncategories: [r-basics, tidyverse]\ntitle-block-banner: false\nnumber-depth: 3\nimage: img/run.jpeg\neditor_options: \n  chunk_output_type: console\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\n---\n\n\n------------------------------------------------------------------------\n\n<br> \n\n![](img/run.jpeg){fig-align=\"center\" width=\"75%\"}\n\n<br>\n\n## Introduction\n\n#### Recap of last week\n\nLast week, Jess introduced us to to the _tidyverse_, a collection of packages\nto facilitate doing data science with R, including data manipulation and visualization.\n\nWe saw two general properties of the tidyverse:\nthat it has a strong focus on  **data frames** and\nthat operations are usually connected using the **\"pipe\" (`|>`) operator**.\n\nWe also learned about two key functions from the tidyverse's _dplyr_ package:\n\n- **`filter()`** to pick rows (which typically represent observations/samples/individuals)\n- **`select()`** to pick columns (which typically represent variables/properties)\n\n#### Learning objectives for today\n\nWe will continue learning about _dplyr_:\n\n- An overview of key _dplyr_ functionality\n- Sorting data frame rows with `arrange()`\n- Renaming data frame columns with `rename()`\n- Adding and manipulating data frame columns with `mutate()`\n\nLike last week, we will practice with the `diamonds` dataframe that is automatically\nloaded along with the tidyverse.\n\n#### Setting up\n\nLoad the tidyverse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n::: {.callout-warning collapse=\"true\"}\n#### Still need to install the tidyverse? _Click here for instructions_\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n:::\n\n<br>\n\n## Overview of key _dplyr_ functionality\n\nFunctions from the [*dplyr* package](https://dplyr.tidyverse.org/index.html)\nhave the following **commonalities**:\n\n- The first argument is always a data frame (this makes them pipe-friendly)\n- Subsequent arguments typically describe which columns to operate on\n- The output is always a data frame\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nKey functions for **row-wise** operations include:\n\n-   [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) --- picks rows based on values in one or more columns _(last week)_\n-   [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) --- orders rows based on values in selected columns _(this week)_\n\nKey functions for **column-wise** operations include:\n\n-   [`select()`](https://dplyr.tidyverse.org/reference/select.html) --- picks columns _(last week)_\n-   [`rename`()](https://dplyr.tidyverse.org/reference/rename.html) --- changes column names _(this week)_\n-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) --- creates new columns and changes the values of columns _(this week)_\n\nKey functions for **groups of rows** include:\n\n-   [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html) --- collapses a group into a single row with the purpose of summarizing data\n\nFinally, there are functions to **combine multiple data frames**\n(joins, with for example `inner_join()`).\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nThis week, we will cover the remaining functions listed above for row- and column-wise operations.\nIn subsequent sessions, we will cover the more complex summarizing and joining functions.\n\n::: callout-note\n#### The _tidyr_ package contains additional data wrangling functions\nThere is a separate core tidyverse package (_tidyr_) \nwith closely related functions that can \"reshape\" (\"pivot\") data frames between wider and longer formats ---\nwe will also cover those in a later dedicated Code Club session.\n:::\n\n<br>\n\n## Sorting with `arrange()`\n\nThe `arrange()` function is like the sort function in Excel:\nit changes the order of the rows based on the values in one or more columns.\nFor example, you might want to sort entries by their cost or size,\nor by their names in alphabetical order.\n\nWe'll see a first example using the `diamonds` data frame.\nKeep in mind that in this data frame, each row represents a single diamond,\nand the columns provide different pieces of information about a diamond:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note the initial order in the 'carat' column:\nhead(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n```\n\n\n:::\n:::\n\n\nTherefore, sorting this data frame means rearranging the order of the diamonds\nbased on their properties --- in the example below, based on the carat of the diamond:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now, we'll sort by the values in the 'carat' column:\ndiamonds |>\n  arrange(carat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n 2   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26\n 3   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24\n 4   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32\n 5   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28\n 6   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 \n 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33\n 8   0.2 Ideal     D     VS2      61.5    57   367  3.81  3.77  2.33\n 9   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36\n10   0.2 Ideal     E     VS2      62.2    57   367  3.76  3.73  2.33\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nAs you can see, there are many rows with the same, smallest value of `carat`,\nso we may be interested in **sorting by an additional column**,\nwhich will break the ties in our first sorting column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort first by carat, then by price:\ndiamonds |>\n  arrange(carat, cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36\n 2   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n 3   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26\n 4   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24\n 5   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32\n 6   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28\n 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33\n 8   0.2 Premium   D     VS2      62.3    60   367  3.73  3.68  2.31\n 9   0.2 Premium   D     VS2      61.7    60   367  3.77  3.72  2.31\n10   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 \n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n<details><summary>**Question:** Does the resulting order of entries in the `cut` column make sense to you? If not, what might be going on? _(Click to see the solution)_</summary>\n\nClearly, the order is not alphabetical, but it could be so in _descending_ order ---\nthough this is not in fact the case.\n\nAs we briefly saw last week, the `cut` column (as well as the `color` and `clarity` columns)\nare of the \"ordered factor\" type: therefore, when we sort by this column,\nthe order as initially defined by whoever created this data frame will be respected:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(diamonds$cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n[1] Ideal     Premium   Good      Premium   Good      Very Good\nLevels: Fair < Good < Very Good < Premium < Ideal\n```\n\n\n:::\n:::\n\n\nThis also implies that there are no 0.2-carat (the lowest value) diamonds with `Fair` or `Good`\ncuts, because the first-listed and therefore lowest cut was `Very Good`.\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nBy default, the sorting is done in _ascending order_ (small-to-big), as you probably expected.\nBut of course we may sometimes want to sort in **descending** (big-to-small) order,\nwhich we can do with the `desc()` helper function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort first by carat, then by price:\ndiamonds |>\n  arrange(desc(carat))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98\n 2  4.5  Fair      J     I1       65.8    58 18531 10.2  10.2   6.72\n 3  4.13 Fair      H     I1       64.8    61 17329 10     9.85  6.43\n 4  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17\n 5  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24\n 6  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31\n 7  3.67 Premium   I     I1       62.4    56 16193  9.86  9.81  6.13\n 8  3.65 Fair      H     I1       67.1    53 11668  9.53  9.48  6.38\n 9  3.51 Premium   J     VS2      62.5    59 18701  9.66  9.63  6.03\n10  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n<br>\n\n## Renaming columns with `rename()` (and `select()`)\n\nIt is pretty common that you are not happy with the names of columns in your\ndata frame and want to rename one or more.\nThis can be done with the `rename()` function,\nwhich uses the syntax `<new-name> = <old-name>`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Below, we rename the 'x' column to 'length', and the 'y' column to 'width':\ndiamonds |>\n  rename(length = x, width = y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price length width     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int>  <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326   3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326   3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327   4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334   4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335   4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336   3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336   3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337   4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337   3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338   4     4.05  2.39\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\nAs an aside, it is also possible rename the columns that you pick with the\n`select()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  select(length = x, width = y, z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 3\n   length width     z\n    <dbl> <dbl> <dbl>\n 1   3.95  3.98  2.43\n 2   3.89  3.84  2.31\n 3   4.05  4.07  2.31\n 4   4.2   4.23  2.63\n 5   4.34  4.35  2.75\n 6   3.94  3.96  2.48\n 7   3.95  3.98  2.47\n 8   4.07  4.11  2.53\n 9   3.87  3.78  2.49\n10   4     4.05  2.39\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: callout-tip\n#### Need to rename many columns?\nIf your data frame has many columns that need to be renamed,\nthe [**`janitor::clean_names()`**](https://sfirke.github.io/janitor/reference/clean_names.html)\nfunction provides automated column name cleaning that can be extremely handy.\n\nFor example, you might read in an Excel sheet with 20 columms, many of which\nhave spaces in their names, and some of which have other special characters like `%` or `&`.\nThose kinds of column names don't play well with R, and `clean_names()` would automatically\nreplace such characters with (by default) underscores (`_`).\n\nYou can try this function in the last Bonus exercise.\n:::\n\n<br>\n\n::: exercise\n## Exercises I\n\n### Renaming\n\nAbove, we renamed the cryptically named `x` and `y` columns,\nbut there's a third single-letter column name: **`z`**.\n\n1. Check the help for this data frame by typing `?diamonds`,\n   and figure out what the `z` column represents.\n   \n2. Rename the `z` column to give it a more descriptive name like we did above\n   for `x` and `y`. _(You may run into a problem here! If so, try to understand and resolve it.)_\n\n<details><summary><b>Solution</b> (click here)</summary>\n\n1. **The `z` column represents the depth of the diamond in mm:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?diamonds\n```\n:::\n\n```bash-out\n# The output will include:\n\nz\n    depth in mm (0–31.8)\n\ndepth\n    total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79)\n```\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n2. **So let's try to rename it to `depth`:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  rename(depth = z)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `rename()`:\n! Names must be unique.\n✖ These names are duplicated:\n  * \"depth\" at locations 5 and 10.\n```\n\n\n:::\n:::\n\n\nOuch! That didn't work, because a column named `depth` already exists,\nand **column names must be unique**.\nThat other depth column is the diamond's \"total depth percentage\" rather than the raw depth.\n\nThere's no one right way to resolve this\n(and of course one option would be to refrain from renaming `z` altogether),\nbut we could for example use `depth_mm` etc. notations for these columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  rename(length_mm = x, width_mm = y, depth_mm = z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price length_mm width_mm depth_mm\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int>     <dbl>    <dbl>    <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43\n 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31\n 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31\n 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63\n 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47\n 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53\n 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49\n10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Arranging\n\nSee the prices (and other properties) of the _most expensive diamonds_ in the data frame\nby using the `arrange()` function like we did above.\n\n<details><summary><b>Solution</b> (click here)</summary>\n\nTo see the most expensive (highest-priced) diamond first,\nwe'll have to arrange by the `price` column in descending order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  arrange(desc(price))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16\n 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04\n 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56\n 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11\n 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01\n 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24\n 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84\n 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91\n 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 \n10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n</details>\n\n:::\n\n<br>\n\n## Manipulating with `mutate()`\n\nLet's take a look at the official `mutate()` documentation figure (😛):\n\n![Illustration by Allison Horst](img/arrange.png){width=\"75%\"}\n\nIt says \"_add column(s), keep existing_\" and shows that a third column, `C`,\nis being added to a data frame.\n\n<details><summary>What do the values in column `C` appear to represent (compare with `A` and `B`)? _(Click for the solution)_</summary>\n\nColumn `C` appears to be columns `A` + `B`, e.g in the first row, `1` + `2` = `3`.\n\n</details>\n\nLet's try to do something similar --creating a new column that is based on the values of other columns--\nwith diamond dimensions.\nWe'll add a column named `volume` that is generated by multiplying the length,\nwidth, and depth columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# (I'm first using select just to limit the output that is printed)\ndiamonds |>\n  select(x, y, z) |>\n  mutate(volume = x * y * z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 4\n       x     y     z volume\n   <dbl> <dbl> <dbl>  <dbl>\n 1  3.95  3.98  2.43   38.2\n 2  3.89  3.84  2.31   34.5\n 3  4.05  4.07  2.31   38.1\n 4  4.2   4.23  2.63   46.7\n 5  4.34  4.35  2.75   51.9\n 6  3.94  3.96  2.48   38.7\n 7  3.95  3.98  2.47   38.8\n 8  4.07  4.11  2.53   42.3\n 9  3.87  3.78  2.49   36.4\n10  4     4.05  2.39   38.7\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\nAs you could see in above examples,\nthe operation is executed in a (vectorized) **row-wise fashion**:\nthe `volume` that we see in the first row was created by multiplying `x`, `y` and `z` in the first row,\nand so on.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nIt is also possible to simply **change the values in a column** (without creating a new column)\nby assigning back to the same column name.\nFor example, say that we wanted diamond length to be in cm _instead of_ in mm:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  select(x, y, z) |>\n  mutate(x = x / 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 3\n       x     y     z\n   <dbl> <dbl> <dbl>\n 1 0.395  3.98  2.43\n 2 0.389  3.84  2.31\n 3 0.405  4.07  2.31\n 4 0.42   4.23  2.63\n 5 0.434  4.35  2.75\n 6 0.394  3.96  2.48\n 7 0.395  3.98  2.47\n 8 0.407  4.11  2.53\n 9 0.387  3.78  2.49\n10 0.4    4.05  2.39\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n<br>\n\n::: exercise\n\n## Exercises II\n\n### More unit conversion\n\nAbove, we converted the diamond lengths (column `x`) from mm to cm.\n\n- Expand on that code to convert all three dimension columns (`x`, `y`, and, `z`).\n- Also give the converted columns names that indicate the measurements are in cm.\n\n<details><summary><b>Solution so far</b> (click here)</summary>\n\nSeveral naming schemes are reasonable, but I will use `length_cm` etc:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 13\n   carat cut       color clarity depth table price     x     y     z length_cm\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>     <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43     0.395\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31     0.389\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31     0.405\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63     0.42 \n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75     0.434\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48     0.394\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47     0.395\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53     0.407\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49     0.387\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39     0.4  \n# ℹ 53,930 more rows\n# ℹ 2 more variables: width_cm <dbl>, depth_cm <dbl>\n```\n\n\n:::\n:::\n\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n- Next, expand your \"pipeline\" to either remove the columns with mm measurements,\n  or rename the original `x`, `y`, and `z` columns to clarify that those are in mm. \n\n<details><summary><b>Hint: how to remove specific columns with `select()`</b> (click here)</summary>\n\nIf you just want to remove one or a few columns from a data frame with many columns,\nyou'd want to be able to directly mark them for removal (rather than listing all columns you want to keep),\nwhich you can do as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This will remove the carat and cut columns:\ndiamonds |>\n  select(-carat, -cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 8\n   color clarity depth table price     x     y     z\n   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1 E     SI2      61.5    55   326  3.95  3.98  2.43\n 2 E     SI1      59.8    61   326  3.89  3.84  2.31\n 3 E     VS1      56.9    65   327  4.05  4.07  2.31\n 4 I     VS2      62.4    58   334  4.2   4.23  2.63\n 5 J     SI2      63.3    58   335  4.34  4.35  2.75\n 6 J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7 I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8 H     SI1      61.9    55   337  4.07  4.11  2.53\n 9 E     VS2      65.1    61   337  3.87  3.78  2.49\n10 H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n</details>\n\n<details><summary><b>Full solution</b> (click here)</summary>\n\n- Option 1 --- remove the columns with mm measurements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# (Note that the final 2 added columns are hidden in the output!)\ndiamonds |>\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10) |>\n  select(-x, -y, -z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price length_cm width_cm depth_cm\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int>     <dbl>    <dbl>    <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326     0.395    0.398    0.243\n 2  0.21 Premium   E     SI1      59.8    61   326     0.389    0.384    0.231\n 3  0.23 Good      E     VS1      56.9    65   327     0.405    0.407    0.231\n 4  0.29 Premium   I     VS2      62.4    58   334     0.42     0.423    0.263\n 5  0.31 Good      J     SI2      63.3    58   335     0.434    0.435    0.275\n 6  0.24 Very Good J     VVS2     62.8    57   336     0.394    0.396    0.248\n 7  0.24 Very Good I     VVS1     62.3    57   336     0.395    0.398    0.247\n 8  0.26 Very Good H     SI1      61.9    55   337     0.407    0.411    0.253\n 9  0.22 Fair      E     VS2      65.1    61   337     0.387    0.378    0.249\n10  0.23 Very Good H     VS1      59.4    61   338     0.4      0.405    0.239\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n\n- Option 2 --- also keep the cm columns, but rename them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10) |>\n  rename(length_mm = x,\n         width_mm = y,\n         depth_mm = z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 53,940 × 13\n   carat cut       color clarity depth table price length_mm width_mm depth_mm\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int>     <dbl>    <dbl>    <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43\n 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31\n 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31\n 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63\n 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47\n 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53\n 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49\n10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39\n# ℹ 53,930 more rows\n# ℹ 3 more variables: length_cm <dbl>, width_cm <dbl>, depth_cm <dbl>\n```\n\n\n:::\n:::\n\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Price per carat\n\nInclude the following steps in a single \"pipeline\":\n\n1. Add a new column with the price per carat, rounded to whole dollars.\n2. Sort by price per carat in descending order\n3. Only keep diamonds with a price per carat above $5,000.\n\nWhat is the highest price per carat, and how many diamonds are you left with?\n  \n<details><summary><b>Solution</b> (click here)</summary>\n\nWe are left with 13,115 rows and the highest price per carat is $17,829:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  mutate(price_per_carat = round(price / carat)) |>\n  arrange(desc(price_per_carat)) |> \n  filter(price_per_carat > 5000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 13,115 × 11\n   carat cut   color clarity depth table price     x     y     z price_per_carat\n   <dbl> <ord> <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>           <dbl>\n 1  1.04 Very… D     IF       61.3    56 18542  6.53  6.55  4.01           17829\n 2  1.07 Prem… D     IF       60.9    58 18279  6.67  6.57  4.03           17083\n 3  1.03 Ideal D     IF       62      56 17590  6.55  6.44  4.03           17078\n 4  1.07 Very… D     IF       60.9    58 18114  6.57  6.67  4.03           16929\n 5  1.02 Very… D     IF       61.7    59 17100  6.42  6.52  3.99           16765\n 6  1.07 Very… D     IF       59      59 17909  6.63  6.72  3.94           16737\n 7  1.09 Very… D     IF       61.7    58 18231  6.55  6.65  4.07           16726\n 8  1    Ideal D     IF       60.7    57 16469  6.44  6.48  3.92           16469\n 9  1    Very… D     IF       63.3    59 16073  6.37  6.33  4.02           16073\n10  1.01 Prem… D     IF       61.6    56 16234  6.46  6.43  3.97           16073\n# ℹ 13,105 more rows\n```\n\n\n:::\n:::\n\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Bonus: Renaming columns with `janitor::clean_names()`\n\n1. Install and then load the package _janitor_.\n\n<details><summary><b>Solution</b> (click here)</summary>\n\n- Install:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"janitor\")\n```\n:::\n\n\n- Load:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n:::\n\n\n</details>\n\n2. Run the following code to create a \"tibble\" (tidyverse-style dataframe)\n   with poor column names:\n   \n\n::: {.cell}\n\n```{.r .cell-code}\n# (The backticks ` around the column names are necessary to assign such unwieldy names)\nsale_stats <- tibble(\n  `Abbreviated ID` = c(\"DZ\", \"GA\", \"PT\"),\n  `% Sold` = c(62, 98, 18),\n  `Nr Stored` = c(372, 13, 175),\n  `Lost&Found` = c(0, 0, 2)\n)\n```\n:::\n\n\n3. Print the `sale_stats` data frame and take a look at how the column names are shown.\n\n<details><summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsale_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 3 × 4\n  `Abbreviated ID` `% Sold` `Nr Stored` `Lost&Found`\n  <chr>               <dbl>       <dbl>        <dbl>\n1 DZ                     62         372            0\n2 GA                     98          13            0\n3 PT                     18         175            2\n```\n\n\n:::\n:::\n\n\n</details>\n\n4. Run the `clean_names()` function on the `sale_stats` data frame.\n   (It will take a data frame as its first argument and return a dataframe,\n   much like the dplyr functions we've seen).\n   Take a close look at the output ---\n   can you spot at least 3 types of changes that it made?\n\n<details><summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsale_stats |> clean_names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 3 × 4\n  abbreviated_id percent_sold nr_stored lost_found\n  <chr>                 <dbl>     <dbl>      <dbl>\n1 DZ                       62       372          0\n2 GA                       98        13          0\n3 PT                       18       175          2\n```\n\n\n:::\n:::\n\n\nOr equivalently (output not shown):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_names(sale_stats)\n```\n:::\n\n\nThe `clean_names()` function made the following changes to the column names:\n\n- Spaces were converted to underscores\n- The `&` was converted to an underscore\n- The `%` was converted to `percent` (!)\n- Uppercase (capital) letters were converted to lowercase\n\n</details>\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
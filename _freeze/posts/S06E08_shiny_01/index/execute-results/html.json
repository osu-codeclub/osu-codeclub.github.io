{
  "hash": "f70fbe9c53311efc07da9e4b516de63a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shiny 01: Intro to Shiny\"\nsubtitle: What is Shiny? The Basic Structure of a Shiny App.\nauthor: \"Horacio Lopez-Nicora\"\ndate: \"2023-10-30\"\ncategories: [shiny, quarto]\ntitle-block-banner: false\nimage: img/shiny_logo.png\ndf-print: kable\ncode-fold: false\n---\n\n\nWelcome to our `shiny` app development class! Throughout this session, we will dive into the world of Shiny and explore its incredible potential for creating interactive web applications.\n\nBy the end of this session, you will have a solid understanding of what Shiny is and how it can be utilized to build dynamic apps. We will also focus on mastering the basic structure of a Shiny app, equipping you with the necessary skills to create your own customized applications.\n\n# What is Shiny?\n\nShiny is an R package (`shiny`) and web framework that allows users to build interactive web applications using R. With the Shiny package, users can easily share their models, plots, or tables with others who can then access and interact with them on the web. This allows anyone to input values and obtain estimates for outcomes without having to perform any calculations themselves.\n\nThe [Shiny](https://shiny.posit.co) package and [accompanying teaching materials](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html) are designed to make building web applications manageable even for those with limited programming experience. Before we get started today, check out the [Shiny Gallery](https://shiny.posit.co/r/gallery/)! Here, you will discover numerous Shiny apps that can inspire and educate you.\n\n# The Basic Structure of a Shiny App\n\nA Shiny app has two sections, as seen in the diagram below:\n\n-   the ***user interface (ui)*** section which accepts inputs from users, and displays output values to users\n\n-   the ***server section***, which ingests the input, processes the data, renders output values to HTML, and sends these back to the user interface (ui).\n\n[![The basic structure of a Shiny App. (Higgins 2023)](img/shiny-input-flow.png)](https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html)\n\n## The User Interface Section Structure\n\nThe user interface, commonly referred to as the \"front end\" of an application, is the visual and interactive aspect that users encounter. It is typically organized into several sections: `titlePanel()`, `sidebarPanel()`, and `mainPanel()`. In order to establish this structure, the code must be organized into sections that are constructed with functions, as demonstrated below.\n\n[![Basic ui (User Interface) code structure (Higgins 2023)](img/shiny-ui-structure.png)](https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#the-user-interface-section-structure)\n\nThe code required to achieve this follows a similar hierarchy, as depicted in the figure below.\n\n[![User Interface (ui) hierarchy code structure (Higgins 2023)](img/shiny-ui-hierarchy.png)](https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#the-user-interface-section-structure)\n\n## The Server Section Structure\n\nThe server section of an app, also known as the \"back end\", is where data processing takes place. Users don't see this part but it handles inputs from the user and generates outputs such as model predictions or tables. These results are rendered to HTML and assigned to unique output values.\n\n[![Basic server code structure (Higgins 2023)](img/shiny-server-structure.png)](https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#the-server-section-structure)\n\n## How to Run a Shiny App\n\nThe code required to run a Shiny app is always the same and quite straightforward. The `shinyApp()` function takes two arguments: the user interface (ui) and the server code (server) that are being used.\n\n[![Executing and running a Shiny App (Higgins 2023)](img/shiny-run-code.png)](https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#how-to-run-an-app)\n\n## How to Stop a Shiny App\n\nTo stop your app, you have several options:\n\n1.  Click the stop sign icon located on the toolbar of the R Console pane.\n2.  Close the Shiny app window.\n3.  Click within the Console pane and then press Esc (or Ctrl-C if using the command line) to halt it.\n\n# Let's Build Our First Shiny App\n\nTo begin, make sure you have the `shiny` package installed. If not, go ahead and install it now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('shiny')\n```\n:::\n\n\nSecondly, let's assemble the three fundamental structures of a Shiny App.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nui<- fluidPage(\n  # *Input () functions\n  # *Output () functions\n  # *Layout () functions\n)\nserver<- function(input, output){\n  # render * () functions with R expressions inside\n  # reactive () expressions\n}\nshinyApp(ui=ui, server=server)\n```\n:::\n\n\n## Let's Complete Each Section.\n\n1.  Call `shiny` into R environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n```\n:::\n\n\n2. Let's complete some of the sections: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage( \n  titlePanel(title = \"This is my First Shiny App\"), \n  sidebarLayout( \n    sidebarPanel(\"This is the sidebar panel.\"), \n    mainPanel(\"This is the main panel, where output is displayed.\") \n    ) \n  )\n```\n:::\n\n\n3. We have no input, so, we just need the basic server function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- shinyServer(\n  function(input,output){ \n    } \n  )\n```\n:::\n\n\n4. Let's run our Shiny App! \n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(ui=ui, server=server)\n```\n:::\n\n\n## Let's Make Some Modifications.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#1. Load your library, always.\nlibrary(shiny)\n\n#2. Let’s fill some of the sections\nui<-fluidPage(\n  titlePanel(title = \"This is my First Shiny App\"), \n  sidebarLayout(position = \"right\",\n                sidebarPanel(h3(\"This is sidebar panel.\"), h4(\"Notice the sidebar is displayed on the right.\"), h5(\"But looked better on the left side.\")),\n                mainPanel(h4(\"This is the main panel, where output is displayed.\"),\n                          h5(\"This is additional explanation about the output.\"))\n  )\n)\n\n#3. We have no input, so, we just need the basic server function\nserver<-shinyServer(\n  function(input,output){\n  }\n)\n\n#4. Let’s run the app\nshinyApp(ui=ui, server=server)\n```\n:::\n\n\n## Let's Include Text Input\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\nui<- fluidPage(\n  titlePanel(\"Our First Shiny App\"), \n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"name\", \"Enter your first and last name\"),\n      textInput(\"email\", \"Enter your email\"),\n      selectInput(\"country\", \"Select the country you live in\", choices = c(\"\", \"Australia\", \"Germany\", \"India\", \"Paraguay\", \"UK\", \"USA\"))\n    ),\n    mainPanel(\n      paste(\"Your contact information\"),\n      textOutput(\"name\"),\n      textOutput(\"email\"),\n      textOutput(\"country\")\n    ) \n  )  \n)\n\nserver<- shinyServer(function(input, output){\n  output$name<- renderText({\n    paste(input$name)\n  })\n  output$email<-renderText({\n    paste(input$email)\n  })\n  output$country<-renderText({\n    paste(input$country)\n  })\n})\n\nshinyApp(ui=ui, server = server)\n```\n:::\n\n\n# Summary\n\nFor more information, please visit the [Shiny CheatSheet](https://rstudio.github.io/cheatsheets/shiny.pdf) and refer to the figure below to gain a better understanding of the sections of the Shiny App ***ui***.\n\n[![Understanding the Shiny User Interface (***ui***) Sections (Higgins 2023)](img/shiny-ui-sections.png)](https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#the-user-interface-section-structure)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
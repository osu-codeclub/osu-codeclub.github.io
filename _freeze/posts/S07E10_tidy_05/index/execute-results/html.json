{
  "hash": "699e5ed5ddfe7bf1ee84f4ee84daf28e",
  "result": {
    "markdown": "---\ntitle: \"Reading in data with the tidyverse\"\nauthor:\n  - \"Jessica Cooperstone\"\ndate: \"2024-03-22\"\ncategories: [r-basics, tidyverse]\ntitle-block-banner: false\nimage: img/readr.png\n---\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n\n<br>\n\n::: {layout-ncol=2}\n\n<img src=\"img/readr.png\" height=\"250\">\n\n<img src=\"img/readxl.png\" height=\"250\">\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n## Introduction\n\nSo far in code club this semester, all of the data we have used has been either made up by us or able to be loading from data embedded within base R or a package.\n\nToday we are going to go over reading in external data into R. The tidyverse core package that contains functions for reading in (and writing out) data is [`readr`](https://readr.tidyverse.org/index.html) and [`readxl`](https://readxl.tidyverse.org/) allows reading in Excel data. This package allows us to read in rectangular data. Some of the material from today is adapted from a past [code club](https://biodash.github.io/codeclub/s05e05/#) by Jelmer Poelstra.\n\nUseful references for today:\n\n-   [`readr` documentation](https://readr.tidyverse.org/index.html) (for reading in delimited files)\n-   [`readxl` docuemtation](https://readxl.tidyverse.org/) (for reading in Excel files)\n-   [Data import with the tidyverse cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf)\n-   [Data import chapter 7](https://r4ds.hadley.nz/data-import) in R for Data Science\n\nThere are other non-core tidyverse packages for reading in data (including directly from Google Drive), you can find them [here](https://www.tidyverse.org/packages/#import) though I will not go through them today.\n\nWe are going to use a new package today.\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"readxl\")\n```\n:::\n\n\n\nAnd then will start by loading the libraries we need for today.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n```\n:::\n\n\nBut before we actually read in data, let's talk a little bit about the different ways in which input data can be formatted.\n\n## What are some common data formatting styles?\n\n### `.csv`\n\nThe most common formatting style for data is comma separated values, which often has the file extension `.csv`. This means that the data is delimited (i.e., separated) by commas. Often we open these files in a program like Excel, Numbers, or similar, which puts each value into its own cell, but the data actually looks like this:\n\n```\nStudent ID,Full Name,favourite.food,mealPlan,AGE\n1,Sunil Huffmann,Strawberry yoghurt,Lunch only,4\n2,Barclay Lynn,French fries,Lunch only,5\n3,Jayendra Lyne,N/A,Breakfast and lunch,7\n4,Leon Rossini,Anchovies,Lunch only,\n5,Chidiegwu Dunkel,Pizza,Breakfast and lunch,five\n6,Güvenç Attila,Ice cream,Lunch only,6\n```\n\nHere, the first row are our column headers, and each subsequent row contains information about one student, including their student ID, full name, favorite food, meal plan, and age.\n\nIf we look at this data as a table, it looks like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n| Student ID|Full Name        |favourite.food     |mealPlan            |AGE  |\n|----------:|:----------------|:------------------|:-------------------|:----|\n|          1|Sunil Huffmann   |Strawberry yoghurt |Lunch only          |4    |\n|          2|Barclay Lynn     |French fries       |Lunch only          |5    |\n|          3|Jayendra Lyne    |N/A                |Breakfast and lunch |7    |\n|          4|Leon Rossini     |Anchovies          |Lunch only          |NA   |\n|          5|Chidiegwu Dunkel |Pizza              |Breakfast and lunch |five |\n|          6|Güvenç Attila    |Ice cream          |Lunch only          |6    |\n:::\n:::\n\n\n\n### `.tsv`\n\nAnother common data format is as tab separated values, or `.tsv`. Here, instead of being separated by commas like in a `.csv`, the values are separated by tabs. Looking at the same students data in a `.tsv` format would look like this:\n\n```\nStudent ID        Full Name        favourite.food        mealPlan        AGE\n1        Sunil Huffmann        Strawberry yoghurt        Lunch only        4\n2        Barclay Lynn        French fries        Lunch only        5\n3        Jayendra Lyne        N/A        Breakfast and lunch        7\n4        Leon Rossini        Anchovies        Lunch only        \n5        Chidiegwu Dunkel        Pizza        Breakfast and lunch        five\n6        Güvenç Attila        Ice cream        Lunch only        6\n```\n\n> Both comma-separated nad tab-separated values can also be stored with other file extensions like `.txt`.\n\n### `.xlsx` and `.xls`\n\nThese are Microsoft-specific file formats created using the program Excel. Since using Excel spreadsheets so so common, there are special packages that allow the reading in of these file types. If you open up a file in Excel, you can save it in a variety of different file formats, just please do this with care, as Excel has reputation of [turning gene names in to dates](https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates).\n\n### Which file format to use?\n\nThe truth is all file formats can be read into R, and some might be better for certain instances. You might read on the internet that its better to use `.csv` files over `.xlsx.` and `.xls` for compatibility sake, but there are also benefits to Excel formats where lots of data can be stored in one file in different sheets. \n\n> Pick the data format that works best for your application. \n\n## Download data to import\n\nThe code below will let you download some (5) files to your computer for the exercise today, which you can then import. These files were created by Jelmer from R for Data Science for a [code club](https://biodash.github.io/codeclub/s05e05/#basics-of-reading-rectangular-files) many code clubs ago.\n\nThe code below allows you to download five files in different formats and with different data structure. We will practice data import with these files. Remember when you execute this code, your files will be downloaded to your working directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# saves the url where the file is located\nurl_csv <- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.csv\"\n# downloads the file and saves in your working directory as students.csv\ndownload.file(url = url_csv, destfile = \"students.csv\")\n\nurl_csv_noheader <- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_noheader.csv\"\ndownload.file(url = url_csv_noheader, destfile = \"students_noheader.csv\")\n\nurl_csv_meta <- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_with_meta.csv\"\ndownload.file(url = url_csv_meta, destfile = \"students_with_meta.csv\")\n\nurl_tsv <- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.tsv\"\ndownload.file(url = url_tsv, destfile = \"students.tsv\")\n\nurl_excel <- \"https://github.com/osu-codeclub/osu-codeclub.github.io/raw/main/posts/S07E10_tidy_05/students.xlsx\"\ndownload.file(url = url_excel, destfile = \"students.xlsx\")\n```\n:::\n\n\nOnce you've downloaded all these files, take a minute to open them all up on your computer (you can use Excel, Numbers, whatever) to see how they are different. Be sure not to make any changes to the filesa.\n\n## Reading in delimited files\n\nThere are a few functions that allow you to read in tabular data in `readr`, and they are part of the `read_*()` family.\n\n![[From the [readr cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf)]](img/readr-tabdata-cheatsheet.png)\n\nThe following functions work similarly:\n\n-   [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html): reads in comma-separated values files\n-   [`read_csv2()`](https://readr.tidyverse.org/reference/read_delim.html): reads in semi-colon-separated values files where commas are the decimal point (common in Europe) instead of the period (as in the US)\n-   [`read_tsv()`](https://readr.tidyverse.org/reference/read_delim.html): reads in tab-separated values files\n-   [`read_delim()`](https://readr.tidyverse.org/reference/read_delim.html): reads in delimited files, where the delimiter can be specified. If you were to specify the delimiter to be \",\", this could be the save as `read_csv()`.\n\nLet's start by reading in our \"students.csv\" file and then work through how changing how we set the arguments alters how our data is imported.\n\nThe first (and only required) argument to `read_*()` is the file, which we will provide in quotes as it is a string. If we were to have our file in a folder called \"data\" within our working directory, we could provide \"data/students.csv\". If our file we wanted to read in was in some other location on our computer, we could provide the full path.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_csv <- read_csv(\"students.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nWe can see a message after we've imported our data giving us information about how this process went. In this case, we've read in a file with 6 rows and 5 columns. The delimiter is `\",\"` and we have information about what type our columns have been imported in. Here, the columns favourite.food, mealPlan, and AGE have been parsed as character type, and Student ID is numeric (i.e., dbl). \n\nWe can get a sense of our data by using the function `head()` to see the first 6 rows, all columns.\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(students_csv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         <dbl> <chr>            <chr>              <chr>               <chr>\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n:::\n:::\n\n\n## Reading in Excel files\n\nI expect many of you have data stored in `.xlsx` or `.xls` files that you'd like to read into R. The package [`readxl`](https://readxl.tidyverse.org/) makes easy work of this. This packages has functions including:\n\n-   [`read_xlsx()`](https://readxl.tidyverse.org/reference/read_excel.html): reads in `.xlsx` files \n-   [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html): reads in `.xls` files \n-   [`read_excel()`](https://readxl.tidyverse.org/reference/read_excel.html): reads in both `.xlsx` and `.xls` files and tries to guess which one your file is. This usually but does not always works well. \n\n> There are [subtle differences](https://blog.fileformat.com/spreadsheet/xls-vs-xlsx/) between `.xlsx` and `.xls` files but I don't think they're that important to get into here. \n\nLet's read in our Excel file.\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_excel <- read_xlsx(\"students.xlsx\")\n\nhead(students_excel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         <dbl> <chr>            <chr>              <chr>               <chr>\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 G√ºven√ß Attila  Ice cream          Lunch only          6    \n```\n:::\n:::\n\n\nBy default the first sheet is read in. If we want to know what the names of the different sheets are, we can run the following code providing the name of our file.\n\n::: {.cell}\n\n```{.r .cell-code}\nexcel_sheets(\"students.xlsx\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"students\"   \"students_2\"\n```\n:::\n:::\n\n\nWe can set what sheet specifically we want to read in using the argument `sheet = \"\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_excel <- read_xlsx(\"students.xlsx\",\n                            sheet = \"students\")\n```\n:::\n\n\n\n## Handling file reading issues\n\n![From the [readr cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf)](img/readr-arguments.png)\n\n### Specifying column types\nLet's say that the column favourite.food is actually a factor (i.e., categorical), and not a character. We can specify that column should be a factor using the argument `col_types = `. The short codes you can specify in can be found [here](https://readr.tidyverse.org/reference/read_delim.html#arguments). \n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_csv_mealplan <- read_csv(\"students.csv\",\n                             col_types = \"nccfc\")\n\nglimpse(students_csv_mealplan)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 5\n$ `Student ID`   <dbl> 1, 2, 3, 4, 5, 6\n$ `Full Name`    <chr> \"Sunil Huffmann\", \"Barclay Lynn\", \"Jayendra Lyne\", \"Leo…\n$ favourite.food <chr> \"Strawberry yoghurt\", \"French fries\", \"N/A\", \"Anchovies…\n$ mealPlan       <fct> Lunch only, Lunch only, Breakfast and lunch, Lunch only…\n$ AGE            <chr> \"4\", \"5\", \"7\", NA, \"five\", \"6\"\n```\n:::\n:::\n\n\n### Setting column names\n\nYou might have a datafile that doesn't include headers, or column names. These functions by default use `col_names = TRUE` and assume that your file does have headers. If you don't, you can set this argument to `FALSE` and provide column headers. Let's just try reading in a file without headers just to see what the result is.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_no_headers <- read_csv(\"students_noheader.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 5 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Sunil Huffmann, Strawberry yoghurt, Lunch only, 4\ndbl (1): 1\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(students_no_headers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 5\n    `1` `Sunil Huffmann` `Strawberry yoghurt` `Lunch only`        `4`  \n  <dbl> <chr>            <chr>                <chr>               <chr>\n1     2 Barclay Lynn     French fries         Lunch only          5    \n2     3 Jayendra Lyne    N/A                  Breakfast and lunch 7    \n3     4 Leon Rossini     Anchovies            Lunch only          <NA> \n4     5 Chidiegwu Dunkel Pizza                Breakfast and lunch five \n5     6 Güvenç Attila    Ice cream            Lunch only          6    \n```\n:::\n:::\n\n\nWe can see that the first row has become the column names, and this is not what we want. We can indicate the column names using the argument `col_names = `.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_no_headers <- read_csv(\"students_noheader.csv\",\n                                col_names = c(\"Student ID\", \"Full Name\", \"favourite.food\",\n                                              \"mealPlan\", \"AGE\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(students_no_headers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         <dbl> <chr>            <chr>              <chr>               <chr>\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n:::\n:::\n\n\nThese column names are a bit sloppy, so we can also clean them up using `janitor::clean_names()`. If we apply `clean_names()`, we can see what happens.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_no_headers_clean <- janitor::clean_names(students_no_headers)\n\nhead(students_no_headers_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       <dbl> <chr>            <chr>              <chr>               <chr>\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          <NA> \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n:::\n:::\n\n\n\n### Handling header or metadata lines\n\nSometimes the headers of your data might not be in the first row. In the case that you want to read in data that has non-data rows, you can indicate those to skip in the reading in process.\n\n![](img/has-metadata.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_metadata <- read_delim(\"students_with_meta.csv\",\n                                delim = \",\",\n                                skip = 2) # since there are two lines we don't want to read in\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(students_metadata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         <dbl> <chr>            <chr>              <chr>               <chr>\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n:::\n:::\n\n\nThis is particularly useful if you are reading in data that comes off an instrument or system that formats data in a specific way.\n\n### What to do with NAs\n\nOften your dataset will have missing data, though different people will code NAs differently. They may be simply missing, N/A, 999, or in some other way. You can tell your data import function how NAs are coded so they can be parsed correctly.\n\nIn this data, we have NAs that are coded as \"NA\", and \"N/A\". The default NA values are R are `na = c(\"NA\", \"\")`, so our data deviates from what would by default be considered missing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_missing <- read_csv(\"students.csv\",\n                             na = c(\"NA\", \"N/A\", \"\")) # adding N/A as a NA option\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(students_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         <dbl> <chr>            <chr>              <chr>               <chr>\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    <NA>               Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n:::\n:::\n\n\n## Practice\n\n::: {.callout-warning icon=\"flase\" }\n\n## Question 1\n\nDownload and successfully read in the file below. I would recommend that after you download it, you open it to have some information to guide your import.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndogs_url <- \"\"\n```\n:::\n\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n:::\n\n\n</details>\n\n:::\n\n### \n\n\n::: {.cell}\n\n:::\n\n\n\n### Take some data that you have and try and read it into R\nThis you should do on your own! Find a file that you have and try and read it in and calculate some summary information.\n\n## Bonus, writing out data\n\nOften you will generate data in R that you want to write out to a spredsheet form. You can do this using the `write_*()` functions.\n\n-   [`write_delim()`](https://readr.tidyverse.org/reference/write_delim.html) writes out a delimited file, where you specify the delimiter\n-   [`write_csv()`](https://readr.tidyverse.org/reference/write_delim.html) writes out a csv file\n\nHere, we provide the name of the R object we want to write out, and it will be written to your working directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(students_csv)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
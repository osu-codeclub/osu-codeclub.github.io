{
  "hash": "8ba3df490ce3d6c5b48457b2ab042fe6",
  "result": {
    "markdown": "---\ntitle: \"Reading in data with the tidyverse\"\nauthor:\n  - \"Jessica Cooperstone\"\ndate: \"2024-03-22\"\ncategories: [r-basics, tidyverse]\ntitle-block-banner: false\nimage: img/readr.png\n---\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n\n<br>\n\n::: {layout-ncol=2}\n\n<img src=\"img/readr.png\" height=\"250\">\n\n<img src=\"img/readxl.png\" height=\"250\">\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n## Introduction\n\nSo far in code club this semester, all of the data we have used has been either made up by us, or able to be loading from data embedded within base R or a package.\n\nToday we are going to go over reading in your own data. The tidyverse core package that contains functions for reading in (and writing out) data is [`readr`](https://readr.tidyverse.org/index.html). This package allows us to read in rectangular data - or data \n\nUseful references for today:\n\n-   [`readr` documentation](https://readr.tidyverse.org/index.html)\n-   [`readxl` docuemtation](https://readxl.tidyverse.org/) (for reading in Excel files)\n-   [Data import chapter 7](https://r4ds.hadley.nz/data-import) in R for Data Science\n\nThere are other non-core tidyverse packages for reading in data (including directly from Google Drive), you can find them [here](https://www.tidyverse.org/packages/#import) though I will not go through them today.\n\nWe will start by loading the libraries we need for today.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n```\n:::\n\n\nBut before we actually read in data, let's talk a little bit about the different ways in which input data can be formatted.\n\n## What are some common data formatting styles?\n\n### `.csv`\n\nThe most common formatting style for data is comma separated values, or with the file extension `.csv`. This means that the data is delimited (i.e., separated) by commas. Often we open these files in a program like Excel, Numbers, or similar, which puts each value into its own cell, but the data actually looks like this:\n\n```\nStudent ID,Full Name,favourite.food,mealPlan,AGE\n1,Sunil Huffmann,Strawberry yoghurt,Lunch only,4\n2,Barclay Lynn,French fries,Lunch only,5\n3,Jayendra Lyne,N/A,Breakfast and lunch,7\n4,Leon Rossini,Anchovies,Lunch only,\n5,Chidiegwu Dunkel,Pizza,Breakfast and lunch,five\n6,Güvenç Attila,Ice cream,Lunch only,6\n```\n\nHere, the first row are our column headers, and each subsequent row contains information about one student, including their student ID, full name, favorite food, meal plan, and age.\n\nIf we look at this data as a table, it looks like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n| Student ID|Full Name        |favourite.food     |mealPlan            |AGE  |\n|----------:|:----------------|:------------------|:-------------------|:----|\n|          1|Sunil Huffmann   |Strawberry yoghurt |Lunch only          |4    |\n|          2|Barclay Lynn     |French fries       |Lunch only          |5    |\n|          3|Jayendra Lyne    |N/A                |Breakfast and lunch |7    |\n|          4|Leon Rossini     |Anchovies          |Lunch only          |NA   |\n|          5|Chidiegwu Dunkel |Pizza              |Breakfast and lunch |five |\n|          6|Güvenç Attila    |Ice cream          |Lunch only          |6    |\n:::\n:::\n\n\n\n### `.tsv`\n\nAnother common data format is tab separated values, or `.tsv`. Here, instead of being separated by commas like in a `.csv`, the values are separated by tabs. Looking at the same students data in a `.tsv` format would look like this:\n\n```\nStudent ID        Full Name        favourite.food        mealPlan        AGE\n1        Sunil Huffmann        Strawberry yoghurt        Lunch only        4\n2        Barclay Lynn        French fries        Lunch only        5\n3        Jayendra Lyne        N/A        Breakfast and lunch        7\n4        Leon Rossini        Anchovies        Lunch only        \n5        Chidiegwu Dunkel        Pizza        Breakfast and lunch        five\n6        Güvenç Attila        Ice cream        Lunch only        6\n```\n\n### `.xlsx` and `.xls`\n\nThese are Microsoft-specific file formats created using the program Excel. Since using Excel spreadsheets so so common, there are special packages that allow the reading in of these file types. If you open up a file in Excel, you can save it in a variety of different file formats, just please do this with care, as Excel has reputation of [turning gene names in to dates](https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates).\n\n### Which file format to use?\n\nThe truth is all file formats work, and some might be better for certain instances. You might read on the internet that its better to use `.csv` files over `.xlsx.` and `.xls` for compatibility sake, but there are also benefits to Excel formats where lots of data can be stored in one file in different sheets. \n\n> Pick the data format that works best for your application. \n\n## Download data to import\n\nThe code below will let you download some files to your computer, which you can then import. These are some files that Jelmer created from R for Data Science for a [code club](https://biodash.github.io/codeclub/s05e05/#basics-of-reading-rectangular-files) many code clubs ago.\n\nThe code below allows you to download four files, in different formats, and with different structure. We will \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# saves the url where the file is located\nurl_csv <- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.csv\"\n# downloads the file and saves in your working directory as students.csv\ndownload.file(url = url_csv, destfile = \"students.csv\")\n\nurl_csv_noheader <- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_noheader.csv\"\ndownload.file(url = url_csv_noheader, destfile = \"students_noheader.csv\")\n\nurl_csv_meta <- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_with_meta.csv\"\ndownload.file(url = url_csv_meta, destfile = \"students_with_meta.csv\")\n\nurl_tsv <- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.tsv\"\ndownload.file(url = url_tsv, destfile = \"students.tsv\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "ca0c12e35fe558967bbdcc67dbd6292b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plotting 4: Faceting and multi-panel figures\"\nauthor:\n  - \"Jelmer Poelstra\"\n  - Mike Sovic\ndate: \"2024-04-19\"\ncategories: [plotting, ggplot2]\ntitle-block-banner: false\nimage: featured_plot.png\nnumber-depth: 3\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\n    fig.align: 'center'\nexecute: \n  warning: false\neditor: source\neditor_options: \n  chunk_output_type: console\n---\n\n\n------------------------------------------------------------------------\n\n<br>\n\n## Introduction\n\nIn this last session of the semester, we'll cap off our series on ggplot2 basics with\na focus on:\n\n- Faceting plots: splitting plots into subplots based on one or more variables\n- Combining plots into multi-panel figures with the patchwork package\n\nAnd two useful side-notes:\n\n- Setting a plotting theme for your entire R session\n- Saving plots to file with `ggsave()`\n\nLike in previous sessions, we'll start by loading the tidyverse and palmerpenguins\npackages:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n\n<br>\n\n## Setting a theme for all plots in the session\n\nWe've seen that you can change the \"theme\" (overall look) of a ggplot plot by\nadding a layer like `theme_bw()`.\nIf you're making a bunch of plots, and want all them to have a specific theme,\nit can be more convenient to set the plotting theme upfront for\n_all plots in your current R session_ ---\nyou can do so with the `theme_set()` function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\n```\n:::\n\n\nOne other tidbit worth pointing out is that you can set the \"base size\" for a theme,\nwhich is the relative size of the text and lines.\nYou may have noticed that the ggplot's font size of e.g. axis labels and titles\nis relatively small.\nInstead of changing all of these individually with arguments to `theme()`,\nyou can use the `base_size` argument when specifying the overall theme:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# (The default base_size is 11)\ntheme_set(theme_bw(base_size = 12))\n```\n:::\n\n\nFinally, you can set any `theme()` arguments for all plots in the R session\nwith `theme_update()` ---\nfor example, we may want to turn off the minor grid lines: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_update(panel.grid.minor = element_blank())\n```\n:::\n\n\nAfter doing this, as you'll see,\nall plots in this session will feature `theme_bw` without minor grid lines.\n\n<br>\n\n## Faceting: intro and `facet_wrap()`\n\n#### An example with one variable\n\nLet's start by revisiting the following plot you made in the exercises a couple\nof weeks ago:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nWe've used the color aesthetic to distinguish species,\nbut because of the overlap between Adelie (red) and Chinstrap (green) penguins,\nit's not that easy to see the relationship between body mass and flipper length\nfor these two species.\n\nAn alternative to using aesthetics such as color or shape to distinguish between\nlevels of categorical variables is to split the plot into subplots/panels.\nIn ggplot, such subplots are called \"facets\", and there are two functions to split\na plot into facets: `facet_wrap()` and `facet_grid()`.\n\nLet's start with `facet_wrap()`.\nFacets are added as an additional layer to the plot, and in the faceting function,\nyou specify one or more variables to split the plot into separate panels by.\nHere, we want to facet by species:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  # Add the facet_wrap layer:\n  facet_wrap(~species) +\n  # We still color by species to make the plot look nicer, but no longer need a legend:\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: callout-tip\n#### `facet_wrap()` syntax\nNote how the variable to facet by is specified:\nwith a tilde (**`~`**) in front, which is R's way of specifying formulas.\nWe're basically saying to split the plot \"as a function of\" (by) `species`. \nAn alternative way of specifying the variable is by wrapping the variable name\nin `vars()`, e.g. `facet_wrap(vars(species))`.\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n#### An example with two variables\n\nIn the above example, you may reasonably prefer either of the two plots we made.\nFor example, perhaps you aren't convinced by the faceting solution because you\nthought the overlapping points in the first plot were useful to make clear how\nsimilar Adelie and Chinstrap penguins are in body mass and flipper length.\n\nWhat may be a more straightforward example of the usefulness of faceting is a\nsituation in which we want to show two or more categorical variables in a plot,\nlike `species` _and_ `island` below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm,\n             color = species, shape = island)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nThis plot isn't clear at all! Let's facet by `island` to get a much better plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  facet_wrap(~island) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 1\n\n**A)** Create a scatter plot of bill length vs. bill depth with points colored by sex,\nand the plot faceted by species.\n\n<details><summary>_(Click for the answer)_</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_wrap(~species) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n\n**B)** Say that you didn't want the species side-by-side (1 row, 3 columns),\nbut stacked vertically (3 rows, 1 column).\nTake a look at the help page for `facet_wrap()` (type `?facet_wrap`) and try\nto figure out how you can do this.\n\n<details><summary>_(Click for the answer)_</summary>\n\nYou can use the `ncol` and/or `nrow` arguments to force a specific number of rows\nand or columns.\nThe easiest solution here is to merely set the number of columns to 1,\nwhich will make `facet_wrap()` use multiple columns instead:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_wrap(~species, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n\n:::\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 2\n\nIn our first example, we faceted because there was too much overlap between points.\nYou may also want to facet for the opposite reason,\nwhen **differences by some variable are so large that the plot suffers from it**.\nLet's artificially create such a situation by increasing the bill lengths for\nChinstrap penguins by 100 mm each:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_ed <- penguins |>\n  mutate(bill_length_mm = ifelse(species == \"Chinstrap\",\n                                 bill_length_mm + 100,\n                                 bill_length_mm))\n```\n:::\n\n\nAnd plot this modified data:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_ed |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nAbove, the spread along the x axis (bill length) is so large that\nit **has become hard to see the relationship between bill length and bill depth**.\nLet's facet:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_ed |>\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  facet_wrap(~species) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nThat didn't solve anything yet! **But** when you facet,\nyou can have the axis ranges (\"scales\") vary independently between facets.\nThis can be done with the `scales` argument to `facet_wrap()`.\nTake a look at the help page and try to get the x-axis range to be able to differ\nbetween the facets.\n\n<details><summary>_(Click for the answer)_</summary>\nYou'll want to set `scales` to `free_x`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  mutate(bill_length_mm = ifelse(species == \"Chinstrap\",\n                                 bill_length_mm + 100,\n                                 bill_length_mm)) |>\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  facet_wrap(~species, scales = \"free_x\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n:::\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 3\n\nIn your `theme_set()` call, vary the value of `base_size` and take a look at its\neffect by recreating the plots you made above a few times.\n:::\n\n<br>\n\n## `facet_grid()`\n\nIf you would like to **split your plot by two variables**,\nuse the `facet_grid()` function,\nwhich will create a grid with the levels of one variable across rows and of the other\nvariable across columns.\n\nThe formula-style syntax now uses `row-variable ~ column-variable`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  filter(!is.na(sex)) |> \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  facet_grid(island ~ sex) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n#### `facet_wrap()` vs. `facet_grid()` _(Click to expand)_\n\nNote that you can also tell `facet_grid()` to facet only by one variable,\neither across rows or across columns.\nWith that in mind, you may wonder why there even is a separate `facet_wrap()` function.\n\nWell, one feature of `facet_wrap()` that we haven't yet seen is that it can \"wrap\"\na single variable across both rows and columns.\nHere is an example with the `mpg` data set,\nwhich has a categorical value `cyl` with 4 levels,\nenough to make `facet_wrap()` spread these across 2 rows and 2 columns:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_wrap(~cyl)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=85%}\n:::\n:::\n\n:::\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 4\n\nCreate a scatter plot of bill length vs. bill depth and facet in a grid with\nthe variables `species` and `year`.\n\n<details><summary>_(Click for the answer)_</summary>\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  facet_grid(species~year) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n:::\n\n<br>\n\n## Multi-panel figures with patchwork\n\nThe [patchwork](https://patchwork.data-imaginist.com/) package allows you to combine\nmultiple plots into a single multi-panel figure.\n\nThis is something you might be used to doing with programs like Powerpoint or Illustrator.\nBut certainly if all the individual plots that should make up a figure are made with R,\nit is highly beneficial to combine them in R as well.\nOne of the advantages of using R is that you can easily rerun your code to recreate plots\nwith some modifications, but if after any change,\nyou have to put plots together in another program,\nyou lose some of the advantages related to automation and reproducibility.\n\nLet's install and then load the package:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"patchwork\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(patchwork)\n```\n:::\n\n\nPatchwork assumes that you have created and saved the individual plots as separate R objects.\nThen, you tell patchwork how to arrange these plots,\nand the syntax to define the layout is based on common mathematical operators.\nSome examples, where `plot1`, `plot2`, and `plot3` represent plots that have\nbeen saved as objects with those names:\n\n* `plot1 | plot2` puts two plots side-by-side\n* `plot1 / plot2` stacks two plots vertically\n* `plot1 / (plot2 | plot3)` gives plot1 on a top row, and plots 2 and 3 on a bottom row\n\nBelow is an example from palmerpenguins.\nFirst we create the plots, saving each as a new object:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_scatter <- penguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point() +\n  facet_wrap(\"species\")\np_scatter\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=85%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_bar <- penguins |> \n  summarize(bill_length = mean(bill_length_mm, na.rm = TRUE), .by = island) |>\n  ggplot(aes(x = island, y = bill_length)) +\n  geom_col()\np_bar\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=85%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_box <- penguins |> \n  drop_na() |> \n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot()\np_box\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nThen we simply use the patchwork syntax to define how these 3 plots will be arranged.\nIn this case, the first (faceted) plot on top, with the other two side-by-side below it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_scatter / (p_bar | p_box)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nPatchwork has quite a lot more functionality,\nand this is very well explained in various vignettes/tutorials on\n[its website](https://patchwork.data-imaginist.com/articles/patchwork.html).\nHere, we'll just try one more feature, adding tags for the individual plots ---\nwhere we tell patchwork about the type of numbering we would like (e.g. A-B-C vs. 1-2-3)\nby specifying the first character:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_scatter / (p_bar | p_box) +\n  plot_annotation(tag_levels = \"A\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=85%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 5\n\nUse the palmerpenguins data to try to create the plot below:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n<details><summary>_(Click for the answer)_</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_bill_flipper <- penguins |>\n  ggplot(aes(x = bill_length_mm, y = flipper_length_mm)) +\n  geom_point() +\n  facet_wrap(~species) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Bill Length (mm)\", y = \"Flipper Length (mm)\")\n  \np_mass_yr <- penguins |>\n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_boxplot() + \n  labs(x = \"Species\", y = \"Body Mass (g)\")\n\np_bill_flipper / p_mass_yr + \n  plot_annotation(tag_levels = 'I')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n:::\n\n<br>\n\n### Saving plots\n\nIf you hadn't already,\nnow that you've learned to create publication-ready multi-panel figures,\nyou are probably wondering how you can save these plots.\n\nPerhaps you've seen the \"Export\" button in the plotting pane, which can can do this.\nHowever, a better and more flexible way is to use the `ggsave()` function.\nBy default, it will save the last plot you produced to the specified file:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(\"test_plot.png\")\n```\n:::\n\n\nIf you do need to specify the plot object explicitly,\nyou can pass it as the second argument:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(\"test_plot2.png\", p_bill_flipper)\n```\n:::\n\n\nSome notes:\n\n- You can specify the file/image type (PNG, JPEG, SVG, PDF, etc.) simply by providing\n  the appropriate file extension.\n- Use the `height` and `width` arguments to specify both the aspect ratio and\n  the absolute size.\n  Larger sizes will lead to relatively smaller text and points,\n  which can be a convenient way to customize this!\n- For raster graphic formats like PNG, you can specify the resolution with the\n  `dpi` argument.\n\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 6\n\nSave one or more of your previously produced plots as PNG images, and vary:\n\n- The aspect ratio and asbolute size with `height` and `width`\n- The resolution with `dpi`\n:::\n\n<br><br>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
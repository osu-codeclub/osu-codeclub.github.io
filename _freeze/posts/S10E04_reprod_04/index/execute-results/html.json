{
  "hash": "5be579fc41b496c0b3355bee7efa5d65",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducibility recommendations: Code structuring\"\nsubtitle: \"Code structure related recommendations to improve the reproducibility of your research\"\npagetitle: \"Reproducibility 4\"\nauthor: \"Jelmer Poelstra\"\ndate: \"2025-09-29\"\ncategories: [reproducibility]\ntitle-block-banner: false\nnumber-depth: 3\nexecute: \n  eval: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n------------------------------------------------------------------------\n\n<br>\n\n## Introduction\n\nHave you struggled with R scripts that spin out of control,\nsituations where you are not sure how some things got in your environment\nbut you still need them,\nor suddenly not being able to run the code in your script and getting stuck?\n\nThen, the recommendations that we'll discuss in today's Code Club session should\ncome in handy.\nWe'll cover a variety of best-practice techniques on how to structure the code\nin your R scripts and R Markdown/Quarto documents.\nThe recommendations are:\n\n1. Use comments and divide your script into sections\n2. Write self-contained scripts\n3. Put these things at the top of your script:\n   - A comment describing the function of your script, and code to:\n   - Load packages\n   - Define input and output files\n   - Settings\n4. Don't repeat yourself -- as in, don't copy and paste blocks of code when you\n   e.g. need to repeat an action multiple times. \n5. Keep your scripts short\n\nAs we go through these recommendation,\nlet's have a scenario in mind where you are working on code to make the final\nfigures for your paper.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Use comments and divide your script into sections\n\nUse comments to explain what code does and why, e.g:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove 3 outliers that were identified by XYZ:\ndata_filt <- data |> filter(sample_id %in% outliers) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Turn `strawberry_line` into a factor to ensure proper ordering in the plots:\ndata <- data |> mutate(strawberry_line = factor(strawberry_line, levels = line_order))\n```\n:::\n\n\n\nUse a special kind of comment to divide your code into sections:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A: SETUP ---------------------------------------------------------------------\n# This section will load packages and define input and output files.\n\n# Step 1: load packages\n# ...R code...\n\n# B: DATA WRANGLING ------------------------------------------------------------\n# This section will wrangle the miserably formatted data into a shape\n# that can be used for plotting.\n\n# Step 1: XYZ\n# ...R code...\n```\n:::\n\n\n\nRStudio will recognize these sections ...\n\n- Outline TBA\n- Collapsing sections TBA\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Write self-contained scripts\n\n### You should be able to run your script in a fresh R environment\n\nYou should always be able to run the code in your script from start to finish,\nstarting from a completely fresh (empty) R environment.\nThis means that your script should never use, for example:\n\n- R objects that were not created by it\n- Packages that were not loaded by it\n- Custom functions that were not created or loaded by it\n\nIn other words, your script should never just \"continue on\" from another script,\nor assume that packages have been loaded beforehand/elsewhere, and so on.\n\n### Only include code that should be run every time you work on the script\n\nConversely, your script should not include code whose outputs neither serve\na purpose within that script nor write output files for usage elsewhere.\n\nThis also applies to code that had a purpose in earlier runs of the script,\nbut does no longer.\nFor example, installing packages is a one-time setup\nstep that you won't want to rerun every time you work on your script.\nThe R functions that do this (most commonly calls to `install.packages()`)\nshould therefore not be included in the script.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(tidyverse)\nlibrary(tidyverse)\n```\n:::\n\n\n\nIdeally, you instead have a separate \"setup\" script or document with\none-time setup steps.\nAlternatively, you may add comments in your script with setup information:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installed with install.packages(\"tidyverse\") on 2025-09-29 (v 2.0.0)\nlibrary(tidyverse)  \n```\n:::\n\n\n\n### Avoid/minimize commented-out code\n\nIn general, though,\navoid or at least minimize having code that is \"commented out\".\nWhile commenting out code can be very useful when you're experimenting,\ndon't keep it in your script any longer than necessary.\nAn example of commented-out code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |> filter(strawberry_color != \"green\")\n\n# data <- data |> select(!dumb_unnecessary_column)\n\ndata |>\n  ggplot(...)\n```\n:::\n\n\n\nAny commented-out code that you _are_ keeping around for longer should be clearly\nannotated -- explain why it is commented out and why are you keeping it around.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TBA - example\n```\n:::\n\n\n\n::: callout-note\n#### Commenting out to avoid repeating code\n\nYou may have a scenario where you need to run a large chunk of code multiple times,\ne.g. for different input files or with different settings/parameters.\nYou may be inclined to include this as a \"setting\" of the top of the script,\ncommenting out the other possibilities.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I ran the code below for both of these experiments:\ninput_file <- \"data/experiment01.tsv\"\noutput_plot <- \"results/exp01_plot.png\"\n#input_file <- \"data/experiment02.tsv\"\n#output_plot <- \"results/exp02_plot.png\"\n```\n:::\n\n\n\nOr to just include a comment like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_value <- 0.05  # Ran analysis and made plots also with p of 0.01 and 0.20 (YOLO)\n```\n:::\n\n\n\nAvoid that too! See the \"Don't repeat yourself recommendation\" further down.\n:::\n\n### Restart R regularly\n\nIf at all possible, try to restart R regularly and start over by running your\ncode from the beginning of the script.\nThis ensures that your script is indeed self-contained.\n\nRestarting R will also alert you to the all-too-common situation of having code\nthat no longer works because of changes you made,\nbut that you don't notice because you have objects that originate from now-changed code.\n(One typical cause of this is when you rename an object.)\nThe more regularly you restart,\nthe less risk you run of having a really hard figuring out what changed.\n\n::: callout-tip\nIf it seems prohibitive to restart R regularly because there is so\nmuch code to rerun, and/or that code takes a long time to run,\nyou should strongly consider splitting your script into different parts.\nSee the section \"Keep your scripts short\" below.\n:::\n\n_TBA - screenshot and keyboard shortcut_\n\n_TBA - settings not to reload environment_\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Put these things at the top of your script\n\n### A comment describing the function of your script\n\nFor example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Author: Jane Doe\n# Date: 2025-09-29, with edits on 2025-10-05\n# Project: ~/Documents/thesis/strawberry-experiment\n# Purpose: Create a figure to ... \n```\n:::\n\n\n\nIf you're using a Quarto document instead, most of this kind of information\nwill likely go into the YAML header.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Loading packages\n\nDon't load packages throughout your script,\nand certainly don't omit the code to load packages as explained above.\nInstead, load all packages at the top of the script -- for example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)   # (v 2.0.0)\nlibrary(patchwork)   # Creating multi-panel figures (v 1.3.2)\nlibrary(ggforce)     # For the facet_zoom() function (v 0.5.0)\nlibrary(janitor)     # Variable name cleaning (v 2.2.1)\nlibrary(pheatmap)    # Heatmap (v. 1.0.13)\nlibrary(here)        # Creating file paths\n```\n:::\n\n\n\nThe above example also includes a brief explanation of what each package is used\nfor, and which version is (or should be / was) loaded.\n\n::: {.callout-tip collapse=\"true\"}\n### More about recording R package versions  _(Click to expand)_\n\n\n\n\n\n\n\nFor package versions, you can also run the `sessionInfo()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.5.1 (2025-06-13)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.7\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] here_1.0.1      janitor_2.2.1   ggforce_0.5.0   ggplot2_3.5.2  \n[5] patchwork_1.3.2\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       jsonlite_2.0.0     dplyr_1.1.4        compiler_4.5.1    \n [5] tidyselect_1.2.1   stringr_1.5.1      snakecase_0.11.1   scales_1.4.0      \n [9] yaml_2.3.10        fastmap_1.2.0      R6_2.6.1           generics_0.1.4    \n[13] knitr_1.50         htmlwidgets_1.6.4  MASS_7.3-65        polyclip_1.10-7   \n[17] tibble_3.3.0       rprojroot_2.1.0    lubridate_1.9.4    pillar_1.11.0     \n[21] RColorBrewer_1.1-3 rlang_1.1.6        stringi_1.8.7      xfun_0.53         \n[25] timechange_0.3.0   cli_3.6.5          withr_3.0.2        magrittr_2.0.3    \n[29] tweenr_2.0.3       digest_0.6.37      grid_4.5.1         rstudioapi_0.17.1 \n[33] lifecycle_1.0.4    vctrs_0.6.5        evaluate_1.0.4     glue_1.8.0        \n[37] farver_2.1.2       rmarkdown_2.29     tools_4.5.1        pkgconfig_2.0.3   \n[41] htmltools_0.5.8.1 \n```\n\n\n:::\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nThis is particularly convenient to include in a Quarto document,\nwhere you can put this function all the way at the end,\nso its output will be included in the rendered document.\nIn an R script, you could do this to save the info to file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(capture.output(sessionInfo()), \"sessionInfo.txt\")\n```\n:::\n\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Defining input and output files\n\nIt's a good idea to define all of a script's input and output files using\nvariables at the top of the script -- for example:\n\n- Input files:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  # Define the input files\n  data_file <- \"data/strawberries.tsv\"\n  sampledata_file <- \"data/meta/samples.tsv\" \n  ```\n  :::\n\n\n\n- Output files:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  # Define and create the output dir\n  outdir <- \"results/plots\"\n  dir.create(outdir, showWarnings = FALSE, recursive = TRUE)\n  \n  # Define the output files\n  boxplot_file <- here(outdir, \"boxplot.png\")\n  scatterplot_file <- here(outdir, \"scatterplot.png\")\n  ```\n  :::\n\n\n\nThen, you would use these variables when reading and writing later on:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_tsv(data_file)\nggsave(boxplot_file)\n```\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Settings\n\nIf you have any key settings,\nespecially those that you may want to set differently later on or in a different\ncontext, you should also include these at the top of your script.\nFor example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Settings\np_value <- 0.01\nlogfold_change <- 1\nsome_threshold <- 25\nremove_outliers <- TRUE\n```\n:::\n\n\n\nThis may also include miscellaneous things like setting the random seed for\nan analysis:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the random seed for sampling with function rnorm()\nset.seed(1)\n```\n:::\n\n\n\n### Putting it together\n\nAll in all, the top section of your script may look something like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# SETUP ------------------------------------------------------------------------\n#TBA\n```\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Don't repeat yourself (DRY)\n\n### Use functions and put them in a separate file\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Keep your scripts short\n\nYour scripts should not become too long or they will become very hard to understand\nand to manage.\nAnd if you are working with Quarto instead,\nthey will take a long time to render and are much more likely to fail while rendering.\nIt is much better to have relatively short, modular scripts,\neach with a clear purpose.\n\nFor example,\nit is hopefully common sense to start a new script when you switch to an unrelated\nanalysis that uses different data, even if within the same project.\n\nBut it is not always this easy.\nAs an analysis expands and expands,\nit can be appealing to keep adding things to the same script.\nThis can be true especially true if, for example:\n\n- The analyses work with the same data,\n  and the script first does extensive data processing for all subsequent analyses.\n- Some or all analyses are not independent but more like a pipeline,\n  where the outputs of step A are used in step B, the outputs of step B\n  are used in step C, and so on.\n  \nHowever, even in such scenarios, it is a good idea not to let a single script\nget too long (say, many hundreds of lines),\nand to instead start a new script sooner rather than later.\n\nHow can you do this?\nWrite files, then read files\n\nThis may mean that you need more code in total,\nbecause you will need script A to write its outputs to files that are then loaded\nby script B, instead of just moving along in the same script.\nBut it is still worth it!\n\n::: exercise\nRework this script into two separate scripts\n:::\n\n- saveRDS, readRDS\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "89c3ea5e55f419803da3df2af22dc79b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducibility recommendations: Code structure\"\nsubtitle: \"Recommendations on code structure to improve the reproducibility of your research\"\npagetitle: \"Reproducibility 4\"\nauthor: \"Jelmer Poelstra\"\ndate: \"2025-09-29\"\ncategories: [reproducibility]\ntitle-block-banner: false\nnumber-depth: 3\nexecute: \n  eval: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n------------------------------------------------------------------------\n\n<br>\n\n## Introduction\n\nHave you struggled with R scripts whose size spins out of control,\nnot being sure where items in your environment came from,\nor no longer being able to run the code in your script?\nThen, the recommendations that we'll discuss in today's Code Club session should\ncome in handy.\n\nWe'll cover a variety of best-practice techniques on how to structure your\nR scripts and Quarto (/ R Markdown) documents.\nIn the text below, I will mostly refer to scripts,\nbut these recommendations also apply to Quarto,\nsometimes in slightly modified form.\nThe recommendations are:\n\n1. Use explanatory comments and divide your script into sections\n2. Write self-contained scripts\n3. Put the following at the top of your script:\n   - A comment describing the function of your script, and code to:\n   - Load packages\n   - Define input and output files\n   - Settings for your analysis\n4. Don't let your scripts get too long\n5. Don't repeat yourself --\n   as in, don't copy and paste blocks of code when you need to repeat an action\n\nAs we go through these recommendation,\nlet's have a scenario in mind where you are working on R code for your paper's\nfinal figures.\n\n::: {.callout-warning appearance=\"minimal\"}\nUnlike usually in Code Club,\nmost of the code on this page is not intended to be run by you --\nthey are meant as illustrative examples.\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Use comments and divide your script into sections\n\nFor future you and others who may read your code,\nmake extensive use of **comments** to explain what your code does and why, e.g:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove 3 outliers that were identified by XYZ:\ndata_filt <- data |> filter(sample_id %in% outliers) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Turn `strawberry_line` into a factor to ensure proper ordering in the plots:\ndata <- data |> mutate(strawberry_line = factor(strawberry_line, levels = line_order))\n```\n:::\n\n\n\nIn RStudio,\nyou can use a special kind of comment to divide your code into **sections**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A: SETUP ---------------------------------------------------------------------\n# This section will load packages and define input and output files.\n\n# Step 1: load packages\n# ...R code...\n\n# B: DATA WRANGLING ------------------------------------------------------------\n# This section will wrangle the miserably formatted data into a shape\n# that can be used for plotting.\n\n# Step 1: XYZ\n# ...R code...\n```\n:::\n\n\n\nAdding 4 or more dashes (<kbd>-</kbd>) at the end of a comment line\nwill make RStudio interpret it as a section header and:\n\n- Show an outline of your document if you click on the icon highlighted\n  with a red arrow in the screenshot below:\n\n![_How to make RStudio show a document outline based on section headers._](img/code-sections.png){fig-align=\"center\" width=\"75%\" .lightbox}\n\n- In the outline,\n  allow you to click on the headers to navigate to that part of your script\n\n- Allow you to collapse sections by clicking on the little arrow icons in the margin:\n\n![_How to collapse sections. To expand the section again, click the blue box with the outward-facing arrows._](img/code-sections-collapse.png){fig-align=\"center\" width=\"75%\" .lightbox}\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Write self-contained scripts\n\n### You should be able to run your script in a fresh R environment\n\nYou should always be able to run the code in your script from start to finish,\nstarting from a completely fresh (empty) R environment.\nThis means that your script should never use, for example:\n\n- R objects that were not created by it\n- Packages that were not loaded by it\n- Custom functions that were not created or loaded by it\n\nIn other words, your script should never just \"continue on\" from another script,\nor assume that packages have been loaded beforehand/elsewhere, and so on.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Don't include code you don't actually want to run\n\nThis also applies to code that had a purpose in earlier runs of the script,\nbut does no longer.\nFor example, installing packages is a one-time setup\nstep that you won't want to rerun every time you work on your script.\nThe R functions that do this should therefore not be included in the script.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If you include install.packages() in your script, running the script\n# from start to finish means re-installing the package every time\ninstall.packages(tidyverse)\nlibrary(tidyverse)\n```\n:::\n\n\n\nInstead, you ideally use a separate \"install\" script or document with\ninstallation and perhaps other one-time setup steps.\nAlternatively, you may add comments in your script with such information:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installed with install.packages(\"tidyverse\") on 2025-09-29 (v 2.0.0)\nlibrary(tidyverse)  \n```\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Avoid/minimize commented-out code\n\nIn general, though,\navoid or at least minimize having code that is \"commented out\".\nWhile commenting out code can be very useful when you're experimenting,\ndon't keep it in your script any longer than necessary.\nAn example of commented-out code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Only keep ripe strawberries\ndata <- data |> filter(strawberry_color != \"green\")\n# data <- data |> select(!some_column)\n\n# Create Fig. 1\nggplot(data, ...)\n```\n:::\n\n\n\nThe above code should run without error whether you include or exclude the commented-out\nline. Without an explanation, this may therefore be confusing to future you,\nyour collaborators, etc.\n\nAny commented-out code that you _are_ keeping around for longer should be clearly\nannotated -- explain why it is commented out and why are you keeping it around:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Only keep ripe strawberries\ndata <- data |> filter(strawberry_color != \"green\")\n\n# 'some_column' column may need to be removed for final outputs,\n# but I got a warning I didn't understand when removing it - keeping this for now \n# data <- data |> select(!some_column)\n\n# Create Fig. 1\nggplot(data, ...)\n```\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Running your script from start to finish should produce all needed outputs\n\nYou may have a scenario where you need to run a large chunk of code,\nor perhaps the entire script, multiple times.\nFor example, once for each of several input files or each of several different\nparameter thresholds.\nYou may be inclined to include this as a \"setting\" of the top of the script,\ncommenting out the other possibilities.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I ran the code below for both of these experiments:\ninput_file <- \"data/experiment01.tsv\"\noutput_plot <- \"results/exp01_plot.png\"\n#input_file <- \"data/experiment02.tsv\"\n#output_plot <- \"results/exp02_plot.png\"\n```\n:::\n\n\n\nOr to just include a comment like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_value <- 0.05  # Ran analysis below also with p of 0.01 and 0.10\n```\n:::\n\n\n\nAvoid these kind of constructs as well,\nbecause simply running your script in its entirety should produce all the\noutputs that are needed.\nAlso see the\n[\"Don't repeat yourself\"](#dont-repeat-yourself-dry)\nrecommendation further down.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Restart R regularly\n\nIf at all possible, try to restart R regularly and start over by running your\ncode from the beginning of the script in a fresh environment.\nThis ensures that your script is indeed self-contained.\n\nRestarting R will also alert you to the all-too-common situation of:\n\n- Having code in your script that no longer works because of changes you made, _but_\n- You fail to notice this because your R environment still reflects the old code.\n  \nOne typical cause of this situation is when you rename an object.\nThe more regularly you restart,\nthe less risk you run of getting into this situation and then having a really hard\ntime figuring out what changed.\n\n::: callout-tip\nIf it seems prohibitive to restart R regularly because there is so\nmuch code to rerun, and/or that code takes a long time to run,\nyou should consider splitting your script into different parts.\nSee the section \"Don't let your scripts get too long\" below.\n:::\n\nTo make sure that R starts in a fresh environment upon restarting,\nuse the following settings in RStudio (`Tools` > `Global Options`) --\nuncheck the the \"Restore ...\" box and set the other option to \"Never\":\n\n![_These settings will prevent R from reloading you environment upon restarting R._](img/restart-settings.png){fig-align=\"center\" width=\"45%\" .lightbox}\n\nTo actually restart R, click `Session` > `Restart R`:\n\n![_The Session menu has an option to restart R._](img/restart-r.png){fig-align=\"center\" width=\"25%\" .lightbox}\n\nPay attention to the keyboard shortcut that is shown there,\nand try to get used to using that!\n\n::: exercise\n#### Exercise: Restart R\n\n1. Make sure you have a couple of things in your R environment.\n\n2. Restart R -- test the keyboard shortcut.\n\n3. Check that your R environment is now empty.\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Put these things at the top of your script\n\n### A comment describing the function of your script\n\nFor example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Author: Jane Doe\n# Date: 2025-09-29, with edits on 2025-10-05\n# Project: ~/Documents/thesis/strawberry-experiment\n# Purpose: Create a figure to ... \n```\n:::\n\n\n\nIf you're using a Quarto document instead, most of this kind of information\nwill likely go into the YAML header.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Loading packages\n\nDon't load packages throughout your script,\nand certainly don't omit the code to load packages as explained above.\nInstead, load all packages at the top of the script -- for example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)   # Data wrangling and plotting (v 2.0.0)\nlibrary(patchwork)   # Creating multi-panel figures (v 1.3.2)\nlibrary(ggforce)     # For the facet_zoom() function (v 0.5.0)\nlibrary(janitor)     # Variable name cleaning (v 2.2.1)\nlibrary(here)        # Creating file paths (v 1.0.1)\n```\n:::\n\n\n\nThe above example also includes a brief explanation of what each package is used\nfor, and which version is (or should be / was) loaded.\n\n::: {.callout-tip collapse=\"true\"}\n### More about recording R package versions  _(Click to expand)_\n\n\n\n\n\n\n\nTo report package versions, you can also run the `sessionInfo()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.5.1 (2025-06-13)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.7\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.5.1    fastmap_1.2.0     cli_3.6.5        \n [5] tools_4.5.1       htmltools_0.5.8.1 rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.50        jsonlite_2.0.0    xfun_0.53        \n[13] digest_0.6.37     rlang_1.1.6       evaluate_1.0.4   \n```\n\n\n:::\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nIt is particularly convenient to include that code in a Quarto document --\nthere, you can put this function all the way at the end,\nso its output will be included in the rendered document.\nIn an R script, you could include the following to save the info to file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(capture.output(sessionInfo()), \"sessionInfo.txt\")\n```\n:::\n\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Settings\n\nIf your script has any key settings for your analysis,\nespecially ones you may want to change later on,\nyou should also include these at the top of your script. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# General settings\np_value <- 0.01\nlogfold_change <- 1\nsome_threshold <- 25\nremove_outliers <- TRUE\n\n# Plot settings\ntheme_set(theme_minimal(base_size = 13))\ntreatment_colors <- c(control = \"gray50\", mock = \"gray20\", inoculated = \"blue\")\n```\n:::\n\n\n\nThis may also include miscellaneous things like setting the random seed,\nwhich makes functions with random sampling reproducible:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the random seed for sampling with function rnorm()\nset.seed(1)\n```\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Defining input and output files\n\nIt's a good idea to define all of a script's input and output files using\nvariables at the top of the script -- for example:\n\n- Input files:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  # Define the input files\n  data_file <- \"data/strawberries.tsv\"\n  sampledata_file <- \"data/meta/samples.tsv\" \n  ```\n  :::\n\n\n\n- Output files:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  # Define and create the output dir\n  outdir <- \"results/plots\"\n  dir.create(outdir, showWarnings = FALSE, recursive = TRUE)\n  \n  # Define the output files\n  boxplot_file <- here(outdir, \"boxplot.png\")\n  scatterplot_file <- here(outdir, \"scatterplot.png\")\n  ```\n  :::\n\n\n\nThen, you would use these variables when reading and writing later on:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_tsv(data_file)\nggsave(boxplot_file)\n# Etc.\n```\n:::\n\n\n\n### Putting it together\n\nAll in all, the top section of your script may look something like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Author: Jane Doe\n# Date: 2025-09-29, with edits on 2025-10-05\n# Project: ~/Documents/thesis/strawberry-experiment\n# Purpose: Create a figure to ... \n\n# SETUP ------------------------------------------------------------------------\n# Load packages\nlibrary(tidyverse)   # (v 2.0.0)\nlibrary(patchwork)   # Creating multi-panel figures (v 1.3.2)\nlibrary(ggforce)     # For the facet_zoom() function (v 0.5.0)\nlibrary(janitor)     # Variable name cleaning (v 2.2.1)\nlibrary(here)        # Creating file paths (v 1.0.1)\n\n# General settings\np_value <- 0.01\nlogfold_change <- 1\nsome_threshold <- 25\nremove_outliers <- TRUE\n\n# Plot settings\ntheme_set(theme_minimal(base_size = 13))\ntreatment_colors <- c(control = \"gray50\", mock = \"gray20\", inoculated = \"blue\")\n\n# Define the input files\ndata_file <- \"data/strawberries.tsv\"\nsampledata_file <- \"data/meta/samples.tsv\" \n\n# Define and create the output dir\noutdir <- \"results/plots\"\ndir.create(outdir, showWarnings = FALSE, recursive = TRUE)\n  \n# Define the output files\nboxplot_file <- here(outdir, \"boxplot.png\")\nscatterplot_file <- here(outdir, \"scatterplot.png\")\n```\n:::\n\n\n\n::: exercise\n#### {{< fa user-edit >}} Exercise: Restructuring a script\n\nRestructure this script according to the recommendations above:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\ndata <- iris |>\n  clean_names()\nhead(data)\n\nlibrary(ggplot2)\ndata$sepal_length[1:10]\nggplot(data, aes(x = sepal_length, y = petal_length)) +\n  geom_point() #+\n  #geom_line()\nggsave(\"results/plots/plot.png\")\n\nlibrary(dplyr)\ndata_summary <- data |>\n  summarize(mean_sepal_length = mean(sepal_length), .by = species)\nlibrary(readr)\nwrite_tsv(data_summary, here(\"results/data_summary.tsv\"))\n```\n:::\n\n\n\n<details><summary>Click here for some pointers</summary>\n\n- Note that there are currently no comments or sections in the script\n- Do you think `head(data)` and a simmilar line should be in your final script?\n- The code currently assumes that the dir `results/plots` exists.\n- Could you load _ggplot2_, _dplyr_, and _readr_, with a single `library()` call?\n\n</details>\n\n<details><summary>Click here for a possible solution</summary>\n\nNote that in the suggestion below,\nI removed the `head(data)` and `data$sepal_length[1:10]` lines.\nThese are lines that aren't really a problem to keep in,\nbut unless they come with a clear directive, are a kind of clutter --\nyou are better of just typing these kinds of things directly in the Console.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# SETUP ------------------------------------------------------------------------\n# Load packages\nlibrary(janitor)    # To fix column names with clean_names() (version X)\nlibrary(tidyverse)  # Data summarizing, plotting, and writing (version X)\n\n# Make sure the output dir(s) exist\noutdir <- \"results/plots\"\ndir.create(outdir, showWarnings = FALSE, recursive = TRUE)\n\n# Define the output files\nplotfile <- \"results/plots/plot.png\"\ndata_summary_file <- \"results/data_summary.tsv\"\n\n# LOAD AND PREP THE DATA -------------------------------------------------------\ndata <- iris |>\n  clean_names()\n\n# VISUALIZE THE DATA -----------------------------------------------------------\nggplot(data, aes(x = sepal_length, y = petal_length)) +\n  geom_point()\nggsave(plotfile)\n\n# SUMMARIZE THE DATA -----------------------------------------------------------\ndata_summary <- data |>\n  summarize(mean_sepal_length = mean(sepal_length), .by = species)\nwrite_tsv(data_summary, data_summary_file))\n```\n:::\n\n\n\n</details>\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Don't let your scripts get too long\n\nYour scripts should not become too long or they will become very hard to understand\nand to manage.\nAnd if you are working with Quarto instead,\nthey will take a long time to render and are much more likely to fail while rendering.\nIt is much better to have relatively short, modular scripts,\neach with a clear purpose.\n\nIt hopefully seems like common sense to start a new script when you switch to an\nunrelated analysis that uses different data, even if this is within the same project.\nBut it is not always this easy.\n\n### Splitting \"continuous\" scripts\n\nAs an analysis expands and expands,\n**it is often most convenient to just keep adding things to the same script**.\nSuch as when:\n\n- All analyses work with the same data,\n  and the script first does extensive data processing for all analyses; or\n- Some or all analyses are not independent but more like a pipeline,\n  where the outputs of step A are used in step B, the outputs of step B\n  are used in step C, and so on.\n  \nHowever, also in such scenarios,\nit is a good idea to not let a single script get too long,\nand to start a new script sooner rather than later.\nTo do this in practice, you will need to write intermediate outputs to file,\nand load them in your next script.\n\nConsider an example where we do a whole bunch, perhaps hundreds of lines,\nof data prepping,\nand this data is then used by an big analysis and one or more plots.\nWhenever you work on on the plot, you find yourself rerunning the data prepping\ncode, and skipping the analysis code.\nPerhaps this can be split into three scripts:\n\n1. Data prep\n2. Data analysis\n3. Data visualization\n\nIn practice, in much abbreviated form, this could look something like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Shared data prep\ndata_prepped <- data |>\n  filter(...) |>\n  mutate(...) |>\n  select(...)\n\n# Analysis\nlm(..., data_prepped)\n\n# Plot\ndata_prepped |>\n  ggplot(...)\n```\n:::\n\n\n\nWhich can be split as follows:\n\n- Script 1 -- Data prep:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  data_prepped <- data |>\n    filter(...) |>\n    mutate(...) |>\n    select(...)\n  write_tsv(data_prepped, \"<data-prepped-file>\")\n  ```\n  :::\n\n\n\n- Script 2 -- Data analysis:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  data_prepped <- read_tsv(\"<data-prepped-file>\")\n   \n  lm(..., data_prepped)\n  ```\n  :::\n\n\n  \n- Script 3 -- Data visualization:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  data_prepped <- read_tsv(\"<data-prepped-file>\")\n   \n  data_prepped |>\n    ggplot(...)\n  ```\n  :::\n\n\n\nAs you can see, this does mean you need more code in total.\nBut in the long run, having smaller scripts is often worth it!\n\n::: callout-note\n### Have more complicated objects?\n\nIf your intermediate output includes more complex R objects that are not easily\nsaved to TSV/CSV and similar files,\nyou can use a pair of functions to save and load R objects \"as is\".\nFor example:\n\n- Saving the object to file:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  saveRDS(some_complicated_object, \"object.RDS\")\n  ```\n  :::\n\n\n\n- Loading the object from file:\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  some_complicated_object <- readRDS(\"object.RDS\")\n  ```\n  :::\n\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Don't repeat yourself (DRY)\n\nIf you find yourself...\n\n- Copying and pasting large chunks of code only to make minor\n  edits to the pasted code, or\n- Using the abovementioned strategy where you run the code in your script multiple\n  times after changing a setting or input file\n\n...then you may want to learn about techniques that can help you avoid repeating yourself.\nOne of the best ways of doing so is to write your own functions,\nand then iterate with \"functional programming\" functions (`map()`, `apply`-family, etc)\nor loops to elegantly run these functions multiple times.\n\nHow to do this in practice in beyond the scope of this session,\nbut we do have a previous [series of Code Club sessions about this](/pages/previous.html#spring-22).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "ea07bdfc5bce7b56476c123e3a54ef1c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plotting 1: Intro to ggplot2\"\nauthor:\n  - \"Jelmer Poelstra\"\n  - \"Michael Broe\"\ndate: \"2024-03-29\"\ncategories: [plotting, ggplot2]\ntitle-block-banner: false\nnumber-depth: 3\nimage: img/featured.jpg\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\n    fig.align: 'center'\neditor: source\neditor_options: \n  chunk_output_type: console\n---\n\n\n------------------------------------------------------------------------\n\n<br>\n\n![](img/featured.jpg){fig-align=\"center\" width=\"80%\"}\n\n<br>\n\n## Introduction\n\nIn this Code Club semester, we started with 5 sessions on R basics,\nfollowed by 5 sessions on tidyverse data wrangling basics.\nThis session will be the first several on data visualization:\ncreating plots with the ggplot2 package.\n\n#### Session Goals\n\n- Learn the philosophy of **coding** a graphic.\n- Learn the basic **template** of a **ggplot** graphic,\n  so you can reuse it for multiple chart types.\n- Learn how you can quickly add visual information to a graphic using\n  **aesthetics** and **layers**.\n\n<br>\n\n## The ggplot philosophy\n\nWe have seen that in R,\ninstead of manually manipulating data with a mouse as you do when editing Excel spreadsheets,\nwe **code** the operations we want to perform, e.g. using dplyr verbs like `select()`.\nIn a similar way, when performing visualization,\ninstead of clicking on a chart type, we **code the chart** in R.\n\nAnd just as `dplyr` gives us efficient ways to manipulate data frames,\n**`ggplot2`** (which is also part of the tidyverse) gives us efficient ways\nto manipulate charts/plots/graphics^[We use these terms interchangeably.].\nThe **gg** in **gg**plot2 stands for *grammar of graphics*, a systematic\napproach for designing statistical plots.\nThe idea is to 'pull apart' various plots into their component pieces,\nwhich leads to the idea of **layers**.\n\nThere's a learning curve to such a systematic approach, but there are many advantages:\n\n- First, *every* graphic shares a **common template**.\n  Once you understand this structure you can \"say\" a lot of different things. The\n  [ggplot cheat sheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf)\n  lists over 40 plot-types, but because ggplot is somewhat of a language in its own right,\n  users can create their own\n  [extensions](https://exts.ggplot2.tidyverse.org/gallery/)\n  that you can also utilize, adding many more.\n\n- Second, because plots are built up using **layers**,\n  you can gradually build up a graphic of increasing complexity;\n  or on the other hand, take someone else's code and simplify it by deleting layers.\n  We add layers with `+` very similar to how we've been piping operations with `|>`.\n  \n- Third, and this is a more general point that applies to a lot of R code:\n  because the graphic is now a piece of code, it is **reusable**.\n  Once you have a little library of graphs you've made, you can tweak them in various ways to make more.\n  You can also share your code with others, so they can apply the same approach to their data.\n\n<br>\n\n## Our data set\n\n![Illustration by [Allison Horst](https://allisonhorst.github.io/palmerpenguins/articles/art.html)](img/palmerpenguins_hex.png){width=50%}\n\nWe are going to use a fun 🐧 data set from the package\n[`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/).\nWe'll have to install that package first:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\n[`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/index.html) is a\npackage developed by Allison Horst, Alison Hill and Kristen Gorman,\nincluding a data set collected by Dr. Kristen Gorman at the Palmer Station Antarctica,\nas part of the Long Term Ecological Research Network. \nIt is a nice, relatively simple data set to practice data exploration and visualization in R.\n\nWe'll now load the package, along with the tidyverse (which includes ggplot2):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\nOnce you've loaded that package you will have a data frame called `penguins` at\nyour disposal --- let's take a look:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n:::\n\n\n<br>\n\n## A first ggplot2 example\n\nWhat is the correlation between bill-length and bill-width in these penguin species?\nAre longer bills also deeper? We can explore this with a **scatterplot**.\n\n![](img/culmen_depth.png){fig-align=\"center\" width=70%}\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n#### A first plot attempt\n\nThe first thing that ggplot2 plot needs from you is a data frame ---\njust like the rest of the tidyverse, ggplot2 is oriented towards data frames.\nSpecifically, the first argument to the `ggplot()` function is a data frame:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nThis is not very interesting! But it's notable that it is *something*.\n`ggplot()` has created a base plot layer.\n\n::: callout-important\n#### While the name of the *package* is **ggplot2**, the name of the *function* is just `ggplot()`.\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n#### Our first complete plot\n\nOur initial plotting code was correct but incomplete. Next, we need to specify:\n\n- The **plot type** we want using one of many **\"geom\"** functions --- \n  e.g., the geom for a scatterplot is `geom_point()`.\n\n- Which columns in our data frame to plot in which ways, such along the x and y axes.\n  In ggplot-speak, we are **mapping variables to aesthetics**,\n  with the _aesthetics_ being things like x and y coordinates as well shape and color.\n\nWe can add both these pieces of information in a single additional layer.\nThe operator to **add a layer** is **`+`**,\nwhich is the `ggplot` equivalent of the pipe symbol (`|>`),\nand best practice is to place it at the end of the line, just like the pipe. \nHere then is our complete first plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm, y = bill_depth_mm))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nTo recap, the three required ggplot elements that we used are:\n\n- The **data**: here `penguins`\n- One or more **geoms**: here `geom_point()`\n- One or more **aesthetic mappings**: here `x = bill_length_mm, y = bill_depth_mm`\n\nAlso, note that we provided three pieces of information from our data ---\na data frame and two column names.\nAfter telling ggplot to use the `penguins` data frame,\nwe can refer to columns in this data frame using their unquoted names.\n\n::: callout-warning\n#### The ggplot warning above\nggplot warned us that 2 rows were removed because they\n\"containing missing values or values outside the scale range\":\n\n- \"_Missing values_\": If this were the case,\n  there must be `NA`s in the bill length and/or bill depth columns.\n\n- \"_Outside the scale range_\": This could happen if we manually set a \"scale range\",\n  e.g. restricting axis limits so some of the data can't be plotted.\n  We didn't do this and ggplot wouldn't automatically do it, so this doesn't apply.\n\nSo, there are probably `NA`s --- let's look for those, starting with the bill length column:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> filter(is.na(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.styled-output}\n# A tibble: 2 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen             NA            NA                NA          NA\n2 Gentoo  Biscoe                NA            NA                NA          NA\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\nWe indeed get two rows, with `NA`s for all measurement,\nso those must have been the two rows ggplot was complaining about.\n:::\n\nAs for the **relationship between bill length and bill depth** ---\nthis is not very clear, but I guess if you squint your eyes,\nyou can see local positive correlations?\nWe'll explore this relationship in more detail below.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n<details><summary>\nEach point in the plot has a bill length and an associated bill depth.\n**How does ggplot know which bill lengths to associate with which bill depths?**\n_(Click for the answer)_</summary>\n<hr style=\"height:1pt; visibility:hidden;\" />\nEach point comes from one row in the data frame:\nso ggplot assumes that the the bill length and bill depth\n_given in one row derive from the same observation_ (here: the same penguin).\n\nAs such, to work with ggplot, your data frame needs to be in a \"tidy\" format\n(see our [Code Club from a couple weeks ago](../S07E09_tidy_04/index.qmd)).\nIf you find yourself struggling to appropriately assign aesthetic mappings,\nyou may have to pivot your data first, most often with a `pivot_longer()`.\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 1\n\nCreate a scatterplot comparing body mass and flipper length.\nDoes it look like there is any correlation there?\n\n<details><summary>Hints (click here)</summary>\nTake another look at the `penguins` data frame to see which columns contain \nbody mass and flipper length.\nIt's up to you which you assign to the x axis and the y axis.\n</details>\n\n<details><summary>Solution (click here)</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = body_mass_g, y = flipper_length_mm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n\n:::\n\n<br>\n\n## The power of aesthetics\n\nWe saw above that the relationship between bill length and bill depth is not\nparticularly clear, but that there *might* be some local patterns.\nIs it possible that these clusters correspond somehow to the three different penguin species:\nAdelie, Chinstrap, and Gentoo?\nThat is, part of the problem with our original plot may be that we lumped the data\nfrom all three species together.\n\nWe can explore this by **adding a third aesthetic**, `color`.\nOur current plot maps `bill_length_mm` to the `x` aesthetic,\nand `bill_depth_mm` to the `y` aesthetic ---\nnow, we'll add a mapping of `species` to the `color` aesthetic:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nNote that a legend is added automatically!\nIt's much clearer now that, within each species, there does seem to be a positive\ncorrelation between bill length and depth.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 2\n\n- Go back to your body mass/flipper plot from Exercise 1 and color points by species.\n\n- There are various aesthetics you can use for a categorical variable like species\n  (see the help for `geom_point()` --- type `?geom_point` to open the help page).\n  One of these aesthetics is `shape`: try this instead of `color` and see which you prefer.\n\n<details><summary>Solutions (click here)</summary>\n\n- Color point by species:\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  ggplot(data = penguins) +\n    geom_point(mapping = aes(x = body_mass_g,\n                             y = flipper_length_mm,\n                             color = species))\n  ```\n  \n  ::: {.cell-output-display}\n  ![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=85%}\n  :::\n  :::\n\n\n- Try the `shape` aesthetic instead of `color`:\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  ggplot(data = penguins) +\n    geom_point(mapping = aes(x = body_mass_g,\n                             y = flipper_length_mm,\n                             shape = species))\n  ```\n  \n  ::: {.cell-output-display}\n  ![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=85%}\n  :::\n  :::\n\n</details>\n\n:::\n\n<br>\n\n## Syntax variants\n\n#### Omit the argument names\n\nSo far, we've been using verbose syntax for clarity, but we can shorten this a bit:\ninstead of...\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = body_mass_g, y = flipper_length_mm))\n```\n:::\n\n\n...we can omit the names of the arguments:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, y = flipper_length_mm))\n```\n:::\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n#### Pipe data into ggplot\n\nYou might also prefer to pipe the data frame into ggplot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm))\n```\n:::\n\n\nThe above example _adds_ a line of code to say the same thing,\nbut you might prefer this as it makes abundantly clear what your input data is.\nThis style especially makes sense when you edit a dataframe prior to plotting it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Make a plot only for the Adelie Penguin:\npenguins |>\n  filter(species == \"Adelie\") |> \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: callout-warning\n#### When you pipe data into ggplot, remember to switch between `|>` and `+`!\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n#### Local vs. global aesthetics\n\nSo far, we've provided our aesthetic mappings (`aes(...)`) inside the geom function.\nHowever, it is also possible to do this inside the initial `ggplot()` function call.\nCompare these two:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Provide the aesthetic mappings inside geom_point():\npenguins |> \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm))\n\n# Provide the aesthetic mappings inside ggplot():\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point()\n```\n:::\n\n\nIn the above example, those two variants are _functionally equivalent_.\nHowever, it is possible to add **multiple geoms** in ggplot ---\nand once you do that, the following becomes important:\n\n- Mappings provided to a specific geom are \"**local**\": they do not carry over to other geoms.\n- Mappings provided to `ggplot()` are \"**global**\": they apply to all geoms in the plot.\n\nTherefore, if you have multiple geoms,\nit most often makes sense to put the aesthetics inside `ggplot()`,\nbut there are exceptions ---\nand it is also possible to specify aesthetics in multiple places.\nMore about this in the next section.\n\n<br>\n\n## Adding geoms, and `geom_smooth()`\n\nIn the scatterplot for bill length vs. depth, there wasn't a clear _overall_\n(across-species) relationship.\nWe can make this even more visually apparent by fitting a line to the data ---\n**overlaying another geom** in the same plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `geom_smooth()`:\n! Problem while computing stat.\nℹ Error occurred in the 2nd layer.\nCaused by error in `compute_layer()`:\n! `stat_smooth()` requires the following missing aesthetics: x and y.\n```\n\n\n:::\n:::\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n<details><summary>Uh oh! What went wrong here? Can you think of two different ways to solve this? _(Click for the answer)_</summary>\n\nBecause we provided **local** aesthetics to `geom_point()` only,\n`geom_smooth()` has not been informed about any aesthetics, as the error message suggests.\nWe can resolve this either by:\n\n- Providing the same local aesthetics to both geom functions.\n- Providing global aesthetics (i.e. to the `ggplot()` function). This is the better option.\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nIn our next attempt, we'll provide the aesthetics globally,\nthat is, we specify them inside the `ggplot()` function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n::: callout-warning\n#### Fitted lines\nBy default, the `geom_smooth()` function doesn't use classical linear regression\nto fit the data.\nInstead it uses **lo**cally **e**stimated **s**catterplot **s**moothing:\n[loess](https://en.m.wikipedia.org/wiki/Local_regression).\nThe resulting lines snake around and trying to find local best fits to the data.\nYou can request different fit algorithms with the `geom_smooth()`'s `method` argument.\nSee `?geom_smooth` for details.\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n#### {{< fa user-edit >}} Exercise 3\n\n**A)** Revisit your flipper/body_mass plot once again, and fit lines to each species. \n\n<details><summary>Solution (click here)</summary>\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n\n-----\n\n**B)** Perhaps you think there is too much going on in this plot,\nwith the scatterplot data making the fitted line less clear.\nModify your plot so it just shows the fitted line and not the points.\n\n<details><summary>Solution (click here)</summary>\n\nThis is as easy a removing the `geom_point()` line:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n\n-----\n\n**C) (Bonus)**\n\n1. Pipe your dataset into `filter()` to keep only the `Gentoo` data.\n2. Pipe that data into `ggplot()` to create a scatterplot with a smoothed-line overlay\n   for just that one species, colored by `sex`.\n3. In a next attempt, can you get rid of the points for which the sex is unknown (`NA`)?\n\n<details><summary>Solution (click here)</summary>\n\n1. and 2.:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Gentoo\") |>\n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = sex)) +\n  geom_point() + \n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n3. --- we add `!is.na(sex)` to the `filter()` call to remove penguins with unknown sex:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Gentoo\", !is.na(sex)) |>\n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = sex)) +\n  geom_point() + \n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n\n-----\n\n**D) (Bonus)** Modify your previous Gentoo penguin plot such that:\n\n- You have a single fitted line for penguins of both sexes\n- Points are still colored by sex\n\n<details><summary>Solution (click here)</summary>\nThis will require you to some aesthetics _globally_ (`x` and `y`) and the `color`\naesthetic _locally_, just for `geom_point()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Gentoo\", !is.na(sex)) |>\n  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +\n  geom_point(aes(color = sex)) + \n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=85%}\n:::\n:::\n\n</details>\n:::\n\n<br>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
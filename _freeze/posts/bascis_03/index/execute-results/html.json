{
  "hash": "cc9fd3b2dee780e61d19c604b52a10ef",
  "result": {
    "markdown": "---\ntitle: \"R Basics 3: Built-in functions, Vectors, and Help\"\nauthor: \"Horacio Lopez-Nicora\"\ndate: \"2024-01-26\"\ncategories: [r-basics]\ntitle-block-banner: false\nnumber-depth: 3\nimage: img/R2D2.png\n---\n\n\n------------------------------------------------------------------------\n\n<br>\n\n## Introduction\n\n#### **Recap of last week**\n\nLast week, we did a little more basic interaction with R (missing prompts and data types), we wrote code in R scripts (and added comments to our code), and used and named R objects.\n\nHere are some additional tips from our previous session: Go to <kbd>Tools</kbd> and then <kbd>Keyboard Shortcuts Help</kbd>. Identify useful keyboard shortcuts and use them during today's session.\n\n#### **Learning objectives for today**\n\n-   **Built-in Functions**\n\n-   **Vectors in R**\n\n-   **Getting Help with R**\n\n<br>\n\n## Types of Functions in R\n\nFunctions are the foundation of almost everything in R. In programming, they are sets of organized instructions designed to perform specific tasks. The purpose of functions is to create self-contained programs that can be called upon as needed.\n\n[![Fig. 1. Types of Functions in R](img/Types_of_Functions.png){fig-alt=\"Types of Functions in R\" fig-align=\"center\"}](https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.codingninjas.com%2Fstudio%2Flibrary%2Fwhat-are-the-functions-in-r&psig=AOvVaw1EyYcYzGf65a8LlRDmR8UO&ust=1706296144697000&source=images&cd=vfe&opi=89978449&ved=0CBMQjRxqGAoTCKjXn9Ke-YMDFQAAAAAdAAAAABCDAg)\n\n### What's in a function?\n\nWhat exactly is a function? Let's recall from our math knowledge:\n\n[![Fig. 2. Function Rules](img/function-rules.png){fig-alt=\"Function Rules\" fig-align=\"center\"}](https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.basic-mathematics.com%2Fimages%2Ffunction-rules.png&tbnid=_J3drvXZ3dYIPM&vet=12ahUKEwjZy_j4yfmDAxUQyMkDHdknD40QMygFegQIARBi..i&imgrefurl=https%3A%2F%2Fwww.basic-mathematics.com%2Fwrite-a-function-rule.html&docid=Sv_R0La-1wD7kM&w=395&h=278&q=example%20function%20in%20R%20rule&client=safari&ved=2ahUKEwjZy_j4yfmDAxUQyMkDHdknD40QMygFegQIARBi)\n\nA function in R is a collection of statements that can be reused in a program. This is the syntax of ***defining*** a function in R:\n\n[![Fig. 3. R Function Syntax](img/r-function-syntax.png){fig-alt=\"R Function Syntax\" fig-align=\"center\"}](https://www.learnbyexample.org/r-functions/)\n\n<details>\n\n<summary><b>Which function was covered during our first session of Code Club?</b> (Click for the answer)</summary>\n\nDuring our first session of Code Club, we examined the `setwd` function.\n\n</details>\n\n### Types of built-in functions in R?\n\nBuilt-in functions, which are already created or defined in the programming framework, are referred to as built-in functions. R offers a comprehensive collection of functions that can effectively handle almost any task for the user. These built-in functions are categorized based on their functionality as follows.\n\n[![Fig. 4. Types of built-in functions in R](img/r-built-in-functions.png){fig-alt=\"Types of built-in functions in R\" fig-align=\"center\"}](https://www.javatpoint.com/r-built-in-functions)\n\n::: callout-important\n## Before we begin examining various functions\n\nPlease refer to:\n\n-   [The R Base Package](https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.html#A)\n\n-   [Base R Cheat Sheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf)\n:::\n\n<br>\n\n#### **Math functions**\n\nA numeric function in R is defined as a function that can accept either a set of numeric values or a numeric vector (see below) as an input argument to carry out specific tasks. Here are several frequently used numeric functions in R programming.\n\n+----------------------------------------------+------------------------------------------------------+\n| **Function**                                 | **Description**                                      |\n+----------------------------------------------+------------------------------------------------------+\n| **abs(***x***)**                             | absolute value                                       |\n+----------------------------------------------+------------------------------------------------------+\n| **sqrt(***x***)**                            | square root                                          |\n+----------------------------------------------+------------------------------------------------------+\n| **ceiling(***x***)**                         | ceiling(3.475) is 4                                  |\n+----------------------------------------------+------------------------------------------------------+\n| **floor(***x***)**                           | floor(3.475) is 3                                    |\n+----------------------------------------------+------------------------------------------------------+\n| **trunc(***x***)**                           | trunc(5.99) is 5                                     |\n+----------------------------------------------+------------------------------------------------------+\n| **round(***x* **, digits=** *n***)**         | round(3.475, digits=2) is 3.48                       |\n+----------------------------------------------+------------------------------------------------------+\n| **signif(***x* **, digits=** *n***)**        | signif(3.475, digits=2) is 3.5                       |\n+----------------------------------------------+------------------------------------------------------+\n| **cos(***x***), sin(***x***), tan(***x***)** | also asin(x), acos(*x*), cosh(*x*), acosh(*x*), etc. |\n+----------------------------------------------+------------------------------------------------------+\n| **log(***x***)**                             | natural logarithm                                    |\n+----------------------------------------------+------------------------------------------------------+\n| **log10(***x***)**                           | common logarithm                                     |\n+----------------------------------------------+------------------------------------------------------+\n| **exp(***x***)**                             | e\\^*x*                                               |\n+----------------------------------------------+------------------------------------------------------+\n\n#### **Exercises 1**\n\nA\\) Let's explore one function in particular: `sum`\n\nLast week we used R as a calculator. Add 5 and 7 the way we did last week and then try using the built-in function `sum`.\n\nUsing R as a calculator to add 5 and 7:\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\n\n</details>\n\nUsing the `sum` built-in function in R, add 5 and 7:\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(5, 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\n\n</details>\n\nB\\) Now, let's combine functions by adding 3, 7, 9, and 11. After that, we will multiply the sum by 3. Lastly, we will calculate the square root of this result and round it to the nearest whole number.\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(sqrt(sum(3, 7, 9, 11)*3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n</details>\n\nC\\) Below is a very common example in my data analysis.\n\n<details>\n\n<summary><b>In the field of Plant Pathology, data such as disease incidence or severity is typically collected as a percentage or proportion. To prepare the data for analysis, it is common to apply a data transformation known as the `arc-sine square root`. You have gathered disease severity data from three plots: 0.75 (control), 0.70 (Trt 1), and 0.30 (Trt 2). Apply the transformation mentioned above to your data for analysis. </b> (Click for the answer)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nControl <- 0.75\nTrt1 <- 0.70\nTrt2 <- 0.30\n\nasin(sqrt(Control))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.047198\n```\n:::\n\n```{.r .cell-code}\nasin(sqrt(Trt1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9911566\n```\n:::\n\n```{.r .cell-code}\nasin(sqrt(Trt2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5796397\n```\n:::\n:::\n\n\n</details>\n\n#### **Statistical probability functions**\n\nThe table below provides descriptions of functions pertaining to probability distributions.\n\n+-------------------------------+---------------------------------------------------+\n| **Function**                  | **Description**                                   |\n+-------------------------------+---------------------------------------------------+\n| **dnorm(***x***)**            | normal density function (by default m=0 sd=1)     |\n+-------------------------------+---------------------------------------------------+\n| **pnorm(***q***)**            | cumulative normal probability for q\\              |\n|                               | (area under the normal curve to the left of q)\\   |\n|                               | pnorm(1.96) is 0.975                              |\n+-------------------------------+---------------------------------------------------+\n| **qnorm(***p***)**            | normal quantile. \\                                |\n|                               | value at the p percentile of normal distribution\\ |\n|                               | qnorm(.9) is 1.28 \\# 90th percentile              |\n+-------------------------------+---------------------------------------------------+\n| **rnorm(***n***, m=0, sd=1)** | n random normal deviates with mean m\\             |\n|                               | and standard deviation sd.                        |\n+-------------------------------+---------------------------------------------------+\n\nLet's generate 10 random normal variates with mean=50, sd=10.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(10, m=50, sd=10)\nround(x) # Rounding to the nearest whole number. \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 43 48 52 64 58 53 48 39 49 53\n```\n:::\n:::\n\n\nNow let's do the same thing, but call it `y` .\n\n::: callout-tip\n## Did you get the same result?\n\nTo ensure reproducibility of pseudo-random numbers for the random number generators listed, you can utilize set.seed(1234) or any other integer.\n:::\n\n<details>\n\n<summary><b>Example</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nx <- round(rnorm(10, m=50, sd=10))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 38 53 61 27 54 55 44 45 44 41\n```\n:::\n:::\n\n\n</details>\n\n#### **Other statistical and useful functions**\n\nOther useful statistical functions are provided in the following table.\n\n+-------------------------------------------+------------------------------+\n| **Function**                              | **Description**              |\n+-------------------------------------------+------------------------------+\n| **seq(***from* **,** *to* **,** *by***)** | generate a sequence\\         |\n|                                           | indices \\<- seq(1,10,2)\\     |\n|                                           | #indices is c(1, 3, 5, 7, 9) |\n+-------------------------------------------+------------------------------+\n| **rep(***x* **,** *ntimes***)**           | repeat *x* *n* times\\        |\n|                                           | y \\<- rep(1:3, 2)\\           |\n|                                           | \\# y is c(1, 2, 3, 1, 2, 3)  |\n+-------------------------------------------+------------------------------+\n\nEach has the option `na.rm` to strip missing values before calculations. Otherwise the presence of missing values will lead to a missing result.\n\n+-----------------------------------+----------------------------------+\n| **mean(***x* **, trim=***0***,**\\ | mean of object x                 |\n| **na.rm=** FALSE **)**            |                                  |\n+-----------------------------------+----------------------------------+\n| **sd(***x***)**                   | standard deviation of object(x). |\n+-----------------------------------+----------------------------------+\n| **median(***x***)**               | median                           |\n+-----------------------------------+----------------------------------+\n| **range(***x***)**                | range                            |\n+-----------------------------------+----------------------------------+\n| **sum(***x***)**                  | sum                              |\n+-----------------------------------+----------------------------------+\n| **min(***x***)**                  | minimum                          |\n+-----------------------------------+----------------------------------+\n| **max(***x***)**                  | maximum                          |\n+-----------------------------------+----------------------------------+\n\n::: callout-important\n## *Nota bene*\n\nObject can be a numeric vector or data frame.\n:::\n\n#### **Exercises 2**\n\nA\\) Let's explore the following functions together using the group of numbers: 5, 7, 3, and 9 (in this order). These functions include: `sum`, `min`, `max`, and `range`\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(5, 7, 3, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n\n```{.r .cell-code}\nmin(5, 7, 3, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nmax(5, 7, 3, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nrange(5, 7, 3, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 9\n```\n:::\n:::\n\n\n</details>\n\nB\\) Let's now get the average, standard deviation, and sort these numbers using `mean`, `sd`, and `sort`.\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(5, 7, 3, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nsd(5, 7, 3, 9)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in sd(5, 7, 3, 9): unused arguments (3, 9)\n```\n:::\n\n```{.r .cell-code}\nsort(5, 7, 3, 9)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in sort(5, 7, 3, 9): 'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?\n```\n:::\n:::\n\n\n</details>\n\n<br>\n\n## Vectors in R\n\nDepending on the type of data that one needs to store in R, different data structures can be used. The four most commonly used data structures in R are vectors, lists, matrices, and data frames. In this session, we will only be working with vectors.\n\nThe fundamental data structure in R is vectors, which are 1-dimensional data structures that can only contain one type of data (e.g., all entries must have the same mode). To create a vector in R, the **function** `c()` (concatenate or combine) is used, as shown below.\n\nLet's create a vector named \"my_vector\" with 5 entries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_vector <- c(10, 30, 50, 20, 40)\nmy_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 30 50 20 40\n```\n:::\n:::\n\n\nThe output generated on the previous `code chunk` displays the entries in your vector, with the 1 in squared brackets indicating the position of the entry to its right in the vector. In this case, 10 is the first entry of the vector.\n\nIf, for any reason, we only wish to extract the value 50 from this vector, we can utilize our knowledge of it being in the third position to do so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_vector[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50\n```\n:::\n:::\n\n\nSince a vector can only contain one data type, all its members need to be of the same type. If you attempt to combine data of different types into a vector, R will not provide a warning, but rather **coerce** it to the most flexible type. (The order of flexibility, from least to most, is: logical, integer, double, character). Therefore, if you add a number to a logical vector, the entire vector will be converted to a numeric vector.\n\nTo check what data type an object is, run the R built-in function `class()`, with the object as the only parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(my_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nIf you for any reason want to have more information about any object you have stored in your R session the command `str()` is very helpful.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(my_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:5] 10 30 50 20 40\n```\n:::\n:::\n\n\n#### **Exercises 3**\n\nA\\) Let's revisit `mean`, `sd`, `sort`, and other basic R operators.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(my_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n\n```{.r .cell-code}\nsd(my_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15.81139\n```\n:::\n\n```{.r .cell-code}\nsort(my_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 20 30 40 50\n```\n:::\n:::\n\n\nB\\) Add 7 to the my_vector, multiply 3 by my_vector, and check which values are greater than 25.\n\n<details>\n\n<summary><b>Solution</b> (click here)</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n7 + my_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17 37 57 27 47\n```\n:::\n\n```{.r .cell-code}\n3 * my_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  30  90 150  60 120\n```\n:::\n\n```{.r .cell-code}\n25 >= my_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE  TRUE FALSE\n```\n:::\n:::\n\n\n</details>\n\nC\\) Please create `another_vector` and add it to `my_vector`. Next, use the `sum` function to combine these vectors.\n\n<br>\n\n## Getting Help with R\n\nBefore seeking assistance from others, it is generally advisable for you to attempt to resolve the problem on your own. R provides comprehensive tools for accessing documentation and searching for help.\n\n### **R Help: `help()` and `?`**\n\nThe `help()` function and `?` help operator in R offer access to documentation pages for R functions, data sets, and other objects. They provide access to both packages in the standard R distribution and contributed packages.\n\n#### **Exercises 4**\n\nA\\) Can you obtain information about the type of R object that `mean()` and `sum()` functions take by using the `help()` or `?` functions?\n\n![](img/Help.png){fig-align=\"center\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "e1c1d8b042693b9bec69bb46439d80c3",
  "result": {
    "markdown": "---\ntitle: \"Reproducibility 3: More about Quarto\"\nauthor:\n  - \"Jessica Cooperstone\"\ndate: \"2024-10-28\"\ncategories: [reproducibility, quarto]\ntitle-block-banner: false\nimage: img/Quarto.png\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\n    fig.align: 'center'\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n------------------------------------------------------------------------\n\n# A recap\n\nLast week we introduced Quarto, and using Quarto within RStudio. Next week, we will go over how to push our Quarto document to Github.\n\n![Artwork by [\\@allison_horst](https://twitter.com/allison_horst)](img/quarto-gazing.png)\n\nOpen up the `.Rproj` you are using for Code Club. We can open up a new Quarto document by going to `File` \\> `New File` \\> `Quarto Document`.\n\n# Add to our `.qmd`\n\nLet's add some material to our document so we can better see what our resulting documents will look like. This will also give us an opportunity to practice some of what we've been going over in Code Club this semester.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nNow that we can a Quarto document open, we can learn more about the components of the document, do more things with Quarto, and customize our output.\n\nRemember, there are three parts of a Quarto document:\n\n-   The YAML (rhymes with camel) header\n-   Text\n-   Code\n\n# YAML\n\nHoracio talked last week about the YAML. The YAML is where you can set the content that will show up on the top of your knitted document, as well as control how your document is rendered.\n\nThe YAML is surrounded by three dashes `---`.\n\nHere's a simple example:\n\n``` yaml\n---\ntitle: \"This is my descriptive title\"\nauthor: \"Jessica Cooperstone\"\ndate: \"October 28, 2024\"\nformat: html\neditor: visual \n---\n```\n\nBut we can make some changes to our YAML that will adjust how our resulting report looks.\n\n``` yaml\n---\ntitle: \"My document\"\nformat:\n  html: # set parameters under the html category\n    toc: true # add a table of contents\n    number_sections: true # incremental numbering of sections\n    \n---\n```\n\n## Rendering to other formats\n\nWe've been practicing by rendering to a `.html`file, but you can render your `.qmd` document to other formats, including PDFs, Microsoft Word, Markdown, and a special one that we will talk about in the coming weeks called Github (or Github Flavored Markdown (GFM)). [Here](https://github.com/CooperstoneLab/tomato-liver-omics/blob/main/metabolomics/Dzakovich_MouseLiverMetabolomics_20221211_githubdoc.md) is an example of what some code that comes from my team that you push to Github could look like, and could serve as supplementary material for a paper, for example.\n\n## Themes\n\nYou can also change the theming of your document to make it look very pretty. Quarto comes with some complete themes, which we can look at here with [Bootswatch](https://bootswatch.com/). You can see the full list of complete themes [here](https://quarto.org/docs/output-formats/html-themes.html).\n\nThis website for example, uses the theme `flatly` (and `darkly` if you are a dark mode afficionado). The Quarto website uses the theme `cosmo`.\n\nYou can set your theme in your YAML like this:\n\n``` yaml\n---\ntitle: \"My document\"\nformat:\n  html: # set parameters under the html category\n    theme: litera\n---\n```\n\n## Practice\n\n1.  Try adding a theme to your `.qmd`\n2.  Add a new parameter to your YAML - you can pick one from [here](https://quarto.org/docs/reference/formats/html.html) and see how that goes.\n\n# Text\n\nUnlike an R script (`.R`), where R by default interprets anything as code (and material that isn't code needed to be commented out by using `#`), in an Quarto, the *default is text* (and code exists only within code chunks or backticks).\n\nThe text portion of the document is written in a language called [Markdown](https://pandoc.org/MANUAL.html#pandocs-markdown). The philosophy of Markdown is that it is easy to both write and read. If you want to learn more about markup languages I'd recommend the this [brief explanation by Michael Broe from a past Code Club Session](https://biodash.github.io/codeclub/s02e03_rmarkdown/#i-markdown) and the [Markup language wikipedia page](https://en.m.wikipedia.org/wiki/Markup_language).\n\nBelow I'm compiling some commonly used markdown syntax.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Figure from [R Markdown Reference Guide](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf?_ga=2.18808953.1342527773.1652110638-1577376121.1638478125)](img/syntax.png){fig-align='center' fig-alt='A list of the commonly used markdown syntax.' width=120%}\n:::\n:::\n\n\n# Code\n\nLike Horacio taught us last week, Code chunks are sections of your Quarto document designated for executing code. To insert a new code chunk, you can:\n\n1.  Use the keyboard shortcut `Cmd` + `Option` + `I` (Mac) or `Ctrl` + `Alt` + `I` (Windows).\n2.  Type ```` ```{r} ```` to start the chunk and ```` ``` ```` to end it, placing your code in between.\n3.  Use the \"Add Chunk\" command from the editor toolbar and select R.\n\nCode chunks appear as follows:\n\n![](img/chunk_screenshot.png){fig-align=\"center\"}\n\nYou place your code on the empty line within the chunk. You can include multiple lines of code in a single chunk; however, if you find yourself needing to scroll through the chunk, it might be too lengthy.\n\n-   The gear icon allows you to modify chunk options, which we will discuss in more detail later.\n-   The triangle with a line below it executes all code chunks that precede the current one.\n-   The play button runs the current chunk.\n\n::: callout-warning\nWhen you render your Quarto document, the process will execute all the code within it. This means that if your code contains errors or doesn't function properly, your document **will not be rendered**.\n:::\n\n## Code chunk options\n\nWe can set different options for our code chunks to adjust if/how they are run. Here are some that we can set.\n\n-   `echo: FALSE` runs your code chunk, displays output, but does not display code in your final doc (this is useful if you want to show a figure but not the code used to create it)\n-   `eval: FALSE` does not run your code, but does display it in your final doc\n-   `include: FALSE` runs your code but does not display the code or its output in your final doc\n-   `message: FALSE` prevents messages from showing up in your final doc\n-   `warning: FALSE` prevents earnings from showing up in your final doc\n-   `fig.height: X` and `fig.width: Y` will allow you to specify the dimensions of your figures (in inches)\n-   `fig.align:` can be set to \"left\", \"right\", or \"center\"\n-   `fig.cap: \"Your figure caption\"` will allow you to set a figure caption\n-   `fig.alt: \"Your alt text\"` will allow you to set alt text for screen readers\n-   `cache: TRUE` will cache results, meaning if you have a chunk that takes a long time to run, if you haven't changed anything and you knit again, the code won't run again but access the cache.\n\nYou can find a long list of code chunk options [here](https://quarto.org/docs/reference/cells/cells-knitr.html#code-output).\n\nWe can set the code chunk options by using the syntax `|#` within the chunk, like this:\n\n``` R\n{r}\n#| echo: TRUE \n#| warning: FALSE\n```\n\nThe options can be very useful to get your document to render exactly how you want it.\n\n## Practice\n\n1. Try adjusting your code chunk options and see how that affects the rendering of your document.\n2. Notice what gets printed after you load the tidyverse with `library(tidyverse)` - can you get that to go away?",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "c651eb46a06d379d0b23f04152703b7d",
  "result": {
    "markdown": "---\ntitle: \"Reproducibility 2: Introduction to Quarto\"\nauthor:\n  - \"Horacio Lopez-Nicora\"\ndate: \"2024-10-21\"\ncategories: [reproducibility, quarto]\ntitle-block-banner: false\nimage: img/Quarto.png\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\n    fig.align: 'center'\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n------------------------------------------------------------------------\n\n# Introduction\n\nQuarto is an open-source scientific and technical publishing system supporting multiple programming languages. It allows seamless integration of code, outputs, and narrative in a single document.\n\nQuarto documents include all code and data analysis steps, which improves understanding and reproducibility for readers. Reproducibility ensures that analyses can be independently verified, enhancing credibility and transparency.\n\n![Artwork by [\\@allison_horst](https://twitter.com/allison_horst)](img/Quarto_MultiLanguage.png)\n\n::: callout-note\n1.  **Why Choose Quarto?**\n    -   Consistent document creation for reports, articles, and documentation.\n    -   Supports multi-format outputs like HTML, PDF, Markdown, etc.\n    -   Facilitates collaborative analysis through version control systems.\n2.  **Applications of Reproducibility**:\n    -   Essential in academic research for replicating experiments.\n    -   Useful in data science for maintaining project integrity across teams.\n:::\n\n# Creating a Quarto Document\n\nQuarto (`.qmd` files) is a versatile document format that enables the integration of narrative text, R code, and the results of code execution into a single document. In RStudio, navigate to *File \\> New File \\> Quarto Document* to create a new document.\n\n![](img/Create_Quarto_Doc.png){fig-align=\"center\"}\n\nInitially, this document will be titled `Untitled.qmd`. Let's rename it to something more recognizable for future reference. To do so, go to *File \\> Save As*, place this new Quarto document alongside your other course materials, and give it a meaningful name.\n\n## Practice\n\n1.  Start a new R Project.\n2.  Within your R Project, create a new Quarto document and save it.\n\n# Rendering your Quarto document\n\nOnce you create and save your Quarto document (`.qmd`), open it in RStudio, and click on ![](img/rstudio-render-button.png){width=\"25\" height=\"20\"} Render.\n\nTo render the file and preview the output quickly in the RStudio IDE, simply click the ![](img/rstudio-render-button.png){width=\"25\" height=\"20\"} Render button or use the keyboard shortcut (⇧⌘K).\n\n![](img/rstudio-render.png){fig-align=\"center\"}\n\nIf you prefer to have the file render automatically every time you save, you can enable the \"Render on Save\" option located on the editor toolbar. This ensures the preview updates each time you re-render the document. The side-by-side preview feature supports both HTML and PDF outputs.\n\n![](img/rstudio-render-on-save.png){fig-align=\"center\"}\n\nAdditionally, more options can be discovered by clicking the gear icon next to the ![](img/rstudio-render-button.png){width=\"25\" height=\"20\"} Render button.\n\n## How does it works\n\nWhen you render a Quarto document, the process begins with [knitr](https://yihui.org/knitr/) executing all the code chunks and generating a new markdown (`.md`) document that includes both the code and its output. This Markdown file is then processed by [Pandoc](https://pandoc.org), which creates the final, polished format. The ![](img/rstudio-render-button.png){width=\"25\" height=\"20\"} Render button automates and organizes these steps, executing them in the correct sequence for you.\n\n[![](img/Quarto_Rendering.png){fig-align=\"center\"}](https://quarto.org/docs/get-started/)\n\nDuring the rendering process, Quarto creates a new file that includes the selected text, code, and results from the `.qmd` file. This new file can be formatted as an [HTML](https://quarto.org/docs/output-formats/html-basics.html), [PDF](https://quarto.org/docs/output-formats/pdf-basics.html), [MS Word](https://quarto.org/docs/output-formats/ms-word.html) document, [presentation](https://quarto.org/docs/presentations/), [website](https://quarto.org/docs/websites/), [book](https://quarto.org/docs/books/), [interactive document](https://quarto.org/docs/interactive/), or [other formats](https://quarto.org/docs/output-formats/all-formats.html).\n\n## Practice\n\n1.  Render your Quarto document.\n2.  Use the gear icon to select your preferred preview option, such as displaying it in the viewer panel or opening it in a new window, after rendering.\n\n# Components of a Quarto document\n\nThere are 3 main parts of a Quarto document:\n\n1.  The YAML (rhymes with camel) header\n2.  Text\n3.  Code\n\n## YAML Header\n\nThe YAML (Yet Another Markdown Language, or YAML Ain't Markup Language) is located at the top of your document and is enclosed by \"---\" lines.\n\nYAML is where you can set the content that will appear at the beginning of your compiled document. For instance:\n\n-   **title**: \"Your title here\" (make sure it is enclosed in quotes)\n-   **author**: \"The author's name\" (again, in quotes)\n-   **date**: The date you want to display at the top of your document, enclosed in quotes. If you wish to learn more about other options, see <https://quarto.org/docs/reference/dates.html>.\n-   **output**: Specifies the format of the compiled document. For this class, I recommend using `html_document`, as it offers the richest format. Your output will be a `.html` file, which you can save or share.\n\nHere's a simple example:\n\n``` yaml\n---\ntitle: \"This is my descriptive title\"\nauthor: \"Horacio Lopez-Nicora\"\ndate: \"October 21, 2024\"\nformat: html\neditor: visual \n---\n```\n\nQuarto supports various format types, such as HTML, PDF, and Word documents. In this course, we will focus exclusively on HTML. The example below demonstrates how you can modify the YAML to include a table of contents (`toc`). The YAML provided below highlights several options available for HTML output.\n\n``` yaml\n---\ntitle: \"This is my descriptive title\"\nauthor: \"Horacio Lopez-Nicora\"\ndate: today\ndate-format: long\nformat:\n  html:\n    toc: true\n---\n```\n\nA full list of HTML format options can be found at the [HTML Options](https://quarto.org/docs/reference/formats/html.html) page on the quarto website.\n\n## Text\n\nBy default, a Quarto document opens in **Visual Editor** mode. This user-friendly visual interface resembles writing in programs like Word or Google Docs, offering options for clickable buttons such as Bold (or keyboard shortcut ⌘B), Italicize (or keyboard shortcut ⌘I), and adding bulleted lists, among others.\n\nAlternatively, switching to **Source Editor** mode provides a text-based editor where these buttons are not available. In this mode, familiarity with Markdown syntax is necessary.\n\n::: callout-tip\n**Markdown Syntax:** see cheatsheet here:<https://www.markdownguide.org/cheat-sheet/>) or in RStudio *Help \\> Markdown Quick Reference*.\n:::\n\n## Code\n\nCode chunks are sections of your Quarto document designated for executing code. To insert a new code chunk, you can:\n\n1.  Use the keyboard shortcut `Cmd` + `Option` + `I` (Mac) or `Ctrl` + `Alt` + `I` (Windows).\n2.  Type ```` ```{r} ```` to start the chunk and ```` ``` ```` to end it, placing your code in between.\n3.  Use the \"Add Chunk\" command from the editor toolbar and select R.\n\nCode chunks appear as follows:\n\n![](img/chunk_screenshot.png){fig-align=\"center\"}\n\nYou place your code on the empty line within the chunk. You can include multiple lines of code in a single chunk; however, if you find yourself needing to scroll through the chunk, it might be too lengthy.\n\n-   The gear icon allows you to modify chunk options, which we will discuss in more detail later.\n-   The triangle with a line below it executes all code chunks that precede the current one.\n-   The play button runs the current chunk.\n\nYou can also include comments within a code chunk by using the \\# symbol to comment them out.\n\n``` r\n# A very interesting comment\nSuper_Code()\n```\n\n::: callout-warning\nWhen you render your Quarto document, the process will execute all the code within it. This means that if your code contains errors or doesn't function properly, your document **will not be rendered**.\n:::\n\nIn Quarto, you can use inline code to embed code directly within your document's text. To apply this syntax, simply enclose the expression in backticks. For example:\n\nThe sum of 6 and 6 is 12. In this case, `12` was generated with the following inline code `` `r 6+6` ``.\n\n### Enhancing Your Code Chunks with Options\n\nYou can enhance your code chunks by adding options using `#|`. This provides R with further instructions on executing your code and compiling your document. [HERE](https://quarto.org/docs/reference/cells/cells-knitr.html#code-output) are some common examples.\n\n``` R\n{r}\n#| eval: FALSE\n#| echo: TRUE\n#| code-fold: TRUE\n\n6 + 6\n```\n\nThis occurs after the code chunk is rendered.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n6 + 6\n```\n:::\n\n\n## Practice\n\nNow, let's edit our Quarto document.\n\n1.  In your Quarto document's YAML section, include a subtitle and specify a date format. Additionally, enable a table of contents for improved navigation.\n2.  Make use of the Visual editor to draft text. Regularly switch between the visual and source editors to familiarize yourself with [RMarkdown](https://rmarkdown.rstudio.com/lesson-8.html).\n3.  Integrate code chunks while configuring them with the following options: execute the code but hide the code itself in the output.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
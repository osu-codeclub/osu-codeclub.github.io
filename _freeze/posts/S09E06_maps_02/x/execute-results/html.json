{
  "hash": "d01db613bec1f91bae88ed1f81701698",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Making maps in R: part III\"\nsubtitle: \"Choropleth maps\"\npagetitle: \"Maps III\"\nauthor: \"Jelmer Poelstra\"\ndate: \"2025-02-24\"\ncategories: [maps]\ntitle-block-banner: false\nnumber-depth: 2\nexecute: \n  eval: false\n  cache: false\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n------------------------------------------------------------------------\n\n## Introduction\n\n### Setting up\n\nWe will also use some data sets from the _usdata_ (as in: US data) package,\nso go ahead and install that:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usdata\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usdata)\n```\n:::\n\n\n\nWe'll set a ggplot theme for all the following plots:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_void())\ntheme_update(legend.position = \"top\")\n```\n:::\n\n\n\nGrab out state and county map data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates <- map_data(map = \"state\")\nohio <- map_data(map = \"county\") |>\n  filter(region == \"ohio\")\n```\n:::\n\n\n\n<br>\n\n## A first choropleth map\n\nIn choropleth maps, the color of a geographic area differs based on some variable,\nlike population density, median income, mean temperature, or biodiversity.\nIn ggplot-speak, we would be mapping the `fill` aesthetic to a variable like\npopulation density.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates |>\n  filter(region %in% c(\"ohio\", \"indiana\", \"michigan\")) |> \n  ggplot() +\n  geom_polygon(\n    aes(x = long, y = lat, group = group, fill = region),\n    color = \"grey40\"\n    ) +\n  coord_sf()\n```\n:::\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n## Statewise\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate_stats\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstates_with_stats <- tibble(states) |>\n  mutate(state = tools::toTitleCase(region)) |> \n  left_join(state_stats, by = \"state\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_polygon(\n    data = states_with_stats,\n    aes(x = long, y = lat, group = group, fill = med_income / 1000),\n    color = \"black\", linewidth = 0.1,\n  ) +\n  coord_sf(crs = 5070, default_crs = 4326) +\n  scale_fill_viridis_c(name = \"Median income\\n(thousands) \")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_polygon(\n    data = states_with_stats,\n    aes(x = long, y = lat, group = group, fill = unempl),\n    color = \"black\", linewidth = 0.1,\n  ) +\n  coord_sf(crs = 5070, default_crs = 4326) +\n  scale_fill_viridis_c(\"Unemployment (%)\")\n```\n:::\n\n\n\n## Countywise\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounty\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nohio_data <- county |>\n  filter(state == \"Ohio\") |>\n  rename(county = name) |> \n  mutate(county = sub(\" County\", \"\", county))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nohio_map <- tibble(ohio) |>\n  rename(county = subregion) |>\n  mutate(county = tools::toTitleCase(county))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(ohio_map$county) %in% ohio_data$county\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall(unique(ohio_map$county) %in% ohio_data$county)\nall(ohio_data$county %in% unique(ohio_map$county))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nohio_mapdata <- left_join(ohio_map, ohio_data, by = \"county\")\nohio_mapdata\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_polygon(\n    data = ohio_mapdata,\n    aes(x = long, y = lat, group = group, fill = metro),\n    color = \"black\", linewidth = 0.1,\n  ) +\n  coord_sf()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_polygon(\n    data = ohio_mapdata,\n    aes(x = long, y = lat, group = group, fill = pop2000 / 100000),\n    color = \"black\", linewidth = 0.1,\n  ) +\n  scale_fill_viridis_c(name = \"Population\\n(in 100 k)\") +\n  coord_sf()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_polygon(\n    data = ohio_mapdata,\n    aes(x = long, y = lat, group = group, fill = pop_change),\n    color = \"black\", linewidth = 0.1,\n  ) +\n  scale_fill_viridis_c(name = \"Population size change\") +\n  coord_sf()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_polygon(\n    data = ohio_mapdata,\n    aes(x = long, y = lat, group = group, fill = median_hh_income / 1000),\n    color = \"black\", linewidth = 0.1,\n  ) +\n  scale_fill_viridis_c(name = \"Median household\\nincome (in 1000s)\") +\n  coord_sf()\n```\n:::\n\n\n\n## ggmap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ?ggmap::register_stadiamaps\n# https://docs.stadiamaps.com/authentication/#api-keys\napi_key <- \"XXX\"\nregister_stadiamaps(api_key, write = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggmap)\n\nus <- c(left = -125, bottom = 25.75, right = -67, top = 49)\nget_stadiamap(bbox = us, zoom = 5, maptype = \"outdoors\") |> ggmap() \n\nbbox_ohio <- c(left = -85, bottom = 38.3, right = -80.5, top = 42.2)\nget_stadiamap(bbox = bbox_ohio, zoom = 8, maptype = \"outdoors\") |> ggmap() \nget_stadiamap(bbox = bbox_ohio, zoom = 8, maptype = \"stamen_toner_lite\") |> ggmap() \n```\n:::\n\n\n\n## Interactive maps\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# See https://r-graph-gallery.com/414-map-multiple-charts-in-ggiraph.html\nlibrary(ggiraph)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- states |>\n  filter(region %in% c(\"ohio\", \"indiana\", \"michigan\")) |> \n  ggplot() +\n  geom_polygon_interactive(\n    aes(x = long, y = lat, group = group, fill = region, tooltip = region),\n    color = \"grey40\"\n    ) +\n  coord_sf()\ngirafe(ggobj = p)\n```\n:::\n\n\n\n## Interactive, zoomable maps\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapview)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhomicide <- crime |>\n  filter(offense == \"murder\") |>\n  select(date, offense, address, lon, lat)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmymap <- st_as_sf(homicide, coords = c(\"lon\", \"lat\"), crs = 4326)\nmapview(mymap)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmapview(\n  mymap,\n  color = \"black\",\n  col.regions = \"darkblue\",\n  alpha.regions = 0.5,\n  legend = FALSE,\n  homebutton = FALSE,\n  map.types = \"OpenStreetMap\"\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nohio_cities_sf <- st_as_sf(oh_cities, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(ohio_cities_sf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlocations_sf <- st_as_sf(locations, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(locations_sf)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
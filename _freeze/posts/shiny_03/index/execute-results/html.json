{
  "hash": "43ff54b2912cdb11385710639453c2fe",
  "result": {
    "markdown": "---\ntitle: \"Shiny 03: Map viz. in Shiny\"\nsubtitle: Explore maps in Shiny App.\nauthor: \"Sandip Mondal and Horacio Lopez-Nicora\"\ndate: \"2023-11-13\"\ncategories: [shiny, quarto]\ntitle-block-banner: false\nimage: img/shiny_logo.png\ndf-print: kable\ncode-fold: false\n---\n\n\nWelcome to our `shiny` app development class! Throughout this session, Dr. Sandip Mondal will walk us through a case study to generate interactive maps using `shiny` app.\n\n## Shiny App to visualize maps.\n\nTo follow step-by-step what we will cover today in class, please refer to this [Shiny App](https://www.wvview.org/os_sa/ShinyApp_module.html#the-west-virginia-view-app-data).\n\n**Dataset description:** This dataset was created by [Prof. Maxwell](https://www.wvview.org/maxwell.html) for use in his courses. A variety of attributes have been summarized at the county-level. A total of 3,104 records are provided representing the majority of the counties in the contiguous United States. A few counties were excluded due to their small size.\n\n## Types of Spatial Data.\n\nThere are two types of spatial data: vector and raster. Below is a graphical explanation of these data.\n\n[![Type of Spatial Data (Ahmed, 2023)](img/Types%20of%20spatial%20data.png)](https://zia207.github.io/geospatial-r-github.io/)\n\n## What do we expect to achieve by the end of this tutorial.\n\nToday we will start with the output, understand the components of the `shiny` app and what we want achieve.\n\n![Different parameters from Ohio, Pennsylvania, and Indiana in an interactive map.](img/Application screenshot.png)\n\n## Building our Shiny App.\n\nLet's make a `shiny` app and see how this works!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#import libraries used in the APP\nsetwd(\"C:/Users/Sandip/Desktop/Shiny/Class_Map\")  ### Please make sure to use your own working directory\nlibrary(shiny)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(htmlwidgets)\nlibrary(htmltools)\nlibrary(ggplot2)\nlibrary(bslib)\nus <- st_read(\"OH_IN_PA.shp\") \nus <- us %>% filter(STATE_A=='OH'| STATE_A=='IN'| STATE_A =='PA')  ### Ohio, Indiana, Pennsylvania\nus <- st_transform(us, crs=4326)\nclass(us)\nhead(us)\nplot(us[7])\n\n# fist graph on ggplot = Income (boxplot)\ninc_p <- ggplot(us, aes(x=STATE_A, y=med_ncm, fill=STATE_A)) +\n  geom_boxplot() \n# second graph on ggplot = Temperature (densityplot)\ntemp_p <- ggplot(us, aes(x=tempmn, ..density.., fill=STATE_A))+\n  geom_density(alpha=0.5)\n# third graph on ggplot = Population vs Development (scatterplot)\npop_p <- ggplot(us, aes(x=POPULAT, y=per_dev, color= STATE_A, size= med_ncm))+\n  geom_point()\n#color palette for Temperature, Income and Population\ntemp_pal <- colorBin(palette=\"YlOrRd\", domain=us$tempmn, bin=5)\npop_pal <- colorNumeric(palette= 'Purples', domain= us$POPULAT)\nncm_pal <- colorNumeric(palette= 'Greens', domain= us$med_ncm)\n\n\n# Define UI for the APP\n\nui <- fluidPage(\n  theme = bs_theme(version = 4, bootswatch = \"spacelab\"), # theme from the library(bslib)\n  \n  titlePanel(h1(\"Ohio, Indiana and Pennsylvania\",align = \"center\", style = \"color:#0d793e\")), # Main title of the App use h1\n  br(),### break the line two times\n  br(),\n  tabsetPanel(#the tabset panel layout will include the three tab\n    \n    \n    # Tab 1: Data Exploration\n    \n    tabPanel(\"Data explorer\", # title of the first tab\n             br(), \n             fluidRow(\n               column(3,\n                      selectInput(inputId = \"countryInput1\", #unique input ID\n                                  label= \"Choose a State\",\n                                  choices = unique(us$STATE_N),\n                                  selected = \"Ohio\"), \n               ), \n             ),\n             hr(),\n             DT::dataTableOutput(\"table\") #output ID\n    ),\n    \n    #Tab 2: Visualization \n    \n    tabPanel(\"Sum plots\", #title of the second tab\n             br(), \n             sidebarLayout(#left section of the page used by the user to select input    \n               sidebarPanel(\n                 \n                 selectInput(inputId = 'inc_pop_temp',#unique input ID\n                             label = 'Select a variable',\n                             choices = c('',\"Income\", \"Population vs Development\", 'Median Temperature'), ),\n              \n               ),\n               mainPanel( # right section of the page \n                 plotOutput(\"boxplot\")#output ID\n               ))),\n    \n    #Tab 3: Interactive Map\n    \n    tabPanel(\"Interactive Map\", #title of the third tab  \n             sidebarLayout(    \n               sidebarPanel(#left section of the page used by the user to select input\n                 selectInput(inputId = \"countryInput\", #unique input ID\n                             label= \"Choose a State\",\n                             choices = unique(us$STATE_N),\n                             selected = \"Ohio\"),\n                 selectInput(inputId = \"varInput\", #unique input ID\n                             label= \"Choose a variable\",\n                             choices = c(\"Temperature\", 'Population', 'Income'))\n                 ,),\n               mainPanel(# right section of the page \n                 leafletOutput(\"map\", #output ID  \n                               width = \"100%\", height = \"500px\"))))  \n  ),)\n\n# Define server logic \n\nserver <- function(input, output) {\n  \n  selectedCountry1 <- reactive({#reactive expression for the Data Explorer\n    us[us$STATE_N == input$countryInput1, ] #match input of the user with the state name\n  })\n  \n  selectedCountry <- reactive({ #reactive expression for the Interactive Map\n    us[us$STATE_N == input$countryInput, ] #match input of the user with the state name\n  })\n  \n  output$table <- DT::renderDataTable({ #Data Explorer tab output\n    \n    data = selectedCountry1()\n    \n  })\n  \n  output$boxplot <- renderPlot({ #Visualization tab output\n    if (input$inc_pop_temp %in% \"Income\") # If input of the user is Income\n    {inc_p} #then print Income graph\n    else if (input$inc_pop_temp %in% \"Median Temperature\")# If input of the user is Median Temperature\n    {temp_p} #then print Temperature graph\n    \n    else if (input$inc_pop_temp %in% \"Population vs Development\")# If input of the user is Pop vs Dev\n    {pop_p} #then print Pop vs Dev graph\n    \n  })\n  \n  output$map <- renderLeaflet({#Interactive Map tab output\n    leaflet('map', #base map\n            options = leafletOptions(zoomControl= FALSE)) %>%\n      \n      htmlwidgets::onRender(\"function(el, x) {\n      L.control.zoom({ position: 'topright' }).addTo(this)\n  }\") %>%\n      addTiles(group = \"OSM\") %>%\n      \n      addProviderTiles(\"Esri.NatGeoWorldMap\", group=\"ESRI\") %>%\n      \n      addProviderTiles(\"CartoDB.DarkMatter\", group= \"CartoDB\") %>%\n      addLayersControl(baseGroups = c(\"CartoDB\",\"OSM\", \"ESRI\")) %>%\n      \n      addLegend(position=\"bottomright\", pal=temp_pal, values=us$tempmn, title=\"Temperature\")%>%\n      addLegend(position=\"bottomright\", pal=pop_pal, values=us$POPULAT, title=\"Population\")%>%\n      addLegend(position=\"bottomleft\", pal=ncm_pal, values=us$med_ncm, title=\"Income in $\")%>%\n      setView(lat= 39, lng=-80, zoom=6)\n  })\n  \n  observe({#observer\n    \n    state_popup <- paste0(\"<strong>County: </strong>\", #popup \n                          selectedCountry()$NAME,\n                          \"<br><strong> Temperature: </strong>\",\n                          round(selectedCountry()$tempmn,1),\"&#x2103\",\n                          \"<br><strong> Median Income: </strong>\",\n                          selectedCountry()$med_ncm,'$',\n                          \"<br><strong> Population: </strong>\",\n                          selectedCountry()$POPULAT)\n    \n    high_opt <- highlightOptions(weight = 3, color = \"white\", bringToFront = FALSE) #highlight when user select county\n    \n    if (input$varInput %in% \"Temperature\") {\n      leafletProxy(\"map\", data = selectedCountry()) %>%\n        #understand when to clearshapes\n        # clearShapes() %>%\n        addPolygons(fillColor =  temp_pal(selectedCountry()$tempmn),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n    }\n    else if (input$varInput %in% \"Income\") {\n      leafletProxy(\"map\", data = selectedCountry()) %>%\n        #understand when to clearshapes\n        # clearShapes() %>%\n        \n        addPolygons(fillColor =  ncm_pal(selectedCountry()$med_ncm),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n      \n    }\n    else if (input$varInput %in% \"Population\") {\n      leafletProxy(\"map\", data = selectedCountry()) %>%\n        #understand when to clearshapes\n        # clearShapes() %>%\n        addPolygons(fillColor =  pop_pal(selectedCountry()$POPULAT),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n    }\n    \n    \n  })\n  \n}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
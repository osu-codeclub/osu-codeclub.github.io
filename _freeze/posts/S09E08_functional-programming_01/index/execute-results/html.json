{
  "hash": "b4f3e8c206aa2ca6a686b5703ec359e3",
  "result": {
    "markdown": "---\ntitle: \"Iterating and writing functions, part I: `for` loops and functions\"\nsubtitle: \"Developing tools for doing things over and over\"\nauthor:\n  - \"Jessica Cooperstone and Jelmer Poelstra\"\ndate: \"2025-03-17\"\ncategories: [for loops, base R, functions, functional programming]\ntitle-block-banner: false\nimage: img/for-loop-monsters.png\nalttext: \"Illustrated for loop example. Input vector is a parade of monsters, including monsters that are circles, triangles, and squares. The for loop they enter has an if-else statement: if the monster is a triangle, it gets sunglasses. Otherwise, it gets a hat. The output is the parade of monsters where the same input parade of monsters shows up, now wearing either sunglasses (if triangular) or a hat (if any other shape). Cartoon by ALlison Horst\"\n---\n\n\n# Introduction\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Cartoon from [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/for-loop-monsters.png){fig-align='center' fig-alt='Illustrated for loop example. Input vector is a parade of monsters, including monsters that are circles, triangles, and squares. The for loop they enter has an if-else statement: if the monster is a triangle, it gets sunglasses. Otherwise, it gets a hat. The output is the parade of monsters where the same input parade of monsters shows up, now wearing either sunglasses (if triangular) or a hat (if any other shape).' width=100%}\n:::\n:::\n\n\nYou might find yourself in a situation where you are copying and pasting your code multiple times, changing a single variable. This could be situation where you want to run a series of statistical tests, each with a different response variable. Or, you want to make a series of plots, adjusting which variables are on the x-axis. This is generally not a good idea, as it is error prone and inefficient. \n\nWe are going to spend the next few sections of Code Club talking about things you can do to avoid copy and pasting your code. Today, we are going to talk about:\n\n* `for` loops\n* writing your own functions\n\nWe will start, like we typically do, by loading the packages we will use today.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # for wrangling and everything\nlibrary(palmerpenguins) # for penguins data\nlibrary(glue) # for easy pasting of names\n```\n:::\n\n\n\n# `for` loops\n## `for` loops, the basics\nFor loops iterate over some kind of sequence, performing an action, one element at a time. The basic syntax is like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (item in list_of_items) { # items to iterate over\n  # code that does something\n  do_something(item) # this is a made up function\n}\n```\n:::\n\n\nLet's go through a simple example:\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (some_value in 1:5) {\n  print(some_value * 2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n```\n:::\n:::\n\n\nWhat is happening under the hood, is that your `for` loop is assigning each item in your vector (here, the integer values 1 through 5) to the object `some_value`, multiplying it by 2, and then printing it. If we want to be very explicit, this is exactly what is happening:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iteration 1\nsome_value <- 1\nprint(some_value * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# iteration 2\nsome_value <- 2\nprint(some_value * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n# iteration 3\nsome_value <- 3\nprint(some_value * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n# iteration 4\nsome_value <- 4\nprint(some_value * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n# iteration 5\nsome_value <- 5\nprint(some_value * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nIf we do this again in the loop: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (some_value in 1:5) {\n  print(some_value * 2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n```\n:::\n:::\n\n\nAnd check what `some_value` is at the end:\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nWe can see that the value 5 (last of `some_value`) is currently assigned. This is not totally intuitive - you might think that `some_value` would hold all of the values that we set to that object in our loop but *this is not true*. This is good to remember since this is now an object lingering in our environment.\n\nI have shown this use-case of a `for` loop because I think it helps you to see how it works - not because you would actually use it to do this task. Because R is a vectorized language, you don't actually need a `for` loop to multiply every value by a number, we can do this task more simply below. \n\n::: {.cell}\n\n```{.r .cell-code}\n# multiply each element of the vector 1:5 by 2\n1:5 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  6  8 10\n```\n:::\n:::\n\n\nLet's do another example. I could create a `for` loop that simply prints something out for me. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a vector of the names of my special flowers\nmy_special_flowers <- c(\"dahlias\", \"roses\", \"ranunculus\")\n\n# use a for loop to print this message for each flower\nfor (flower in my_special_flowers) {\n  print(glue(\"I really like {flower}\"))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI really like dahlias\nI really like roses\nI really like ranunculus\n```\n:::\n:::\n\n\nYou can also make this conditional, meaning your `for` loop does one thing under certain conditions, and something else in another condition. We can accomplish this by nesting an `if else` statement within our `for` loop. \n\nWe are also making use of the function [`glue()`](https://glue.tidyverse.org/) (which we've gone over before) which allows easy pasting, like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_location <- \"Code Club\"\nglue(\"Welcome to {my_location}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWelcome to Code Club\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# a vector of solanaceous vegetables\nmy_vegetables <- c(\"Tomato\", \"Potato\", \"Pepper\", \"Eggplant\")\n\nfor (vegetable in my_vegetables) {\n# if the vegetable is tomato, print this message  \n  if (vegetable == \"Tomato\") {\n    print(glue(\"{vegetable} is my favorite Solanaceae vegetable\"))\n  }\n# if the vegetable is anything else, print this message  \n  else {\n    print(glue(\"{vegetable} is a perfectly fine Solanaceae vegetable\"))\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTomato is my favorite Solanaceae vegetable\nPotato is a perfectly fine Solanaceae vegetable\nPepper is a perfectly fine Solanaceae vegetable\nEggplant is a perfectly fine Solanaceae vegetable\n```\n:::\n:::\n\n\n### `for` loops basics practice\n\nWrite a `for` loop that takes the vector of numbers -5, -3, 2, 4, 7 and prints their absolute value.\n\n<details>\n\n<summary>Need a hint?</summary>\n<br>\nThe function for absolute value is `abs()`.\n\n</details>\n\n<details>\n\n<summary>Need another hint?</summary>\n<br>\nFirst create a vector of your numbers, then iterate over it.\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create your vector of numbers to iterate over\nmy_vector <- c(-5, -3, 2, 4, 7)\n\n# use a for loop to do the iterating\nfor (number in my_vector) {\n  print(abs(number))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n[1] 3\n[1] 2\n[1] 4\n[1] 7\n```\n:::\n:::\n\n\n</details>\n\nWrite a `for` loop that, when given a number, will tell you whether an positive integer is odd or even. Don't worry about negatives or zero here.\n\n<details>\n\n<summary>Need a hint?</summary>\n<br>\nA function that would be useful here is the modulo, `%%`, where from the remainder, you can determine odd or even. \n\n</details>\n\n<details>\n\n<summary>Need another hint?</summary>\n<br>\nCreate a vector of numbers you want to see if they are odd or even. Then write a `for` loop to print whether they are odd or even.\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_integers <- c(1, 5, 12, 401, 1000)\n\nfor (number in some_integers) {\n# if the number is divisible by 2, print that its even \n  if (number %% 2 == 0) {\n    print(glue(\"{number} is an even number\"))\n  }\n# if the number is anything else, print that its odd \n  else {\n    print(glue(\"{number} is an odd number\"))\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 is an odd number\n5 is an odd number\n12 is an even number\n401 is an odd number\n1000 is an even number\n```\n:::\n:::\n\n\n</details>\n\n## `for` loops, for plotting\n\nSo far, we have done things in a `for` loop do not really require a `for` loop to accomplish, though I want you to see how they work first with simpler examples. Making a bunch of plots at once is something that is really easier and less error prone with a `for` loop.\n\nFirst let's revisit our `penguins` data to create a base plot, and then iterate it over a variable to make multiples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\nWhat if we want to create a plot comparing the `bill_length_mm` vs. `bill_depth_mm` for each species? We can:\n\n* take our `penguins` data\n* `filter()` for a single `species`\n* make our plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n# select only the Adelie penguins  \n  filter(species == \"Adelie\") |> \n# remove missing values for our variables of interest  \n  drop_na(bill_length_mm, bill_depth_mm, sex) |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = \"Adelie\", # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\") +\n    theme_classic() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nNow we have a plot, if we want to create one per `species` (in this case there are 3), we can use a `for` loop to do this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a vector that has all the penguin species names\npenguin_species <- unique(penguins$species)\n\n# use a for loop to iterate over the penguin species\nfor (focal_species in penguin_species) {\n# filter your df for each focal_species  \n  one_penguin_species <- penguins |> \n    filter(species == focal_species) |> \n    drop_na(bill_length_mm, bill_depth_mm, sex) \n  \n# plot\n  plot <- one_penguin_species |>   \n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = focal_species, # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\") +\n    theme_classic() \n\n# print the plot\n  print(plot)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-3.png){width=672}\n:::\n:::\n\n\nWe can also add to our `for` loop to save the plots in a location of our choosing. We can start by creating a new directory (in your working directory) called `figs` which is where we will store our figures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write code to create a directory called \"figs\" in our working directory\ndir.create(path = \"figs\")\n```\n:::\n\n\nInstead of printing the plot, we are going to save it.\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (focal_species in penguin_species) {\n# filter your df for each focal_species  \n  one_penguin_species <- penguins |> \n    filter(species == focal_species) |> \n    drop_na(bill_length_mm, bill_depth_mm, sex) \n  \n# plot\n  plot <- one_penguin_species |>   \n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = focal_species, # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\") +\n    theme_classic() \n\n# save the plots\n  filename <- glue(\"figs/{focal_species}_bill-dimensions.png\") # create filename\n  ggsave(filename = filename, \n         plot = plot) # save the plot to file\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n:::\n\n\nNow time to practice. \n\n### `for` loops, for plotting practice\n\nWrite a `for` loop to make a series of boxplots that show the difference in `body_mass_g` between male and female penguins by species. Try both printing and saving the plots.\n\n<details>\n\n<summary>Need a hint?</summary>\n<br>\nYou are going to iterate over species.\n\n</details>\n\n<details>\n\n<summary>Need another hint?</summary>\n<br>\nHere is a sample little base plot:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Adelie\") |> \n  drop_na(body_mass_g, sex) |> \n  ggplot(aes(x = sex, y = body_mass_g, color = sex)) +\n  geom_boxplot() +\n  theme_minimal() +\n  theme(legend.position = \"none\") + # don't need one bc duplicative with x-axis\n  labs(x = \"Sex\",\n        y = \"Body mass (grams)\",\n        title = \"Adelie\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (focal_species in penguin_species) {\n# filter your df for each focal_species  \n  one_penguin_species <- penguins |> \n    filter(species == focal_species) |> \n    drop_na(bill_length_mm, bill_depth_mm, sex) \n  \n# plot\n  plot <- one_penguin_species |>   \n    ggplot(aes(x = sex, y = body_mass_g, color = sex)) +\n      geom_boxplot() +\n      theme_minimal() +\n      scale_color_brewer(palette = \"Dark2\") +\n      theme(legend.position = \"none\") + # don't need one bc duplicative with x-axis\n      labs(x = \"Sex\",\n        y = \"Body mass (grams)\",\n        title = \"Adelie\")\n\n# print the plots  \n  print(plot)\n\n# save the plots\n  filename <- glue(\"figs/{focal_species}_body-mass-by-sex.png\") # create filename\n  ggsave(filename = filename, \n         plot = plot) # save the plot to file\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n:::\n\n\n</details>\n\n# Writing functions\n\nThere are many functions that exist in R, both built into the base functionality, and addition ones we can access by loading different packages. We have talked about [functions](https://osu-codeclub.github.io/posts/S07E03_basics_03/index.html#introduction) before in Code Club, and you may be using them without explicitly realizing they are functions. For example, `mean()` is a function that calculates the mean of an object (usually a vector).\n\nThere are some functions which are by default available when you load R (like `mean()`), and others that exist within packages that require you to load those packages (e.g., `tidyverse`) before they can be used (e.g., `ggplot()`).\n\nBut, there may be situations where we want to do something in R, and a function does not exist to do this task. This could be because the operation you want to do is so specific to you that no other person could have possibly wanted to do that, or simply that no one has gotten around to writing a built in function yet. This is where writing your own functions can be very useful.\n\n\n## General syntax\nThe general syntax of a function is like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname_of_function <- function(arguments) {\n  insert_code_here()\n}\n```\n:::\n\n\nYou can pass multiple arguments to a function, but we are going to start simply with a function that takes one argument. \n\n## Functions with one argument\nHere, I am writing a little function to do something simple, like calculate from millimeters to inches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmm_to_inch <- function(value_in_mm) {\n  value_in_mm * 0.0393701 # code to convert from mm to inch\n}\n```\n:::\n\n\nHere, we would call `value_in_mm` our argument or parameter. Remember that this is a user-defined term, you could call this `x`, `i`, or really whatever you want. I like giving the arguments easy-to-read and easy-to-remember names. \n\nNow that we've made a function, we can see it in our environment under the \"Functions\" header.\n\n![](img/function-in-environment.png)\nIf we click on this item, we can see the details of the function.\n\n![](img/function-details.png)\n\nIf we start typing our function, and put our cursor between the parentheses and press tab, we can also see some information about our function.\n\n![](img/function-hover-details.png)\n\nWe can now pass arguments to our new function, here we will try passing 100 mm and see what that would be in inches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmm_to_inch(value_in_mm = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.93701\n```\n:::\n:::\n\n\nBecause our function only takes one argument, we can be less explicit and remove `value_in_mm` and get the same result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmm_to_inch(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.93701\n```\n:::\n:::\n\n\nWe also might want to pass a whole column or vector to our function, which we can also do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmm_to_inch(penguins$bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 1.539371 1.555119 1.586615       NA 1.444883 1.547245 1.531497 1.543308\n  [9] 1.342520 1.653544 1.488190 1.488190 1.618111 1.519686 1.362205 1.440946\n [17] 1.523623 1.673229 1.354331 1.811025 1.488190 1.484253 1.413387 1.503938\n [25] 1.527560 1.389765 1.598426 1.594489 1.492127 1.594489 1.555119 1.464568\n [33] 1.555119 1.610237 1.433072 1.543308 1.527560 1.661418 1.480316 1.566930\n [41] 1.437009 1.606300 1.417324 1.736221 1.456694 1.559056 1.618111 1.476379\n [49] 1.417324 1.665355 1.559056 1.578741 1.377953 1.653544 1.358268 1.629922\n [57] 1.535434 1.598426 1.437009 1.480316 1.405513 1.625985 1.480316 1.618111\n [65] 1.433072 1.637796 1.397639 1.618111 1.413387 1.645670 1.318898 1.562993\n [73] 1.559056 1.803151 1.397639 1.685040 1.610237 1.464568 1.425198 1.657481\n [81] 1.362205 1.688977 1.444883 1.381891 1.468505 1.625985 1.429135 1.452757\n [89] 1.507875 1.531497 1.405513 1.618111 1.338583 1.559056 1.425198 1.606300\n [97] 1.500001 1.586615 1.303150 1.700788 1.377953 1.614174 1.484253 1.488190\n[105] 1.492127 1.562993 1.519686 1.503938 1.500001 1.700788 1.500001 1.795277\n[113] 1.562993 1.661418 1.559056 1.681103 1.519686 1.468505 1.405513 1.618111\n[121] 1.425198 1.484253 1.582678 1.629922 1.385828 1.598426 1.527560 1.633859\n[129] 1.535434 1.736221 1.515749 1.696851 1.448820 1.476379 1.500001 1.618111\n[137] 1.401576 1.582678 1.456694 1.562993 1.582678 1.598426 1.263780 1.602363\n[145] 1.468505 1.535434 1.543308 1.440946 1.417324 1.488190 1.417324 1.633859\n[153] 1.814962 1.968505 1.917324 1.968505 1.874017 1.830710 1.787403 1.838584\n[161] 1.704725 1.842521 1.610237 1.929135 1.791340 1.905513 1.803151 1.940946\n[169] 1.653544 1.937009 1.818899 1.917324 1.976379 1.775592 1.830710 1.822836\n[177] 1.688977 1.814962 1.751969 1.881891 1.897639 1.968505 1.862206 1.685040\n[185] 1.775592 2.346458 1.933072 1.905513 1.677166 1.748032 1.732284 1.917324\n[193] 1.681103 1.952757 1.783466 1.952757 1.988190 1.716536 1.791340 1.988190\n[201] 1.767717 1.779529 1.834647 1.909450 1.775592 1.972442 1.830710 1.771654\n[209] 1.724410 1.791340 1.700788 1.984253 1.783466 1.818899 1.799214 2.137796\n[217] 1.803151 1.960631 1.818899 1.948820 1.712599 1.996064 1.877954 1.826773\n[225] 1.897639 1.830710 1.826773 1.913387 1.870080 2.011812 1.779529 1.779529\n[233] 1.933072 2.066930 1.866143 1.968505 1.767717 2.000001 1.708662 2.019686\n[241] 1.870080 2.051182 1.870080 2.055119 1.791340 1.948820 1.751969 2.000001\n[249] 1.944883 1.846458 1.905513 2.011812 1.909450 2.200789 1.858269 1.933072\n[257] 1.862206 1.842521 1.641733 2.102363 1.704725 1.893702 1.988190 1.960631\n[265] 1.712599 2.027560 1.818899 2.169293 1.751969 1.921261 1.858269       NA\n[273] 1.842521 1.984253 1.779529 1.964568 1.830710 1.968505 2.019686 1.787403\n[281] 2.074804 1.779529 1.814962 2.019686 1.811025 2.019686 1.834647 2.035434\n[289] 1.850395 2.047245 1.807088 1.988190 1.980316 2.283466 1.826773 1.937009\n[297] 1.669292 1.909450 1.700788 1.992127 1.838584 2.047245 1.988190 1.948820\n[305] 1.826773 2.078741 1.610237 2.133859 1.673229 2.007875 1.956694 1.870080\n[313] 1.874017 2.047245 1.846458 2.106300 1.929135 1.818899 2.003938 1.791340\n[321] 2.003938 2.000001 1.972442 1.929135 2.027560 1.960631 1.893702 2.023623\n[329] 1.799214 1.996064 1.673229 2.055119 1.779529 1.940946 1.976379 1.795277\n[337] 2.043308 1.842521 1.799214 2.196852 1.712599 1.952757 2.000001 1.976379\n```\n:::\n:::\n\n\nInstead of just printing this information, we might want to save it in our dataframe, which we can do by nesting our function within a `mutate()` function. Remember that `mutate()` works with the syntax `new_column = function(existing_variables)`. Also remember that by default, new columns are added after the last column (and if you want to also reorder, you can do that with `select()`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  mutate(bill_length_inch = mm_to_inch(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex <fct>, year <int>, bill_length_inch <dbl>\n```\n:::\n:::\n\n\n### Embedding built in functions\n\nWe can also use other functions inside our function. For example, R does not by default have a function that calculates the coefficient of variation for a variable. We can write that ourselves though so it's fine.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the coefficient of variation by \n# dividing the standard deviation by the mean\ncv <- function(x) {\n        (sd(x)/mean(x))\n}\n```\n:::\n\n\n## Functions with two arguments\n\nWe can also write functions that take more than one argument. Here is a simple example for calculating BMI, which is weight in kg divided by height in meters squared.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_bmi <- function(weight_kg, height_cm) {\n  weight_kg/(height_cm/100)^2\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_bmi(weight_kg = 80, height_cm = 180)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24.69136\n```\n:::\n:::\n\n\nIf you provide your arguments in the order they are expected (here, `weight_kg` and then `height_cm`), then you don't need to specify which is which. But, iif you want to give the arguments in a different order you need to be explicit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is wrong\ncalculate_bmi(180, 80)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 281.25\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is better\ncalculate_bmi(height_cm = 180, weight_kg = 80)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24.69136\n```\n:::\n:::\n\n\n### Functions with one argument practice\n\nWrite two functions that convert between degrees Fahrenheit and degrees Celsius and test to see if they work.\n\n<details>\n\n<summary>Need a hint?</summary>\n\n°C = (°F - 32) × 5/9 or °F = (°C * 9/5) + 32\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a function to convert F to C\ndegF_to_degC <- function(deg_F) {\n  (deg_F - 32) * (5/9)\n}\n\n# create a function to convert C to F\ndegC_to_degF <- function(deg_C) {\n  (deg_C * (9/5)) + 32\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndegF_to_degC(deg_F = 32)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\ndegF_to_degC(deg_F = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 37.77778\n```\n:::\n\n```{.r .cell-code}\ndegC_to_degF(deg_C = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n\n```{.r .cell-code}\ndegC_to_degF(deg_C = -40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -40\n```\n:::\n:::\n\n\n\n</details>\n\n\n## Plotting functions\nNow that we are a little comfortable with writing functions, we can make ones that are a little more complicated.\n\nWe can also write a function to make our plot.\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_bill_plotting <- function(focal_species) {\n    penguins |> \n    filter(species == focal_species) |> \n    drop_na() |> \n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = focal_species, # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\", \n         caption = \"Data collected from LTER, Antarctica\") + \n    theme_classic() \n}\n```\n:::\n\n\nThen, we can pass our argument to the plot, here, the name of the species we want to plot. This is a useful tool for making many plots with the same structure.\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_bill_plotting(\"Adelie\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nWe can then pass this function in a `for` loop with some simpler looking code (because the bulk of it is elsewhere).\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (focal_species in penguin_species) {\n  # pass each focal species to the species_bill_plotting function\n  species_bill_plotting(focal_species)\n\n# save the plots\n  filename <- glue(\"figs/{focal_species}_bill-dimensions.png\") # create filename\n  ggsave(filename, plot) # save the plot to file\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\n```\n:::\n:::\n\n\nOr, even more simply, we could replace our `for` loop with one of the `tidyverse:purrr` functions intended for functional program that being with `map*()`.\n\nThe simplest of these functions is [`map()`](https://purrr.tidyverse.org/reference/map.html), which applies a function over each element of a vector, and returns a list. There are some basics we will have to go over for this to make sense.\n\nA list is a new data structure for Code Club. A list can contain other data structures, like data frames, vectors or others, within it.\n\nLet's go over a simple example of something you may have seen before. We will run an ANOVA to see if there are differences in body mass among the penguin species, and we will save this output so we can look at it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova <- aov(data = penguins,\n             body_mass_g ~ species)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(anova)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 14\n $ coefficients : Named num [1:3] 3700.7 32.4 1375.4\n  ..- attr(*, \"names\")= chr [1:3] \"(Intercept)\" \"speciesChinstrap\" \"speciesGentoo\"\n $ residuals    : Named num [1:342] 49.3 99.3 -450.7 -250.7 -50.7 ...\n  ..- attr(*, \"names\")= chr [1:342] \"1\" \"2\" \"3\" \"5\" ...\n $ effects      : Named num [1:342] -77704.1 -4317.7 11323.5 -233.7 -33.7 ...\n  ..- attr(*, \"names\")= chr [1:342] \"(Intercept)\" \"speciesChinstrap\" \"speciesGentoo\" \"\" ...\n $ rank         : int 3\n $ fitted.values: Named num [1:342] 3701 3701 3701 3701 3701 ...\n  ..- attr(*, \"names\")= chr [1:342] \"1\" \"2\" \"3\" \"5\" ...\n $ assign       : int [1:3] 0 1 1\n $ qr           :List of 5\n  ..$ qr   : num [1:342, 1:3] -18.4932 0.0541 0.0541 0.0541 0.0541 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. ..- attr(*, \"assign\")= int [1:3] 0 1 1\n  .. ..- attr(*, \"contrasts\")=List of 1\n  ..$ qraux: num [1:3] 1.05 1.03 1.05\n  ..$ pivot: int [1:3] 1 2 3\n  ..$ tol  : num 1e-07\n  ..$ rank : int 3\n  ..- attr(*, \"class\")= chr \"qr\"\n $ df.residual  : int 339\n $ na.action    : 'omit' Named int [1:2] 4 272\n  ..- attr(*, \"names\")= chr [1:2] \"4\" \"272\"\n $ contrasts    :List of 1\n  ..$ species: chr \"contr.treatment\"\n $ xlevels      :List of 1\n  ..$ species: chr [1:3] \"Adelie\" \"Chinstrap\" \"Gentoo\"\n $ call         : language aov(formula = body_mass_g ~ species, data = penguins)\n $ terms        :Classes 'terms', 'formula'  language body_mass_g ~ species\n  .. ..- attr(*, \"variables\")= language list(body_mass_g, species)\n  .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n  .. .. ..- attr(*, \"dimnames\")=List of 2\n  .. ..- attr(*, \"term.labels\")= chr \"species\"\n  .. ..- attr(*, \"order\")= int 1\n  .. ..- attr(*, \"intercept\")= int 1\n  .. ..- attr(*, \"response\")= int 1\n  .. ..- attr(*, \".Environment\")=<environment: R_GlobalEnv> \n  .. ..- attr(*, \"predvars\")= language list(body_mass_g, species)\n  .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"factor\"\n  .. .. ..- attr(*, \"names\")= chr [1:2] \"body_mass_g\" \"species\"\n $ model        :'data.frame':\t342 obs. of  2 variables:\n  ..$ body_mass_g: int [1:342] 3750 3800 3250 3450 3650 3625 4675 3475 4250 3300 ...\n  ..$ species    : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"terms\")=Classes 'terms', 'formula'  language body_mass_g ~ species\n  .. .. ..- attr(*, \"variables\")= language list(body_mass_g, species)\n  .. .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n  .. .. .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..- attr(*, \"term.labels\")= chr \"species\"\n  .. .. ..- attr(*, \"order\")= int 1\n  .. .. ..- attr(*, \"intercept\")= int 1\n  .. .. ..- attr(*, \"response\")= int 1\n  .. .. ..- attr(*, \".Environment\")=<environment: R_GlobalEnv> \n  .. .. ..- attr(*, \"predvars\")= language list(body_mass_g, species)\n  .. .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"factor\"\n  .. .. .. ..- attr(*, \"names\")= chr [1:2] \"body_mass_g\" \"species\"\n  ..- attr(*, \"na.action\")= 'omit' Named int [1:2] 4 272\n  .. ..- attr(*, \"names\")= chr [1:2] \"4\" \"272\"\n - attr(*, \"class\")= chr [1:2] \"aov\" \"lm\"\n```\n:::\n:::\n\n\n\n### Functions with more arguments practice\n\nQuestion\n\n<details>\n\n<summary>Need a hint?</summary>\n\nHere is my hint\n\n</details>\n\n<details>\n\n<summary>Click for the solution</summary>\n\n\n::: {.cell}\n\n:::\n\n\n</details>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
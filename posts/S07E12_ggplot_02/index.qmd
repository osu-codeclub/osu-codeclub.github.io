---
title: "Plotting 2: Intro to ggplot2"
author:
  - "Horacio Lopez-Nicora"
date: "2024-04-05"
categories: [plotting, ggplot2]
title-block-banner: false
number-depth: 3
image: img/penguins.png
knitr:
  opts_chunk:
    out.width: "85%"
    class-output: styled-output
    fig.align: 'center'
editor: source
editor_options: 
  chunk_output_type: console
---

------------------------------------------------------------------------

<br>

![Artwork by [Allison Horst](https://twitter.com/allison_horst).](img/penguins.png){fig-align="center" width="80%"}

<br>

## Introduction

#### Recap of the past session

Last week's session marked the beginning of our data visualization journey with `ggplot2`. We explored the philosophy of coding graphics, created a versatile ggplot template for various charts, and discovered how to add visual elements using aesthetics and layers. Exciting times ahead!

#### Session Goals

-   Let's pick up on **aesthetics** and learn some more about it.
-   Learn the basic of other **geom_boxplot()**, **geom_violin()**, **stat_summary**.

<br>

## Our data set

![Illustration by [Allison Horst](https://allisonhorst.github.io/palmerpenguins/articles/art.html)](img/palmerpenguins_hex.png){width="50%"}

We are going to continue using our üêß data set from the package [`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/). If you haven't done so, please install that package first:

```{r, eval = FALSE}
install.packages("palmerpenguins")
```

[`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/index.html) is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr. Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.

We'll now load the package, along with the tidyverse (which includes ggplot2):

```{r}
library(palmerpenguins)
library(tidyverse)
```

Once you've loaded that package you will have a data frame called `penguins` at your disposal --- let's take a look:

```{r}
penguins
```

```{r}
# Or glimpse() for a sort of transposed view, so we can see all columns:
glimpse(penguins)
```

<br>

## The Absolute Power of Aesthetics

[![Aesthetics enable us to showcase multiple dimensions of our dataset in a single plot by modifying elements such as color, shape, size, labels, and transparency.](img/4plot_aesthetic.png)](http://r.qcbs.ca/workshop03/book-en/aesthetics.html)

<hr style="height:1pt; visibility:hidden;" />

### Last week's example on "The power of aesthetics"

Last week we **added a third aesthetic** to our graph, `color`. Our current plot mapped `bill_length_mm` to the `x` aesthetic, and `bill_depth_mm` to the `y` aesthetic --- , we then added a mapping of `species` to the `color` aesthetic:

```{r, warning = FALSE}
p <- ggplot(data = penguins) +
  geom_point(mapping = aes(x = bill_length_mm,
                           y = bill_depth_mm,
                           color = species))
p
```

### What if we want to change colors?

We can manually change colors.

```{r, warning = FALSE}
# Manual color change
# By using scale_colour_manual(),
# we can specify the exact colours we want to use
p + 
scale_color_manual(
  # Note that the color order will correspond to
  # the order of the species given in the legend
  values = c("grey55", "orange", "skyblue"))

```

By using the `colors()` function, you can explore numerous color options that are available for selection.

### Using a different color palette: `RColorBrewer`

There is a wide variety of `R` color packages specifically designed to offer a range of color palette options, each evoking a distinct mood. For instance, the `RColorBrewer` package provides a choice of 35 palettes!

Let's install `RColorBrewer` and select one from the various palettes available.

```{r, warning = FALSE}
RColorBrewer::display.brewer.all(type = "qual")
```

Above, you can observe the organization of the colors into distinct groups based on their sequential, diverging, or mixed characteristics. It is important to note that varied palettes are advantageous for varying data types.

Let's use these palettes with our original penguin graph. Here is an example demonstrating how the **Set1** palette is utilized to group data points with the function `scale_color_brewer()` and the palette argument.

```{r, warning = FALSE}
p + 
scale_color_brewer(palette = "Set1")
```

In addition, the `RColorBrewer` package offers other functions. Two such functions are `scale_color_viridis()` and `scale_color_grey()`, which allows us to convert colors to **grayscale** without sacrificing information. This is especially important for individuals with colorblindness.

```{r, warning = FALSE}
p + 
scale_color_viridis_d()
```

<br>

::: exercise
#### {{< fa user-edit >}} Exercise 1

-   Let us revisit the scatter plot depicting the correlation between bill length and depth, distinguished by different species using colored data points.

-   What if we want to use only a grayscale palette for publication purposes?

<details>

<summary>Hints (click here)</summary>

We can use the `scale_color_grey()` function to color our grouped data points.

</details>

<details>

<summary>Solutions (click here)</summary>

```{r, warning = FALSE}
p + 
scale_color_grey()
```

</details>
:::

<br>

### Colorblind-friendly palettes

Have you ever contemplated how your figure might appear when viewed by individuals with different types of color blindness? We can utilize the [`colorBlindness`](https://cran.r-project.org/web/packages/colorBlindness/index.html) package to explore this aspect.

Let's install the `colorBlindness` package and load it.

```{r, eval = FALSE}
# Let's install the colorBlindness package
install.packages("colorBlindness")
library(colorBlindness)
```

To begin with, let's test out various colors using the `cvdPlot()` function. This will demonstrate how our current plot appears to individuals with different types of color blindness.

```{r, warning = FALSE}
colorBlindness::cvdPlot(p)
```

Our current color palette is not accessible, as can be observed. However, by using `viridis` palettes, we can ensure that our plots consistently convey the same information, regardless of the audience.

Let's use the same `viridis` palette we used above to make our plot more accessible.

```{r, warning = FALSE}
p_viridis <- p + 
scale_color_viridis_d()
```

Were we successful? Let's use `cvdPlot()` to check again.

```{r, warning = FALSE}
colorBlindness::cvdPlot(p_viridis)
```

### Providing transparency with `alpha`

How can we incorporate transparency into the data points in our graph? One way to achieve this is by utilizing the `alpha` feature.

```{r, warning = FALSE}
ggplot(data = penguins) +
  geom_point(alpha = 0.5, mapping = aes(x = bill_length_mm,
                           y = bill_depth_mm,
                           color = species))
```

Here, we present an example of how to utilize the `alpha` function to incorporate transparency into our data points. By doing so, we are able to exhibit four variables within a single graph.

```{r, warning = FALSE}
ggplot(data = penguins) +
  geom_point(mapping = aes(x = bill_length_mm,
                           y = bill_depth_mm,
                           color = species,
                           alpha = flipper_length_mm))
```

::: exercise
#### {{< fa user-edit >}} Exercise 2

-   We like the graph we produced above. We want, however, to also display `body_mass_g`.

-   How can we add this additional variable to our graph?

<details>

<summary>Hints (click here)</summary>

We can use the `size` function within `aes()`.

</details>

<details>

<summary>Solutions (click here)</summary>

```{r, warning = FALSE}
ggplot(data = penguins) +
  geom_point(mapping = aes(x = bill_length_mm,
                           y = bill_depth_mm,
                           color = species,
                           alpha = flipper_length_mm,
                           size = body_mass_g))
```

</details>
:::

<br>

## Boxplot: `geom_boxplot()`

A boxplot gives a nice summary of one or more numeric variables. A boxplot is composed of several elements:

[![Anatomy of a boxplot.](img/Boxplot.png)](https://leansigmacorporation.com/box-plot-with-minitab/)

Let's use `geom_boxplot` to explore the **bill_length_mm** for the penguien species.

```{r, warning = FALSE}
ggplot(data = penguins, 
       aes(x = species, 
           y = bill_length_mm,
           fill = species)) + # specify species as a grouping variable
  geom_boxplot() 
```

::: callout-warning
#### Please note that we add color to the boxplot by applying the `fill` option. You may want to experiment with using the `color` option to observe the differences.
:::

::: exercise
#### {{< fa user-edit >}} Challenge - Let's work together!

Let's consider using a different color palette for the boxplot. Additionally, we might prefer to show the mean value instead of the median value and add some transparency. Lastly, we would like to display our data points to provide information on the sample size for each species.

<details>

<summary>Hints (click here)</summary>

To change the color palette for the boxplot, we can utilize the `scale_fill_brewer()` function. To include the mean value, we can employ the `stat_summary()` function. If we want to add transparency, we can use the `alpha` parameter. Lastly, to overlay the data points, we can utilize the `geom_jitter()` function.

</details>

<details>

<summary>Solutions (click here)</summary>

```{r, warning = FALSE}
ggplot(data = penguins, 
       aes(x = species, 
           y = bill_length_mm,
           fill = species)) + # specify species as a grouping variable
  geom_boxplot(alpha = 0.5) + 
  scale_fill_brewer(palette = "Dark2") + 
  stat_summary(fun = "mean", color = "red3") + 
  geom_jitter(alpha = .5) 
```

</details>
:::

<br>

## Violin plot: `geom_violin()`

Similar to boxplots, violin plots visualize the distribution of a numerical variable for one or multiple groups. However, the shape of a violin graphically represents the distribution of data points that is not easily visible in a boxplot's summary, leading to a more precise representation of the data ([Data-to-Viz](https://www.data-to-viz.com/graph/violin.html)).

```{r, warning = FALSE}
ggplot(data = penguins, 
       aes(x = species, 
           y = bill_length_mm,
           fill = species)) + # specify species as a grouping variable
  geom_violin(alpha = 0.5) + 
  scale_fill_brewer(palette = "Dark2") + 
  stat_summary(fun = "mean", color = "red3") + 
  geom_jitter(alpha = .5) 
```

::: exercise
#### {{< fa user-edit >}} Exercise 3

1.  To keep only the `Gentoo` data, pipe your dataset into the `filter()` function.
2.  Create a boxplot examining `bill_length_mm` by `sex` by piping the filtered data into `ggplot()`.
3.  Ensure that the points with unknown sex (`NA`) are removed.
4.  Include the mean value of `bill_length_mm` in the boxplots.
5.  Display all data points on top of the boxplot.
6.  Lastly, display the distribution of each dataset.
7.  To achieve the graph displaying all the above requirements, you will need to add transparency.

<details>

<summary>Solutions (click here)</summary>

```{r, warning = FALSE}
penguins |> 
  filter(species == "Gentoo", !is.na(sex)) |>
  ggplot(aes(x = sex, y = bill_length_mm, color = sex)) +
  geom_boxplot() + scale_color_brewer(palette = "Dark2") + stat_summary(fun = "mean", color = "red3") + 
  geom_jitter(alpha = .5) + geom_violin(alpha = .1)
```

</details>
:::

<br>

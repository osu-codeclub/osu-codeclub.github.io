---
title: "Data wrangling: using `select()`, `arrange()`, and `mutate()`"
author:
  - "Jessica Cooperstone"
date: "2024-09-09"
categories: [r-basics, tidyverse]
title-block-banner: false
image: img/go-wrangling.png
knitr:
  opts_chunk:
    out.width: "85%"
    class-output: styled-output
    fig.align: 'center'
---

```{r knitr_options, echo=FALSE}
knitr::opts_chunk$set(eval = TRUE)
```

------------------------------------------------------------------------

![Artwork by [\@allison_horst](https://twitter.com/allison_horst)](img/go-wrangling.png)

# Introduction

We are going to start off this semester of code club with a series of sessions on how to "wrangle" your data. It can be a struggle to get data into a format that is amenable for analysis, so we will be going through a series of functions and approaches that will get you more comfortable with manipulating your data.

Last Code Club, we didn't get to go over the function `select()` - so we are going to do that today, along with the function `mutate()`. In brief:

-   [`select()`](https://dplyr.tidyverse.org/reference/select.html) picks columns
-   [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) sorts columns based on their values
-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) creates new columns based on existing ones

## Load libraries
First we will load the packages that we will use today.
```{r}
library(tidyverse) 
library(janitor) # for cleaning column names
```

## Data

We are going to use data from [The World Factbook](https://www.cia.gov/the-world-factbook/), put together by the CIA to "provides basic intelligence on the history, people, government, economy, energy, geography, environment, communications, transportation, military, terrorism, and transnational issues for 265 world entities." I thought this data would give us some opportunities to flex our R skills, and learn a bit about the world.

The data we are going to download can be found [here](https://www.cia.gov/the-world-factbook/field/population/country-comparison/), though I have saved the file, added it to our Code Club Github, and included some code below for you to download it.

If you downloaded this file two weeks ago, you don't need to download it again, you just need to make sure you know where it is on your computer to read it in.

```{r, eval = FALSE}
download.file(
  url = "https://raw.githubusercontent.com/osu-codeclub/osu-codeclub.github.io/main/posts/S08E01_wrangling_01/data/factbook-2015.csv",
  destfile = "factbook_download_2015.csv"
)
```

We can read it in using the tidyverse function from the [`readr`](https://readr.tidyverse.org/index.html) package called [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html).

```{r}
factbook_2015 <- read_csv("factbook_download_2015.csv")
```


We can look at this data another way, using the function `head()` to look at the first six rows, and every column.

```{r}
head(factbook_2015)
```

Two weeks ago, we cleaned up the column names, so let's do that again. If you want to remember why, you can go back to [that lesson](https://osu-codeclub.github.io/posts/S08E01_wrangling_01/#cleaning-column-names).

```{r}
factbook_2015 <- clean_names(factbook_2015)
```

# Choose columns with `select()`

Often you will want to pick only certain columns in your dataframe, and you can do this with the function [`select()`](https://dplyr.tidyverse.org/reference/select.html). You can pick columns generally by:

-   their names
-   their position
-   characteristics of that column

If we want to know how the arguments to `select()` work, we can access the documentation material about the function.

```{r about select}
?select()
```

Let's first select columns by their names. Let's pick just the `country_name`, `population_total`, and `surface_area_sq_km`.

```{r}
factbook_2015 |> 
  select(country_name, population_total, surface_area_sq_km)
```

Those columns are also the 1st, 3rd, and 5th columns in our data frame, do we can select them by their indices, or by their location.

```{r}
factbook_2015 |> 
  select(1, 3, 5)
```

In general I would recommend against this because its really hard to remember which column indices are which variables today, nevermind returning back to old code 1 year from now.

We can also select columns that are consecutive, using the `:` operator. Below I'm selecting the columns `country_name` through `population_growth_annual_percent`.

```{r}
factbook_2015 |> 
  select(country_name:population_growth_annual_percent)
```

We can remove columns using the `!` operator:

```{r}
factbook_2015 |> 
  select(!country_code)
```

We can also select data based on its characteristics. We can select using [selection helpers](https://dplyr.tidyverse.org/reference/select.html) like:

-   [`everything()`](https://tidyselect.r-lib.org/reference/everything.html): picks all variables
-   [`starts_with()`](https://tidyselect.r-lib.org/reference/starts_with.html): starts with some prefix
-   [`ends_with()`](): ends with some suffix
-   [`contains()`](https://tidyselect.r-lib.org/reference/starts_with.html): contains a specific string
-   [`matches()`](https://tidyselect.r-lib.org/reference/starts_with.html): matches a regular expression
-   [`num_range()`](https://tidyselect.r-lib.org/reference/starts_with.html): matches a numeric range
-   [`where()`](https://tidyselect.r-lib.org/reference/where.html): selects columns where the statement given in the argument is TRUE
-   [`all_of()`](https://tidyselect.r-lib.org/reference/all_of.html): matches all of the variable names in a character vector
-   [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html): matches any of the names in a character vector

For example, we might want each column that has anything to do with gross domestic product, or gdp. We can select all of the columns which contain the string "gdp" in their name. I'm also going to add `country_name` so we know what we're working with.

```{r}
factbook_2015 |> 
  select(country_name, contains("gdp"))
```

We can also select all column that meet a certain predicate. For example, we can pick all of the column that are of the type character.

```{r}
factbook_2015 |> 
  select(where(is.character))
```

We can also combine selections using the `&` (and), `|` (or), and `!` (not) operators. For example, if I want the columns about GNI but only the international ones I can:

```{r}
factbook_2015 |> 
  select(starts_with("gni") & ends_with("international"))
```

We can also use `select()` to order our columns, as the order we select them in dictates the order they will exist in our dataframe.

## Practice

Come up with 3 different ways to select the columns about children, and make sure you also include a country column so you know what you're looking at.

<details>

<summary>Need a hint?</summary>

Here are the columns that I'm considering to be about children:

\[1\] "country_name"\
\[17\] "mortality_rate_under_5_per_1_000_live_births"\
\[18\] "prevalence_of_underweight_weight_for_age_percent_of_children_under_5"\
\[19\] "immunization_measles_percent_of_children_ages_12_23_months"\
\[20\] "primary_completion_rate_total_percent_of_relevant_age_group"\
\[21\] "school_enrollment_secondary_percent_gross"\
\[22\] "school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi"

</details>

<details>

<summary>Click for the solution</summary>

By name and for columns in a row, using the `:`.

```{r}
factbook_2015 |> 
  select(country_name, 
         mortality_rate_under_5_per_1_000_live_births:
         school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi)
```

By index:

```{r}
factbook_2015 |> 
  select(1, 17:22) 
```

By name characteristics:

```{r}
factbook_2015 |> 
  select(country_name, contains("under_5"), contains("children"),
         contains("primary"), contains("school"))
```

These are just some ways!

</details>

# Sorting data with `arrange()`

A nice helper function for looking at your data is [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) which sorts your data.

We can sort our data based on how much forest (`forest_area_sq_km`) each country has.
```{r}
factbook_2015 |> 
  arrange(forest_area_sq_km)
```

By default, `arrange()` sorts small to big, if we want to go from big to small we can set `arrange(desc())` to sort by descending.

```{r}
factbook_2015 |> 
  arrange(desc(forest_area_sq_km))
```

It's not too surprising that the biggest countries in forest-feasible lattitudes have the most forest.

We can also add `select()` into our pipe, so that we don't have to scroll so far to see what the actual amount of forest is.

```{r}
factbook_2015 |> 
  select(country_name, surface_area_sq_km, forest_area_sq_km) |> 
  arrange(desc(forest_area_sq_km))
```

Wow almost 50% of Russia is forested.

## Practice
Which countries have the lowest cell phone subscriptions? `mobile_cellular_subscriptions_per_100_people`

<details>

<summary>Need a hint?</summary>

You can use the function `arrange()` to sort your columns. The default arranging is from low to high, so if you want to go from high to low, you can set `arrange(desc())`.

</details>

<details>

<summary>Click for the solution</summary>

```{r}
factbook_2015 |> 
  select(country_name, mobile_cellular_subscriptions_per_100_people) |> 
  arrange(mobile_cellular_subscriptions_per_100_people)
```


</details>

# Creating new columns with `mutate()`

Sometimes we might want to use our existing columns to create new ones. For example, we might want to know which country has the highest percentage of its land as forest. In our current data set, we can see amount of forested land (`forest_area_sq_km`) but this doesn't take into account the size of the country. Fortunately, we also have the variable `surface_area_sq_km` so this is something we can calculate ourselves.

Conceptually, a new variable representing the percentage of forested land by taking `forest_area_sq_km`, dividing it by `surface_area_sq_km` and multiplying by 100. 

The function `mutate()` uses the syntax `new_variable = existing_variables`. I am also saving over our existing dataframe so we can see our new variable. I am then using `select()` to see only the variables I want, and order by `desc(forest_percent)` to see the countries with the highest percentage of forest at the top.

```{r}
factbook_2015 <- factbook_2015 |> 
  mutate(forest_percent = (forest_area_sq_km / surface_area_sq_km)*100)

factbook_2015 |> 
  select(country_name, forest_area_sq_km, surface_area_sq_km, forest_percent) |> 
  arrange(desc(forest_percent))
```

Wow! Suriname is 93% forested!

It's a little bit annoying that `forest_percent` is now showing up in scientific notation, let's fix that. We will use the function `format()` within a `mutate()` function to indicate that scientific notation should be false (i.e., `scientific = FALSE`).

```{r}
factbook_2015 <- factbook_2015 |> 
  mutate(forest_percent = format(forest_percent, scientific = FALSE))
```

Did it work?
```{r}
factbook_2015 |> 
  select(country_name, forest_percent) |> 
  arrange(desc(forest_percent))
```

Excellent.

## Practice
Which country has the highest dollar amount of GDP due to agricultlure, foresty and fishing products? What is that amount in US dollars?

<details>

<summary>Need a hint?</summary>

Our data has `gdp_current_us` and `agriculture_forestry_and_fishing_value_added_percent_of_gdp`. From this you can calculate how much the total GDP from these sources.

</details>

<details>

<summary>Click for the solution</summary>

```{r}
factbook_2015 |> 
  mutate(
    ag_gdp = agriculture_forestry_and_fishing_value_added_percent_of_gdp * gdp_current_us) |> 
  select(country_name, ag_gdp, agriculture_forestry_and_fishing_value_added_percent_of_gdp, gdp_current_us) |> 
  arrange(desc(ag_gdp))
```


</details>
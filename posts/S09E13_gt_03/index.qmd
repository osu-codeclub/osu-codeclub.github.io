---
title: "Introduction to `gt` Tables - 03"
subtitle: "Making *Beautiful* Tables in R."
author:
  - "Horacio Lopez-Nicora"
date: "2025-04-22"
categories: [gt, tables, tidyverse]
title-block-banner: false
image: img/gt_logo.png
alttext: "The logo of the `gt` package features a cube constructed from tables, and is designed by Iannone and colleagues."
---

<br>

[![](img/gt_logo.png)](https://gt.rstudio.com/index.html)

<br>

## Introduction

#### Overview

In the final session of our `gt` tutorial series, we‚Äôll explore how to take your tables to the next level using the `gtExtras` package. You'll learn how to add sparklines, color scales, bar and density plots, and visual summaries. Additionally, you will learn how to save your polished tables as PNG, PDF, or HTML for use in reports and presentations. Let's get started!

#### Recall the `gt` Tables Workflow

[![](img/gt_workflow.png)](https://gt.rstudio.com/index.html)

<br>

Please let's go ahead and install the `gt`, `gtExtras`, and `svglite` package first:

```{r, eval = FALSE}
install.packages("gt")
library(gt)

install.packages("gtExtras")
library(gtExtras)

install.packages("svglite")
library(svglite)
```

## Our data set

#### We will use the `palmerpenguins` data set

![Illustration by [Allison Horst](https://allisonhorst.github.io/palmerpenguins/articles/art.html)](img/palmerpenguins_hex.png){width="50%"}

We are going to continue using our üêß data set from the package [`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/). If you haven't done so, please install that package first:

```{r, eval = FALSE}
install.packages("palmerpenguins")
```

[`palmerpenguins`](https://allisonhorst.github.io/palmerpenguins/index.html) is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr. Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.

We'll now load the package, along with the `gt` and `tidyverse`:

```{r}
# Load necessary packages
library(tidyverse)
library(gt)
library(gtExtras)
library(svglite)
library(palmerpenguins)
```

Once you've loaded that package you will have a data frame called `penguins` at your disposal --- let's take a look:

```{r}
penguins
```

```{r}
# Or glimpse() for a sort of transposed view, so we can see all columns:
glimpse(penguins)
```

<br>

## Color-Coding with `gt_color_rows()`

The gt_color_rows() function transforms your tables from plain data displays into intuitive visual insights by applying gradient color scales to numerical columns. This powerful feature enables readers to instantly identify patterns, outliers, and value distributions without requiring careful examination of each number, making complex data relationships immediately apparent through color intensity.

In addition to using color-coding with `gt_color_rows()`, we'll also implement `gt_theme()` to create a consistent and professional visual style for our tables, ensuring they align with our overall design aesthetic.

```{r, warning = FALSE}
# Summarize data
penguins_summary <- penguins %>%
  filter(!is.na(bill_length_mm), !is.na(flipper_length_mm), !is.na(body_mass_g)) %>%
  group_by(species) %>%
  summarize(
    Mean_Bill_Length = mean(bill_length_mm),
    Mean_Flipper_Length = mean(flipper_length_mm),
    Mean_Body_Mass = mean(body_mass_g),
    .groups = "drop"
  )

# Create styled table
penguins_summary %>%
  gt() %>%
  fmt_number(everything(), decimals = 1) %>%
  tab_header(
    title = "Penguin Species Summary",
    subtitle = "Mean values for bill length, flipper length, and body mass"
  ) %>%
  gt_theme_538() %>% 
  gt_color_rows(
    columns = Mean_Bill_Length,
    palette = "ggsci::orange_material"
  )

```

<br>

::: exercise
#### {{< fa user-edit >}} Exercise 1

-   Using `penguins_summary`, create a similar table using a different `gt_theme()`, try for instance `gt_theme_nytimes()` or `gt_theme_dot_matrix()`. Additionally, try changing the palette to "ggsci::blue_material" or "viridis".

- Finally, apply the `gt_color_rows()` to the three columns: Mean_Bill_Length, Mean_Flipper_Length, and Mean_Body_Mass. 

<details>

<summary>Hint (click here)</summary>

Use the `c()` function after `columns =`. 

</details>

<details>

<summary>Solutions (click here)</summary>

```{r, warning = FALSE}
penguins_summary %>%
  gt() %>%
  fmt_number(everything(), decimals = 1) %>%
  tab_header(
    title = "Penguin Species Summary",
    subtitle = "Mean values for bill length, flipper length, and body mass"
  ) %>%
  gt_theme_538() %>% 
  gt_color_rows(
    columns = c(Mean_Bill_Length, Mean_Flipper_Length, Mean_Body_Mass),
    palette = "ggsci::blue_material"
  )
```

</details>
:::

<br>

## Merging and Labeling Columns

The `cols_merge()` and `cols_label()` functions provide essential tools for transforming cluttered tables into more digestible and professional displays. By strategically combining related columns and implementing clear, descriptive labels, you'll create tables that communicate your data's story more effectively while reducing visual complexity.

```{r, warning = FALSE}
# generating the data set
penguins_stats <- penguins %>%
  filter(!is.na(sex), !is.na(bill_length_mm)) %>%
  group_by(species, sex) %>%
  summarize(
    Mean_Bill = mean(bill_length_mm),
    SD_Bill = sd(bill_length_mm),
    .groups = "drop"
  )

# Merging and labeling columns
penguins_stats %>%
  gt() %>%
  cols_merge(
    columns = c(Mean_Bill, SD_Bill),
    pattern = "{1} ¬± {2}"
  ) %>%
  fmt_number(columns = "Mean_Bill", decimals = 1) %>%
  fmt_number(columns = "SD_Bill", decimals = 2) %>%
  cols_label(
    species = "Species",
    sex = "Sex",
    Mean_Bill = "Mean ¬± SD"
  ) %>%
  tab_header(
    title = "Bill Length (mm) by Species and Sex"
  ) %>% 
  tab_options(
    table.width = pct(70)
    ) %>% 
  gt_theme_538()

```


<br>

::: exercise
#### {{< fa user-edit >}} Exercise 2

- Create the same table we produced earlier with the `penguins_stats` data set. This time, format all column labels and the heading in **BOLD** to enhance readability.

- Format both the mean and standard deviation values to display with 1 decimal place (using `decimals = 1`). Instead of specifying each column individually, use the `ends_with()` function to select and format all relevant columns at once.    

<details>

<summary>Solutions (click here)</summary>

```{r, warning = FALSE}
penguins_stats %>%
  gt() %>%
  cols_merge(
    columns = c(Mean_Bill, SD_Bill),
    pattern = "{1} ¬± {2}"
  ) %>%
  fmt_number(columns = ends_with("Bill"), decimals = 1) %>%
  cols_label(
    species = md("**Species**"),
    sex = md("**Sex**"),
    Mean_Bill = md("**Mean ¬± SD**")
  ) %>%
  tab_header(
    title = md("**Bill Length (mm) by Species and Sex**")
  ) %>% 
  tab_options(
    table.width = pct(70)
    ) %>% 
  gt_theme_nytimes()

```

</details>
:::

<br>

## Add Inline Bar Plots with `gt_plt_bar_pct()`

The `gt_plt_bar_pct()` function transforms ordinary numeric data into compelling visual elements by embedding miniature bar charts directly alongside your values. These inline visualizations instantly communicate proportional relationships within your data, allowing readers to grasp relative magnitudes at a glance without the need for mental calculations or separate charts.

```{r, warning=FALSE}
penguins %>%
  count(species, island) %>%
  group_by(island) %>%
  mutate(prop = n / sum(n)) %>%
  gt() %>%
  gt_plt_bar_pct(column = prop, labels = TRUE) %>%
  tab_header(
    title = "Species Proportions by Island",
    subtitle = "Inline bar chart with percentage labels"
  )
```


## Add Sparklines with `gt_plt_sparkline()`

The `gt_plt_sparkline()` function elevates your tables by embedding miniature data visualizations directly within cells, allowing readers to grasp trends and distributions at a glance without separate charts. These compact graphical elements provide powerful contextual information alongside your numeric data, transforming static tables into dynamic, information-rich displays that reveal patterns that might otherwise remain hidden in rows of numbers.

```{r, warning=FALSE}
penguins %>%
  filter(!is.na(flipper_length_mm)) %>%
  group_by(species, island) %>%
  summarise(flipper_mean = mean(flipper_length_mm), 
            flipper_dist = list(flipper_length_mm), .groups = "drop") %>%
  gt() %>%
  fmt_number(flipper_mean, decimals = 1) %>% 
  gt_plt_sparkline(flipper_dist) %>%
  tab_header(
    title = "Flipper Length Distribution",
    subtitle = "Sparklines show data spread by species and island"
  )
```


## Add density plots with `gt_plt_dist()`

The `gt_plt_dist()` function elevates your tables by embedding compact density plots directly alongside your numeric data, providing immediate visual context for distributions. These inline visualizations allow readers to quickly grasp the shape and spread of your data without needing to reference separate charts, creating a more comprehensive and insightful table that combines both precise values and their distributional patterns.

```{r, warning=FALSE}

penguins %>% filter(!is.na(flipper_length_mm), !is.na(body_mass_g), !is.na(species)) %>% 
  group_by(species) %>%
  summarise(
    dist = list(body_mass_g)
  ) %>%
  gt() %>%
  gt_plt_dist(dist, type = "density", fill = "lightblue") %>%
  cols_label(
    dist = "Density Plot"
  ) %>%
  tab_header(title = "Average Body Mass and Distribution")
  
```


<br>

::: exercise
#### {{< fa user-edit >}} Exercise 3

- Create a table displaying the average body mass (in grams and one decimal place) for each of the three penguin species, accompanied by density plots that visualize the distribution of mass values. This combination will allow for both precise numeric comparison and visual analysis of how the masses are distributed within each species.

<details>

<summary>Solutions (click here)</summary>

```{r, warning = FALSE}
table_density <-  penguins %>% filter(!is.na(flipper_length_mm), !is.na(body_mass_g), !is.na(species)) %>% 
  group_by(species) %>%
  summarise(
    avg_mass = mean(body_mass_g),
    dist = list(body_mass_g)
  ) %>%
  gt() %>%
  fmt_number(columns = avg_mass, decimals = 1) %>% 
  gt_plt_dist(dist, type = "density", fill = "lightblue") %>%
  cols_label(
    species = "Species",
    avg_mass = "Avg Mass (g)",
    dist = "Density Plot"
  ) %>%
  tab_header(title = "Average Body Mass and Distribution")

```

</details>
:::

<br>

## SAVE YOUR TABLE

Make sure the following packages are installed:

```{r, eval = FALSE, warning = FALSE}
install.packages("webshot2")
library(webshot2)
```

```{r, eval = FALSE, warning = FALSE}
# SAVE AS .PNG
gtsave(table_density, "table_density.png")

# SAVE AS .PDF
gtsave(table_density, "table_density.pdf")

# SAVE AS .HTML
gtsave(table_density, "table_density.html")

# BONUS - saving multiple formats in one go:
walk(
  c("png", "pdf", "html"),
  ~gtsave(table_density, filename = paste0("table_density.", .x))
)
```




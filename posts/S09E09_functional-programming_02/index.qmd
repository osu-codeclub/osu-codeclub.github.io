---
title: "Iterating part II: writing custom functions and `purrr:map()`"
subtitle: "Instead of using loops, we can iterate with functions!"
author:
  - "Jessica Cooperstone"
date: "2025-03-25"
categories: [functions, functional programming, purrr]
title-block-banner: false
image: img/custom-function.png
alttext: "Generalized code for creating a new function."
---

------------------------------------------------------------------------

<br>

## Introduction

```{r, fig.alt = "Generalized code for creating a new function.", fig.cap= "Generalized code for creating a new function", out.width = "100%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/custom-function.png")
```

You might find yourself in a situation where you are copying and pasting your code multiple times, changing a single variable. This could be situation where you want to run a series of statistical tests, each with a different response variable. Or, you want to make a series of plots, adjusting which variables are on the x-axis. This is generally not a good idea, as it is error prone and inefficient. 

We are spending this module going through things you can do to avoid copy and pasting your code. Last week we went over [writing and using `for` loops](https://osu-codeclub.github.io/posts/S09E08_functional-programming_01/). Today we are going to talk about:

* writing your own functions
* iterating with those functions using [`purrr:map()`](https://purrr.tidyverse.org/reference/map.html)

We will start, like we typically do, by loading the packages we will use today.

```{r, message = FALSE, warning = FALSE}
library(tidyverse) # for wrangling and everything
library(palmerpenguins) # for penguins data
library(glue) # for easy pasting of names
```

## Writing functions

There are many functions that exist in R, both built into the base functionality, and addition ones we can access by loading different packages. We have talked about [functions](https://osu-codeclub.github.io/posts/S07E03_basics_03/index.html#introduction) before in Code Club, and you may be using them without explicitly realizing they are functions. For example, `mean()` is a function that calculates the mean of an object (usually a vector).

There are some functions which are by default available when you load R (like `mean()`), and others that exist within packages that require you to load those packages (e.g., `tidyverse`) before they can be used (e.g., `ggplot()`).

But, there may be situations where we want to do something in R, and a function does not exist to do this task. This could be because the operation you want to do is so specific to you that no other person could have possibly wanted to do that, or simply that no one has gotten around to writing a built in function yet. This is where writing your own functions can be very useful.


### General syntax

The general syntax of a function is like this:

```{r, eval = FALSE}
name_of_function <- function(arguments) {
  insert_code_here()
}
```

You can pass multiple arguments to a function, but we are going to start simply with a function that takes one argument. 

### Functions with one argument

Here, I am writing a little function to do something simple, like calculate from millimeters to inches.

```{r}
mm_to_inch <- function(value_in_mm) {
  value_in_mm * 0.0393701 # code to convert from mm to inch
}
```

Here, we would call `value_in_mm` our argument or parameter. Remember that this is a user-defined term, you could call this `x`, `i`, or really whatever you want. I like giving the arguments easy-to-read and easy-to-remember names. 

Now that we've made a function, we can see it in our environment under the "Functions" header.

![](img/function-in-environment.png)

If we click on this item, we can see the details of the function.

![](img/function-details.png)

If we start typing our function, and put our cursor between the parentheses and press tab, we can also see some information about our function.

![](img/function-hover-details.png)

We can now pass arguments to our new function, here we will try passing 100 mm and see what that would be in inches.

```{r}
mm_to_inch(value_in_mm = 100)
```

Because our function only takes one argument, we can be less explicit and remove `value_in_mm` and get the same result.

```{r}
mm_to_inch(100)
```

We also might want to pass a whole column or vector to our function, which we can also do.

```{r}
mm_to_inch(penguins$bill_length_mm)
```

Instead of just printing this information, we might want to save it in our dataframe, which we can do by nesting our function within a `mutate()` function. Remember that `mutate()` works with the syntax `new_column = function(existing_variables)`. Also remember that by default, new columns are added after the last column (and if you want to also reorder, you can do that with `select()`).

```{r}
penguins |> 
  mutate(bill_length_inch = mm_to_inch(bill_length_mm))
```

### Embedding built in functions

We can also use other functions inside our function. For example, R does not by default have a function that calculates the coefficient of variation for a variable. We can write that ourselves though so it's fine.

```{r}
# calculate the coefficient of variation by 
# dividing the standard deviation by the mean
cv <- function(x) {
        (sd(x)/mean(x))
}
```

### Functions with two arguments

We can also write functions that take more than one argument. Here is a simple example for calculating BMI, which is weight in kg divided by height in meters squared.

```{r}
calculate_bmi <- function(weight_kg, height_cm) {
  weight_kg/(height_cm/100)^2
}
```

```{r}
calculate_bmi(weight_kg = 80, height_cm = 180)
```

If you provide your arguments in the order they are expected (here, `weight_kg` and then `height_cm`), then you don't need to specify which is which. But, iif you want to give the arguments in a different order you need to be explicit.

```{r}
# this is wrong
calculate_bmi(180, 80)
```

```{r}
# this is better
calculate_bmi(height_cm = 180, weight_kg = 80)
```

### Functions with one argument practice

Write two functions that convert between degrees Fahrenheit and degrees Celsius and test to see if they work.

<details>

<summary>Need a hint?</summary>

°C = (°F - 32) × 5/9 or °F = (°C * 9/5) + 32

</details>

<details>

<summary>Click for the solution</summary>

```{r}
# create a function to convert F to C
degF_to_degC <- function(deg_F) {
  (deg_F - 32) * (5/9)
}

# create a function to convert C to F
degC_to_degF <- function(deg_C) {
  (deg_C * (9/5)) + 32
}
```

```{r}
degF_to_degC(deg_F = 32)

degF_to_degC(deg_F = 100)

degC_to_degF(deg_C = 0)

degC_to_degF(deg_C = -40)
```

</details>

### Plotting functions

Now that we are a little comfortable with writing functions,
we can make ones that are a little more complicated.

We can also write a function to make our plot.
```{r}
species_bill_plotting <- function(focal_species) {
    penguins |> 
    filter(species == focal_species) |> 
    drop_na() |> 
    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
    geom_point() + 
    geom_smooth(method = "lm", # use a linear model
                se = FALSE) + # turn off confidence interval
    scale_color_brewer(palette = "Dark2") +
    labs(title = focal_species, # put the species name as the title
         x = "Bill length (mm)",
         y = "Bill depth (mm)",
         color = "Sex", 
         caption = "Data collected from LTER, Antarctica") + 
    theme_classic() 
}
```

Then, we can pass our argument to the plot, here, the name of the species we want to plot. This is a useful tool for making many plots with the same structure.
```{r}
species_bill_plotting("Adelie")
```

We can then pass this function in a `for` loop with some simpler looking code (because the bulk of it is elsewhere).
```{r}
penguin_species <- unique(penguins$species)

for (focal_species in penguin_species) {
  # pass each focal species to the species_bill_plotting function
  plot <- species_bill_plotting(focal_species)

# save the plots
  filename <- glue("figs/{focal_species}_bill-dimensions.png") # create filename
  ggsave(filename, plot) # save the plot to file
}
```

### Writing plotting functions practice

Write a function to make a series of boxplots that show the difference in `body_mass_g` between male and female penguins by species. Feed one species to your function to check if it works (you don't need to iterate with it yet).

<details>

<summary>Need a hint?</summary>

Check back to our example where we used a `for` loop to see how to make this plot.

</details>

<details>

<summary>Click for the solution</summary>

```{r}
# create the function
body_mass_by_sex_plotting <- function(focal_species) {
    penguins |> 
    filter(species == focal_species) |> 
    drop_na(sex, body_mass_g) |> 
    ggplot(aes(x = sex, y = body_mass_g, color = sex)) +
      geom_boxplot() +
      theme_minimal() +
      scale_color_brewer(palette = "Dark2") +
      theme(legend.position = "none") + # don't need one bc duplicative with x-axis
      labs(x = "Sex",
        y = "Body mass (grams)",
        title = focal_species)
}

# apply the function to Adelie penguins
body_mass_by_sex_plotting("Adelie")
```

</details>

## Iteration with `purrr:map`

To simplify our code, we could replace our `for` loop with one of the `tidyverse:purrr` functions intended for functional program that being with `map*()`.

But before we do this, we need to learn a little bit about lists.

### About lists 
A list is a new data structure for Code Club. A list can contain other data structures, like data frames, vectors or others, within it.

To see what a list looks like, we will look under the hood at the object that comprises a ggplot plot. We have one in our environment called `plot` so let's look at that.

```{r, eval = FALSE}
View(plot)
```

![](img/view-plot.png)

We can see that in this case, `plot` is a list which contains 11 objects, many of which also contain sub-objects. For example, `data` is a dataframe that. contains the data underlying our plot. It is a tibble type of dataframe with 68 rows and 8 columns.

If I want to access that first item in the list, I can do that in a few different ways.

I can use the dollar sign operator `$` to extract parts of the list
```{r}
plot$data
```

Or, I can use indexing to extract out the first item in our list.
```{r}
plot[1]
```

### `map()`

The simplest of the functions in `purrr` is [`map()`](https://purrr.tidyverse.org/reference/map.html), which applies a function over each element of a vector, and returns a list. There are some basics we will have to go over for this to make sense.

The `map()`, we provide a vector/list to iterate over, and a function, like this:
```{r}
map(.x = 1:5, # our vector to apply our function over
    function(x) x + 1) # what the function is
```

Now let's get back to the function we wrote to make our plots - instead of incorporating this into a `for` loop, we can apply it within `map()` like this:

```{r}
map(penguin_species, # vector to iterate over
    species_bill_plotting) # function to use
```

Wow that was simple!

We could also incorporate both the printing and saving of the plot into one function like this:

```{r}
species_bill_plotting_saving <- function(focal_species) {
  
# create plot and assign it to something 
  plot_via_function <- penguins |> 
    filter(species == focal_species) |> 
    drop_na() |> 
    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
    geom_point() + 
    geom_smooth(method = "lm", # use a linear model
                se = FALSE) + # turn off confidence interval
    scale_color_brewer(palette = "Dark2") +
    labs(title = focal_species, # put the species name as the title
         x = "Bill length (mm)",
         y = "Bill depth (mm)",
         color = "Sex", 
         caption = "Data collected from LTER, Antarctica") + 
    theme_classic() 
  
# print
  print(plot_via_function)
  
# save
  filename <- glue("figs/{focal_species}_bill-dimensions-via-function.png") # choose filename
  ggsave(filename, plot_via_function) # save the plot to file
}
```

Then, this code will:

1. Generate your plots
2. Print those plots for you to view in RStudio
3. Save those plots in a directory called `figs` in your working directory
```{r}
map(penguin_species, # vector to iterate over
    species_bill_plotting_saving) # function to apply
```

### Functions with more arguments practice

Try applying your function you made to create a series of boxplots for body mass by sex over each of the penguin species, though edit it so it both prints and saves your plots.

<details>

<summary>Need a hint?</summary>

Here is my hint

</details>

<details>

<summary>Click for the solution</summary>

Edit the function to include printing and saving.

```{r}
species_body_mass_sex_plotting_saving <- function(focal_species) {
  my_plot <- penguins |> 
    filter(species == focal_species) |> 
    drop_na(sex, body_mass_g) |> 
    ggplot(aes(x = sex, y = body_mass_g, color = sex)) +
      geom_boxplot() +
      theme_minimal() +
      scale_color_brewer(palette = "Dark2") +
      theme(legend.position = "none") + # don't need one bc duplicative with x-axis
      labs(x = "Sex",
        y = "Body mass (grams)",
        title = focal_species)

# print
  print(my_plot)
  
# save
  filename <- glue("figs/{focal_species}_body-mass-by-sex.png") # choose filename
  ggsave(filename, my_plot) # save the plot to file
}
```

Apply the function across the species
```{r}
map(penguin_species, # what to iterate over
    species_body_mass_sex_plotting_saving) # the function to iterate with
```

</details>

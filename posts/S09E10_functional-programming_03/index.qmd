---
title: "Iterating part III: _purrr_'s `map()` function"
subtitle: "A deeper dive into iterating with _purrr's_ `map()` function."
pagetitle: "Iteration III"
author: "Jelmer Poelstra"
date: "2025-04-01"
categories: [functional programming, purrr]
title-block-banner: false
number-depth: 2
execute: 
  eval: true
  cache: false
knitr:
  opts_chunk:
    out.width: "85%"
editor_options: 
  chunk_output_type: console
---

------------------------------------------------------------------------

<br>

## Intro and getting started

In the last two weeks,
you've learned about a couple of effective coding strategies for situations where
you need to **repeat an operation**,
for example across different subsets of your data.
**Instead of copy-pasting your code and making small edits for every copy,**
you can use `for` loops and functions like `map()`.

Today, we will start with a recap of these approaches and then dive deeper into
the `map()` function (and the very similar `map_vec()`).

The `map()` function is part of the _purrr_ package,
one of the core tidyverse packages that can be loaded with `library(tidyverse)`.
We will also load the familiar _palmerpenguins_ dataset for a couple of examples.

```{r}
library(palmerpenguins)
library(tidyverse)
```

<br>

## Iteration recap

When we iterate,
we repeat a procedure for each value/element in a certain collection.

Let's say we have three sets of measurements (each stored in a vector):

```{r}
vec1 <- c(3, 74, 18)
vec2 <- c(33, 14, 25)
vec3 <- c(10, 88, 47)
```

We want to compute the mean value for each of these.
The simplest approach would be to just repeat the code to do so three times,
changing only the identity of the vector that we operate on: 

```{r}
mean(vec1)
mean(vec2)
mean(vec3)
```

But we'd like to be able to avoid such code repetition.
First, we may run into situations where we have many more than three collections.
Second, the code that we need repeat may be much longer than just a call to `mean()`. 
All in all, the copy-and-paste routine can get very tedious, is error-prone,
and would also make it more difficult to edit the repeated code.

In the previous two sessions, Jess has shown us two different ways of avoiding
code repetition.
The first is the `for` loop,
which is a very widely used technique in programming,
though is not nearly as common in R as in many other languages.
We can iterate over our vectors with a `for` loop as follows ---
note that I am putting them together in a `list` to do so:

```{r}
for (vec in list(vec1, vec2, vec3)) {
  print(mean(vec))
}
```

A more compact and elegant way of iterating is using _functional programming_,
where a **function does the iteration** --- here, the `map()` function:
  
```{r}
map(.x = list(vec1, vec2, vec3), .f = mean)
```

Some notes on the syntax of the `map()` function:

- The first argument (`.x`) is the collection you want to iterate over,
  which can be a vector, list, or dataframe.
- The second argument (`.f`) is the function that you want to apply to each
  element of the collection.
- The name of that function is written without parentheses:
  `mean` and not `mean()`!

Under the hood, the function `mean()` will be run three times,
each time with one of the vectors as its argument.

<br>

## Beyond the basics of `map()`

### Returning vectors

By default, `map()` will return a list.
But in some cases, like here, we may prefer to get a vector instead.
We can do this with a slight variant on `map()`, `map_vec()`:

```{r}
map_vec(.x = list(vec1, vec2, vec3), .f = mean)
```

<hr style="height:1pt; visibility:hidden;" />

### How to handle additional arguments?

What if we need to pass additional arguments to the function that `map()`
calls for us?

For example, let's say we had an `NA` in our data,
which means that by default, `mean()` will return `NA`:

```{r}
# Change the second element of vec1 to 2
vec1[2] <- NA
vec1
```

```{r}
mean(vec1)

```{r}
map_vec(.x = list(vec1, vec2, vec3), .f = mean)
```

<hr style="height:1pt; visibility:hidden;" />

We can avoid this by using `na.rm = TRUE` in a stand-alone call to `mean()`...

```{r}
mean(vec1, na.rm = TRUE)
```

...but how can we do that with the `map()` function?
The below doesn't work:

```{r, error=TRUE}
map_vec(.x = list(vec1, vec2, vec3), .f = mean(na.rm = TRUE))
```

<hr style="height:1pt; visibility:hidden;" />

Instead,
we need to pass any additional arguments **separately**,
basically as if they were arguments of `map()`:

```{r}
map_vec(.x = list(vec1, vec2, vec3), .f = mean, na.rm = TRUE)
```

<hr style="height:1pt; visibility:hidden;" />

### Defining an anonymous function within `map()`

It _is_ possible to write the function call within `map()` using parentheses ---
but this would essentially entail defining a function on the fly,
which you can do as follows:

```{r}
map_vec(.x = list(vec1, vec2, vec3), .f = function(x) mean(x, na.rm = TRUE))
```

In practice,
the above syntax is most commonly used in slighly more complex situations.
For example, you may want to **count the number of `NA`s** in the following way,
where the `is.na()` function is nested within the `sum()` function:

```{r}
sum(is.na(vec1))
```

This poses a challenge to the standard `map()` syntax,
but can be easily achieved with the anonymous function syntax shown above:

```{r}
map_vec(.x = list(vec1, vec2, vec3), .f = function(x) sum(is.na(x)))
```

<br>

::: exercise

### {{< fa user-edit >}} Exercise 1

**A)** Once again compute the mean of the three sets of measurements with `map()`,
but now also pass the argument `trim = 0.1` to the `mean()` function
(If you're interested,
type `?mean` for some information about what this argument does.)

<details><summary>Click here for the solution</summary>
<hr style="height:1pt; visibility:hidden;" />

Arguments are added as if they were arguments of `map()` / `map_vec()`,
so you simply add `trim = 0.1` after a comma and don't use additional
parentheses:

```{r}
map_vec(.x = list(vec1, vec2, vec3), .f = mean, na.rm = TRUE, trim = 0.1)
```

Which runs the following under the hood:

```{r, eval=FALSE}
mean(vec1, na.rm = TRUE, trim = 0.1)
mean(vec2, na.rm = TRUE, trim = 0.1)
mean(vec3, na.rm = TRUE, trim = 0.1)
```
</details>

<hr style="height:1pt; visibility:hidden;" />

**B)** Now use `map_vec()` with the `length()` function to compute the length of
each of our vectors.

<details><summary>Click here for the solution</summary>

```{r}
map_vec(.x = list(vec1, vec2, vec3), .f = length)
```

</details>

:::

<hr style="height:1pt; visibility:hidden;" />

::: exercise

### {{< fa user-edit >}} Exercise 2

**A)** R does not have a built-in function to compute the standard error.
Here is how we can do so --- by taking the standard deviation using the `sd()`
function and dividing it by the square root (`sqrt()`) of the number of
observations (`length()`):

```{r}
sd(vec1, na.rm = TRUE) / sqrt(length(vec1))
```

- Based on the above code, define your own function that computes the standard error.
  For a refresher on defining your own functions, see
  [this section from last week's material](/posts/S09E09_functional-programming_02/#general-syntax).

- Then, use your custom function inside `map_vec()` to compute the standard error
  for our data.

<details><summary>Click here for the solution for the custom function</summary>

```{r}
se <- function(x) {
  sd(x, na.rm = TRUE) / sqrt(length((x)))
}
```

</details>

<details><summary>Click here for the full solution</summary>

```{r}
se <- function(x) {
  sd(x, na.rm = TRUE) / sqrt(length((x)))
}

map_vec(.x = list(vec1, vec2, vec3), .f = se)
```
</details>

<hr style="height:1pt; visibility:hidden;" />

**B)** Now, restructure your code to compute the standard error with an anonymous
function inside `map_vec()`.

<details><summary>Click here for the solution</summary>

```{r}
map_vec(
  .x = list(vec1, vec2, vec3),
  .f = function(x) sd(x, na.rm = TRUE) / sqrt(length((x)))
)
```

</details>

:::

<br>

## Automatic/implicit iteration in R

The example we used above with the three sets of vectors is rather contrived.
This speaks to the fact that in R,
we don't have to explicitly iterate with `for` loops or `map()` except in more
complex situations.

This is because first,
iteration is in many cases "automagic" in R due to vectorization,
so we don't have to iterate over the values in vectors:

```{r}
measurements_inch <- c(3, 74, 18)

# Multiply each value in the vector with 2.54 :
2.54 * measurements_inch
```

Also, we usually have (or can put) our data in data frames,
where vectorization across rows applies as well:

```{r}
data.frame(measurements_inch) |>
  # Multiply each value in the vector with 2.54 :
  mutate(measurements_cm = 2.54 * measurements_inch)
```

<hr style="height:1pt; visibility:hidden;" />

::: {.callout-tip collapse="true"}
### Iterate across groups with `summarize()` and `.by` _(Click to expand)_

Speaking of implicit iteration in data frames,
_dplyr_ has functionality to repeat operations across subsets of the data
without having to explicitly iterate over these subsets.
For example,
once the data from the above three-vector example is in a data frame...

```{r}
all <- data.frame(
  value = c(vec1, vec2, vec3),
  group = rep(c("vec1", "vec2",  "vec3"), each = 3) 
)

all
```

<hr style="height:1pt; visibility:hidden;" />

...we can use `summarize()` with `.by` to repeat computations across our sets:

```{r}
all |> summarize(mean = mean(value, na.rm = TRUE), .by = group)
```

:::

However,
**operating across multiple _columns_ of a dataframe is a bit more challenging,**
and in the final section below, we'll see how to do this with `map()`.

<br>

## Using `map()` to iterate across columns of a data frame

A data frame is really a special case of a list,
one in which each vector is of the same length and constitutes a column.
Therefore, iterating over a dataframe with a function like `map()` means that
you'll repeat the operation for each column.

For example, it's easy to check what type of data each column contains by
using `map_vec()` with the `class()` function:

```{r}
map_vec(.x = penguins, .f = class)
```

Similarly, the `n_distinct()` function computes the number of distinct (unique)
values, and we can run that on each column like so:

```{r}
map_vec(.x = penguins, .f = n_distinct)
```

<hr style="height:1pt; visibility:hidden;" />

::: {.callout-tip collapse="true"}
### An alternative approach: the `across()` function _(Click to expand)_

You can also operate on multiple columns using _dplyr_'s `across()` function,
which should be used inside another _dplyr_ function,
most commonly `summarise()` or `mutate()`.

For usage in the simplest cases, like for our `map()` examples above,
using `across()` is more verbose than `map()`:

```{r}
penguins |> summarise(across(.cols = everything(), .fns = n_distinct))
```

<hr style="height:1pt; visibility:hidden;" />

Notes on the `across()` syntax as shown above: 

- Its main arguments are:
  - `.cols` -- corresponding to `.x` in `map()` (the things to operate on)
  - `.fns` -- corresponding to `.f` in `map()` (the function to repeat)
- You should always make an explicit column selection,
  so for the simplest case of operating across all columns,
  it's best to use `everything()`^[
  The `across()` function does (still) work without `.cols()`,
  and will then select all columns,
  but this behavior is "deprecated" (outdated) and should not be used.].
  
On the other hand, it is much eaier to perform group-wise computations with
`summarise(across())` than with `map()`:

```{r}
penguins |>
  summarise(across(.cols = everything(), .fns = n_distinct), .by = species)
```

<hr style="height:1pt; visibility:hidden;" />

Finally,
if you need to use additional arguments for the function that `across()` calls,
you should use the anonymous function notation that was explained in the first
box on this page:

```{r}
penguins |>
  summarise(across(
    .cols = where(is.numeric),
    .fns = function(x) mean(x, na.rm = TRUE)
    ))
```
:::

<hr style="height:1pt; visibility:hidden;" />

::: exercise
### {{< fa user-edit >}} Exercise 2

**A)** Use `map_vec()` to compute the mean value for _each_ column in the
`penguins` dataframe. Why are you getting warning messages and `NA`s?

<details><summary>Click here for the solution</summary>

```{r}
map_vec(.x = penguins, .f = mean, na.rm = TRUE)
```

The warning messages and `NA`s (despite using `na.rm = TRUE`) appear because 
not some of the columns, like `species` and `island`,
don't contain numbers at all.

</details>

**B)** Can you modify the `penguins` dataframe before passing it to `map_vec()`
so it only contains columns with numbers?

<details><summary>Click here for a hint on the general workflow</summary>

You could save the modified dataframe and then use `map_vec()`,
but we'd prefer to use pipes as follows:

```{r}
penguins |>
  select(bill_length_mm) |>
  map_vec(.f = mean, na.rm = TRUE)
```

_(The above only selects one column though,_
_you'll still have to work on the `select()` function call!)_

</details>

<details><summary>Click here for a hint on column selection</summary>

The naive way to select all numeric columns would be to first figure out
out which are numeric, and then simply list all of those inside `select()`.

However, there is a handy helper function to select columns by type: `where()`:
see [this Help page](https://tidyselect.r-lib.org/reference/where.html).
Can you figure out how to use it to select numeric columns?

</details>

<details><summary>Click here for the solution</summary>

```{r}
penguins |>
  select(where(is.numeric)) |>
  map_vec(.f = mean, na.rm = TRUE)
```

</details>

**C)** Count the number of `NA`s in each column of the `penguins` dataframe
within `map_vec()`.

<details><summary>Click here for the solution</summary>

```{r}
map_vec(.x = penguins, .f = function(x) sum(is.na(x)))
```

</details>

:::

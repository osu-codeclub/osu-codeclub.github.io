---
title: "Iterating part I: `for` loops"
subtitle: "Developing tools for doing things over and over"
author:
  - "Jessica Cooperstone and Jelmer Poelstra"
date: "2025-03-18"
categories: [for loops, base R, functional programming]
title-block-banner: false
image: img/for-loop-monsters.png
alttext: "Illustrated for loop example. Input vector is a parade of monsters, including monsters that are circles, triangles, and squares. The for loop they enter has an if-else statement: if the monster is a triangle, it gets sunglasses. Otherwise, it gets a hat. The output is the parade of monsters where the same input parade of monsters shows up, now wearing either sunglasses (if triangular) or a hat (if any other shape). Cartoon by ALlison Horst"
---

# Introduction

```{r, fig.alt = "Illustrated for loop example. Input vector is a parade of monsters, including monsters that are circles, triangles, and squares. The for loop they enter has an if-else statement: if the monster is a triangle, it gets sunglasses. Otherwise, it gets a hat. The output is the parade of monsters where the same input parade of monsters shows up, now wearing either sunglasses (if triangular) or a hat (if any other shape).", fig.cap= "Cartoon from [Allison Horst](https://github.com/allisonhorst/stats-illustrations)", out.width = "100%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/for-loop-monsters.png")
```

You might find yourself in a situation where you are copying and pasting your code multiple times, changing a single variable. This could be situation where you want to run a series of statistical tests, each with a different response variable. Or, you want to make a series of plots, adjusting which variables are on the x-axis. This is generally not a good idea, as it is error prone and inefficient. 

We are going to spend the next few sections of Code Club talking about things you can do to avoid copy and pasting your code. Today, we are going to talk about:

* `for` loops
* writing your own functions

We will start, like we typically do, by loading the packages we will use today.

```{r, message = FALSE, warning = FALSE}
library(tidyverse) # for wrangling and everything
library(palmerpenguins) # for penguins data
library(glue) # for easy pasting of names
```


# `for` loops
## `for` loops, the basics
For loops iterate over some kind of sequence, performing an action, one element at a time. The basic syntax is like this:

```{r, eval = FALSE}
for (item in list_of_items) { # items to iterate over
  # code that does something
  do_something(item) # this is a made up function
}
```

Let's go through a simple example:
```{r}
for (some_value in 1:5) {
  print(some_value * 2)
}
```

What is happening under the hood, is that your `for` loop is assigning each item in your vector (here, the integer values 1 through 5) to the object `some_value`, multiplying it by 2, and then printing it. If we want to be very explicit, this is exactly what is happening:

```{r}
# iteration 1
some_value <- 1
print(some_value * 2)

# iteration 2
some_value <- 2
print(some_value * 2)

# iteration 3
some_value <- 3
print(some_value * 2)

# iteration 4
some_value <- 4
print(some_value * 2)

# iteration 5
some_value <- 5
print(some_value * 2)
```

If we do this again in the loop: 

```{r}
for (some_value in 1:5) {
  print(some_value * 2)
}
```

And check what `some_value` is at the end:
```{r}
some_value
```

We can see that the value 5 (last of `some_value`) is currently assigned. This is not totally intuitive - you might think that `some_value` would hold all of the values that we set to that object in our loop but *this is not true*. This is good to remember since this is now an object lingering in our environment.

I have shown this use-case of a `for` loop because I think it helps you to see how it works - not because you would actually use it to do this task. Because R is a vectorized language, you don't actually need a `for` loop to multiply every value by a number, we can do this task more simply below. 
```{r}
# multiply each element of the vector 1:5 by 2
1:5 * 2
```

Let's do another example. I could create a `for` loop that simply prints something out for me. Here's an example:

```{r}
# create a vector of the names of my special flowers
my_special_flowers <- c("dahlias", "roses", "ranunculus")

# use a for loop to print this message for each flower
for (flower in my_special_flowers) {
  print(glue("I really like {flower}"))
}
```

You can also make this conditional, meaning your `for` loop does one thing under certain conditions, and something else in another condition. We can accomplish this by nesting an `if else` statement within our `for` loop. 

We are also making use of the function [`glue()`](https://glue.tidyverse.org/) (which we've gone over before) which allows easy pasting, like this:
```{r}
my_location <- "Code Club"
glue("Welcome to {my_location}")
```

```{r}
# a vector of solanaceous vegetables
my_vegetables <- c("Tomato", "Potato", "Pepper", "Eggplant")

for (vegetable in my_vegetables) {
# if the vegetable is tomato, print this message  
  if (vegetable == "Tomato") {
    print(glue("{vegetable} is my favorite Solanaceae vegetable"))
  }
# if the vegetable is anything else, print this message  
  else {
    print(glue("{vegetable} is a perfectly fine Solanaceae vegetable"))
  }
}
```

### `for` loops basics practice

Write a `for` loop that takes the vector of numbers -5, -3, 2, 4, 7 and prints their absolute value.

<details>

<summary>Need a hint?</summary>
<br>
The function for absolute value is `abs()`.

</details>

<details>

<summary>Need another hint?</summary>
<br>
First create a vector of your numbers, then iterate over it.

</details>

<details>

<summary>Click for the solution</summary>

```{r}
# create your vector of numbers to iterate over
my_vector <- c(-5, -3, 2, 4, 7)

# use a for loop to do the iterating
for (number in my_vector) {
  print(abs(number))
}
```

</details>

Write a `for` loop that, when given a number, will tell you whether an positive integer is odd or even. Don't worry about negatives or zero here.

<details>

<summary>Need a hint?</summary>
<br>
A function that would be useful here is the modulo, `%%`, where from the remainder, you can determine odd or even. 

</details>

<details>

<summary>Need another hint?</summary>
<br>
Create a vector of numbers you want to see if they are odd or even. Then write a `for` loop to print whether they are odd or even.

</details>

<details>

<summary>Click for the solution</summary>

```{r}
some_integers <- c(1, 5, 12, 401, 1000)

for (number in some_integers) {
# if the number is divisible by 2, print that its even 
  if (number %% 2 == 0) {
    print(glue("{number} is an even number"))
  }
# if the number is anything else, print that its odd 
  else {
    print(glue("{number} is an odd number"))
  }
}
```

</details>

## `for` loops, for plotting

So far, we have done things in a `for` loop do not really require a `for` loop to accomplish, though I want you to see how they work first with simpler examples. Making a bunch of plots at once is something that is really easier and less error prone with a `for` loop.

First let's revisit our `penguins` data to create a base plot, and then iterate it over a variable to make multiples.

```{r}
glimpse(penguins)
```

What if we want to create a plot comparing the `bill_length_mm` vs. `bill_depth_mm` for each species? We can:

* take our `penguins` data
* `filter()` for a single `species`
* make our plot

```{r}
penguins |> 
# select only the Adelie penguins  
  filter(species == "Adelie") |> 
# remove missing values for our variables of interest  
  drop_na(bill_length_mm, bill_depth_mm, sex) |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
    geom_point() + 
    geom_smooth(method = "lm", # use a linear model
                se = FALSE) + # turn off confidence interval
    scale_color_brewer(palette = "Dark2") +
    labs(title = "Adelie", # put the species name as the title
         x = "Bill length (mm)",
         y = "Bill depth (mm)",
         color = "Sex") +
    theme_classic() 
```


Now we have a plot, if we want to create one per `species` (in this case there are 3), we can use a `for` loop to do this.

```{r, message = FALSE, warning = FALSE}
# create a vector that has all the penguin species names
penguin_species <- unique(penguins$species)

# use a for loop to iterate over the penguin species
for (focal_species in penguin_species) {
# filter your df for each focal_species  
  one_penguin_species <- penguins |> 
    filter(species == focal_species) |> 
    drop_na(bill_length_mm, bill_depth_mm, sex) 
  
# plot
  plot <- one_penguin_species |>   
    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
    geom_point() + 
    geom_smooth(method = "lm", # use a linear model
                se = FALSE) + # turn off confidence interval
    scale_color_brewer(palette = "Dark2") +
    labs(title = focal_species, # put the species name as the title
         x = "Bill length (mm)",
         y = "Bill depth (mm)",
         color = "Sex") +
    theme_classic() 

# print the plot
  print(plot)
}
```

We can also add to our `for` loop to save the plots in a location of our choosing. We can start by creating a new directory (in your working directory) called `figs` which is where we will store our figures.

```{r, eval = FALSE}
# write code to create a directory called "figs" in our working directory
dir.create(path = "figs")
```

Instead of printing the plot, we are going to save it.
```{r}
for (focal_species in penguin_species) {
# filter your df for each focal_species  
  one_penguin_species <- penguins |> 
    filter(species == focal_species) |> 
    drop_na(bill_length_mm, bill_depth_mm, sex) 
  
# plot
  plot <- one_penguin_species |>   
    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
    geom_point() + 
    geom_smooth(method = "lm", # use a linear model
                se = FALSE) + # turn off confidence interval
    scale_color_brewer(palette = "Dark2") +
    labs(title = focal_species, # put the species name as the title
         x = "Bill length (mm)",
         y = "Bill depth (mm)",
         color = "Sex") +
    theme_classic() 

# save the plots
  filename <- glue("figs/{focal_species}_bill-dimensions.png") # create filename
  ggsave(filename = filename, 
         plot = plot) # save the plot to file
}
```

Now time to practice. 

### `for` loops, for plotting practice

Write a `for` loop to make a series of boxplots that show the difference in `body_mass_g` between male and female penguins by species. Try both printing and saving the plots.

<details>

<summary>Need a hint?</summary>
<br>
You are going to iterate over species.

</details>

<details>

<summary>Need another hint?</summary>
<br>
Here is a sample little base plot:
```{r}
penguins |> 
  filter(species == "Adelie") |> 
  drop_na(body_mass_g, sex) |> 
  ggplot(aes(x = sex, y = body_mass_g, color = sex)) +
  geom_boxplot() +
  theme_minimal() +
  theme(legend.position = "none") + # don't need one bc duplicative with x-axis
  labs(x = "Sex",
        y = "Body mass (grams)",
        title = "Adelie")
  
```


</details>

<details>

<summary>Click for the solution</summary>

```{r}
for (focal_species in penguin_species) {
# filter your df for each focal_species  
  one_penguin_species <- penguins |> 
    filter(species == focal_species) |> 
    drop_na(bill_length_mm, bill_depth_mm, sex) 
  
# plot
  plot <- one_penguin_species |>   
    ggplot(aes(x = sex, y = body_mass_g, color = sex)) +
      geom_boxplot() +
      theme_minimal() +
      scale_color_brewer(palette = "Dark2") +
      theme(legend.position = "none") + # don't need one bc duplicative with x-axis
      labs(x = "Sex",
        y = "Body mass (grams)",
        title = "Adelie")

# print the plots  
  print(plot)

# save the plots
  filename <- glue("figs/{focal_species}_body-mass-by-sex.png") # create filename
  ggsave(filename = filename, 
         plot = plot) # save the plot to file
}
```

</details>


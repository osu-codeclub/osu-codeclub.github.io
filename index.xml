<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>OSU Code Club</title>
<link>https://osu-codeclub.github.io/index.html</link>
<atom:link href="https://osu-codeclub.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Fri, 12 Apr 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Plotting 3: histogram, density, and bar plots</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-the-past-session" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-the-past-session">Recap of the past session</h4>
<p>In last week’s session, we delved into aesthetics and gained a deeper understanding of the topic. Additionally, we introduced the theme() function. We also acquired knowledge on the fundamentals of geom_boxplot(), geom_violin(), and stat_summary.</p>
</section>
<section id="session-goals" class="level4">
<h4 class="anchored" data-anchor-id="session-goals">Session Goals</h4>
<ul>
<li>Let’s explore our <strong>palmerpinguins</strong> dataset using histogram and density plots. We will learn about <strong>geom_histogram()</strong> and <strong>geom_density()</strong>.</li>
<li>Learn the basic of <strong>bar graph</strong> in <code>ggplot2</code>.</li>
</ul>
<p><br></p>
</section>
</section>
<section id="our-data-set" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="our-data-set"><span class="header-section-number">2</span> Our data set</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/img/dashboard.jpeg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by <a href="https://twitter.com/allison_horst">Allison Horst</a>.</figcaption>
</figure>
</div>
<p><br></p>
<p>We are going to continue using our 🐧 data set from the package <a href="https://allisonhorst.github.io/palmerpenguins/"><code>palmerpenguins</code></a>. If you haven’t done so, please install that package first:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"palmerpenguins"</span>)</span></code></pre></div>
</div>
<p><a href="https://allisonhorst.github.io/palmerpenguins/index.html"><code>palmerpenguins</code></a> is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.&nbsp;Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.</p>
<p>We’ll now load the package, along with the tidyverse (which includes ggplot2):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>Once you’ve loaded that package you will have a data frame called <code>penguins</code> at your disposal — let’s take a look:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or glimpse() for a sort of transposed view, so we can see all columns:</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>Rows: 344
Columns: 8
$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…
$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="histograms-geom_histogram" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="histograms-geom_histogram"><span class="header-section-number">3</span> Histograms: <code>geom_histogram()</code></h2>
<p>A histogram provides a precise graphical portrayal of the distribution of numerical data. It only needs one aesthetic, which is the <code>x</code> variable.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
It is crucial to have good <a href="https://ggplot2.tidyverse.org/reference/labs.html">labels</a> to ensure the accessibility of your plots to a broader audience. Always make sure that the axis (within <code>labs()</code>, use <code>x="x-title"</code>, <code>y="y-title"</code>) and legend (within <code>labs()</code>, use <code>fill/color="legend-title"</code>) labels display the complete variable name.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>The default computation of <code>geom_histogram</code> through <code>stat_bin</code> uses 30 bins, which is not always an optimal choice.</p>
<p>There are possible options to address this issue. One option is to set the number of bins using the <code>bins</code> argument. Another option is to adjust the width of each bin using the <code>binwidth</code> argument.</p>
<p>The number of bins or bars in the histogram can be customized using the <code>bins</code> argument in the <code>geom_histogram</code> function.</p>
<p>An alternative option involves utilizing the <code>binwidth</code> argument in the <code>geom_histogram</code> function, which dictates the width of each bin on the X-axis. <em>It is important to note that this argument takes priority over the bin argument</em>.</p>
<p><br></p>
<section id="fa-user-edit-exercise-1" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-1"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 1</h4>
<ul>
<li>Using the example from above, within <code>geom_histogram()</code> use the <code>bins</code> and <code>binwidth</code> arguments to change the size of each bar/bin.</li>
</ul>
<details>
<summary>
Hints (click here)
</summary>
<p>You can use the following argument <code>geom_histogram(bins = TRY DIFFERENT VALUES)</code> or <code>geom_histogram(binwidth = TRY DIFFERENT VALUES)</code>.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
<section id="is-the-distribution-bimodal" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="is-the-distribution-bimodal"><span class="header-section-number">3.1</span> Is the distribution bimodal?</h3>
<p>Histograms are effective in displaying the distributional characteristics of variables within a dataset. They provide visual cues regarding the location of distribution peaks, whether the distribution is skewed or symmetric, and the presence of any outliers. <strong>However, given that our dataset consists of three distinct species, can we utilize histograms to analyze all of them simultaneously?</strong></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>, </span>
<span id="cb10-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>, </span>
<span id="cb10-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<a href="https://ggplot2.tidyverse.org/reference/theme.html">Themes</a> are a powerful way for customizing the non-data elements of your plots, such as titles, labels, fonts, background, gridlines, and legends. They can be employed to provide plots with a consistently customized appearance.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p><br></p>
<section id="fa-user-edit-exercise-2" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-2"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 2</h4>
<ul>
<li>Instead of coloring only the outline of the <code>bins</code>, let’s color the <code>bins</code> themselves.</li>
</ul>
<details>
<summary>
Hints (click here)
</summary>
<p>You will have to use the argument <code>fill</code>. Please be sure that your legend title, adjusted using <code>labs()</code>, has been properly set.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>, </span>
<span id="cb11-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>,</span>
<span id="cb11-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
</section>
<section id="density-plot-geom_density" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="density-plot-geom_density"><span class="header-section-number">4</span> Density plot: <code>geom_density()</code></h2>
<p>A density plot provides an alternative way to visualize the distributions of numerical variables. It is essentially a smoothed version of a histogram and serves as a practical option, especially when dealing with continuous data originating from a smooth underlying distribution.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density plot of penguin flipper length"</span>, </span>
<span id="cb12-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>,</span>
<span id="cb12-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<section id="fa-user-edit-exercise-3" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-3"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 3</h4>
<p>Let’s analyze the distribution of penguins’ body mass according to their species utilizing density plots. - Incorporate distinct colors for each species in the density plots, not just the lines. Employ a level of transparency to provide a clearer view. Please ensure that the density plot is accompanied by a title, subtitle, and <strong>caption</strong>.</p>
<details>
<summary>
Hints (click here)
</summary>
<p>You will have to use the argument <code>fill</code> to incorporate color, <code>alpha</code> for transparency, and <code>caption</code> within the <code>labs</code> argument.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density plot of penguin body mass"</span>, </span>
<span id="cb13-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>,</span>
<span id="cb13-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PalmerPinguins Dataset"</span>,</span>
<span id="cb13-9">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="geoms-from-ggplot-extension-packages" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="geoms-from-ggplot-extension-packages"><span class="header-section-number">5</span> Geoms from ggplot “extension” packages</h2>
<p>Transparency can help when density plots ovelap, but can I do better?</p>
<p>There are various <a href="https://exts.ggplot2.tidyverse.org/gallery/"><strong>ggplot extension packages</strong></a> available. Some of these packages provide extra geoms, such as the trendy “ridgeline” plots offered by the ggridges package.</p>
<p>Transparency can help when density plots ovelap, but can I do better?</p>
<p>There are various <a href="https://exts.ggplot2.tidyverse.org/gallery/"><strong>ggplot extension packages</strong></a> available. Some of these packages provide extra geoms, such as the trendy “ridgeline” plots offered by the ggridges package.</p>
<p>We’ll have to install the package:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggridges"</span>)</span></code></pre></div>
</div>
<p>After loading it, we can utilize the ridgeplot geom <code>geom_density_ridges()</code> in the same manner as any other geom.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggridges)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density_ridges</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density plot of penguin body mass"</span>, </span>
<span id="cb15-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>,</span>
<span id="cb15-9">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PalmerPinguins Dataset"</span>,</span>
<span id="cb15-10">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Picking joint bandwidth of 153</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please note that when using <code>geom_density_ridges()</code>, we need to specify the <code>y</code>.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="bar-graphs-geom_bar" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="bar-graphs-geom_bar"><span class="header-section-number">6</span> Bar graphs: <code>geom_bar()</code></h2>
<p>In order to analyze the distribution of a categorical variable, a bar chart can be employed. The bar heights indicate the frequency of observations associated with each <code>x</code> value.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="stacked-bar-plots." class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="stacked-bar-plots."><span class="header-section-number">6.1</span> Stacked bar plots.</h3>
<p>Stacked bar plots can be utilized to visualize the association between two categorical variables. For instance, these two stacked bar plots demonstrate the relation between island and species, showcasing the distribution of species within each island.</p>
<p>Stacked bar plots can be utilized to visualize the association between two categorical variables. For instance, these two stacked bar plots demonstrate the relation between island and species, showcasing the distribution of species within each island.</p>
<p>The first plot displays the frequencies of penguin species on different islands. It reveals that there is an equal number of Adelies on each island. Nonetheless, we lack a clear understanding of the percentage distribution within each specific island.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> island, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>The second plot, which is a relative frequency plot created by setting <code>position = "fill"</code> in the <strong>geom</strong>, is more useful for comparing species distributions across islands because it is not influenced by the unequal numbers of penguins on the islands.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> island, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>By using this plot, we can see that Gentoo penguins exclusively live on Biscoe Island and represent approximately 75% of the penguins on that island. Chinstrap penguins exclusively inhabit Dream Island and make up approximately 50% of the penguins on that island. Whereas Adelie penguins inhabit all three islands and account for the entire penguin population on Torgersen Island.</p>
</section>
</section>
<section id="bar-chart-of-means-stat_summary" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="bar-chart-of-means-stat_summary"><span class="header-section-number">7</span> Bar chart of means: <code>stat_summary()</code></h2>
<p>To summarize the data using averages, we can use the <code>stat_summary()</code> function. Instead of invoking a geom_* function, we can employ <code>stat_summary()</code> to define the desired method for summarizing the data and presenting it in our visual representation.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>,</span>
<span id="cb20-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>,</span>
<span id="cb20-5">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb20-6">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb20-7">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb20-8">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.data =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_se"</span>,</span>
<span id="cb20-10">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"errorbar"</span>,</span>
<span id="cb20-11">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="fa-user-edit-exercise-4" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-4"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 4</h4>
<ol type="1">
<li>To keep only the Gentoo data, pipe your dataset into the <code>filter()</code> function.</li>
<li>Create a bar graph examining the mean bill_length_mm by sex by piping the filtered data into <code>ggplot()</code>.</li>
<li>Ensure that the points with unknown sex (NA) are removed.</li>
<li>Include error bars in the bar plots and add transparency.</li>
<li>Display all data points on top of the boxplot.</li>
<li>Finally, use color to fill every bar by using the “DarSet2” palette from the “RColorBrewer” package, which was installed last week.</li>
</ol>
<details>
<summary>
Hints (click here)
</summary>
<p>You will have to load <code>RColorBrewer</code> and use the argument <code>scale_fill_brewer(palette = "Dark2")</code>.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>,</span>
<span id="cb21-6">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>,</span>
<span id="cb21-7">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb21-8">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb21-9">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb21-10">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span>sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.data =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_se"</span>, </span>
<span id="cb21-12">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"errorbar"</span>, </span>
<span id="cb21-13">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dark2"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>plotting</category>
  <category>ggplot2</category>
  <guid>https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index.html</guid>
  <pubDate>Fri, 12 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/img/ggplot2_exploratory.png" medium="image" type="image/png" height="133" width="144"/>
</item>
<item>
  <title>Plotting 2: aesthetics, violin, and boxplots</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/penguins.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">Artwork by <a href="https://twitter.com/allison_horst">Allison Horst</a>.</figcaption>
</figure>
</div>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-the-past-session" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-the-past-session">Recap of the past session</h4>
<p>Last week’s session marked the beginning of our data visualization journey with <code>ggplot2</code>. We explored the philosophy of coding graphics, created a versatile ggplot template for various charts, and discovered how to add visual elements using aesthetics and layers. Exciting times ahead!</p>
</section>
<section id="session-goals" class="level4">
<h4 class="anchored" data-anchor-id="session-goals">Session Goals</h4>
<ul>
<li>Let’s pick up on <strong>aesthetics</strong> and learn some more about it. Furthermore, let’s introduce the <a href="https://ggplot2.tidyverse.org/reference/ggtheme.html"><code>theme()</code></a> function.</li>
<li>Learn the basic of other <strong>geom_boxplot()</strong>, <strong>geom_violin()</strong>, <strong>stat_summary</strong>.</li>
</ul>
<p><br></p>
</section>
</section>
<section id="our-data-set" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="our-data-set"><span class="header-section-number">2</span> Our data set</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/palmerpenguins_hex.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption class="figure-caption">Illustration by <a href="https://allisonhorst.github.io/palmerpenguins/articles/art.html">Allison Horst</a></figcaption>
</figure>
</div>
<p>We are going to continue using our 🐧 data set from the package <a href="https://allisonhorst.github.io/palmerpenguins/"><code>palmerpenguins</code></a>. If you haven’t done so, please install that package first:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"palmerpenguins"</span>)</span></code></pre></div>
</div>
<p><a href="https://allisonhorst.github.io/palmerpenguins/index.html"><code>palmerpenguins</code></a> is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.&nbsp;Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.</p>
<p>We’ll now load the package, along with the tidyverse (which includes ggplot2):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>Once you’ve loaded that package you will have a data frame called <code>penguins</code> at your disposal — let’s take a look:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7               181        3750
 2 Adelie  Torgersen           39.5          17.4               186        3800
 3 Adelie  Torgersen           40.3          18                 195        3250
 4 Adelie  Torgersen           NA            NA                  NA          NA
 5 Adelie  Torgersen           36.7          19.3               193        3450
 6 Adelie  Torgersen           39.3          20.6               190        3650
 7 Adelie  Torgersen           38.9          17.8               181        3625
 8 Adelie  Torgersen           39.2          19.6               195        4675
 9 Adelie  Torgersen           34.1          18.1               193        3475
10 Adelie  Torgersen           42            20.2               190        4250
# ℹ 334 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or glimpse() for a sort of transposed view, so we can see all columns:</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>Rows: 344
Columns: 8
$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…
$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="the-absolute-power-of-aesthetics" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-absolute-power-of-aesthetics"><span class="header-section-number">3</span> The Absolute Power of Aesthetics</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://r.qcbs.ca/workshop03/book-en/aesthetics.html"><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/4plot_aesthetic.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Aesthetics enable us to showcase multiple dimensions of our dataset in a single plot by modifying elements such as color, shape, size, labels, and transparency.</figcaption>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
<section id="last-weeks-example-on-the-power-of-aesthetics" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="last-weeks-example-on-the-power-of-aesthetics"><span class="header-section-number">3.1</span> Last week’s example on “The power of aesthetics”</h3>
<p>Last week we <strong>added a third aesthetic</strong> to our graph, <code>color</code>. Our current plot mapped <code>bill_length_mm</code> to the <code>x</code> aesthetic, and <code>bill_depth_mm</code> to the <code>y</code> aesthetic — , we then added a mapping of <code>species</code> to the <code>color</code> aesthetic:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb8-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb8-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span>
<span id="cb8-5">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please note that we begin by using our data set to create a <strong>plot object</strong> with the function <code>ggplot()</code>. We then assign this object to the variable <strong>p</strong>. From this point forward, we can add layers by using the <code>+</code> operator.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="what-if-we-want-to-customize-our-plot" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="what-if-we-want-to-customize-our-plot"><span class="header-section-number">3.2</span> What if we want to customize our plot?</h3>
<p>We can do this using <a href="https://ggplot2.tidyverse.org/reference/ggtheme.html"><code>theme()</code></a>. There are several options of themes which control all non-data display. Use <code>theme()</code> if you just need to tweak the display of an existing theme.</p>
<p>For this session, let’s utilize <code>theme_bw()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb9-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb9-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span>
<span id="cb9-5">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="what-if-we-want-to-change-colors" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="what-if-we-want-to-change-colors"><span class="header-section-number">3.3</span> What if we want to change colors?</h3>
<p>We can manually change colors.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Manual color change</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By using scale_colour_manual(),</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we can specify the exact colours we want to use</span></span>
<span id="cb10-4">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_manual</span>(</span>
<span id="cb10-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note that the color order will correspond to</span></span>
<span id="cb10-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the order of the species given in the legend</span></span>
<span id="cb10-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey55"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"skyblue"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>By using the <code>colors()</code> function, you can explore numerous color options that are available for selection.</p>
</section>
<section id="using-a-different-color-palette-rcolorbrewer" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="using-a-different-color-palette-rcolorbrewer"><span class="header-section-number">3.4</span> Using a different color palette: <code>RColorBrewer</code></h3>
<p>There is a wide variety of <code>R</code> color packages specifically designed to offer a range of color palette options, each evoking a distinct mood. For instance, the <code>RColorBrewer</code> package provides a choice of 35 palettes!</p>
<p><em>At this point, you have become an expert in the fundamentals of <code>R</code>. Installing packages and loading them with <code>library()</code> is now second nature to you.</em></p>
<p>Now, we can install <code>RColorBrewer</code> and choose one from the many palettes it offers.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">RColorBrewer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">display.brewer.all</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Above, you can observe the organization of the colors into distinct groups based on their sequential, diverging, or mixed characteristics. It is important to note that varied palettes are advantageous for varying data types.</p>
<p>Let’s use these palettes with our original penguin graph. Here is an example demonstrating how the <strong>Set1</strong> palette is utilized to group data points with the function <code>scale_color_brewer()</code> and the palette argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set1"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>In addition, the <code>ggplot2</code> package offers other functions. Two such functions are <code>scale_color_viridis()</code> and <code>scale_color_grey()</code>, which allows us to convert colors to <strong>grayscale</strong> without sacrificing information. This is especially important for individuals with colorblindness.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_d</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please note that when using <code>scale_color_viridis()</code> to color data points, we need to specify whether our variable is continuous [using <code>scale_color_viridis_c()</code>] or discrete [using <code>scale_color_viridis_d()</code>]. In this case, the variable <strong>species</strong> is discrete.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p><br></p>
<section id="fa-user-edit-exercise-1" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-1"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 1</h4>
<ul>
<li><p>Let us revisit the scatter plot depicting the correlation between bill length and depth, distinguished by different species using colored data points.</p></li>
<li><p>What if we want to use only a grayscale palette for publication purposes?</p></li>
</ul>
<details>
<summary>
Hints (click here)
</summary>
<p>We can use the <code>scale_color_grey()</code> function to color our grouped data points.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_grey</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="colorblind-friendly-palettes" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="colorblind-friendly-palettes"><span class="header-section-number">3.5</span> Colorblind-friendly palettes</h3>
<p>Have you ever contemplated how your figure might appear when viewed by individuals with different types of color blindness? We can utilize the <a href="https://cran.r-project.org/web/packages/colorBlindness/index.html"><code>colorBlindness</code></a> package to explore this aspect.</p>
<p>Let’s install the <code>colorBlindness</code> package and load it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's install the colorBlindness package</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colorBlindness"</span>)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(colorBlindness)</span></code></pre></div>
</div>
<p>To begin with, let’s test out various colors using the <code>cvdPlot()</code> function. This will demonstrate how our current plot appears to individuals with different types of color blindness.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">colorBlindness<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cvdPlot</span>(p)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Our current color palette is not accessible, as can be observed. However, by using <code>viridis</code> palettes, we can ensure that our plots consistently convey the same information, regardless of the audience.</p>
<p>Let’s use the same <code>viridis</code> palette we used above to make our plot more accessible.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">p_viridis <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_d</span>()</span></code></pre></div>
</div>
<p>Were we successful? Let’s use <code>cvdPlot()</code> to check again.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">colorBlindness<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cvdPlot</span>(p_viridis)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="providing-transparency-with-alpha" class="level3" data-number="3.6">
<h3 data-number="3.6" class="anchored" data-anchor-id="providing-transparency-with-alpha"><span class="header-section-number">3.6</span> Providing transparency with <code>alpha</code></h3>
<p>How can we incorporate transparency into the data points in our graph? One way to achieve this is by utilizing the <code>alpha</code> feature.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, </span>
<span id="cb19-3">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, </span>
<span id="cb19-4">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Here, we present an example of how to utilize the <code>alpha</code> function to incorporate transparency into our data points. By doing so, we are able to exhibit four variables within a single graph.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb20-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb20-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species,</span>
<span id="cb20-5">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> flipper_length_mm))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="fa-user-edit-exercise-2" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-2"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 2</h4>
<ul>
<li><p>We like the graph we produced above. We want, however, to also display <code>body_mass_g</code>.</p></li>
<li><p>How can we add this additional variable to our graph?</p></li>
</ul>
<details>
<summary>
Hints (click here)
</summary>
<p>We can use the <code>size</code> function within <code>aes()</code>.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb21-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb21-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species,</span>
<span id="cb21-5">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> flipper_length_mm,</span>
<span id="cb21-6">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> body_mass_g))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
</section>
<section id="boxplot-geom_boxplot" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="boxplot-geom_boxplot"><span class="header-section-number">4</span> Boxplot: <code>geom_boxplot()</code></h2>
<p>A boxplot gives a nice summary of one or more numeric variables. A boxplot is composed of several elements:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://leansigmacorporation.com/box-plot-with-minitab/"><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/Boxplot.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Anatomy of a boxplot.</figcaption>
</figure>
</div>
<p>Let’s use <code>geom_boxplot</code> to explore the <strong>bill_length_mm</strong> for the penguien species.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins, </span>
<span id="cb22-2">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, </span>
<span id="cb22-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb22-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify species as a grouping variable</span></span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please note that we add color to the boxplot by applying the <code>fill</code> option. You may want to experiment with using the <code>color</code> option to observe the differences.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="fa-user-edit-challenge---lets-work-together" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-challenge---lets-work-together"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Challenge - Let’s work together!</h4>
<p>Let’s consider using a different color palette for the boxplot. Additionally, we might prefer to show the mean value instead of the median value and add some transparency. Lastly, we would like to display our data points to provide information on the sample size for each species.</p>
<details>
<summary>
Hints (click here)
</summary>
<p>To change the color palette for the boxplot, we can utilize the <code>scale_fill_brewer()</code> function. To include the mean value, we can employ the <code>stat_summary()</code> function. If we want to add transparency, we can use the <code>alpha</code> parameter. Lastly, to overlay the data points, we can utilize the <code>geom_jitter()</code> function.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins, </span>
<span id="cb23-2">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, </span>
<span id="cb23-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb23-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify species as a grouping variable</span></span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dark2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red3"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="violin-plot-geom_violin" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="violin-plot-geom_violin"><span class="header-section-number">5</span> Violin plot: <code>geom_violin()</code></h2>
<p>Similar to boxplots, violin plots visualize the distribution of a numerical variable for one or multiple groups. However, the shape of a violin graphically represents the distribution of data points that is not easily visible in a boxplot’s summary, leading to a more precise representation of the data (<a href="https://www.data-to-viz.com/graph/violin.html">Data-to-Viz</a>).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins, </span>
<span id="cb24-2">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, </span>
<span id="cb24-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb24-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify species as a grouping variable</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dark2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red3"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="fa-user-edit-exercise-3" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-3"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 3</h4>
<ol type="1">
<li>To keep only the <code>Gentoo</code> data, pipe your dataset into the <code>filter()</code> function.</li>
<li>Create a boxplot examining <code>bill_length_mm</code> by <code>sex</code> by piping the filtered data into <code>ggplot()</code>.</li>
<li>Ensure that the points with unknown sex (<code>NA</code>) are removed.</li>
<li>Include the mean value of <code>bill_length_mm</code> in the boxplots.</li>
<li>Display all data points on top of the boxplot.</li>
<li>Lastly, display the distribution of each dataset.</li>
<li>To achieve the graph displaying all the above requirements, you will need to add transparency.</li>
</ol>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dark2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red3"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>plotting</category>
  <category>ggplot2</category>
  <guid>https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index.html</guid>
  <pubDate>Fri, 05 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/penguins.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Plotting 1: Intro to ggplot2</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <dc:creator>Michael Broe</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/img/featured.jpg" class="img-fluid figure-img" style="width:80.0%"></p>
</figure>
</div>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this Code Club semester, we started with 5 sessions on R basics, followed by 5 sessions on tidyverse data wrangling basics. This session will be the first several on data visualization: creating plots with the ggplot2 package.</p>
<section id="session-goals" class="level4">
<h4 class="anchored" data-anchor-id="session-goals">Session Goals</h4>
<ul>
<li>Learn the philosophy of <strong>coding</strong> a graphic.</li>
<li>Learn the basic <strong>template</strong> of a <strong>ggplot</strong> graphic, so you can reuse it for multiple chart types.</li>
<li>Learn how you can quickly add visual information to a graphic using <strong>aesthetics</strong> and <strong>layers</strong>.</li>
</ul>
<p><br></p>
</section>
</section>
<section id="the-ggplot-philosophy" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="the-ggplot-philosophy"><span class="header-section-number">2</span> The ggplot philosophy</h2>
<p>We have seen that in R, instead of manually manipulating data with a mouse as you do when editing Excel spreadsheets, we <strong>code</strong> the operations we want to perform, e.g.&nbsp;using dplyr verbs like <code>select()</code>. In a similar way, when performing visualization, instead of clicking on a chart type, we <strong>code the chart</strong> in R.</p>
<p>And just as <code>dplyr</code> gives us efficient ways to manipulate data frames, <strong><code>ggplot2</code></strong> (which is also part of the tidyverse) gives us efficient ways to manipulate charts/plots/graphics<sup>1</sup>. The <strong>gg</strong> in <strong>gg</strong>plot2 stands for <em>grammar of graphics</em>, a systematic approach for designing statistical plots. The idea is to ‘pull apart’ various plots into their component pieces, which leads to the idea of <strong>layers</strong>.</p>
<p>There’s a learning curve to such a systematic approach, but there are many advantages:</p>
<ul>
<li><p>First, <em>every</em> graphic shares a <strong>common template</strong>. Once you understand this structure you can “say” a lot of different things. The <a href="https://rstudio.github.io/cheatsheets/data-visualization.pdf">ggplot cheat sheet</a> lists over 40 plot-types, but because ggplot is somewhat of a language in its own right, users can create their own <a href="https://exts.ggplot2.tidyverse.org/gallery/">extensions</a> that you can also utilize, adding many more.</p></li>
<li><p>Second, because plots are built up using <strong>layers</strong>, you can gradually build up a graphic of increasing complexity; or on the other hand, take someone else’s code and simplify it by deleting layers. We add layers with <code>+</code> very similar to how we’ve been piping operations with <code>|&gt;</code>.</p></li>
<li><p>Third, and this is a more general point that applies to a lot of R code: because the graphic is now a piece of code, it is <strong>reusable</strong>. Once you have a little library of graphs you’ve made, you can tweak them in various ways to make more. You can also share your code with others, so they can apply the same approach to their data.</p></li>
</ul>
<p><br></p>
</section>
<section id="our-data-set" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="our-data-set"><span class="header-section-number">3</span> Our data set</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/img/palmerpenguins_hex.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption class="figure-caption">Illustration by <a href="https://allisonhorst.github.io/palmerpenguins/articles/art.html">Allison Horst</a></figcaption>
</figure>
</div>
<p>We are going to use a fun 🐧 data set from the package <a href="https://allisonhorst.github.io/palmerpenguins/"><code>palmerpenguins</code></a>. We’ll have to install that package first:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"palmerpenguins"</span>)</span></code></pre></div>
</div>
<p><a href="https://allisonhorst.github.io/palmerpenguins/index.html"><code>palmerpenguins</code></a> is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.&nbsp;Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.</p>
<p>We’ll now load the package, along with the tidyverse (which includes ggplot2):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.0     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>Once you’ve loaded that package you will have a data frame called <code>penguins</code> at your disposal — let’s take a look:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7               181        3750
 2 Adelie  Torgersen           39.5          17.4               186        3800
 3 Adelie  Torgersen           40.3          18                 195        3250
 4 Adelie  Torgersen           NA            NA                  NA          NA
 5 Adelie  Torgersen           36.7          19.3               193        3450
 6 Adelie  Torgersen           39.3          20.6               190        3650
 7 Adelie  Torgersen           38.9          17.8               181        3625
 8 Adelie  Torgersen           39.2          19.6               195        4675
 9 Adelie  Torgersen           34.1          18.1               193        3475
10 Adelie  Torgersen           42            20.2               190        4250
# ℹ 334 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or glimpse() for a sort of transposed view, so we can see all columns:</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>Rows: 344
Columns: 8
$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…
$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="a-first-ggplot2-example" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="a-first-ggplot2-example"><span class="header-section-number">4</span> A first ggplot2 example</h2>
<p>What is the correlation between bill-length and bill-width in these penguin species? Are longer bills also deeper? We can explore this with a <strong>scatterplot</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/img/culmen_depth.png" class="img-fluid figure-img" style="width:70.0%"></p>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
<section id="a-first-plot-attempt" class="level4">
<h4 class="anchored" data-anchor-id="a-first-plot-attempt">A first plot attempt</h4>
<p>The first thing that ggplot2 plot needs from you is a data frame — just like the rest of the tidyverse, ggplot2 is oriented towards data frames. Specifically, the first argument to the <code>ggplot()</code> function is a data frame:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>This is not very interesting! But it’s notable that it is <em>something</em>. <code>ggplot()</code> has created a base plot layer.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
While the name of the <em>package</em> is <strong>ggplot2</strong>, the name of the <em>function</em> is just <code>ggplot()</code>.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="our-first-complete-plot" class="level4">
<h4 class="anchored" data-anchor-id="our-first-complete-plot">Our first complete plot</h4>
<p>Our initial plotting code was correct but incomplete. Next, we need to specify:</p>
<ul>
<li><p>The <strong>plot type</strong> we want using one of many <strong>“geom”</strong> functions — e.g., the geom for a scatterplot is <code>geom_point()</code>.</p></li>
<li><p>Which columns in our data frame to plot in which ways, such along the x and y axes. In ggplot-speak, we are <strong>mapping variables to aesthetics</strong>, with the <em>aesthetics</em> being things like x and y coordinates as well shape and color.</p></li>
</ul>
<p>We can add both these pieces of information in a single additional layer. The operator to <strong>add a layer</strong> is <strong><code>+</code></strong>, which is the <code>ggplot</code> equivalent of the pipe symbol (<code>|&gt;</code>), and best practice is to place it at the end of the line, just like the pipe. Here then is our complete first plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 2 rows containing missing values or values outside the scale range
(`geom_point()`).</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>To recap, the three required ggplot elements that we used are:</p>
<ul>
<li>The <strong>data</strong>: here <code>penguins</code></li>
<li>One or more <strong>geoms</strong>: here <code>geom_point()</code></li>
<li>One or more <strong>aesthetic mappings</strong>: here <code>x = bill_length_mm, y = bill_depth_mm</code></li>
</ul>
<p>Also, note that we provided three pieces of information from our data — a data frame and two column names. After telling ggplot to use the <code>penguins</code> data frame, we can refer to columns in this data frame using their unquoted names.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The ggplot warning above
</div>
</div>
<div class="callout-body-container callout-body">
<p>ggplot warned us that 2 rows were removed because they “containing missing values or values outside the scale range”:</p>
<ul>
<li><p>“<em>Missing values</em>”: If this were the case, there must be <code>NA</code>s in the bill length and/or bill depth columns.</p></li>
<li><p>“<em>Outside the scale range</em>”: This could happen if we manually set a “scale range”, e.g.&nbsp;restricting axis limits so some of the data can’t be plotted. We didn’t do this and ggplot wouldn’t automatically do it, so this doesn’t apply.</p></li>
</ul>
<p>So, there are probably <code>NA</code>s — let’s look for those, starting with the bill length column:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 2 × 8
  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
1 Adelie  Torgersen             NA            NA                NA          NA
2 Gentoo  Biscoe                NA            NA                NA          NA
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<p>We indeed get two rows, with <code>NA</code>s for all measurement, so those must have been the two rows ggplot was complaining about.</p>
</div>
</div>
<p>As for the <strong>relationship between bill length and bill depth</strong> — this is not very clear, but I guess if you squint your eyes, you can see local positive correlations? We’ll explore this relationship in more detail below.</p>
<hr style="height:1pt; visibility:hidden;">
<details>
<summary>
Each point in the plot has a bill length and an associated bill depth. <strong>How does ggplot know which bill lengths to associate with which bill depths?</strong> <em>(Click for the answer)</em>
</summary>
<hr style="height:1pt; visibility:hidden;">
<p>Each point comes from one row in the data frame: so ggplot assumes that the the bill length and bill depth <em>given in one row derive from the same observation</em> (here: the same penguin).</p>
As such, to work with ggplot, your data frame needs to be in a “tidy” format (see our <a href="../../posts/S07E09_tidy_04/index.html">Code Club from a couple weeks ago</a>). If you find yourself struggling to appropriately assign aesthetic mappings, you may have to pivot your data first, most often with a <code>pivot_longer()</code>.
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="fa-user-edit-exercise-1" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-1"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 1</h4>
<p>Create a scatterplot comparing body mass and flipper length. Does it look like there is any correlation there?</p>
<details>
<summary>
Hints (click here)
</summary>
Take another look at the <code>penguins</code> data frame to see which columns contain body mass and flipper length. It’s up to you which you assign to the x axis and the y axis.
</details>
<details>
<summary>
Solution (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="the-power-of-aesthetics" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="the-power-of-aesthetics"><span class="header-section-number">5</span> The power of aesthetics</h2>
<p>We saw above that the relationship between bill length and bill depth is not particularly clear, but that there <em>might</em> be some local patterns. Is it possible that these clusters correspond somehow to the three different penguin species: Adelie, Chinstrap, and Gentoo? That is, part of the problem with our original plot may be that we lumped the data from all three species together.</p>
<p>We can explore this by <strong>adding a third aesthetic</strong>, <code>color</code>. Our current plot maps <code>bill_length_mm</code> to the <code>x</code> aesthetic, and <code>bill_depth_mm</code> to the <code>y</code> aesthetic — now, we’ll add a mapping of <code>species</code> to the <code>color</code> aesthetic:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb14-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb14-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Note that a legend is added automatically! It’s much clearer now that, within each species, there does seem to be a positive correlation between bill length and depth.</p>
<hr style="height:1pt; visibility:hidden;">
<section id="fa-user-edit-exercise-2" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-2"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 2</h4>
<ul>
<li><p>Go back to your body mass/flipper plot from Exercise 1 and color points by species.</p></li>
<li><p>There are various aesthetics you can use for a categorical variable like species (see the help for <code>geom_point()</code> — type <code>?geom_point</code> to open the help page). One of these aesthetics is <code>shape</code>: try this instead of <code>color</code> and see which you prefer.</p></li>
</ul>
<details>
<summary>
Solutions (click here)
</summary>
<ul>
<li><p>Color point by species:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g,</span>
<span id="cb15-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm,</span>
<span id="cb15-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div></li>
<li><p>Try the <code>shape</code> aesthetic instead of <code>color</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g,</span>
<span id="cb16-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm,</span>
<span id="cb16-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> species))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div></li>
</ul>
</details>
</section>
<p><br></p>
</section>
<section id="syntax-variants" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="syntax-variants"><span class="header-section-number">6</span> Syntax variants</h2>
<section id="omit-the-argument-names" class="level4">
<h4 class="anchored" data-anchor-id="omit-the-argument-names">Omit the argument names</h4>
<p>So far, we’ve been using verbose syntax for clarity, but we can shorten this a bit: instead of…</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm))</span></code></pre></div>
</div>
<p>…we can omit the names of the arguments:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm))</span></code></pre></div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="pipe-data-into-ggplot" class="level4">
<h4 class="anchored" data-anchor-id="pipe-data-into-ggplot">Pipe data into ggplot</h4>
<p>You might also prefer to pipe the data frame into ggplot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm))</span></code></pre></div>
</div>
<p>The above example <em>adds</em> a line of code to say the same thing, but you might prefer this as it makes abundantly clear what your input data is. This style especially makes sense when you edit a dataframe prior to plotting it:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a plot only for the Adelie Penguin:</span></span>
<span id="cb20-2">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
When you pipe data into ggplot, remember to switch between <code>|&gt;</code> and <code>+</code>!
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="local-vs.-global-aesthetics" class="level4">
<h4 class="anchored" data-anchor-id="local-vs.-global-aesthetics">Local vs.&nbsp;global aesthetics</h4>
<p>So far, we’ve provided our aesthetic mappings (<code>aes(...)</code>) inside the geom function. However, it is also possible to do this inside the initial <code>ggplot()</code> function call. Compare these two:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Provide the aesthetic mappings inside geom_point():</span></span>
<span id="cb21-2">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm))</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Provide the aesthetic mappings inside ggplot():</span></span>
<span id="cb21-7">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
</div>
<p>In the above example, those two variants are <em>functionally equivalent</em>. However, it is possible to add <strong>multiple geoms</strong> in ggplot — and once you do that, the following becomes important:</p>
<ul>
<li>Mappings provided to a specific geom are “<strong>local</strong>”: they do not carry over to other geoms.</li>
<li>Mappings provided to <code>ggplot()</code> are “<strong>global</strong>”: they apply to all geoms in the plot.</li>
</ul>
<p>Therefore, if you have multiple geoms, it most often makes sense to put the aesthetics inside <code>ggplot()</code>, but there are exceptions — and it is also possible to specify aesthetics in multiple places. More about this in the next section.</p>
<p><br></p>
</section>
</section>
<section id="adding-geoms-and-geom_smooth" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="adding-geoms-and-geom_smooth"><span class="header-section-number">7</span> Adding geoms, and <code>geom_smooth()</code></h2>
<p>In the scatterplot for bill length vs.&nbsp;depth, there wasn’t a clear <em>overall</em> (across-species) relationship. We can make this even more visually apparent by fitting a line to the data — <strong>overlaying another geom</strong> in the same plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in `geom_smooth()`:
! Problem while computing stat.
ℹ Error occurred in the 2nd layer.
Caused by error in `compute_layer()`:
! `stat_smooth()` requires the following missing aesthetics: x and y.</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<details>
<summary>
Uh oh! What went wrong here? Can you think of two different ways to solve this? <em>(Click for the answer)</em>
</summary>
<p>Because we provided <strong>local</strong> aesthetics to <code>geom_point()</code> only, <code>geom_smooth()</code> has not been informed about any aesthetics, as the error message suggests. We can resolve this either by:</p>
<ul>
<li>Providing the same local aesthetics to both geom functions.</li>
<li>Providing global aesthetics (i.e.&nbsp;to the <code>ggplot()</code> function). This is the better option.</li>
</ul>
</details>
<hr style="height:1pt; visibility:hidden;">
<p>In our next attempt, we’ll provide the aesthetics globally, that is, we specify them inside the <code>ggplot()</code> function:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Fitted lines
</div>
</div>
<div class="callout-body-container callout-body">
<p>By default, the <code>geom_smooth()</code> function doesn’t use classical linear regression to fit the data. Instead it uses <strong>lo</strong>cally <strong>e</strong>stimated <strong>s</strong>catterplot <strong>s</strong>moothing: <a href="https://en.m.wikipedia.org/wiki/Local_regression">loess</a>. The resulting lines snake around and trying to find local best fits to the data. You can request different fit algorithms with the <code>geom_smooth()</code>’s <code>method</code> argument. See <code>?geom_smooth</code> for details.</p>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<section id="fa-user-edit-exercise-3" class="level4 exercise">
<h4 class="anchored" data-anchor-id="fa-user-edit-exercise-3"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 3</h4>
<p><strong>A)</strong> Revisit your flipper/body_mass plot once again, and fit lines to each species.</p>
<details>
<summary>
Solution (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
<hr>
<p><strong>B)</strong> Perhaps you think there is too much going on in this plot, with the scatterplot data making the fitted line less clear. Modify your plot so it just shows the fitted line and not the points.</p>
<details>
<summary>
Solution (click here)
</summary>
<p>This is as easy a removing the <code>geom_point()</code> line:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
<hr>
<p><strong>C) (Bonus)</strong></p>
<ol type="1">
<li>Pipe your dataset into <code>filter()</code> to keep only the <code>Gentoo</code> data.</li>
<li>Pipe that data into <code>ggplot()</code> to create a scatterplot with a smoothed-line overlay for just that one species, colored by <code>sex</code>.</li>
<li>In a next attempt, can you get rid of the points for which the sex is unknown (<code>NA</code>)?</li>
</ol>
<details>
<summary>
Solution (click here)
</summary>
<ol type="1">
<li>and 2.:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb31-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<ol start="3" type="1">
<li>— we add <code>!is.na(sex)</code> to the <code>filter()</code> call to remove penguins with unknown sex:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
<hr>
<p><strong>D) (Bonus)</strong> Modify your previous Gentoo penguin plot such that:</p>
<ul>
<li>You have a single fitted line for penguins of both sexes</li>
<li>Points are still colored by sex</li>
</ul>
<details>
<summary>
Solution (click here)
</summary>
<p>This will require you to some aesthetics <em>globally</em> (<code>x</code> and <code>y</code>) and the <code>color</code> aesthetic <em>locally</em>, just for <code>geom_point()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb35-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>We use these terms interchangeably.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>plotting</category>
  <category>ggplot2</category>
  <guid>https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index.html</guid>
  <pubDate>Fri, 29 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/img/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tidyverse 5: Reading in data</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E10_tidy_05/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readr.png" height="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readxl.png" height="250"></p>
</div>
</div>
</div>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>So far in code club this semester, all of the data we have used has been either made up by us or able to be loading from data embedded within base R or a package.</p>
<p>Today we are going to go over reading in external data into R. The tidyverse core package that contains functions for reading in (and writing out) data is <a href="https://readr.tidyverse.org/index.html"><code>readr</code></a> and <a href="https://readxl.tidyverse.org/"><code>readxl</code></a> allows reading in Excel data. This package allows us to read in rectangular data. Some of the material from today is adapted from a past <a href="https://biodash.github.io/codeclub/s05e05/#">code club</a> by Jelmer Poelstra.</p>
<p>Useful references for today:</p>
<ul>
<li><a href="https://readr.tidyverse.org/index.html"><code>readr</code> documentation</a> (for reading in delimited files)</li>
<li><a href="https://readxl.tidyverse.org/"><code>readxl</code> docuemtation</a> (for reading in Excel files)</li>
<li><a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf">Data import with the tidyverse cheatsheet</a></li>
<li><a href="https://r4ds.hadley.nz/data-import">Data import chapter 7</a> in R for Data Science</li>
</ul>
<p>There are other non-core tidyverse packages for reading in data (including directly from Google Drive), you can find them <a href="https://www.tidyverse.org/packages/#import">here</a> though I will not go through them today.</p>
<p>We are going to use a new package today.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readxl"</span>)</span></code></pre></div>
</div>
<p>And then will start by loading the libraries we need for today.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readxl)</span></code></pre></div>
</div>
<p>But before we actually read in data, let’s talk a little bit about the different ways in which input data can be formatted.</p>
</section>
<section id="what-are-some-common-data-formatting-styles" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="what-are-some-common-data-formatting-styles"><span class="header-section-number">2</span> What are some common data formatting styles?</h2>
<section id="csv" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="csv"><span class="header-section-number">2.1</span> <code>.csv</code></h3>
<p>The most common formatting style for data is comma separated values, which often has the file extension <code>.csv</code>. This means that the data is delimited (i.e., separated) by commas. Often we open these files in a program like Excel, Numbers, or similar, which puts each value into its own cell, but the data actually looks like this:</p>
<pre><code>Student ID,Full Name,favourite.food,mealPlan,AGE
1,Sunil Huffmann,Strawberry yoghurt,Lunch only,4
2,Barclay Lynn,French fries,Lunch only,5
3,Jayendra Lyne,N/A,Breakfast and lunch,7
4,Leon Rossini,Anchovies,Lunch only,
5,Chidiegwu Dunkel,Pizza,Breakfast and lunch,five
6,Güvenç Attila,Ice cream,Lunch only,6</code></pre>
<p>Here, the first row are our column headers, and each subsequent row contains information about one student, including their student ID, full name, favorite food, meal plan, and age.</p>
<p>If we look at this data as a table, it looks like this:</p>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 15%">
<col style="width: 23%">
<col style="width: 26%">
<col style="width: 27%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: right;">Student ID</th>
<th style="text-align: left;">Full Name</th>
<th style="text-align: left;">favourite.food</th>
<th style="text-align: left;">mealPlan</th>
<th style="text-align: left;">AGE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">Sunil Huffmann</td>
<td style="text-align: left;">Strawberry yoghurt</td>
<td style="text-align: left;">Lunch only</td>
<td style="text-align: left;">4</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: left;">Barclay Lynn</td>
<td style="text-align: left;">French fries</td>
<td style="text-align: left;">Lunch only</td>
<td style="text-align: left;">5</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: left;">Jayendra Lyne</td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;">Breakfast and lunch</td>
<td style="text-align: left;">7</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: left;">Leon Rossini</td>
<td style="text-align: left;">Anchovies</td>
<td style="text-align: left;">Lunch only</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: left;">Chidiegwu Dunkel</td>
<td style="text-align: left;">Pizza</td>
<td style="text-align: left;">Breakfast and lunch</td>
<td style="text-align: left;">five</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: left;">Güvenç Attila</td>
<td style="text-align: left;">Ice cream</td>
<td style="text-align: left;">Lunch only</td>
<td style="text-align: left;">6</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="tsv" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="tsv"><span class="header-section-number">2.2</span> <code>.tsv</code></h3>
<p>Another common data format is as tab separated values, or <code>.tsv</code>. Here, instead of being separated by commas like in a <code>.csv</code>, the values are separated by tabs. Looking at the same students data in a <code>.tsv</code> format would look like this:</p>
<pre><code>Student ID        Full Name        favourite.food        mealPlan        AGE
1        Sunil Huffmann        Strawberry yoghurt        Lunch only        4
2        Barclay Lynn        French fries        Lunch only        5
3        Jayendra Lyne        N/A        Breakfast and lunch        7
4        Leon Rossini        Anchovies        Lunch only        
5        Chidiegwu Dunkel        Pizza        Breakfast and lunch        five
6        Güvenç Attila        Ice cream        Lunch only        6</code></pre>
<blockquote class="blockquote">
<p>Both comma-separated nad tab-separated values can also be stored with other file extensions like <code>.txt</code>.</p>
</blockquote>
</section>
<section id="xlsx-and-.xls" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="xlsx-and-.xls"><span class="header-section-number">2.3</span> <code>.xlsx</code> and <code>.xls</code></h3>
<p>These are Microsoft-specific file formats created using the program Excel. Since using Excel spreadsheets so so common, there are special packages that allow the reading in of these file types. If you open up a file in Excel, you can save it in a variety of different file formats, just please do this with care, as Excel has reputation of <a href="https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates">turning gene names in to dates</a>.</p>
</section>
<section id="which-file-format-to-use" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="which-file-format-to-use"><span class="header-section-number">2.4</span> Which file format to use?</h3>
<p>The truth is all file formats can be read into R, and some might be better for certain instances. You might read on the internet that its better to use <code>.csv</code> files over <code>.xlsx.</code> and <code>.xls</code> for compatibility sake, but there are also benefits to Excel formats where lots of data can be stored in one file in different sheets.</p>
<blockquote class="blockquote">
<p>Pick the data format that works best for your application.</p>
</blockquote>
</section>
</section>
<section id="download-data-to-import" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="download-data-to-import"><span class="header-section-number">3</span> Download data to import</h2>
<p>The code below will let you download some (5) files to your computer for the exercise today, which you can then import. These files were created by Jelmer from R for Data Science for a <a href="https://biodash.github.io/codeclub/s05e05/#basics-of-reading-rectangular-files">code club</a> many code clubs ago.</p>
<p>The code below allows you to download five files in different formats and with different data structure. We will practice data import with these files. Remember when you execute this code, your files will be downloaded to your working directory.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># saves the url where the file is located</span></span>
<span id="cb5-2">url_csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.csv"</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># downloads the file and saves in your working directory as students.csv</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_csv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.csv"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">url_csv_noheader <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_noheader.csv"</span></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_csv_noheader, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_noheader.csv"</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9">url_csv_meta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_with_meta.csv"</span></span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_csv_meta, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_with_meta.csv"</span>)</span>
<span id="cb5-11"></span>
<span id="cb5-12">url_tsv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.tsv"</span></span>
<span id="cb5-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_tsv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.tsv"</span>)</span>
<span id="cb5-14"></span>
<span id="cb5-15">url_excel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/osu-codeclub/osu-codeclub.github.io/raw/main/posts/S07E10_tidy_05/students.xlsx"</span></span>
<span id="cb5-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_excel, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.xlsx"</span>)</span></code></pre></div>
</div>
<p>Once you’ve downloaded all these files, take a minute to open them all up on your computer (you can use Excel, Numbers, whatever) to see how they are different. Be sure not to make any changes to the filesa.</p>
</section>
<section id="reading-in-delimited-files" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="reading-in-delimited-files"><span class="header-section-number">4</span> Reading in delimited files</h2>
<p>There are a few functions that allow you to read in tabular data in <code>readr</code>, and they are part of the <code>read_*()</code> family.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readr-tabdata-cheatsheet.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">[From the <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf">readr cheatsheet</a>]</figcaption>
</figure>
</div>
<p>The following functions work similarly:</p>
<ul>
<li><a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_csv()</code></a>: reads in comma-separated values files</li>
<li><a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_csv2()</code></a>: reads in semi-colon-separated values files where commas are the decimal point (common in Europe) instead of the period (as in the US)</li>
<li><a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_tsv()</code></a>: reads in tab-separated values files</li>
<li><a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_delim()</code></a>: reads in delimited files, where the delimiter can be specified. If you were to specify the delimiter to be “,”, this could be the save as <code>read_csv()</code>.</li>
</ul>
<p>Let’s start by reading in our “students.csv” file and then work through how changing how we set the arguments alters how our data is imported.</p>
<p>The first (and only required) argument to <code>read_*()</code> is the file, which we will provide in quotes as it is a string. If we were to have our file in a folder called “data” within our working directory, we could provide “data/students.csv”. If our file we wanted to read in was in some other location on our computer, we could provide the full path.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">students_csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 6 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Full Name, favourite.food, mealPlan, AGE
dbl (1): Student ID

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>We can see a message after we’ve imported our data giving us information about how this process went. In this case, we’ve read in a file with 6 rows and 5 columns. The delimiter is <code>","</code> and we have information about what type our columns have been imported in. Here, the columns favourite.food, mealPlan, and AGE have been parsed as character type, and Student ID is numeric (i.e., dbl).</p>
<p>We can get a sense of our data by using the function <code>head()</code> to see the first 6 rows, all columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_csv)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
</section>
<section id="reading-in-excel-files" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="reading-in-excel-files"><span class="header-section-number">5</span> Reading in Excel files</h2>
<p>I expect many of you have data stored in <code>.xlsx</code> or <code>.xls</code> files that you’d like to read into R. The package <a href="https://readxl.tidyverse.org/"><code>readxl</code></a> makes easy work of this. This packages has functions including:</p>
<ul>
<li><a href="https://readxl.tidyverse.org/reference/read_excel.html"><code>read_xlsx()</code></a>: reads in <code>.xlsx</code> files</li>
<li><a href="https://readxl.tidyverse.org/reference/read_excel.html"><code>read_xls()</code></a>: reads in <code>.xls</code> files</li>
<li><a href="https://readxl.tidyverse.org/reference/read_excel.html"><code>read_excel()</code></a>: reads in both <code>.xlsx</code> and <code>.xls</code> files and tries to guess which one your file is. This usually but does not always works well.</li>
</ul>
<blockquote class="blockquote">
<p>There are <a href="https://blog.fileformat.com/spreadsheet/xls-vs-xlsx/">subtle differences</a> between <code>.xlsx</code> and <code>.xls</code> files but I don’t think they’re that important to get into here.</p>
</blockquote>
<p>Let’s read in our Excel file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">students_excel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xlsx</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.xlsx"</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_excel)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 G√ºven√ß Attila  Ice cream          Lunch only          6    </code></pre>
</div>
</div>
<p>By default the first sheet is read in. If we want to know what the names of the different sheets are, we can run the following code providing the name of our file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">excel_sheets</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.xlsx"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "students"   "students_2"</code></pre>
</div>
</div>
<p>We can set what sheet specifically we want to read in using the argument <code>sheet = ""</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">students_excel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xlsx</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.xlsx"</span>,</span>
<span id="cb14-2">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sheet =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students"</span>)</span></code></pre></div>
</div>
</section>
<section id="handling-file-reading-issues" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="handling-file-reading-issues"><span class="header-section-number">6</span> Handling file reading issues</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readr-arguments.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">From the <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf">readr cheatsheet</a></figcaption>
</figure>
</div>
<section id="specifying-column-types" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="specifying-column-types"><span class="header-section-number">6.1</span> Specifying column types</h3>
<p>Let’s say that the column favourite.food is actually a factor (i.e., categorical), and not a character. We can specify that column should be a factor using the argument <code>col_types =</code>. The short codes you can specify in can be found <a href="https://readr.tidyverse.org/reference/read_delim.html#arguments">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">students_csv_mealplan <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.csv"</span>,</span>
<span id="cb15-2">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nccfc"</span>)</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(students_csv_mealplan)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6
Columns: 5
$ `Student ID`   &lt;dbl&gt; 1, 2, 3, 4, 5, 6
$ `Full Name`    &lt;chr&gt; "Sunil Huffmann", "Barclay Lynn", "Jayendra Lyne", "Leo…
$ favourite.food &lt;chr&gt; "Strawberry yoghurt", "French fries", "N/A", "Anchovies…
$ mealPlan       &lt;fct&gt; Lunch only, Lunch only, Breakfast and lunch, Lunch only…
$ AGE            &lt;chr&gt; "4", "5", "7", NA, "five", "6"</code></pre>
</div>
</div>
</section>
<section id="setting-column-names" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="setting-column-names"><span class="header-section-number">6.2</span> Setting column names</h3>
<p>You might have a datafile that doesn’t include headers, or column names. These functions by default use <code>col_names = TRUE</code> and assume that your file does have headers. If you don’t, you can set this argument to <code>FALSE</code> and provide column headers. Let’s just try reading in a file without headers just to see what the result is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">students_no_headers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_noheader.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 5 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Sunil Huffmann, Strawberry yoghurt, Lunch only, 4
dbl (1): 1

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_no_headers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 5
    `1` `Sunil Huffmann` `Strawberry yoghurt` `Lunch only`        `4`  
  &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;chr&gt;               &lt;chr&gt;
1     2 Barclay Lynn     French fries         Lunch only          5    
2     3 Jayendra Lyne    N/A                  Breakfast and lunch 7    
3     4 Leon Rossini     Anchovies            Lunch only          &lt;NA&gt; 
4     5 Chidiegwu Dunkel Pizza                Breakfast and lunch five 
5     6 Güvenç Attila    Ice cream            Lunch only          6    </code></pre>
</div>
</div>
<p>We can see that the first row has become the column names, and this is not what we want. We can indicate the column names using the argument <code>col_names =</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">students_no_headers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_noheader.csv"</span>,</span>
<span id="cb21-2">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Full Name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"favourite.food"</span>,</span>
<span id="cb21-3">                                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mealPlan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AGE"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 6 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Full Name, favourite.food, mealPlan, AGE
dbl (1): Student ID

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_no_headers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
<p>These column names are a bit sloppy, so we can also clean them up using <code>janitor::clean_names()</code>. If we apply <code>clean_names()</code>, we can see what happens.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">students_no_headers_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(students_no_headers)</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_no_headers_clean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  student_id full_name        favourite_food     meal_plan           age  
       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2          2 Barclay Lynn     French fries       Lunch only          5    
3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6          6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
</section>
<section id="handling-header-or-metadata-lines" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="handling-header-or-metadata-lines"><span class="header-section-number">6.3</span> Handling header or metadata lines</h3>
<p>Sometimes the headers of your data might not be in the first row. In the case that you want to read in data that has non-data rows, you can indicate those to skip in the reading in process.</p>
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/has-metadata.png" class="img-fluid"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">students_metadata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_delim</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_with_meta.csv"</span>,</span>
<span id="cb27-2">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>,</span>
<span id="cb27-3">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skip =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since there are two lines we don't want to read in</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 6 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Full Name, favourite.food, mealPlan, AGE
dbl (1): Student ID

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_metadata)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
<p>This is particularly useful if you are reading in data that comes off an instrument or system that formats data in a specific way.</p>
</section>
<section id="what-to-do-with-nas" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="what-to-do-with-nas"><span class="header-section-number">6.4</span> What to do with NAs</h3>
<p>Often your dataset will have missing data, though different people will code NAs differently. They may be simply missing, N/A, 999, or in some other way. You can tell your data import function how NAs are coded so they can be parsed correctly.</p>
<p>In this data, we have NAs that are coded as “NA”, and “N/A”. The default NA values are R are <code>na = c("NA", "")</code>, so our data deviates from what would by default be considered missing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">students_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.csv"</span>,</span>
<span id="cb31-2">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N/A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adding N/A as a NA option</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 6 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Full Name, favourite.food, mealPlan, AGE
dbl (1): Student ID

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
</section>
</section>
<section id="practice" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="practice"><span class="header-section-number">7</span> Practice</h2>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read in a file about dogs.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download and successfully read in the file below. I would recommend that after you download it, you open it to have some information to guide your import.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># where the file is located</span></span>
<span id="cb35-2">dogs_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/osu-codeclub/osu-codeclub.github.io/raw/main/posts/S07E10_tidy_05/dogs2.csv"</span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download it</span></span>
<span id="cb35-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> dogs_url,</span>
<span id="cb35-6">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dogs.csv"</span>)</span></code></pre></div>
</div>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<p>Look at your file and the documentation for <code>read_*()</code> to see what arguments you can set to aid in the import of your data. Take a look at <code>comment =</code> and <code>skip =</code></p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">dogs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dogs2.csv"</span>,</span>
<span id="cb36-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>,</span>
<span id="cb36-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skip =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 195 Columns: 9
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): Breed
dbl (8): 2013 Rank, 2014 Rank, 2015 Rank, 2016 Rank, 2017 Rank, 2018 Rank, 2...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dogs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 9
  Breed  `2013 Rank` `2014 Rank` `2015 Rank` `2016 Rank` `2017 Rank` `2018 Rank`
  &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;
1 Retri…           1           1           1           1           1           1
2 Frenc…          11           9           6           6           4           4
3 Germa…           2           2           2           2           2           2
4 Retri…           3           3           3           3           3           3
5 Bulld…           5           4           4           4           5           5
6 Poodl…           8           7           8           7           7           7
# ℹ 2 more variables: `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;</code></pre>
</div>
</div>
</details>
</div>
</div>
<section id="take-some-data-that-you-have-and-try-and-read-it-into-r" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="take-some-data-that-you-have-and-try-and-read-it-into-r"><span class="header-section-number">7.1</span> Take some data that you have and try and read it into R</h3>
<p>This you should do on your own! Find a file that you have and try and read it in and calculate some summary information.</p>
</section>
</section>
<section id="bonus-writing-out-data" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="bonus-writing-out-data"><span class="header-section-number">8</span> Bonus, writing out data</h2>
<p>Often you will generate data in R that you want to write out to a spredsheet form. You can do this using the <code>write_*()</code> functions.</p>
<ul>
<li><a href="https://readr.tidyverse.org/reference/write_delim.html"><code>write_delim()</code></a> writes out a delimited file, where you specify the delimiter</li>
<li><a href="https://readr.tidyverse.org/reference/write_delim.html"><code>write_csv()</code></a> writes out a csv file</li>
</ul>
<p>Here, we provide the name of the R object we want to write out, and it will be written to your working directory.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(students_csv)</span></code></pre></div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E10_tidy_05/index.html</guid>
  <pubDate>Fri, 22 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readr.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Tidyverse 4: Tidy Data and Pivoting</title>
  <dc:creator>Aaron Max Wiedemer</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E09_tidy_04/index.html</link>
  <description><![CDATA[ 



<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E09_tidy_04/img/tidy_data_img.jpeg" title="Tidy Data By Julia Lowndes and Allison Horst" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Tidy Data By Julia Lowndes and Allison Horst</figcaption>
</figure>
</div>
<section id="overview" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Overview</h1>
<div class="callout callout-style-default callout-tip callout-titled" title="Document Summary">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Document Summary
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><strong>tidy data</strong> : a way of organizing data where <em>columns contain variables</em> and <em>rows contain observations</em></p>
<p><strong>Terms</strong></p>
<ul>
<li><p><strong>variable</strong> : contains values of an attribute that is measured (i.e., length, sex, pH, color)</p></li>
<li><p><strong>observation</strong> : contains all the values measured on the same unit (i.e., person, sample, day)</p></li>
</ul>
<p><strong>Functions</strong></p>
<ul>
<li><p><strong>pivot_longer()</strong> : a function that “lengthens” data by transforming a set of columns containing values into two columns - one containing the previous column names, and the other contain all of the values. This is the inverse of <code>pivot_wider()</code></p></li>
<li><p><strong>pivot_wider()</strong> : a function that “widens” data by transforming a set of two columns (though can be more) containing names and values into a larger set of columns. This is the inverse of <code>pivot_longer()</code></p></li>
</ul>
</div>
</div>
</div>
<section id="starting-note" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="starting-note"><span class="header-section-number">1.1</span> Starting note</h2>
<p>Much of this page is inspired from and has examples from - <a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html">Hadley Wickam’s Tidy Data</a> - <a href="https://r4ds.had.co.nz/tidy-data.html#wider">R for Data Science</a></p>
</section>
</section>
<section id="introduction" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Introduction</h1>
<p>So far, we’ve been learning a lot of functions within the <code>tidyverse</code> to manipulate datasets</p>
<ul>
<li><code>filter()</code> to choose rows</li>
<li><code>select()</code> to choose columns</li>
<li><code>arrange()</code> to sort data</li>
<li><code>rename()</code> to change data names</li>
<li><code>mutate()</code> to add and change data</li>
<li><code>summarise()</code> to produce data summaries</li>
</ul>
<p>Today we will be learning more about the structure of datasets, specifically <strong>tidy data</strong> .</p>
<p>Most of what we have been working in code club this semester has actually been using tidy data, as most functions in the <strong>tidyverse</strong> are used to create or manipulate tidy data.</p>
<p>While we have been focusing on how to manipulate tidy data, today we will be learning two functions that can be used to manipulate and more powerfully create tidy data - <code>pivot_longer()</code> and <code>pivot_wider()</code></p>
<section id="set-up" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="set-up"><span class="header-section-number">2.1</span> Set up</h2>
<p>Lets get our favorite library loaded up</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("tidyverse") # delete first hash and run to install if you havent already</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.0     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
</section>
</section>
<section id="tidy-data" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Tidy data</h1>
<section id="data-structure" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="data-structure"><span class="header-section-number">3.1</span> Data Structure</h2>
<p>Most datasets we work with in R are organized in a roughly rectangular grid-like format made up of <strong>rows</strong> and <strong>columns</strong> that contain some values.</p>
<p>Each value in a dataset belongs to some <strong>variable</strong> and some <strong>observation</strong>.</p>
<ul>
<li>A <strong>variable</strong> contains values of an attribute that was measured (i.e., length, sex, pH, color)</li>
<li>An <strong>observation</strong> contains all the values measured on the same thing (unit) (i.e., person, sample, day)</li>
</ul>
<p>Examples:</p>
<blockquote class="blockquote">
<p>If I’m measuring the height of a population each person will be one <strong>observation</strong> and the variable I am measuring is <strong>height</strong></p>
</blockquote>
<blockquote class="blockquote">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_in =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb3-3"> )</span>
<span id="cb3-4"></span>
<span id="cb3-5">height</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 43 × 1
   height_in
       &lt;dbl&gt;
 1      67.7
 2      53.2
 3      66.6
 4      69.8
 5      69.1
 6      76.0
 7      55.7
 8      66.9
 9      69.6
10      65.8
# ℹ 33 more rows</code></pre>
</div>
</div>
</blockquote>
<blockquote class="blockquote">
<p>If I’m counting the number of geese I see on campus throughout the year every day, the variables will be <strong>number of geese I see, and the day I count them on</strong>. The observation will be <strong>one instance of me counting geese on a specific day</strong></p>
</blockquote>
<blockquote class="blockquote">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">geese <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>),</span>
<span id="cb5-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geese_number =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb5-4"> )</span>
<span id="cb5-5"></span>
<span id="cb5-6">geese</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 365 × 2
     day geese_number
   &lt;int&gt;        &lt;dbl&gt;
 1     1           44
 2     2           16
 3     3           27
 4     4           22
 5     5            9
 6     6           15
 7     7            3
 8     8           16
 9     9           20
10    10           47
# ℹ 355 more rows</code></pre>
</div>
</div>
</blockquote>
<p>This may sound like review, but in practice can be somewhat tricky</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Looking at the <code>diamonds</code> dataset, what is the observation and variable of the the value <code>diamonds[5,7]</code> ?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">diamonds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 1
  price
  &lt;int&gt;
1   335</code></pre>
</div>
</div>
<p>The observation here is the <strong>5th diamond</strong> and the variable we are measuring is <strong>price</strong></p>
</details>
</div>
</div>
</section>
<section id="pre-tidy-date" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="pre-tidy-date"><span class="header-section-number">3.2</span> Pre-Tidy Date</h2>
<blockquote class="blockquote">
<p>“All tidy data sets are alike. Each messy dataset is messy in its own way” - Hadley Wickham.</p>
</blockquote>
<p>At risk of stating the obvious, organizing values in datasets can be accomplished in many ways</p>
<p>Here with an example of table of student grades on several assignments adapted from <a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html">Hadley Wickam’s Tidy Data</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb9-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>name,    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz1, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz2, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>test1,</span>
<span id="cb9-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>,  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>,</span>
<span id="cb9-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb9-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>,</span>
<span id="cb9-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span></span>
<span id="cb9-7">  )</span>
<span id="cb9-8"></span>
<span id="cb9-9">classroom</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 4 × 4
  name   quiz1 quiz2 test1
  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;
1 Billy  &lt;NA&gt;  67    75   
2 Suzy   44    &lt;NA&gt;  &lt;NA&gt; 
3 Lionel 86    74    84   
4 Jenny  94    98    88   </code></pre>
</div>
</div>
<p>There is more than one way to organize this information in a table - for instance here we can flip (transpose) the table to have student names in columns and assessments in rows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb11-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>assessment, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Billy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Suzy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Lionel, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Jenny,</span>
<span id="cb11-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>,</span>
<span id="cb11-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>,</span>
<span id="cb11-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span></span>
<span id="cb11-6">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 5
  assessment Billy Suzy  Lionel Jenny
  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;
1 quiz1      &lt;NA&gt;  44    86     94   
2 quiz2      67    &lt;NA&gt;  74     98   
3 test1      75    &lt;NA&gt;  84     88   </code></pre>
</div>
</div>
<p>This data isn’t <strong>tidy data</strong> yet though.</p>
<div class="callout callout-style-default callout-note callout-titled" title="SIde Note: Different Organizations Serve Different Purposes">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
SIde Note: Different Organizations Serve Different Purposes
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Different ways of organizing data can serve different purposes - some ways of organizing data are great for collecting data, some good for analyzing data, some both, and some neither.</p>
</div>
</div>
</div>
<section id="the-look-of-tidy-data" class="level3" data-number="3.2.1">
<h3 data-number="3.2.1" class="anchored" data-anchor-id="the-look-of-tidy-data"><span class="header-section-number">3.2.1</span> The look of tidy data</h3>
<p>Roughly speaking, in tidy data <strong>columns contain variables</strong> and <strong>rows contain observations</strong></p>
<p>Here’s the dataset manually remade in a tidy format</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">tidy_classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>( <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb13-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assessment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)),</span>
<span id="cb13-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb13-4"></span>
<span id="cb13-5"></span>
<span id="cb13-6">tidy_classroom</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 3
   name   assessment grade
   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;
 1 Billy  quiz1      &lt;NA&gt; 
 2 Billy  quiz2      67   
 3 Billy  test1      75   
 4 Jenny  quiz1      94   
 5 Jenny  quiz2      98   
 6 Jenny  test1      88   
 7 Lionel quiz1      86   
 8 Lionel quiz2      74   
 9 Lionel test1      84   
10 Suzy   quiz1      44   
11 Suzy   quiz2      &lt;NA&gt; 
12 Suzy   test1      &lt;NA&gt; </code></pre>
</div>
</div>
<p>Here, the values, variables, and observations are more clear</p>
<p>The variables are</p>
<ol type="1">
<li>the <strong>names</strong> of the students (in the <code>name</code> column)</li>
<li>the <strong>assessments</strong> (in the <code>assessment</code> column)</li>
<li>the <strong>grades</strong> (in the <code>grade</code> column)</li>
</ol>
<p>Each observation here is <strong>a particular grade, on each assessmnet, for each student</strong>.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Note">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Look at the <strong>dimensions</strong> of this table. From this, we can immediatly tell the number of variables, and the number of observations in this dataset</p>
</div>
</div>
</div>
</section>
</section>
<section id="tidy-data-definition" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="tidy-data-definition"><span class="header-section-number">3.3</span> Tidy data definition</h2>
<p>Tidy data is a standard way of organizing data, and is defined by 3 things</p>
<p><strong>In tidy data</strong></p>
<ol type="1">
<li><strong>Each variable is one column</strong>; columns are single variables</li>
<li><strong>Each observation is one row</strong>; rows are single observations</li>
<li><strong>Each value is a cell</strong>; cells are values</li>
</ol>
<p><strong>Messy data</strong> is defined as any data organization that is not tidy data</p>
<section id="why-use-tidy-data" class="level4">
<h4 class="anchored" data-anchor-id="why-use-tidy-data">Why use tidy data?</h4>
<ul>
<li><p>Having data structured as tidy data makes it easier to manipulate and analyze data in <strong>tidy R</strong> - in fact, <em>most of the functions we have been learning up to now have been preformed on tidy data</em> - this is the <strong>tidyverse</strong> after all</p></li>
<li><p>Some functions require tidy data, and most operations on data in the <strong>tidyverse</strong> are made significantly easier by having your data as tidy data (i.e., data visualization, statistics)</p></li>
<li><p>Having data in a standardized format makes it easier to collaborate on</p></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="Order of Columns">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Order of Columns
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><em>A note on ordering of columns</em> : While order of columns doesn’t really matter for data to be considered tidy, it is standard and common practice to put meta data (aka fixed or random variables) first, followed by the columns for measured data (i.e., sample name columns go first)</p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="making-data-tidy---pivot_longer-and-pivot_wider" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Making data tidy - <code>pivot_longer()</code> and <code>pivot_wider()</code></h1>
<p>Not all data is tidy, which creates the need for us to know how to clean it.</p>
<section id="pivoting-longer" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="pivoting-longer"><span class="header-section-number">4.1</span> Pivoting Longer</h2>
<p>One common problem mentioned in R for data science and by Hadley Wickham is when you <strong>have column names that are actually variable values</strong> (when a single variable is spread across multiple columns)</p>
<div class="callout callout-style-default callout-note callout-titled" title="Sidenote">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Sidenote
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Having a set of columns with variable values for names is actually very common in metabomolics or genomics data, where column titles are metabolites, genes, taxa, etc.</p>
</div>
</div>
</div>
<p>Here is a dataset with this issue - This data denotes the population of Afghanistan, Brazil, and China for the years 1999 and 2000</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">table4b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 3
  country         `1999`     `2000`
  &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;
1 Afghanistan   19987071   20595360
2 Brazil       172006362  174504898
3 China       1272915272 1280428583</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>What are the variables in the <code>table4b</code> data?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The variables are</p>
<ul>
<li><strong>country</strong></li>
<li><strong>year</strong></li>
<li><strong>population</strong></li>
</ul>
</details>
</div>
</div>
<p>This format of data is sometimes called <strong>wide</strong> data, where the row of column names (the very first row) actually contains variable values.</p>
<p>In this data it doesn’t look very wide, but imagine how much wider if data was taken every year up to or past this year. Wide data tends to get wide very quickly.</p>
<blockquote class="blockquote">
<p>For an example of very wide data, look at the <code>who</code> dataset</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(who)</span>
<span id="cb17-2"> who</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 7,240 × 60
   country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544
   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;
 1 Afghani… AF    AFG    1980          NA           NA           NA           NA
 2 Afghani… AF    AFG    1981          NA           NA           NA           NA
 3 Afghani… AF    AFG    1982          NA           NA           NA           NA
 4 Afghani… AF    AFG    1983          NA           NA           NA           NA
 5 Afghani… AF    AFG    1984          NA           NA           NA           NA
 6 Afghani… AF    AFG    1985          NA           NA           NA           NA
 7 Afghani… AF    AFG    1986          NA           NA           NA           NA
 8 Afghani… AF    AFG    1987          NA           NA           NA           NA
 9 Afghani… AF    AFG    1988          NA           NA           NA           NA
10 Afghani… AF    AFG    1989          NA           NA           NA           NA
# ℹ 7,230 more rows
# ℹ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,
#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,
#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,
#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,
#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,
#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;, …</code></pre>
</div>
</div>
</blockquote>
<p>To make this data tidy, we need to the the column names (the year variable) and turn it into its own column (called <code>year</code>), and take all of the population data and put that into a second variable column (called <code>population</code>)</p>
<p>Previously with the <code>classroom</code> data we did this manually, but there is a much better way to pivot from wide messy data, to longer tidy data with the function <code>pivot_longer</code></p>
<p>Lets look at the help file for it</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">?pivot_longer</span></code></pre></div>
</div>
<p>From this, we see that the <code>pivot_longer</code> function can take a lot of aruguments, but there are only a few important ones</p>
<ol type="1">
<li><code>cols</code>, in which we select the columns to pivot (i.e., the columns whos names contain a variable)</li>
<li><code>names_to</code>, in which we create a new column for where our old column names are to be put into</li>
<li><code>values_to</code>, in which we create a second new column for the values to be put into</li>
</ol>
<p>Here’s what that looks like in our example</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">tidy_table4b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> table4b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">1999</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">2000</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, </span>
<span id="cb20-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"population"</span>) </span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note here the numbers are in backticks. This is because R treats column names as characters, and calling a name as number data won't work here. </span></span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the new column names also need to be in quotes here</span></span>
<span id="cb20-9"></span>
<span id="cb20-10">tidy_table4b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 3
  country     year  population
  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;
1 Afghanistan 1999    19987071
2 Afghanistan 2000    20595360
3 Brazil      1999   172006362
4 Brazil      2000   174504898
5 China       1999  1272915272
6 China       2000  1280428583</code></pre>
</div>
</div>
<p>using <code>pivot_longer</code> we turned a 3x3 table where the column names stored variable values into a 6x3 table where each column contains a single variable, and each row a single observation - and presto, tidy data!</p>
<p>One other thing to note here is that we are not pivoting every column. In some datasets you may only have a few columns that you would like to be longer</p>
<section id="more-examples-and-uses-of-pivot" class="level3" data-number="4.1.1">
<h3 data-number="4.1.1" class="anchored" data-anchor-id="more-examples-and-uses-of-pivot"><span class="header-section-number">4.1.1</span> More examples and uses of pivot</h3>
<p>Pivoting isn’t just for cleaning up! When combined with other functions, pivoting can also be a very useful way to manipulate data to make it easier to analyze</p>
<p>Last week, we used the summary function to find the mean height, width and depth of diamonds in the <code>diamonds</code> dataset</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(diamonds)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x),</span>
<span id="cb23-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y),</span>
<span id="cb23-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(z))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 3
  mean_x mean_y mean_z
   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
1   5.73   5.73   3.54</code></pre>
</div>
</div>
<p>For this we had to create a new column for every dimensional mean, which a.) takes a while to type, especially if we wanted to find the mean of further values and b.) comes out to not be tidy data</p>
<p>Another way to find the means for these columns is to use the <code>pivot_longer</code> function to make another column which we can group the values by</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), </span>
<span id="cb25-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dimension"</span>, </span>
<span id="cb25-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value),</span>
<span id="cb25-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> dimension)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 2
  dimension mean_value
  &lt;chr&gt;          &lt;dbl&gt;
1 x               5.73
2 y               5.73
3 z               3.54</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note in cols, I'm not specifying x, y, and z individually. In the dataset they are all next to each other, so I can use the : operator to signify that I want columns x through z. This can be really helpful on wider datasets. </span></span></code></pre></div>
</div>
<p>Here we only have three values, but for wider datasets this can be a very powerful tool</p>
</section>
<section id="pivot-longer-problems" class="level3" data-number="4.1.2">
<h3 data-number="4.1.2" class="anchored" data-anchor-id="pivot-longer-problems"><span class="header-section-number">4.1.2</span> Pivot longer problems</h3>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make the classroom data from earlier into a tidy format using <code>pivot_longer</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb28-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>name,    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz1, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz2, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>test1,</span>
<span id="cb28-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>,  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>,</span>
<span id="cb28-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb28-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>,</span>
<span id="cb28-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span></span>
<span id="cb28-7">  )</span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">classroom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(quiz1,quiz2, test1), </span>
<span id="cb29-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assesment"</span>, </span>
<span id="cb29-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grade"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 3
   name   assesment grade
   &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;
 1 Billy  quiz1     &lt;NA&gt; 
 2 Billy  quiz2     D    
 3 Billy  test1     C    
 4 Suzy   quiz1     F    
 5 Suzy   quiz2     &lt;NA&gt; 
 6 Suzy   test1     &lt;NA&gt; 
 7 Lionel quiz1     B    
 8 Lionel quiz2     C    
 9 Lionel test1     B    
10 Jenny  quiz1     A    
11 Jenny  quiz2     A    
12 Jenny  test1     B    </code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Find the means, minimum values, maximum values, and standard deviations of all of the numeric columns in the <code>diamonds</code> dataset using <code>pivot_longer</code> followed by <code>summarise</code></p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<p>Which are the numeric columns?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>tibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)
 $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
 $ cut    : Ord.factor w/ 5 levels "Fair"&lt;"Good"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...
 $ color  : Ord.factor w/ 7 levels "D"&lt;"E"&lt;"F"&lt;"G"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...
 $ clarity: Ord.factor w/ 8 levels "I1"&lt;"SI2"&lt;"SI1"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...
 $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
 $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...
 $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...
 $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
 $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
 $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...</code></pre>
</div>
</div>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(carat,depth<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), </span>
<span id="cb33-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>, </span>
<span id="cb33-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value),</span>
<span id="cb33-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(value),</span>
<span id="cb33-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(value),</span>
<span id="cb33-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(value),</span>
<span id="cb33-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> parameter)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 7 × 5
  parameter     mean   min      max       sd
  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 carat        0.798   0.2     5.01    0.474
2 depth       61.7    43      79       1.43 
3 table       57.5    43      95       2.23 
4 price     3933.    326   18823    3989.   
5 x            5.73    0      10.7     1.12 
6 y            5.73    0      58.9     1.14 
7 z            3.54    0      31.8     0.706</code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3 - Challange
</div>
</div>
<div class="callout-body-container callout-body">
<p>Take a look at the very wide dataset <code>who</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(who)</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(who)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 60
  country   iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544
  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;
1 Afghanis… AF    AFG    1980          NA           NA           NA           NA
2 Afghanis… AF    AFG    1981          NA           NA           NA           NA
3 Afghanis… AF    AFG    1982          NA           NA           NA           NA
4 Afghanis… AF    AFG    1983          NA           NA           NA           NA
5 Afghanis… AF    AFG    1984          NA           NA           NA           NA
6 Afghanis… AF    AFG    1985          NA           NA           NA           NA
# ℹ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,
#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,
#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,
#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,
#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,
#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;,
#   new_sn_f014 &lt;dbl&gt;, new_sn_f1524 &lt;dbl&gt;, new_sn_f2534 &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>This data contains records of the counts of confirmed tuberculosis cases by country, year, and demographic group. The demographic groups are broken down by sex (m, f) and age (0-14, 15-25, 25-34, 35-44, 45-54, 55-64, unknown).</p>
<p>After using <code>pivot_longer</code>, find the country with the most cases of tb in 2011.</p>
<p><strong>Note</strong>: The first four columns (<code>country</code>, <code>iso2</code>, <code>iso3</code>, and <code>year</code>) are already properly formatted and do not need to be pivoted here.</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<p><code>NA</code> values are liekly to mess up your analysis here - check the <code>pivot_longer()</code> help file to see what arguments are available to remove <code>NA</code> values</p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">who <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(country<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>year), </span>
<span id="cb37-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demographic"</span>, </span>
<span id="cb37-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tb_counts"</span>, </span>
<span id="cb37-5">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_drop_na =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(tb_counts),</span>
<span id="cb37-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(country,year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(count))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 210 × 3
   country                                year  count
   &lt;chr&gt;                                 &lt;dbl&gt;  &lt;dbl&gt;
 1 China                                  2011 865059
 2 India                                  2011 642311
 3 Indonesia                              2011 313601
 4 South Africa                           2011 289111
 5 Bangladesh                             2011 148198
 6 Pakistan                               2011 127571
 7 Russian Federation                     2011 104320
 8 Philippines                            2011  93580
 9 Democratic People's Republic of Korea  2011  85564
10 Kenya                                  2011  84548
# ℹ 200 more rows</code></pre>
</div>
</div>
<p>China is our winner with a sum of 865059 cases in 2011</p>
</details>
</div>
</div>
</section>
</section>
<section id="pivoting-wider" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="pivoting-wider"><span class="header-section-number">4.2</span> Pivoting Wider</h2>
<p>The other function of the day here is <code>pivot_wider</code></p>
<p><code>pivot_wider</code> , as the name might imply, is the inverse of <code>pivot_longer</code> and creates columns from from values stored in another column</p>
<section id="uses-of-pivot_wider" class="level3" data-number="4.2.1">
<h3 data-number="4.2.1" class="anchored" data-anchor-id="uses-of-pivot_wider"><span class="header-section-number">4.2.1</span> Uses of <code>pivot_wider()</code></h3>
<p>You may be thinking, “why would I ever need this? I thought the whole point was to avoid having columns of variable values”</p>
<p><code>pivot_wider</code> is an especially useful function in many situations. Here are only a few:</p>
<ol type="1">
<li><code>pivot_wider</code> is useful where we have the opposite problem as we saw when learning <code>pivot_longer</code> - when a multiple variables are stored in a single column (single observation is scattered across more than one row)</li>
<li><code>pivot_wider</code> can be useful when we want to make calculations across columns</li>
<li>Not every function in R accepts tidy data, sometimes we do need wide data! (e.g., anything that requires a matrix, PCA)</li>
</ol>
</section>
<section id="using-pivot_wider" class="level3" data-number="4.2.2">
<h3 data-number="4.2.2" class="anchored" data-anchor-id="using-pivot_wider"><span class="header-section-number">4.2.2</span> Using <code>pivot_wider()</code></h3>
<p>Lets see how <code>pivot_wider()</code> is used</p>
<p>This is a dataset containing population data and the number of cases of some disease in Afghanistan, Brazil, and China for the years 1999 and 2000</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">table2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 4
   country      year type            count
   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;
 1 Afghanistan  1999 cases             745
 2 Afghanistan  1999 population   19987071
 3 Afghanistan  2000 cases            2666
 4 Afghanistan  2000 population   20595360
 5 Brazil       1999 cases           37737
 6 Brazil       1999 population  172006362
 7 Brazil       2000 cases           80488
 8 Brazil       2000 population  174504898
 9 China        1999 cases          212258
10 China        1999 population 1272915272
11 China        2000 cases          213766
12 China        2000 population 1280428583</code></pre>
</div>
</div>
<p>Here, we have columns containing <strong>more</strong> than one variable this time (<code>type</code> has both cases and population).</p>
<p>Lets check out <code>pivot_wider</code> to see how we can undo this and make our data tidy again</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">?pivot_wider</span></code></pre></div>
</div>
<p>Again, <code>pivot_wider</code> has a bunch of arguments, but this time there are really only two essential ones</p>
<ol type="1">
<li><code>names_from</code> which denotes the column in which our new column names are stored</li>
<li><code>values_from</code> which denotes the column in which the values we will be filling our new columns with are stored</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled" title="Note:">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>There are fewer important arguments in <code>pivot_wider</code> - which one is missing its inverse from <code>pivot_longer</code>?</p>
</div>
</div>
</div>
<p>Lets see it in action</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">table2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> count)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 4
  country      year  cases population
  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;
1 Afghanistan  1999    745   19987071
2 Afghanistan  2000   2666   20595360
3 Brazil       1999  37737  172006362
4 Brazil       2000  80488  174504898
5 China        1999 212258 1272915272
6 China        2000 213766 1280428583</code></pre>
</div>
</div>
<p>We have now seperated our variables into seperate columns, and now our rows each contain only one observation. Tidy data!</p>
</section>
<section id="pivot-wider-problems" class="level3" data-number="4.2.3">
<h3 data-number="4.2.3" class="anchored" data-anchor-id="pivot-wider-problems"><span class="header-section-number">4.2.3</span> Pivot Wider Problems</h3>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>Undo the <code>tidy_classroom</code> and make it look like one of its untidy form using <code>pivot_wider</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">tidy_classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>( <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb44-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assessment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)),</span>
<span id="cb44-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">tidy_classroom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> assessment, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> grade)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 4 × 4
  name   quiz1 quiz2 test1
  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;
1 Billy  &lt;NA&gt;  67    75   
2 Jenny  94    98    88   
3 Lionel 86    74    84   
4 Suzy   44    &lt;NA&gt;  &lt;NA&gt; </code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>In one of the questions from using pivot_longer, we put all of the numeric variables into two columns, here named <code>parameter</code> and <code>value</code>. Can you return the data <code>tampered_diamonds</code> to its original state?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">tampered_diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(carat, depth<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div>
</div>
<p><strong>note</strong> : if you encounter an error, be sure to check the hint</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> parameter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> value)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Values from `value` are not uniquely identified; output will contain list-cols.
• Use `values_fn = list` to suppress this warning.
• Use `values_fn = {summary_fun}` to summarise duplicates.
• Use the following dplyr code to identify duplicates.
  {data} |&gt;
  dplyr::summarise(n = dplyr::n(), .by = c(cut, color, clarity, parameter)) |&gt;
  dplyr::filter(n &gt; 1L)</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 276 × 10
   cut       color clarity carat       depth       table price x     y     z    
   &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;list&gt;      &lt;list&gt;      &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;
 1 Ideal     E     SI2     &lt;dbl [469]&gt; &lt;dbl [469]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 2 Premium   E     SI1     &lt;dbl [614]&gt; &lt;dbl [614]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 3 Good      E     VS1     &lt;dbl [89]&gt;  &lt;dbl [89]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 4 Premium   I     VS2     &lt;dbl [315]&gt; &lt;dbl [315]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 5 Good      J     SI2     &lt;dbl [53]&gt;  &lt;dbl [53]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 6 Very Good J     VVS2    &lt;dbl [29]&gt;  &lt;dbl [29]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 7 Very Good I     VVS1    &lt;dbl [69]&gt;  &lt;dbl [69]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 8 Very Good H     SI1     &lt;dbl [547]&gt; &lt;dbl [547]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 9 Fair      E     VS2     &lt;dbl [42]&gt;  &lt;dbl [42]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
10 Very Good H     VS1     &lt;dbl [257]&gt; &lt;dbl [257]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
# ℹ 266 more rows</code></pre>
</div>
</div>
<p>Uh-oh! Uh-oh! With what we have learned so far, we cant undo <code>pivot_longer</code> with <code>pivot_wider</code> here! Can you figure out why?</p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code from the error read out</span></span>
<span id="cb51-2">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cut, color, clarity, parameter) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> 1L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1,897 × 5
   cut   color clarity parameter     n
   &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;     &lt;int&gt;
 1 Fair  D     I1      carat         4
 2 Fair  D     I1      depth         4
 3 Fair  D     I1      price         4
 4 Fair  D     I1      table         4
 5 Fair  D     I1      x             4
 6 Fair  D     I1      y             4
 7 Fair  D     I1      z             4
 8 Fair  D     SI2     carat        56
 9 Fair  D     SI2     depth        56
10 Fair  D     SI2     price        56
# ℹ 1,887 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># example of multiple replicates</span></span>
<span id="cb53-2">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(cut<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>, color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, clarity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VS2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 2,373 × 5
   cut     color clarity parameter  value
   &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;      &lt;dbl&gt;
 1 Premium D     VS2     carat       0.22
 2 Premium D     VS2     depth      59.3 
 3 Premium D     VS2     table      62   
 4 Premium D     VS2     price     404   
 5 Premium D     VS2     x           3.91
 6 Premium D     VS2     y           3.88
 7 Premium D     VS2     z           2.31
 8 Premium D     VS2     carat       0.71
 9 Premium D     VS2     depth      62.5 
10 Premium D     VS2     table      60   
# ℹ 2,363 more rows</code></pre>
</div>
</div>
<p>multiple values for each “type” of diamond - not uniquely identifiable, thus we can’t get to the original dataset</p>
</details>
</div>
</div>
</section>
</section>
</section>
<section id="citations" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Citations</h1>
<p><a href="https://allisonhorst.com/other-r-fun">Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst</a></p>
<p>https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html</p>
<p>https://r4ds.had.co.nz/tidy-data.html#wider</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E09_tidy_04/index.html</guid>
  <pubDate>Fri, 08 Mar 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E09_tidy_04/img/tidy_data_img.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tidyverse 3: Grouping and Summarizing Data</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E08_tidy_03/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-the-past-two-weeks" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-the-past-two-weeks">Recap of the past two weeks</h4>
<p>In the past two weeks, we’ve been learning about 5 functions from the <em>dplyr</em> package, a central workhorse of the tidyverse ecosystem, to manipulate data in data frames:</p>
<ul>
<li><code>filter()</code> to pick rows (which typically represent observations/samples/individuals)</li>
<li><code>select()</code> to pick columns (which typically represent variables/properties)</li>
<li><code>arrange()</code> to sort data frame rows</li>
<li><code>rename()</code> to change data frame column names</li>
<li><code>mutate()</code> to add and manipulate data frame columns</li>
</ul>
</section>
<section id="learning-objectives-for-today" class="level4">
<h4 class="anchored" data-anchor-id="learning-objectives-for-today">Learning objectives for today</h4>
<p>Today, we will focus on a slightly more complicated and very powerful <em>dplyr</em> function: <code>summarize()</code> to compute summaries across rows, typically across <strong>groups of rows</strong>.</p>
<p>We will also learn about a couple other handy functions to work with groups of rows: the <code>slice_()</code> family of functions and <code>count()</code>.</p>
</section>
<section id="setting-up" class="level4">
<h4 class="anchored" data-anchor-id="setting-up">Setting up</h4>
<p>Load the tidyverse:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Still need to install the tidyverse? <em>Click here for instructions</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<p>We’ll continue working with the <code>diamonds</code> dataframe (automatically loaded with the tidyverse), so let’s take another look at that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48</code></pre>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="summarize" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="summarize"><span class="header-section-number">2</span> <code>summarize()</code></h2>
<section id="a-first-example" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="a-first-example"><span class="header-section-number">2.1</span> A first example</h3>
<p>The <a href="https://dplyr.tidyverse.org/reference/summarise.html"><code>summarize()</code> function from the <em>dplyr</em> package</a> can compute across-row data summaries. As a first example, here’s how you can compute the overall mean of the <code>carat</code> column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 1
  carat_mean
       &lt;dbl&gt;
1      0.798</code></pre>
</div>
</div>
<p>As you can see, this function has quite a different output from the <em>dplyr</em> functions we’d seen so far. All of those returned a manipulated version of our original dataframe, whereas <code>summarize()</code> returns a “completely new” dataframe with a summary of the original data.</p>
<p>However, summarizing across all rows at once with <code>summarize()</code> is much more verbose than the simple, base R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>carat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 0.7979397</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="summarizing-by-group" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="summarizing-by-group"><span class="header-section-number">2.2</span> Summarizing by group</h3>
<p>The real power of <code>summarize()</code> comes with its ability to compute <strong>group-wise summaries</strong>. For example, simply by adding <code>.by = cut</code>, it will calculate the mean <code>carat</code> separately for each value of <code>cut</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 2
  cut       carat_mean
  &lt;ord&gt;          &lt;dbl&gt;
1 Ideal          0.703
2 Premium        0.892
3 Good           0.849
4 Very Good      0.806
5 Fair           1.05 </code></pre>
</div>
</div>
<p>Nice! We can also compute multiple summarized variables — and use summarizing functions other than <code>mean()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat),</span>
<span id="cb12-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(carat),</span>
<span id="cb12-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 3
  cut       carat_mean carat_max
  &lt;ord&gt;          &lt;dbl&gt;     &lt;dbl&gt;
1 Ideal          0.703      3.5 
2 Premium        0.892      4.01
3 Good           0.849      3.01
4 Very Good      0.806      4   
5 Fair           1.05       5.01</code></pre>
</div>
</div>
<p>A handy helper function is <strong><code>n()</code></strong>, which will compute the <strong>number of rows for each group</strong> (i.e.&nbsp;the group sizes, which can be good to know, for example so you don’t make unfounded conclusions based on really small sample sizes):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat),</span>
<span id="cb14-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_diamonds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb14-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 3
  cut       carat_mean n_diamonds
  &lt;ord&gt;          &lt;dbl&gt;      &lt;int&gt;
1 Ideal          0.703      21551
2 Premium        0.892      13791
3 Good           0.849       4906
4 Very Good      0.806      12082
5 Fair           1.05        1610</code></pre>
</div>
</div>
<p>Here is an overview of the most commonly used functions to compute summaries:</p>
<ul>
<li><code>mean()</code> &amp; <code>median()</code></li>
<li><code>min()</code> &amp; <code>max()</code></li>
<li><code>sum()</code></li>
<li><code>sd()</code>: standard deviation</li>
<li><code>IQR()</code>: interquartile range</li>
<li><code>n()</code>: counts the number of rows (observations)</li>
<li><code>n_distinct()</code>: counts the number of distinct (unique) values</li>
</ul>
<p>Two other comments:</p>
<ul>
<li><p>You can also ask <code>summarize()</code> to compute summaries by <strong>multiple columns</strong>, which will return separate summaries for each <em>combination</em> of the involved variables — we’ll see this in the exercises.</p></li>
<li><p>This may be obvious, but whatever column you are computing summaries by (using <code>.by</code>) should be a <strong>categorical variable</strong>. In our <code>diamond</code> examples, we’re only using columns that are <code>factor</code>s, but “regular” <code>character</code> columns will work just fine as well.</p></li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Side note: <code>group_by()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p>The “classic” way of using <code>summarize()</code> with multiple groups is by preceding it with a <code>group_by()</code> call — e.g., the code below is equivalent to our last example above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cut) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat),</span>
<span id="cb16-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_diamonds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 3
  cut       carat_mean n_diamonds
  &lt;ord&gt;          &lt;dbl&gt;      &lt;int&gt;
1 Fair           1.05        1610
2 Good           0.849       4906
3 Very Good      0.806      12082
4 Premium        0.892      13791
5 Ideal          0.703      21551</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>The <code>.by</code> argument to <code>summarize()</code> (and other functions!) is a rather recent addition, but I prefer it over <code>group_by()</code>:</p>
<ul>
<li>It is simpler, a bit less typing, and makes the <code>summarize()</code> call self-contained</li>
<li>When grouping by multiple columns, <code>group_by()</code> has some odd, unhelpful behavior where it keeps some of the groupings, such that you likely need an <code>ungroup()</code> call as well.</li>
</ul>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="exercises-i" class="level2 exercise" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="exercises-i"><span class="header-section-number">3</span> Exercises I</h2>
<section id="diamond-sizes-in-relation-to-clarity" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="diamond-sizes-in-relation-to-clarity"><span class="header-section-number">3.1</span> Diamond sizes in relation to <code>clarity</code></h3>
<p><strong>A)</strong> Compute the mean length (<code>x</code>), width (<code>y</code>), and depth (<code>z</code>) for each diamond <code>clarity</code>. Also include a column with group sizes. Do you see any clear differences?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x),</span>
<span id="cb18-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y),</span>
<span id="cb18-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(z),</span>
<span id="cb18-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_diamonds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb18-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> clarity)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 5
  clarity x_mean y_mean z_mean n_diamonds
  &lt;ord&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;      &lt;int&gt;
1 SI2       6.40   6.40   3.95       9194
2 SI1       5.89   5.89   3.64      13065
3 VS1       5.57   5.58   3.44       8171
4 VS2       5.66   5.66   3.49      12258
5 VVS2      5.22   5.23   3.22       5066
6 VVS1      4.96   4.98   3.06       3655
7 I1        6.76   6.71   4.21        741
8 IF        4.97   4.99   3.06       1790</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<p><strong>B)</strong> Diamond size differences between clarities may become more apparent if we use the overall volume:</p>
<ul>
<li>Dig up your <code>mutate()</code> skills to create a volume column <code>vol</code> (length * width * depth)</li>
<li>Compute the mean volume for each diamond <code>clarity</code></li>
</ul>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vol =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vol_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(vol), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> clarity)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 2
  clarity vol_mean
  &lt;ord&gt;      &lt;dbl&gt;
1 SI2        175. 
2 SI1        138. 
3 VS1        119. 
4 VS2        124. 
5 VVS2        97.6
6 VVS1        82.5
7 I1         205. 
8 IF          83.3</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="diamond-prices" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="diamond-prices"><span class="header-section-number">3.2</span> Diamond prices</h3>
<p><strong>A)</strong> For each diamond <code>cut</code>, compute the <code>price</code>’s mean, median, minimum, maximum, and standard deviation.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(price),</span>
<span id="cb22-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_median =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(price),</span>
<span id="cb22-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_min =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(price),</span>
<span id="cb22-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(price),</span>
<span id="cb22-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(price),</span>
<span id="cb22-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 6
  cut       price_mean price_median price_min price_max price_sd
  &lt;ord&gt;          &lt;dbl&gt;        &lt;dbl&gt;     &lt;int&gt;     &lt;int&gt;    &lt;dbl&gt;
1 Ideal          3458.        1810        326     18806    3808.
2 Premium        4584.        3185        326     18823    4349.
3 Good           3929.        3050.       327     18788    3682.
4 Very Good      3982.        2648        336     18818    3936.
5 Fair           4359.        3282        337     18574    3560.</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<p><strong>B)</strong> Find the combination of <code>cut</code>, <code>color</code>, and <code>clarity</code> that on average yields the most expensive diamonds.</p>
<p>For this, you’ll have to group by all these 3 columns. Try this for yourself first, but check out the first solution if you can’t get that part to work.</p>
<details>
<summary>
<b>Grouping solution</b> (click here)
</summary>
<p><code>.by = c(cut, color, clarity)</code> will group by these 3 columns at once.</p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>After summarizing, it makes sense to arrange in descending order by price, so you can see the cut-color-clarity combinations with the most expensive diamonds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(price),</span>
<span id="cb24-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(cut, color, clarity)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(price))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 276 × 4
   cut       color clarity  price
   &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;    &lt;dbl&gt;
 1 Very Good D     IF      10298.
 2 Good      D     IF      10030.
 3 Ideal     J     I1       9454 
 4 Premium   D     IF       9056.
 5 Premium   J     SI2      7550.
 6 Fair      D     I1       7383 
 7 Premium   J     VVS1     7244.
 8 Ideal     I     SI2      7192.
 9 Premium   I     VS2      7156.
10 Premium   I     SI2      7148.
# ℹ 266 more rows</code></pre>
</div>
</div>
</details>
</section>
</section>
<p><br></p>
<section id="the-slice_-functions" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="the-slice_-functions"><span class="header-section-number">4</span> The <code>slice_</code> functions</h2>
<p>Like the <code>filter()</code> function, <a href="https://dplyr.tidyverse.org/reference/slice.html">functions in the <code>slice_</code> family</a> select specific rows, but have some different functionality that’s quite handy — especially in combination with grouping.</p>
<p>Let’s say we wanted to only get, <strong>for each <code>cut</code>, the diamond with the highest value of <code>carat</code></strong>. We can do this pretty easily with the <code>slice_max()</code> function, which will return the row(s) with the highest value for a specified variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03
2  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17
3  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24
4  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77
5  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77
6  3.01 Good      H     SI2      57.6    64 18593  9.44  9.38  5.42
7  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31
8  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98</code></pre>
</div>
</div>
<details>
<summary>
Why are we getting more than one diamond per <code>cut</code> in some cases? <em>(Click to see the answer)</em>
</summary>
Because of ties in the <code>cut</code> value. (We’ll get back to this in the next set of exercises.)
</details>
<hr style="height:1pt; visibility:hidden;">
<p>You can get more than just the single highest (<code>slice_max()</code>) / lowest (<code>slice_min()</code>) value per group with the <code>n=</code> argument, and can get a specific proportion of rows with <code>prop=</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the 3 highest-depth diamonds for each value of cut</span></span>
<span id="cb28-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(depth, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 280 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  2.01 Ideal   I     VS2      66.7    56 15729  7.75  7.65  5.14
 2  0.71 Ideal   E     SI2      65.5    55  2511  5.62  5.56  3.66
 3  3.01 Ideal   J     I1       65.4    60 16538  8.99  8.93  5.86
 4  0.8  Premium G     SI1      63      59  2760  5.9   5.81  3.69
 5  0.9  Premium I     VS2      63      58  2761  6.16  6.12  3.87
 6  0.72 Premium I     IF       63      57  2795  5.72  5.7   3.6 
 7  0.72 Premium E     VS2      63      55  2802  5.79  5.61  3.59
 8  0.7  Premium E     VS2      63      60  2818  5.64  5.6   3.54
 9  0.81 Premium G     SI1      63      60  2832  5.87  5.81  3.68
10  0.7  Premium G     VS1      63      60  2838  5.64  5.57  3.53
# ℹ 270 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the 1% lowest-carat diamonds for each value of color</span></span>
<span id="cb30-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_min</span>(carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> color, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 926 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.2  Premium   E     SI2      60.2    62   345  3.79  3.75  2.27
 2  0.2  Premium   E     VS2      59.8    62   367  3.79  3.77  2.26
 3  0.2  Premium   E     VS2      59      60   367  3.81  3.78  2.24
 4  0.2  Premium   E     VS2      61.1    59   367  3.81  3.78  2.32
 5  0.2  Premium   E     VS2      59.7    62   367  3.84  3.8   2.28
 6  0.2  Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 
 7  0.2  Very Good E     VS2      63.4    59   367  3.74  3.71  2.36
 8  0.2  Ideal     E     VS2      62.2    57   367  3.76  3.73  2.33
 9  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
10  0.21 Very Good E     VS2      63.2    54   386  3.82  3.78  2.4 
# ℹ 916 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The full set of <code>slice_</code> functions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>slice_head(n = 1)</code> takes the first row.</li>
<li><code>slice_tail(n = 1)</code> takes the last row</li>
<li><code>slice_min(x, n = 1)</code> takes the row with the smallest value in column <code>x</code>.</li>
<li><code>slice_max(x, n = 1)</code> takes the row with the largest value in column <code>x</code>.</li>
<li><code>slice_sample(n = 1)</code> takes one random row.</li>
<li><code>slice(15)</code> takes the 15th row.</li>
</ul>
</div>
</div>
<p><br></p>
</section>
<section id="the-count-function" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="the-count-function"><span class="header-section-number">5</span> The <code>count()</code> function</h2>
<p>Above, we used the <code>n()</code> helper with <code>summarize()</code> to get the number of rows with each value of <code>cut</code> (i.e.&nbsp;the group sizes) along with other computed summaries.</p>
<p>Getting a “count table” like that is such a common part of Exploratory Data Analysis (EDA) that there’s another <em>dplyr</em> function available for it, <a href="https://dplyr.tidyverse.org/reference/count.html"><code>count()</code></a>. And unless you’re already <code>summarize</code>-ing, this one is simpler to use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 2
  cut           n
  &lt;ord&gt;     &lt;int&gt;
1 Fair       1610
2 Good       4906
3 Very Good 12082
4 Premium   13791
5 Ideal     21551</code></pre>
</div>
</div>
<p>We may also want to sort the output by frequency, which can be useful especially when there are many different values for the focal variable (not really the case here, but you get the point):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 2
  cut           n
  &lt;ord&gt;     &lt;int&gt;
1 Ideal     21551
2 Premium   13791
3 Very Good 12082
4 Good       4906
5 Fair       1610</code></pre>
</div>
</div>
<p>And you can also create counts for value combinations across multiple columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(cut, color)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 35 × 3
   cut   color     n
   &lt;ord&gt; &lt;ord&gt; &lt;int&gt;
 1 Fair  D       163
 2 Fair  E       224
 3 Fair  F       312
 4 Fair  G       314
 5 Fair  H       303
 6 Fair  I       175
 7 Fair  J       119
 8 Good  D       662
 9 Good  E       933
10 Good  F       909
# ℹ 25 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Base R’s <code>table()</code> function
</div>
</div>
<div class="callout-body-container callout-body">
<p>Also worth mentioning is the base R <code>table()</code> function, which is similar to <code>count()</code>. While its output format is unwieldy for follow-up analyses<sup>1</sup>, you may prefer its formatting especially when wanting to glance at a 2-way count table to see patterns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cut, diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>color)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>           
               D    E    F    G    H    I    J
  Fair       163  224  312  314  303  175  119
  Good       662  933  909  871  702  522  307
  Very Good 1513 2400 2164 2299 1824 1204  678
  Premium   1603 2337 2331 2924 2360 1428  808
  Ideal     2834 3903 3826 4884 3115 2093  896</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>Additionally, as a <em>dplyr</em> function, <code>count()</code> only works with data frames. Occasionally, you may also need to create a count table for a <strong>vector</strong>, and <code>table()</code> can do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">cut_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cut</span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(cut_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>cut_vec
     Fair      Good Very Good   Premium     Ideal 
     1610      4906     12082     13791     21551 </code></pre>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="exercises-ii" class="level2 exercise" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="exercises-ii"><span class="header-section-number">6</span> Exercises II</h2>
<section id="no-ties-please" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="no-ties-please"><span class="header-section-number">6.1</span> No ties, please</h3>
<p>Above, when we first used <code>slice_max()</code>, we got multiple rows for some groups. Check out the help for this function (<code>?slice_max</code>) and get it to print only one row per group, even in the case of ties.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The <code>with_ties</code> argument controls this. The default is <code>TRUE</code> (do include ties), so we want to set it to <code>FALSE</code> (don’t include ties):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">with_ties =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03
2  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17
3  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77
4  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31
5  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="random-diamonds" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="random-diamonds"><span class="header-section-number">6.2</span> Random diamonds</h3>
<p>Use <code>slice_sample()</code> to get 5 random diamonds for each combination of <code>cut</code>, <code>color</code> and <code>clarity</code>.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(cut, color, clarity))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1,342 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  1.2  Ideal   E     SI2      61.3  56    6006  6.85  6.88  4.21
 2  1.02 Ideal   E     SI2      62.6  54.6  4983  6.4   6.44  4.02
 3  0.78 Ideal   E     SI2      61    56    3053  5.92  5.98  3.63
 4  1.11 Ideal   E     SI2      61.2  57    4969  6.7   6.74  4.11
 5  1    Ideal   E     SI2      60.7  55    4077  6.39  6.33  3.86
 6  0.71 Premium E     SI1      60.3  60    2674  5.77  5.74  3.47
 7  0.82 Premium E     SI1      61.2  61    3211  5.98  5.95  3.65
 8  0.51 Premium E     SI1      61.3  54    1546  5.18  5.13  3.16
 9  0.57 Premium E     SI1      62.2  55    1590  5.36  5.31  3.32
10  0.41 Premium E     SI1      62.4  58     755  4.75  4.77  2.97
# ℹ 1,332 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="count" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="count"><span class="header-section-number">6.3</span> <code>count()</code></h3>
<p><strong>A)</strong> Create a sorted count table of diamond <code>clarity</code>s</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(clarity, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 2
  clarity     n
  &lt;ord&gt;   &lt;int&gt;
1 SI1     13065
2 VS2     12258
3 SI2      9194
4 VS1      8171
5 VVS2     5066
6 VVS1     3655
7 IF       1790
8 I1        741</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<p><strong>B)</strong> What are the least common combinations of <code>clarity</code> and <code>depth</code> for diamonds costing less than $5,000?</p>
<details>
<summary>
<b>Hints</b> (click here)
</summary>
<ul>
<li>You’ll have to <code>filter()</code> first.</li>
<li>Can you sort in reverse order with <code>count()</code>? If not, you’ll have to use a separate <code>arrange()</code></li>
</ul>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(clarity, color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(n)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 56 × 3
   clarity color     n
   &lt;ord&gt;   &lt;ord&gt; &lt;int&gt;
 1 I1      J        26
 2 I1      D        32
 3 IF      D        39
 4 IF      J        40
 5 VVS1    J        51
 6 I1      I        65
 7 VVS2    J        67
 8 I1      E        84
 9 I1      H       108
10 I1      G       114
# ℹ 46 more rows</code></pre>
</div>
</div>
</details>
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="bonus-sort-then-slice" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="bonus-sort-then-slice"><span class="header-section-number">6.4</span> Bonus: sort then slice</h3>
<p><code>slice_head()</code> will print the <em>first-occurring</em> row(s), and its twin <code>slice_tail()</code> prints the <em>last</em> row(s). In combination with sorting, these can give more flexibility than the min-max functions.</p>
<p>For each <code>color</code>, use <code>arrange()</code> and <code>slice_head()</code> to get the 3 diamonds with the highest carat, with ties in carat broken by price (highest first).</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(carat), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_head</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> color)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 21 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98
 2  4.5  Fair      J     I1       65.8    58 18531 10.2  10.2   6.72
 3  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24
 4  4.13 Fair      H     I1       64.8    61 17329 10     9.85  6.43
 5  3.65 Fair      H     I1       67.1    53 11668  9.53  9.48  6.38
 6  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03
 7  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17
 8  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31
 9  3.67 Premium   I     I1       62.4    56 16193  9.86  9.81  6.13
10  3.4  Fair      D     I1       66.8    52 15964  9.42  9.34  6.27
# ℹ 11 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
</section>




<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It’s not actually a data frame…↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E08_tidy_03/index.html</guid>
  <pubDate>Fri, 01 Mar 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E08_tidy_03/img/dplyr.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tidyverse 2: More dplyr Data Wrangling</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E07_tidy_02/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E07_tidy_02/img/run.jpeg" class="img-fluid figure-img" style="width:75.0%"></p>
</figure>
</div>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-last-week" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-last-week">Recap of last week</h4>
<p>Last week, Jess introduced us to to the <em>tidyverse</em>, a collection of packages to facilitate doing data science with R, including data manipulation and visualization.</p>
<p>We saw two general properties of the tidyverse: that it has a strong focus on <strong>data frames</strong> and that operations are usually connected using the <strong>“pipe” (<code>|&gt;</code>) operator</strong>.</p>
<p>We also learned about two key functions from the tidyverse’s <em>dplyr</em> package:</p>
<ul>
<li><strong><code>filter()</code></strong> to pick rows (which typically represent observations/samples/individuals)</li>
<li><strong><code>select()</code></strong> to pick columns (which typically represent variables/properties)</li>
</ul>
</section>
<section id="learning-objectives-for-today" class="level4">
<h4 class="anchored" data-anchor-id="learning-objectives-for-today">Learning objectives for today</h4>
<p>We will continue learning about <em>dplyr</em>:</p>
<ul>
<li>An overview of key <em>dplyr</em> functionality</li>
<li>Sorting data frame rows with <code>arrange()</code></li>
<li>Renaming data frame columns with <code>rename()</code></li>
<li>Adding and manipulating data frame columns with <code>mutate()</code></li>
</ul>
<p>Like last week, we will practice with the <code>diamonds</code> dataframe that is automatically loaded along with the tidyverse.</p>
</section>
<section id="setting-up" class="level4">
<h4 class="anchored" data-anchor-id="setting-up">Setting up</h4>
<p>Load the tidyverse:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Still need to install the tidyverse? <em>Click here for instructions</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="overview-of-key-dplyr-functionality" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="overview-of-key-dplyr-functionality"><span class="header-section-number">2</span> Overview of key <em>dplyr</em> functionality</h2>
<p>Functions from the <a href="https://dplyr.tidyverse.org/index.html"><em>dplyr</em> package</a> have the following <strong>commonalities</strong>:</p>
<ul>
<li>The first argument is always a data frame (this makes them pipe-friendly)</li>
<li>Subsequent arguments typically describe which columns to operate on</li>
<li>The output is always a data frame</li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<p>Key functions for <strong>row-wise</strong> operations include:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/reference/filter.html"><code>filter()</code></a> — picks rows based on values in one or more columns <em>(last week)</em></li>
<li><a href="https://dplyr.tidyverse.org/reference/arrange.html"><code>arrange()</code></a> — orders rows based on values in selected columns <em>(this week)</em></li>
</ul>
<p>Key functions for <strong>column-wise</strong> operations include:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/reference/select.html"><code>select()</code></a> — picks columns <em>(last week)</em></li>
<li><a href="https://dplyr.tidyverse.org/reference/rename.html"><code>rename</code>()</a> — changes column names <em>(this week)</em></li>
<li><a href="https://dplyr.tidyverse.org/reference/mutate.html"><code>mutate()</code></a> — creates new columns and changes the values of columns <em>(this week)</em></li>
</ul>
<p>Key functions for <strong>groups of rows</strong> include:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/reference/summarise.html"><code>summarise()</code></a> — collapses a group into a single row with the purpose of summarizing data</li>
</ul>
<p>Finally, there are functions to <strong>combine multiple data frames</strong> (joins, with for example <code>inner_join()</code>).</p>
<hr style="height:1pt; visibility:hidden;">
<p>This week, we will cover the remaining functions listed above for row- and column-wise operations. In subsequent sessions, we will cover the more complex summarizing and joining functions.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The <em>tidyr</em> package contains additional data wrangling functions
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is a separate core tidyverse package (<em>tidyr</em>) with closely related functions that can “reshape” (“pivot”) data frames between wider and longer formats — we will also cover those in a later dedicated Code Club session.</p>
</div>
</div>
<p><br></p>
</section>
<section id="sorting-with-arrange" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="sorting-with-arrange"><span class="header-section-number">3</span> Sorting with <code>arrange()</code></h2>
<p>The <code>arrange()</code> function is like the sort function in Excel: it changes the order of the rows based on the values in one or more columns. For example, you might want to sort entries by their cost or size, or by their names in alphabetical order.</p>
<p>We’ll see a first example using the <code>diamonds</code> data frame. Keep in mind that in this data frame, each row represents a single diamond, and the columns provide different pieces of information about a diamond:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note the initial order in the 'carat' column:</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48</code></pre>
</div>
</div>
<p>Therefore, sorting this data frame means rearranging the order of the diamonds based on their properties — in the example below, based on the carat of the diamond:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now, we'll sort by the values in the 'carat' column:</span></span>
<span id="cb6-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(carat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27
 2   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26
 3   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24
 4   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32
 5   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28
 6   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 
 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33
 8   0.2 Ideal     D     VS2      61.5    57   367  3.81  3.77  2.33
 9   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36
10   0.2 Ideal     E     VS2      62.2    57   367  3.76  3.73  2.33
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>As you can see, there are many rows with the same, smallest value of <code>carat</code>, so we may be interested in <strong>sorting by an additional column</strong>, which will break the ties in our first sorting column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort first by carat, then by cut:</span></span>
<span id="cb8-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(carat, cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36
 2   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27
 3   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26
 4   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24
 5   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32
 6   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28
 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33
 8   0.2 Premium   D     VS2      62.3    60   367  3.73  3.68  2.31
 9   0.2 Premium   D     VS2      61.7    60   367  3.77  3.72  2.31
10   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<details>
<summary>
<strong>Question:</strong> Does the resulting order of entries in the <code>cut</code> column make sense to you? If not, what might be going on? <em>(Click to see the solution)</em>
</summary>
<p>Clearly, the order is not alphabetical, but it could be so in <em>descending</em> order — though this is not in fact the case.</p>
<p>As we briefly saw last week, the <code>cut</code> column (as well as the <code>color</code> and <code>clarity</code> columns) are of the “ordered factor” type: therefore, when we sort by this column, the order as initially defined by whoever created this data frame will be respected:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] Ideal     Premium   Good      Premium   Good      Very Good
Levels: Fair &lt; Good &lt; Very Good &lt; Premium &lt; Ideal</code></pre>
</div>
</div>
<p>This also implies that there are no 0.2-carat (the lowest value) diamonds with <code>Fair</code> or <code>Good</code> cuts, because the first-listed and therefore lowest cut was <code>Very Good</code>.</p>
</details>
<hr style="height:1pt; visibility:hidden;">
<p>By default, the sorting is done in <em>ascending order</em> (small-to-big), as you probably expected. But of course we may sometimes want to sort in <strong>descending</strong> (big-to-small) order, which we can do with the <code>desc()</code> helper function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort first by carat, then by price:</span></span>
<span id="cb12-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(carat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98
 2  4.5  Fair      J     I1       65.8    58 18531 10.2  10.2   6.72
 3  4.13 Fair      H     I1       64.8    61 17329 10     9.85  6.43
 4  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17
 5  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24
 6  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31
 7  3.67 Premium   I     I1       62.4    56 16193  9.86  9.81  6.13
 8  3.65 Fair      H     I1       67.1    53 11668  9.53  9.48  6.38
 9  3.51 Premium   J     VS2      62.5    59 18701  9.66  9.63  6.03
10  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Saving the output?
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the examples above, and in all of today’s examples and exercises, we are simply <em>printing</em> the output data frame. This means that we are leaving the original data frame <code>diamonds</code> <strong>unchanged</strong> and that we are not storing our results elsewhere either.</p>
<p>Recall that you can assign to a new dataframe as one way to store your results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">diamonds_sorted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(carat)</span></code></pre></div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="renaming-columns-with-rename-and-select" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="renaming-columns-with-rename-and-select"><span class="header-section-number">4</span> Renaming columns with <code>rename()</code> (and <code>select()</code>)</h2>
<p>It is pretty common that you are not happy with the names of columns in your data frame and want to rename one or more. This can be done with the <code>rename()</code> function, which uses the syntax <code>&lt;new-name&gt; = &lt;old-name&gt;</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Below, we rename the 'x' column to 'length', and the 'y' column to 'width':</span></span>
<span id="cb15-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price length width     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326   3.95  3.98  2.43
 2  0.21 Premium   E     SI1      59.8    61   326   3.89  3.84  2.31
 3  0.23 Good      E     VS1      56.9    65   327   4.05  4.07  2.31
 4  0.29 Premium   I     VS2      62.4    58   334   4.2   4.23  2.63
 5  0.31 Good      J     SI2      63.3    58   335   4.34  4.35  2.75
 6  0.24 Very Good J     VVS2     62.8    57   336   3.94  3.96  2.48
 7  0.24 Very Good I     VVS1     62.3    57   336   3.95  3.98  2.47
 8  0.26 Very Good H     SI1      61.9    55   337   4.07  4.11  2.53
 9  0.22 Fair      E     VS2      65.1    61   337   3.87  3.78  2.49
10  0.23 Very Good H     VS1      59.4    61   338   4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>As an aside, it is also possible rename the columns that you pick with the <code>select()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> y, z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 3
   length width     z
    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1   3.95  3.98  2.43
 2   3.89  3.84  2.31
 3   4.05  4.07  2.31
 4   4.2   4.23  2.63
 5   4.34  4.35  2.75
 6   3.94  3.96  2.48
 7   3.95  3.98  2.47
 8   4.07  4.11  2.53
 9   3.87  3.78  2.49
10   4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Need to rename many columns?
</div>
</div>
<div class="callout-body-container callout-body">
<p>If your data frame has many columns that need to be renamed, the <a href="https://sfirke.github.io/janitor/reference/clean_names.html"><strong><code>janitor::clean_names()</code></strong></a> function provides automated column name cleaning that can be extremely handy.</p>
<p>For example, you might read in an Excel sheet with 20 columms, many of which have spaces in their names, and some of which have other special characters like <code>%</code> or <code>&amp;</code>. Those kinds of column names don’t play well with R, and <code>clean_names()</code> would automatically replace such characters with (by default) underscores (<code>_</code>).</p>
<p>You can try this function in the last Bonus exercise.</p>
</div>
</div>
<p><br></p>
</section>
<section id="exercises-i" class="level2 exercise" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="exercises-i"><span class="header-section-number">5</span> Exercises I</h2>
<section id="renaming" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="renaming"><span class="header-section-number">5.1</span> Renaming</h3>
<p>Above, we renamed the cryptically named <code>x</code> and <code>y</code> columns, but there’s a third single-letter column name: <strong><code>z</code></strong>.</p>
<ol type="1">
<li><p>Check the help for this data frame by typing <code>?diamonds</code>, and figure out what the <code>z</code> column represents.</p></li>
<li><p>Rename the <code>z</code> column to give it a more descriptive name like we did above for <code>x</code> and <code>y</code>. <em>(You may run into a problem here! If so, try to understand and resolve it.)</em></p></li>
</ol>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<ol type="1">
<li><strong>The <code>z</code> column represents the depth of the diamond in mm:</strong></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">?diamonds</span></code></pre></div>
</div>
<pre class="bash-out"><code># The output will include:

z
    depth in mm (0–31.8)

depth
    total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79)</code></pre>
<hr style="height:1pt; visibility:hidden;">
<ol start="2" type="1">
<li><strong>So let’s try to rename it to <code>depth</code>:</strong></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth =</span> z)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `rename()`:
! Names must be unique.
✖ These names are duplicated:
  * "depth" at locations 5 and 10.</code></pre>
</div>
</div>
<p>Ouch! That didn’t work, because a column named <code>depth</code> already exists, and <strong>column names must be unique</strong>. That other depth column is the diamond’s “total depth percentage” rather than the raw depth.</p>
<p>There’s no one right way to resolve this (and of course one option would be to refrain from renaming <code>z</code> altogether), but we could for example use <code>depth_mm</code> etc. notations for these columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_mm =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_mm =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_mm =</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price length_mm width_mm depth_mm
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43
 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31
 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31
 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63
 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75
 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48
 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47
 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53
 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49
10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="arranging" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="arranging"><span class="header-section-number">5.2</span> Arranging</h3>
<p>See the prices (and other properties) of the <em>most expensive diamonds</em> in the data frame by using the <code>arrange()</code> function like we did above.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>To see the most expensive (highest-priced) diamond first, we’ll have to arrange by the <code>price</code> column in descending order:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(price))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16
 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04
 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56
 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11
 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01
 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24
 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84
 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91
 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 
10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21
# ℹ 53,930 more rows</code></pre>
</div>
</div>
</details>
</section>
</section>
<p><br></p>
<section id="manipulating-with-mutate" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="manipulating-with-mutate"><span class="header-section-number">6</span> Manipulating with <code>mutate()</code></h2>
<p>Let’s take a look at the official <code>mutate()</code> documentation figure (😛):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E07_tidy_02/img/arrange.png" class="img-fluid figure-img" style="width:75.0%"></p>
<figcaption class="figure-caption">Illustration by Allison Horst</figcaption>
</figure>
</div>
<p>It says “<em>add column(s), keep existing</em>” and shows that a third column, <code>C</code>, is being added to a data frame.</p>
<details>
<summary>
What do the values in column <code>C</code> appear to represent (compare with <code>A</code> and <code>B</code>)? <em>(Click for the solution)</em>
</summary>
<p>Column <code>C</code> appears to be columns <code>A</code> + <code>B</code>, e.g in the first row, <code>1</code> + <code>2</code> = <code>3</code>.</p>
</details>
<p>Let’s try to do something similar –creating a new column that is based on the values of other columns– with diamond dimensions. We’ll add a column named <code>volume</code> that is generated by multiplying the length, width, and depth columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (I'm first using select just to limit the output that is printed)</span></span>
<span id="cb27-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(x, y, z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">volume =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 4
       x     y     z volume
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1  3.95  3.98  2.43   38.2
 2  3.89  3.84  2.31   34.5
 3  4.05  4.07  2.31   38.1
 4  4.2   4.23  2.63   46.7
 5  4.34  4.35  2.75   51.9
 6  3.94  3.96  2.48   38.7
 7  3.95  3.98  2.47   38.8
 8  4.07  4.11  2.53   42.3
 9  3.87  3.78  2.49   36.4
10  4     4.05  2.39   38.7
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>As you could see in above examples, the operation is executed in a (vectorized) <strong>row-wise fashion</strong>: the <code>volume</code> that we see in the first row was created by multiplying <code>x</code>, <code>y</code> and <code>z</code> in the first row, and so on.</p>
<p>Also note that the new column created by <code>mutate()</code> is (by default) added as the <em>last</em> column.</p>
<hr style="height:1pt; visibility:hidden;">
<hr>
<p>Instead of creating a new column with <code>mutate()</code>, it is also possible to simply <strong>change the values in a column</strong> (without creating a new column) by assigning back to the same column name. For example, say that we wanted diamond length to be in cm <em>instead of</em> in mm:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(x, y, z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 3
       x     y     z
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 0.395  3.98  2.43
 2 0.389  3.84  2.31
 3 0.405  4.07  2.31
 4 0.42   4.23  2.63
 5 0.434  4.35  2.75
 6 0.394  3.96  2.48
 7 0.395  3.98  2.47
 8 0.407  4.11  2.53
 9 0.387  3.78  2.49
10 0.4    4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="exercises-ii" class="level2 exercise" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="exercises-ii"><span class="header-section-number">7</span> Exercises II</h2>
<section id="more-unit-conversion" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="more-unit-conversion"><span class="header-section-number">7.1</span> More unit conversion</h3>
<p>Above, we converted the diamond lengths (column <code>x</code>) from mm to cm.</p>
<ul>
<li>Expand on that code to convert all three dimension columns (<code>x</code>, <code>y</code>, and, <code>z</code>).</li>
<li>Also give the converted columns names that indicate the measurements are in cm.</li>
</ul>
<details>
<summary>
<b>Solution so far</b> (click here)
</summary>
<p>Several naming schemes are reasonable, but I will use <code>length_cm</code> etc:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_cm =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb31-3">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_cm =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb31-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_cm =</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 13
   carat cut       color clarity depth table price     x     y     z length_cm
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43     0.395
 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31     0.389
 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31     0.405
 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63     0.42 
 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75     0.434
 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48     0.394
 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47     0.395
 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53     0.407
 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49     0.387
10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39     0.4  
# ℹ 53,930 more rows
# ℹ 2 more variables: width_cm &lt;dbl&gt;, depth_cm &lt;dbl&gt;</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<ul>
<li>Next, expand your “pipeline” to either remove the columns with mm measurements, or rename the original <code>x</code>, <code>y</code>, and <code>z</code> columns to clarify that those are in mm.</li>
</ul>
<details>
<summary>
<b>Hint: how to remove specific columns with <code>select()</code></b> (click here)
</summary>
<p>If you just want to remove one or a few columns from a data frame with many columns, you’d want to be able to directly mark them for removal (rather than listing all columns you want to keep), which you can do as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will remove the carat and cut columns:</span></span>
<span id="cb33-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>carat, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 8
   color clarity depth table price     x     y     z
   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 E     SI2      61.5    55   326  3.95  3.98  2.43
 2 E     SI1      59.8    61   326  3.89  3.84  2.31
 3 E     VS1      56.9    65   327  4.05  4.07  2.31
 4 I     VS2      62.4    58   334  4.2   4.23  2.63
 5 J     SI2      63.3    58   335  4.34  4.35  2.75
 6 J     VVS2     62.8    57   336  3.94  3.96  2.48
 7 I     VVS1     62.3    57   336  3.95  3.98  2.47
 8 H     SI1      61.9    55   337  4.07  4.11  2.53
 9 E     VS2      65.1    61   337  3.87  3.78  2.49
10 H     VS1      59.4    61   338  4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
</details>
<details>
<summary>
<b>Full solution</b> (click here)
</summary>
<ul>
<li>Option 1 — remove the columns with mm measurements:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Note that the final 2 added columns are hidden in the output!)</span></span>
<span id="cb35-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_cm =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb35-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_cm =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb35-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_cm =</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price length_cm width_cm depth_cm
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326     0.395    0.398    0.243
 2  0.21 Premium   E     SI1      59.8    61   326     0.389    0.384    0.231
 3  0.23 Good      E     VS1      56.9    65   327     0.405    0.407    0.231
 4  0.29 Premium   I     VS2      62.4    58   334     0.42     0.423    0.263
 5  0.31 Good      J     SI2      63.3    58   335     0.434    0.435    0.275
 6  0.24 Very Good J     VVS2     62.8    57   336     0.394    0.396    0.248
 7  0.24 Very Good I     VVS1     62.3    57   336     0.395    0.398    0.247
 8  0.26 Very Good H     SI1      61.9    55   337     0.407    0.411    0.253
 9  0.22 Fair      E     VS2      65.1    61   337     0.387    0.378    0.249
10  0.23 Very Good H     VS1      59.4    61   338     0.4      0.405    0.239
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<ul>
<li>Option 2 — also keep the cm columns, but rename them:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_cm =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb37-3">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_cm =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb37-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_cm =</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_mm =</span> x,</span>
<span id="cb37-6">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_mm =</span> y,</span>
<span id="cb37-7">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_mm =</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 13
   carat cut       color clarity depth table price length_mm width_mm depth_mm
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43
 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31
 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31
 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63
 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75
 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48
 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47
 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53
 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49
10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39
# ℹ 53,930 more rows
# ℹ 3 more variables: length_cm &lt;dbl&gt;, width_cm &lt;dbl&gt;, depth_cm &lt;dbl&gt;</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="price-per-carat" class="level3" data-number="7.2">
<h3 data-number="7.2" class="anchored" data-anchor-id="price-per-carat"><span class="header-section-number">7.2</span> Price per carat</h3>
<p>Include the following steps in a single “pipeline”:</p>
<ol type="1">
<li>Add a new column with the price per carat, rounded to whole dollars.</li>
<li>Sort by price per carat in descending order</li>
<li>Only keep diamonds with a price per carat above $5,000.</li>
</ol>
<p>What is the highest price per carat, and how many diamonds are you left with?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>We are left with 13,115 rows and the highest price per carat is $17,829:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_per_carat =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(price_per_carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price_per_carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 13,115 × 11
   carat cut   color clarity depth table price     x     y     z price_per_carat
   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;
 1  1.04 Very… D     IF       61.3    56 18542  6.53  6.55  4.01           17829
 2  1.07 Prem… D     IF       60.9    58 18279  6.67  6.57  4.03           17083
 3  1.03 Ideal D     IF       62      56 17590  6.55  6.44  4.03           17078
 4  1.07 Very… D     IF       60.9    58 18114  6.57  6.67  4.03           16929
 5  1.02 Very… D     IF       61.7    59 17100  6.42  6.52  3.99           16765
 6  1.07 Very… D     IF       59      59 17909  6.63  6.72  3.94           16737
 7  1.09 Very… D     IF       61.7    58 18231  6.55  6.65  4.07           16726
 8  1    Ideal D     IF       60.7    57 16469  6.44  6.48  3.92           16469
 9  1    Very… D     IF       63.3    59 16073  6.37  6.33  4.02           16073
10  1.01 Prem… D     IF       61.6    56 16234  6.46  6.43  3.97           16073
# ℹ 13,105 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="bonus-renaming-columns-with-janitorclean_names" class="level3" data-number="7.3">
<h3 data-number="7.3" class="anchored" data-anchor-id="bonus-renaming-columns-with-janitorclean_names"><span class="header-section-number">7.3</span> Bonus: Renaming columns with <code>janitor::clean_names()</code></h3>
<ol type="1">
<li>Install and then load the package <em>janitor</em>.</li>
</ol>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<ul>
<li>Install:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"janitor"</span>)</span></code></pre></div>
</div>
<ul>
<li>Load:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'janitor'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    chisq.test, fisher.test</code></pre>
</div>
</div>
</details>
<ol start="2" type="1">
<li>Run the following code to create a “tibble” (tidyverse-style dataframe) with poor column names:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (The backticks ` around the column names are necessary to assign such unwieldy names)</span></span>
<span id="cb45-2">sale_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb45-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Abbreviated ID</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DZ"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GA"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PT"</span>),</span>
<span id="cb45-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">% Sold</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">62</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>),</span>
<span id="cb45-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Nr Stored</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">372</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">175</span>),</span>
<span id="cb45-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Lost&amp;Found</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb45-7">)</span></code></pre></div>
</div>
<ol start="3" type="1">
<li>Print the <code>sale_stats</code> data frame and take a look at how the column names are shown.</li>
</ol>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">sale_stats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 4
  `Abbreviated ID` `% Sold` `Nr Stored` `Lost&amp;Found`
  &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;
1 DZ                     62         372            0
2 GA                     98          13            0
3 PT                     18         175            2</code></pre>
</div>
</div>
</details>
<ol start="4" type="1">
<li>Run the <code>clean_names()</code> function on the <code>sale_stats</code> data frame. (It will take a data frame as its first argument and return a dataframe, much like the dplyr functions we’ve seen). Take a close look at the output — can you spot at least 3 types of changes that it made?</li>
</ol>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">sale_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 4
  abbreviated_id percent_sold nr_stored lost_found
  &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;
1 DZ                       62       372          0
2 GA                       98        13          0
3 PT                       18       175          2</code></pre>
</div>
</div>
<p>Or equivalently (output not shown):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(sale_stats)</span></code></pre></div>
</div>
<p>The <code>clean_names()</code> function made the following changes to the column names:</p>
<ul>
<li>Spaces were converted to underscores</li>
<li>The <code>&amp;</code> was converted to an underscore</li>
<li>The <code>%</code> was converted to <code>percent</code> (!)</li>
<li>Uppercase (capital) letters were converted to lowercase</li>
</ul>
</details>
</section>
</section>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E07_tidy_02/index.html</guid>
  <pubDate>Fri, 23 Feb 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E07_tidy_02/img/run.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tidyverse 1: Introduction to the tidyverse</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E06_tidy_01/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>We are going to introduce a new package and series of functions today that are designed for data science.</p>
</section>
<section id="what-is-the-tidyverse" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="what-is-the-tidyverse"><span class="header-section-number">2</span> What is the <code>tidyverse</code>?</h2>
<p><a href="https://www.tidyverse.org/">“The tidyverse”</a> is a collection of packages called that are designed for data science. You can certainly use R without using the tidyverse, but it has many packages that I think will make your life a lot easier. We will be using mostly tidyverse functions in this class, with some base R syntax scattered throughout.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/tidyverse-package-workflow.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure from <a href="https://teachdatascience.com/tidyverse/">teachdatascience.com</a></figcaption>
</figure>
</div>
<p>The “core tidyverse” contains the 8 packages below:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/"><code>dplyr</code></a>: for data manipulation</li>
<li><a href="https://ggplot2.tidyverse.org/"><code>ggplot2</code></a>: a “grammar of graphics” for creating beautiful plots</li>
<li><a href="https://readr.tidyverse.org/"><code>readr</code></a>: for reading in rectangular data (i.e., Excel-style formatting)</li>
<li><a href="https://tibble.tidyverse.org/"><code>tibble</code></a>: using tibbles as modern/better dataframes</li>
<li><a href="https://stringr.tidyverse.org/"><code>stringr</code></a>: handling strings (i.e., text or stuff in quotes)</li>
<li><a href="https://forcats.tidyverse.org/"><code>forcats</code></a>: for handling categorical variables (i.e., factors) (meow!)</li>
<li><a href="https://tidyr.tidyverse.org/"><code>tidyr</code></a>: to make “tidy data”</li>
<li><a href="https://purrr.tidyverse.org/"><code>purrr</code></a>: for enhancing functional programming (also meow!)</li>
</ul>
<p>We will be using many of these other packages in Code Club and we will talk about them as we go. There are more tidyverse packages outside of these core eight, and we will talk about some of them another time.</p>
<blockquote class="blockquote">
<p><strong>tl;dr</strong> Tidyverse has a lot of packages that make data analysis easier. None of them are required, but I think you’ll find many tidyverse approaches easier and more intuitive than using base R.</p>
</blockquote>
</section>
<section id="installing-new-packages" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="installing-new-packages"><span class="header-section-number">3</span> Installing new packages</h2>
<p>So far, we have used only functions and data that exist within “base R” - or the portion of R that comes with the default install. R is an open source language, meaning people all around the world can develop tools that can be used within R. These tools are always evolving, and there are way too many of them for them to all come pre-downloaded.</p>
<p>These tools mostly live within something called a “package”. You can think about a package as a unit of code that can be shared and reused. These packages can include both functions and data. A person (or team) can create a package, make that available for download, and then anyone can use it.</p>
<p>To install packages in R that are on the <a href="https://cran.r-project.org/">Comprehensive R Archive Network (CRAN)</a>, you can use the function <code>install.packages()</code>. There are packages that are not on CRAN but we are not going to talk about them today. Be sure that you provide the name of your packages as a string, and put it in quotes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
</section>
<section id="loading-packages" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="loading-packages"><span class="header-section-number">4</span> Loading packages</h2>
<p>Once you have downloaded a package, you now have it, you can think about it as a book that you now own. When you want to read the book, you don’t need to go buy it again, you need to simply take it off your shelf and open it. Using the function <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/library"><code>library()</code></a> takes your package from where it is stored on the “shelf” in your computer, and opens it. I hope this is an ok metaphor.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>It’s a good habit to not ignore warnings/messages that R gives you.</p>
<div class="callout callout-style-default callout-warning callout-titled" title="What does this warning mean?">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What does this warning mean?
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<blockquote class="blockquote">
<p>We only need to install packages once. But, every time we want to use them, we need to “load” them, and can do this using the function <code>library()</code>.</p>
</blockquote>
</section>
<section id="practice" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="practice"><span class="header-section-number">5</span> Practice</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Please install the tidyverse and then load it.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please install the tidyverse and then load it.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it doesn't matter here if you put tidyverse in quotes or not</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without quotes will work since you can think about it as an object</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># that already exists (and not just a string of characters)</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># works</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also works</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="data-for-today" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="data-for-today"><span class="header-section-number">6</span> Data for today</h2>
<p>In addition to having functions, packages also can contain data. Within the <code>tidyverse</code> package, there is a bunch of embedded data we can use to play around with.</p>
<p>If you type the function <code>data()</code> and then place your cursor between the parentheses and hit tab, you will see what pre-loaded data in R you have access to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()</span></code></pre></div>
</div>
<p><img src="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/data.png" class="img-fluid"></p>
<p>Today we are going to use a dataset called <code>diamonds</code> that is embedded within the package <code>ggplot</code> (which we have since it gets automatically installed when we load the <code>tidyverse</code>).</p>
<p>Let’s learn about <code>diamonds</code> using some of the functions <a href="https://osu-codeclub.github.io/posts/basics_04/#what-is-a-data-frame">we learned already</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)
 $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
 $ cut    : Ord.factor w/ 5 levels "Fair"&lt;"Good"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...
 $ color  : Ord.factor w/ 7 levels "D"&lt;"E"&lt;"F"&lt;"G"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...
 $ clarity: Ord.factor w/ 8 levels "I1"&lt;"SI2"&lt;"SI1"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...
 $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
 $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...
 $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...
 $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
 $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
 $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...</code></pre>
</div>
</div>
<p>Tidyverse has a version of <code>str()</code> called <a href="https://dplyr.tidyverse.org/reference/glimpse.html"><code>glimpse()</code></a> which does a similar thing but tries to show you more data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 53,940
Columns: 10
$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…
$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…
$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…
$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …
$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…
$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…
$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…
$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…
$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…
$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Note that we do <strong>not</strong> see diamonds as an object in our enrivonrment, even though clearly it’s there.</p>
</blockquote>
</section>
<section id="the-pipe-or" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="the-pipe-or"><span class="header-section-number">7</span> The pipe <code>|&gt;</code> or <code>%&gt;%</code></h2>
<p><a href="https://r4ds.had.co.nz/pipes.html">The pipe</a> <code>|&gt;</code> or <code>%&gt;%</code> is a tool that allows you to take the output of one function, and send it to the next function.</p>
<p>You can read the pipe as “and then” - here is a theoretical example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">take_this_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then_this_function</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then_another_function</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">finally_a_last_function</span>()</span></code></pre></div>
</div>
<p>The easiest way to see how the pipe works is with an example. We are going to go over some examples in a minute.</p>
<p>Some reasons I like the pipe:</p>
<ul>
<li>its easier to read (and doesn’t have a lot of nested parentheses)</li>
<li>it doesn’t require you to create lots of interim objects which you won’t use again</li>
<li>its easy to troubleshoot</li>
</ul>
<blockquote class="blockquote">
<p>The keyboard shortcut for <code>|&gt;</code> is <code>Ctrl/Cmd</code> + <code>Shift</code> + <code>M</code></p>
</blockquote>
<p>We can change our R options so that the newer version of the pipe <code>|&gt;</code> is used over the older one <code>%&gt;%</code> when we use the keyboard shortcut. I try and remember to use the new one but it doesn’t always happen, so do be familiar with both.</p>
<p>You can go to <code>Tools</code> &gt; <code>Global Options</code> &gt; <code>Code</code> and make sure the tick mark is checked next to “Use the native pipe operator, |&gt; (requires R 4.1+).</p>
<p><img src="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/pipe-options.png" class="img-fluid"></p>
<p>Of course you can assign the output of a pipe to something using the assignment operator <code>&lt;-</code> and then use it for other things.</p>
<p>Ssome functions are not “pipe friendly” meaning they will not work using pipes. This is often because the data is not the first argument passed to the function. All tidyverse functions work with piping.</p>
</section>
<section id="selecting-columns-with-select" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="selecting-columns-with-select"><span class="header-section-number">8</span> Selecting columns with <code>select()</code></h2>
<p>Often you will want to pick only certain columns in your dataframe, and you can do this with the function <a href="https://dplyr.tidyverse.org/reference/select.html"><code>select()</code></a>. You can pick columns by:</p>
<ul>
<li>their names</li>
<li>their position (i.e., index)</li>
<li>characteristics of that column</li>
</ul>
<p>If we want to know how the arguments to <code>select()</code> work, we can access the documentation material about the function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">?<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>()</span></code></pre></div>
</div>
<p>The arguments to <code>select()</code> are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(.data, ...)</span></code></pre></div>
</div>
<p>This tells us that <code>select()</code> accepts a data frame (that’s good, <code>diamonds</code> is one), and we can pass many other expressions.</p>
<p>Let’s select first by name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> diamonds, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our df</span></span>
<span id="cb14-2">       carat, cut, price) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the columns we want to pull</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 3
   carat cut       price
   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;
 1  0.23 Ideal       326
 2  0.21 Premium     326
 3  0.23 Good        327
 4  0.29 Premium     334
 5  0.31 Good        335
 6  0.24 Very Good   336
 7  0.24 Very Good   336
 8  0.26 Very Good   337
 9  0.22 Fair        337
10  0.23 Very Good   338
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>Or, we could more simply use the pipe <code>|&gt;</code> or <code>%&gt;%</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(carat, cut, price)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 3
   carat cut       price
   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;
 1  0.23 Ideal       326
 2  0.21 Premium     326
 3  0.23 Good        327
 4  0.29 Premium     334
 5  0.31 Good        335
 6  0.24 Very Good   336
 7  0.24 Very Good   336
 8  0.26 Very Good   337
 9  0.22 Fair        337
10  0.23 Very Good   338
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>We can read this as, take the dataset diamonds, then select the columns carat, cut, and price. That was pretty easy to read!</p>
<p>Note that when you use the pipe, the potential column names will auto-fill for you after you type 3 letters. You should use this option as it will help prevent misspellings. You can also hit <code>tab</code> to scroll through all the potential objects to select.</p>
<p>We can also select by index. In general I would recommend against this because its really hard to remember which column indices are which variables today, nevermind returning back to old code 1 year from now. Still I will show you how.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you could also use the colon syntax if your columns are sequential</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 3
   carat cut       price
   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;
 1  0.23 Ideal       326
 2  0.21 Premium     326
 3  0.23 Good        327
 4  0.29 Premium     334
 5  0.31 Good        335
 6  0.24 Very Good   336
 7  0.24 Very Good   336
 8  0.26 Very Good   337
 9  0.22 Fair        337
10  0.23 Very Good   338
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>You can also select using selection helpers like:</p>
<ul>
<li><a href="https://tidyselect.r-lib.org/reference/everything.html"><code>everything()</code></a>: picks all variables</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>starts_with()</code></a>: starts with some prefix</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>contains()</code></a>: contains a specific string</li>
<li><a href="https://tidyselect.r-lib.org/reference/where.html"><code>where()</code></a>: selects columns where the statement given in the argument is TRUE</li>
</ul>
<p>Here is an example of using <code>where()</code> to select only the columns that are numeric. The function <code>where()</code> asks whether the following function is TRUE or FALSE, and keeps only the occurences that evaluate to TRUE.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 7
   carat depth table price     x     y     z
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.23  61.5    55   326  3.95  3.98  2.43
 2  0.21  59.8    61   326  3.89  3.84  2.31
 3  0.23  56.9    65   327  4.05  4.07  2.31
 4  0.29  62.4    58   334  4.2   4.23  2.63
 5  0.31  63.3    58   335  4.34  4.35  2.75
 6  0.24  62.8    57   336  3.94  3.96  2.48
 7  0.24  62.3    57   336  3.95  3.98  2.47
 8  0.26  61.9    55   337  4.07  4.11  2.53
 9  0.22  65.1    61   337  3.87  3.78  2.49
10  0.23  59.4    61   338  4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>You can find more helpers <a href="https://dplyr.tidyverse.org/reference/select.html">here</a>.</p>
<p>Using <code>select()</code> will also set the order of your columns. More about this in practice.</p>
</section>
<section id="choosing-observations-with-filter" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="choosing-observations-with-filter"><span class="header-section-number">9</span> Choosing observations with <code>filter()</code></h2>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/filter.png" class="img-fluid figure-img" style="width:70.0%" alt="Cartoon showing three fuzzy monsters either selecting or crossing out rows of a data table. If the type of animal in the table is “otter” and the site is “bay”, a monster is drawing a purple rectangle around the row. If those conditions are not met, another monster is putting a line through the column indicating it will be excluded. Stylized text reads “dplyr::filter() - keep rows that satisfy your conditions.” Learn more about dplyr::filter."></p>
<figcaption class="figure-caption">Figure from <a href="https://github.com/allisonhorst/stats-illustrations">Allison Horst</a></figcaption>
</figure>
</div>
</div>
</div>
<p>Sometimes you want to select observations (rows) based on values. To do this you use <a href="https://dplyr.tidyverse.org/reference/filter.html"><code>filter()</code></a>. Try not to confuse this with <code>select()</code>.</p>
<div class="callout callout-style-default callout-note callout-titled" title="`select()` picks columns, while `filter()` picks rows.">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>select()</code> picks columns, while <code>filter()</code> picks rows.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>The function <code>filter()</code> will keep only observations that meet your filtering criteria.</p>
<p>Let’s say we want to only keep the diamonds that are bigger than 3 carats.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without the pipe</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i find this harder to read</span></span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> diamonds, </span>
<span id="cb22-4">       carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67
 2  3.11 Fair    J     I1       65.9    57  9823  9.15  9.02  5.98
 3  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73
 4  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66
 5  3.02 Fair    I     I1       65.2    56 10577  9.11  9.02  5.91
 6  3.01 Fair    H     I1       56.1    62 10761  9.54  9.38  5.31
 7  3.65 Fair    H     I1       67.1    53 11668  9.53  9.48  6.38
 8  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85
 9  3.22 Ideal   I     I1       62.6    55 12545  9.49  9.42  5.92
10  3.5  Ideal   H     I1       62.8    57 12587  9.65  9.59  6.03
# ℹ 22 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the pipe/my preferred way</span></span>
<span id="cb24-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67
 2  3.11 Fair    J     I1       65.9    57  9823  9.15  9.02  5.98
 3  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73
 4  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66
 5  3.02 Fair    I     I1       65.2    56 10577  9.11  9.02  5.91
 6  3.01 Fair    H     I1       56.1    62 10761  9.54  9.38  5.31
 7  3.65 Fair    H     I1       67.1    53 11668  9.53  9.48  6.38
 8  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85
 9  3.22 Ideal   I     I1       62.6    55 12545  9.49  9.42  5.92
10  3.5  Ideal   H     I1       62.8    57 12587  9.65  9.59  6.03
# ℹ 22 more rows</code></pre>
</div>
</div>
<p>Here I made use of the greater than <code>&gt;</code> sign, and there are other operators you could also use to help you filter.</p>
<ul>
<li><code>==</code>: equal to (I usually read this as exactly equal to, and is different than using an equal sign in an equation)</li>
<li><code>&lt;</code>, <code>&gt;</code>: less than or greater than</li>
<li><code>&lt;=</code>, <code>&gt;=</code>: less than or equal to, great than or equal to</li>
<li><code>&amp;</code>: and</li>
<li><code>|</code>: or</li>
<li><code>!</code>: not equal</li>
<li><code>is.na</code>: is NA</li>
</ul>
<p>You can also layer your filtering. This can include in both an AND or OR fashion.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># include diamonds that are bigger than 3 carats and a Premium cut</span></span>
<span id="cb26-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 13 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67
 2  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73
 3  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66
 4  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85
 5  3.01 Premium G     SI2      59.8    58 14220  9.44  9.37  5.62
 6  4.01 Premium I     I1       61      61 15223 10.1  10.1   6.17
 7  4.01 Premium J     I1       62.5    62 15223 10.0   9.94  6.24
 8  3.67 Premium I     I1       62.4    56 16193  9.86  9.81  6.13
 9  3.01 Premium I     SI2      60.2    59 18242  9.36  9.31  5.62
10  3.04 Premium I     SI2      59.3    60 18559  9.51  9.46  5.62
11  3.51 Premium J     VS2      62.5    59 18701  9.66  9.63  6.03
12  3.01 Premium J     SI2      60.7    59 18710  9.35  9.22  5.64
13  3.01 Premium J     SI2      59.7    58 18710  9.41  9.32  5.59</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># include diamonds that are bigger than 3 carats OR a Premium cut</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "|" (above the return key) is the symbol for "or"</span></span>
<span id="cb28-3">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 13,810 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31
 2  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63
 3  0.22 Premium F     SI1      60.4    61   342  3.88  3.84  2.33
 4  0.2  Premium E     SI2      60.2    62   345  3.79  3.75  2.27
 5  0.32 Premium E     I1       60.9    58   345  4.38  4.42  2.68
 6  0.24 Premium I     VS1      62.5    57   355  3.97  3.94  2.47
 7  0.29 Premium F     SI1      62.4    58   403  4.24  4.26  2.65
 8  0.22 Premium E     VS2      61.6    58   404  3.93  3.89  2.41
 9  0.22 Premium D     VS2      59.3    62   404  3.91  3.88  2.31
10  0.3  Premium J     SI2      59.3    61   405  4.43  4.38  2.61
# ℹ 13,800 more rows</code></pre>
</div>
</div>
<p>You can play around with combining these different operators to see what happens.</p>
</section>
<section id="practice-1" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">10</span> Practice</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Create a new dataframe called `small_diamonds` that includes only the diamonds that are less than 0.5 carats. How many diamonds does this include?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Create a new dataframe called <code>small_diamonds</code> that includes only the diamonds that are less than 0.5 carats. How many diamonds does this include?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">small_diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(small_diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 17674</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Subset diamonds into a new df (`diamonds_subset`) so that it only includes diamonds less than $10,000, and only information for carat, cut, price, and color, in that specific order.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Subset diamonds into a new df (<code>diamonds_subset</code>) so that it only includes diamonds less than $10,000, and only information for carat, cut, price, and color, in that specific order.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">diamonds_subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(carat, cut, price, color) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select both picks and orders!</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="What is the mean and standard deviation of carat of the diamonds that passed your critieria in `diamonds_subset`?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What is the mean and standard deviation of carat of the diamonds that passed your critieria in <code>diamonds_subset</code>?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Using the <code>$</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(diamonds_subset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>carat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6968262</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sd</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(diamonds_subset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>carat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3574645</code></pre>
</div>
</div>
<p>Using the pipe</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean another way</span></span>
<span id="cb37-2">diamonds_subset <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(carat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is necessary because mean requires a vector!</span></span>
<span id="cb37-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6968262</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or you could go full pipe!</span></span>
<span id="cb39-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(carat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6968262</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sd another way</span></span>
<span id="cb41-2">diamonds_subset <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(carat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is necessary because mean requires a vector!</span></span>
<span id="cb41-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3574645</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or you could go full pipe!</span></span>
<span id="cb43-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(carat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3574645</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="How many diamonds in this dataset are both Ideal cut, less than $10,000, and bigger than 1.5 carats??">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How many diamonds in this dataset are both Ideal cut, less than $10,000, and bigger than 1.5 carats??
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>When you are trying to filter using “and” and have more than 2 items, use a comma in between them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ideal"</span>, carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb45-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 327</code></pre>
</div>
</div>
</div>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E06_tidy_01/index.html</guid>
  <pubDate>Fri, 16 Feb 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/tidyverse-package-workflow.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>R Basics 5: Data Manipulation With Base R</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E05_basics_05/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-last-week" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-last-week"><strong>Recap of last week</strong></h4>
<p>Last week, we discussed vectorized operations and introduced the concept of a data frame. Furthermore, you successfully created a data frame containing multiple columns and rows.</p>
<p>Today, we will explore data manipulation using base R syntax. It is important to note that there are countless ways to achieve the same objective, particularly in base R. Whenever possible, let us consider simpler syntax.</p>
<p><br></p>
</section>
</section>
<section id="data-manipulation-with-base-r" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="data-manipulation-with-base-r"><span class="header-section-number">2</span> Data manipulation with (base) R</h2>
<section id="create-a-new-dataset" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="create-a-new-dataset"><span class="header-section-number">2.1</span> Create a new dataset</h3>
<p>###</p>
<details>
<summary>
<b>Please create a new data frame and name it df. This data frame should consist of three columns (Control, Trt1, and Trt2) with 50 observations each. The Control column should contain 50 data points that follow a normal distribution with a mean of 35 and a standard deviation of 10. Likewise, the Trt1 column should have a mean of 37 and a standard deviation of 10, and the Trt2 column should have a mean of 75 and a standard deviation of 10. Additionally, add five blocks (a, b, c, d, e), each repeating 10 times. Let’s use the function <code>set.seed(1234)</code> to work with the same values.</b> <strong>(Click for the answer)</strong>
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Control =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb1-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb1-4">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb1-5">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Block =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
</details>
<details>
<summary>
<p><b>Data mostly come in two shapes – “long” format and “wide” format.</b></p><b>
What type of data do you think is <code>df</code>?</b> <strong>(Click for the answer)</strong>
</summary>
<p>Our data frame <code>df</code> is in <strong>wide</strong> format.</p>
</details>
</section>
<section id="extract-variables-columns" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="extract-variables-columns"><span class="header-section-number">2.2</span> Extract variables (columns)</h3>
<p>There are multiple ways to extract/select variables/columns. Here are two methods that we have previously used:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Control"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt2"</span>)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># by name</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># by column index</span></span></code></pre></div>
</div>
</section>
<section id="make-new-variables-columns" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="make-new-variables-columns"><span class="header-section-number">2.3</span> Make new variables (columns)</h3>
<p>Let’s create two new variables from existing ones:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1.log <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1)</span>
<span id="cb3-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2.log <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2)</span></code></pre></div>
</div>
</section>
<section id="extract-observations-rows" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="extract-observations-rows"><span class="header-section-number">2.4</span> Extract observations (rows)</h3>
<p>There are multiple ways to extract/filter observations/rows. Here are two ways we can do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using [,]</span></span>
<span id="cb4-2">df[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1.log <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, ]</span>
<span id="cb4-3"></span>
<span id="cb4-4">df[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2.log <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, ]</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using subset</span></span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(df, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2.log <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span></code></pre></div>
</div>
</section>
<section id="arrange-observations-rows" class="level3" data-number="2.5">
<h3 data-number="2.5" class="anchored" data-anchor-id="arrange-observations-rows"><span class="header-section-number">2.5</span> Arrange observations (rows)</h3>
<p>Sorting is an operation that we typically perform when manipulating our dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ascending order of Block (alphabetic) followed by ascending order of Trt2.log</span></span>
<span id="cb5-2">df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2.log) , ]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># descending order of Block (alphabetic) followed by ascending order of Trt2.log</span></span>
<span id="cb5-5">df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block), df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2.log) , ]</span></code></pre></div>
</div>
</section>
<section id="summarize-observations-rows" class="level3" data-number="2.6">
<h3 data-number="2.6" class="anchored" data-anchor-id="summarize-observations-rows"><span class="header-section-number">2.6</span> Summarize observations (rows)</h3>
<p>There are numerous ways to accomplish this task, and we will discover additional methods as we progress to the <code>tidyverse</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Manually create a data.frame</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt1.mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1),</span>
<span id="cb6-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt1.sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1),</span>
<span id="cb6-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt2.mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2),</span>
<span id="cb6-5">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt2.sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2))</span></code></pre></div>
</div>
</section>
<section id="summarize-rows-within-groups" class="level3" data-number="2.7">
<h3 data-number="2.7" class="anchored" data-anchor-id="summarize-rows-within-groups"><span class="header-section-number">2.7</span> Summarize rows within groups</h3>
<p>Typically, our goal is to summarize data according to specific variables. Below is how we can achieve this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First operate in the data.frame by group</span></span>
<span id="cb7-2">df_by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">by</span>(df, </span>
<span id="cb7-3">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">INDICES =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block),</span>
<span id="cb7-4">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x){</span>
<span id="cb7-5">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Block =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block),</span>
<span id="cb7-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Control.mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Control),</span>
<span id="cb7-7">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Control.sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Control),</span>
<span id="cb7-8">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt1.mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1),</span>
<span id="cb7-9">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt1.sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1),</span>
<span id="cb7-10">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt2.mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2),</span>
<span id="cb7-11">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Trt2.sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2))</span>
<span id="cb7-12">   })</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Then combine the results into a data.frame</span></span>
<span id="cb7-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, df_by)</span></code></pre></div>
</div>
<p>Alternatively, we can use the <code>aggregate()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">df.by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(data.frame, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aggregate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(Control, Trt1, Trt2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Block, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x) ) ))</span>
<span id="cb8-2">df.by</span></code></pre></div>
</div>
<p>Let’s take a look at each treatment graphically (<strong>we will do more data viz soon!</strong>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">barplot</span>(df.by<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Control.mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names.arg =</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(df.by<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block)) </span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">barplot</span>(df.by<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1.mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names.arg =</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(df.by<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block))</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">barplot</span>(df.by<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2.mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names.arg =</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(df.by<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Block))</span></code></pre></div>
</div>
</section>
<section id="reshape-our-data-frame" class="level3" data-number="2.8">
<h3 data-number="2.8" class="anchored" data-anchor-id="reshape-our-data-frame"><span class="header-section-number">2.8</span> Reshape our data frame</h3>
<p>Wide to long format:</p>
<p>In data analysis, the need to reshape the data frequently arises in order to enhance manageability and usefulness. Reshaping the data entails converting it from one format, such as wide, to another, like long, or vice versa. Such transformations aid in facilitating data accessibility, simplifying analysis, and providing more information.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape</span>(df, </span>
<span id="cb10-2">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">varying =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Control"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt1.log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt2.log"</span>), </span>
<span id="cb10-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yield"</span>, </span>
<span id="cb10-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timevar =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treatment"</span>, </span>
<span id="cb10-5">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Control"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt1.log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt2.log"</span>), </span>
<span id="cb10-6">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new.row.names =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb10-7">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"long"</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9">l</span></code></pre></div>
</div>
<p><br></p>
</section>
</section>
<section id="practice" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="practice"><span class="header-section-number">3</span> Practice</h2>
<p>Before seeking assistance from others, it is generally advisable for you to attempt to resolve the problem on your own. R provides comprehensive tools for accessing documentation and searching for help.</p>
<section id="exercise-1" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="exercise-1"><span class="header-section-number">3.1</span> <strong>Exercise 1</strong></h3>
<details>
<summary>
<b>Let’s use the same data frame <code>df</code> we created at the beginning of this session</b> <strong>(Click for the answer)</strong>
</summary>
<p>Please go to the beginning of this session and re-run the code.</p>
</details>
</section>
<section id="exercise-2" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="exercise-2"><span class="header-section-number">3.2</span> Exercise 2</h3>
<details>
<summary>
<b>A more informative variable could be one showing the difference between the treatment and the control. Create two new variables: <code>Trt1.Delta</code> and <code>Trt2.Delta</code>.</b> <strong>(Click for the answer)</strong>
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1.Delta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Control</span>
<span id="cb11-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2.Delta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Trt2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Control</span></code></pre></div>
</div>
</details>
</section>
<section id="exercise-3" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="exercise-3"><span class="header-section-number">3.3</span> Exercise 3</h3>
<details>
<summary>
<b>Create a new data frame <code>df_delta</code> containing the following variables (columns): <code>Block</code>, <code>Trt1.Delta</code>, and <code>Trt2.Delta</code>.</b> <strong>(Click for the answer)</strong>
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">df_delta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Block"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt1.Delta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt2.Delta"</span>)]</span></code></pre></div>
</div>
</details>
</section>
<section id="exercise-4" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="exercise-4"><span class="header-section-number">3.4</span> Exercise 4</h3>
<details>
<summary>
<b>Summarize <code>Trt1.Delta</code> and <code>Trt2.Delta</code> by <code>Block</code>. Produce the mean and standard deviation for each variable.</b> <strong>(Click for the answer)</strong>
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">df.by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(data.frame, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aggregate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(Trt1.Delta, Trt2.Delta) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Block, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x) ) ))</span>
<span id="cb13-2">df.by</span></code></pre></div>
</div>
</details>
</section>
<section id="exercise-5" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="exercise-5"><span class="header-section-number">3.5</span> Exercise 5</h3>
<details>
<summary>
<b>In the end, our goal is to conduct statistical analysis to assess the impact of the treatment. However, the current data format does not allow us to proceed with our analysis. To fix this, please transform the data frame <code>df_delta</code> from a wide format to a long format. Please name this new data frame as <code>long_delta</code>.</b> <strong>(Click for the answer)</strong>
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape</span>(df_delta, </span>
<span id="cb14-2">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">varying =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt1.Delta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt2.Delta"</span>), </span>
<span id="cb14-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yield"</span>, </span>
<span id="cb14-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timevar =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treatment"</span>, </span>
<span id="cb14-5">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt1.Delta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trt2.Delta"</span>), </span>
<span id="cb14-6">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new.row.names =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb14-7">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"long"</span>)</span></code></pre></div>
</div>
</details>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <guid>https://osu-codeclub.github.io/posts/S07E05_basics_05/index.html</guid>
  <pubDate>Fri, 09 Feb 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E05_basics_05/img/Allison_Horst.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>R Basics 4: Vectorized Operations and Data Frames</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E04_basics_04/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>We are going to continue our discussion about vectors that <a href="https://osu-codeclub.github.io/posts/basics_03/#vectors-in-r">Horacio started last week</a> and talk about vectorized operations. It’s fine if you don’t know what this means, you will by the end of today’s session. We are also going to introduce the idea of a data frame.</p>
</section>
<section id="what-are-vectorized-operations" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="what-are-vectorized-operations"><span class="header-section-number">2</span> What are vectorized operations?</h2>
<p>I think its easier to see 👀 an example of a vectorized operation, and then we can explain what is happening under the hood.</p>
<p>Let’s create a vector of high temperatures for the weather in Columbus OH in Fahrenheit from the last 7 days. I took this data from January 19 to 25, 2024.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">temps_F <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span></code></pre></div>
</div>
<p>We can call our vector to see what it contains.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">temps_F</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 26 21 24 32 33 41 51</code></pre>
</div>
</div>
<p>A reminder that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%C2%B0F%20=%201.8%20*%20%C2%B0C%20+%2032%0A"></p>
<p>With some light rearrangement, we can write the code below so we can plug in a temp in Fahrenheit, and get out one in Celsius.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">temps_C <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (temps_F <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">temps_C</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -3.3333333 -6.1111111 -4.4444444  0.0000000  0.5555556  5.0000000 10.5555556</code></pre>
</div>
</div>
<p>Here, we simply use the vector <code>temps_F</code> as we would any single number in a smple mathematical operation, and we convert each element or number in our our entire vector using the formula we provide. As a result, we can convert every element of our vector from Fahrenheit to Celsius.</p>
<blockquote class="blockquote">
<p>It is worth mentioning that this is <em>unique in R</em> - many other programming languages would require a for loop or similar to do this operation, but because R is a <strong>vectorized language</strong>, this works easily and simply.</p>
</blockquote>
<p>Here is another example. Imagine you have a vector of values and you want to calculate the log base 2 value for each element.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3">log2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log2</span>(raw)</span>
<span id="cb6-4"></span>
<span id="cb6-5">log2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4.321928 5.169925 5.392317 5.727920</code></pre>
</div>
</div>
<p>This is an example where we apply a formula transformation to a vector, but we can also use vectorized operations with two vectors.</p>
</section>
<section id="vector-by-vector-operations" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="vector-by-vector-operations"><span class="header-section-number">3</span> Vector by vector operations</h2>
<p>Let’s create some vectors. Note I am not using the <code>c()</code> function to create the vector - since I am using the <code>:</code> to indicate a string of integers from number 1 to number 2, under the hood, R automatically makes this a vector. If you were to use the <code>c()</code> function though you would get the same result.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a vector with the values from 1 to 10, incrementing by 1</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vector_1to10 &lt;- c(1:10) would also work</span></span>
<span id="cb8-3">vector_1to10 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">vector_1to5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-6"></span>
<span id="cb8-7">vector_1to3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">vector_0to4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="What do you think will happen if we try and add `vector_1to10` and `vector_1to5`?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What do you think will happen if we try and add <code>vector_1to10</code> and <code>vector_1to5</code>?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a vector reminder</span></span>
<span id="cb9-2">vector_1to10</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">vector_1to5</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adding</span></span>
<span id="cb13-2">vector_1to10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> vector_1to5</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  2  4  6  8 10  7  9 11 13 15</code></pre>
</div>
</div>
<p>We see that <code>vector_1to5</code> gets recycled, meaning once the 5 elements in the vector have been used, the addition starts back from the beginning again. If we want to be explicit:</p>
<ul>
<li>Element 1 of <code>vector_1to10</code> gets added to element 1 of <code>vector_1to5</code></li>
<li>Element 2 of <code>vector_1to10</code> gets added to element 2 of <code>vector_1to5</code></li>
<li>Element 3 of <code>vector_1to10</code> gets added to element 3 of <code>vector_1to5</code></li>
<li>Element 4 of <code>vector_1to10</code> gets added to element 4 of <code>vector_1to5</code></li>
<li>Element 5 of <code>vector_1to10</code> gets added to element 5 of <code>vector_1to5</code>.</li>
<li>Element 6 of <code>vector_1to10</code> gets added to <strong>element 1</strong> of <code>vector_1to5</code></li>
</ul>
<p>and so on…</p>
<p>⚠️ <strong>This happens without R explicitly telling you this is happening. We do not get a warning.</strong></p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="What do you think will happen if we try and add `vector_1to10` and `vector_1to3`?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What do you think will happen if we try and add <code>vector_1to10</code> and <code>vector_1to3</code>?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a vector reminder</span></span>
<span id="cb15-2">vector_1to10</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">vector_1to3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adding</span></span>
<span id="cb19-2">vector_1to10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> vector_1to3</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in vector_1to10 + vector_1to3: longer object length is not a multiple
of shorter object length</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  2  4  6  5  7  9  8 10 12 11</code></pre>
</div>
</div>
<p>⚠️ <strong>We see that <code>vector_1to3</code> gets recycled, but now we have a warning. We get this because the vector lengths are not divisible by each other to produce an integer. R still will perform our operation, but it tells us hey this might not be exactly what you want.</strong></p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="What do you think will happen if we try and divide `vector_1to10` by `vector_0to4`?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What do you think will happen if we try and divide <code>vector_1to10</code> by <code>vector_0to4</code>?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">vector_1to10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> vector_0to4</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]      Inf 2.000000 1.500000 1.333333 1.250000      Inf 7.000000 4.000000
 [9] 3.000000 2.500000</code></pre>
</div>
</div>
<p>We see that <code>vector_0to4</code> gets recycled, but now we have a new output we haven’t seen before, <code>Inf</code> which stands for infinity/infinite.</p>
<p>If we are then to try and sum this vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(vector_1to10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> vector_0to4)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Inf</code></pre>
</div>
</div>
<p>We get an answer of infinite. This is because we have at least one infinite value, so including it as part of a sum makes that sum infinite too.</p>
<p>⚠️ <strong>Think about how this might work if you have NAs in your vector</strong></p>
</div>
</div>
</div>
</section>
<section id="filtering-vectors" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="filtering-vectors"><span class="header-section-number">4</span> Filtering vectors</h2>
<p>We can also write code that allows us to filter our vector based on certain conditions. What if we wanted to know which observations had data where the temperature was above freezing? We could use a mathematical operator (in this case, <code>&gt;</code>) to find instances when the statement we provide is true.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">temps_C <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE</code></pre>
</div>
</div>
<p>When we run this code, we get a series of values corresponding to each element of the vector, and whether or not the statement we have prompted with (<code>temps_C &gt; 0</code>) is true or false.</p>
<p>If we wanted to see how many observations meet these criteria, we can take advantage of the fact that <code>TRUE</code> is coded as 1, and <code>FALSE</code> and 0.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(temps_C <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<p>We know then that there are 3 observations where the temperature is above freezing.</p>
<p>If we want to know <strong>which</strong> observations are above freezing, we can use the function <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/which"><code>which()</code></a> which shows us the indices of the elements in our vector for which our code evaluates to <code>TRUE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(temps_C <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5 6 7</code></pre>
</div>
</div>
<p>This tells us that the 5th, 6th, and 7th elements in our data have temperatures higher than freezing. In our vector we don’t have the specific days associated with each temperature embedded. We can assign meta-data to our values by using the function <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/names"><code>names()</code></a> for our vector. I’ll show you how to do that below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a new vector that has the dates we want to assign</span></span>
<span id="cb32-2">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1/19"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1/20"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1/21"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1/22"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1/23"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1/24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1/25"</span>)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we can assign these dates as the "names" of our vector temps_C</span></span>
<span id="cb32-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(temps_C) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dates</span>
<span id="cb32-6"></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now our temps have dates associated with them</span></span>
<span id="cb32-8">temps_C</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      1/19       1/20       1/21       1/22       1/23       1/24       1/25 
-3.3333333 -6.1111111 -4.4444444  0.0000000  0.5555556  5.0000000 10.5555556 </code></pre>
</div>
</div>
<p>If you knew you wanted to do this at the outset, you could create the vector along with its names all at once using the handy function <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/structure"><code>structure()</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">(temps_F_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(temps_F,</span>
<span id="cb34-2">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> dates))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1/19 1/20 1/21 1/22 1/23 1/24 1/25 
  26   21   24   32   33   41   51 </code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>You can also set other attributes using the function <code>structure()</code>.</p>
</blockquote>
<p>You might use the sometimes, but more likely you would want to work using a data frame.</p>
</section>
<section id="practice" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="practice"><span class="header-section-number">5</span> Practice</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Create a vector of 10 numbers, beginning at 2, incrementing by 11. Remember, if you call `help()` or put a `?` before a function, you can learn more about its arguments and use. You might want to look back to last week's Code Club if you don't remember the simplified function for doing this.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Create a vector of 10 numbers, beginning at 2, incrementing by 11. Remember, if you call <code>help()</code> or put a <code>?</code> before a function, you can learn more about its arguments and use. You might want to look back to last week’s Code Club if you don’t remember the simplified function for doing this.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">a_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb36-2"></span>
<span id="cb36-3">a_vector</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   2  13  24  35  46  57  68  79  90 101</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="How many of these values are even? Yes I know that I haven't showed you how to do this but I am confident you can figure out how to :)">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How many of these values are even? Yes I know that I haven’t showed you how to do this but I am confident you can figure out how to :)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>A zero remainder means the number is even.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use modulo operator %% to see if a number is even</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the remainer is 0, it is even</span></span>
<span id="cb38-3">a_vector <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0 1 0 1 0 1 0 1 0 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># how many are even?</span></span>
<span id="cb40-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(a_vector <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="what-is-a-data-frame" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="what-is-a-data-frame"><span class="header-section-number">6</span> What is a data frame?</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E04_basics_04/img/vector-vs-df.png" class="img-fluid figure-img" width="469"></p>
</figure>
</div>
<p>Below I am creating a simple data frame, this is a rectangular data object with rows and columns. In reality, you will probably be reading your data in from a <code>.csv</code> or <code>.xlsx</code> file, but you can also construct a data frame directly in R. We are doing this with the function <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frame"><code>data.frame()</code></a> which is a part of base R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a simple 3 by 4 data frame called small_df</span></span>
<span id="cb42-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># columns are a, b, and c</span></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># values are numbers from 1 to 4, 5 to 8, and 9 to 12</span></span>
<span id="cb42-4">small_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb42-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, </span>
<span id="cb42-6">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
</div>
<p>Let’s look at <code>small_df</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">small_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  a b  c
1 1 5  9
2 2 6 10
3 3 7 11
4 4 8 12</code></pre>
</div>
</div>
<p>We can think about a data frame as being composed of a series of vectors (as columns) squished together. In the case above, each column is of the same type, integer or numeric but this doesn’t have to be true. Note the first column of 1:4 is actually the row index - you can tell this as it doesn’t have a column name.</p>
<blockquote class="blockquote">
<p>Vectors all must be of the same object type (i.e., character, numeric, logical). In a data frame, each column can be a different object type. This is very useful especially when you have to have meta-data combined with numeric data.</p>
</blockquote>
<p>We call use some new functions to look more at our data frame.</p>
<p><code>View()</code> will open our data frame like you might be used to looking at a spreadsheet in Excel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">View</span>(small_df)</span></code></pre></div>
</div>
<p><code>str()</code> gives us the structure of the object x.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(small_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   4 obs. of  3 variables:
 $ a: int  1 2 3 4
 $ b: int  5 6 7 8
 $ c: int  9 10 11 12</code></pre>
</div>
</div>
<p><code>dim()</code> gives us the dimensions of x.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(small_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4 3</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-important callout-titled" title="Note that when referring to a two-dimensional piece of data, R uses the syntax [rows, columns]">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note that when referring to a two-dimensional piece of data, R uses the syntax [rows, columns]
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>Note, that if you use <code>dim()</code> on a vector (which has only one dimension), you will get something unexpected.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this doesn't work</span></span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(temps_C)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
</div>
<p>For a vector, instead you should use the function <code>length()</code> to figure out how many elements are in the vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this does work</span></span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(temps_C)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7</code></pre>
</div>
</div>
</section>
<section id="performing-operations-on-a-data-frame" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="performing-operations-on-a-data-frame"><span class="header-section-number">7</span> Performing operations on a data frame</h2>
<p>Now that we have our <code>small_df</code> we can try performing some operations on it.</p>
<p>What if you wanted to take the log base 2 for every value in <code>small_df</code>? Just like we did for a vector, we can simply use the function <code>log2()</code> on <code>small_df</code>. Here I am assigning the output of this to a new data frame called <code>small_df_log2</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">(small_df_log2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log2</span>(small_df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         a        b        c
1 0.000000 2.321928 3.169925
2 1.000000 2.584963 3.321928
3 1.584963 2.807355 3.459432
4 2.000000 3.000000 3.584963</code></pre>
</div>
</div>
<p>Remember, if you assign something to an object, but also want it to print at the same time, just surround the whole thing in parentheses.</p>
<p>What if I wanted to take the log base 2 of only column <code>a</code>? There are a few ways I can do that.</p>
<section id="by-indexing" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="by-indexing"><span class="header-section-number">7.1</span> By indexing</h3>
<p>I can use the square brackets <code>[]</code> to access certain parts of my data frame. Remember for data frames, the syntax is [rows, columns]. Let’s try some example where we access by using indices (i.e., the position of the row, column, or the combination) to grab different parts of our data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first row, second column</span></span>
<span id="cb56-2">small_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all rows, second column</span></span>
<span id="cb58-2">small_df[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5 6 7 8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># third row, all columns</span></span>
<span id="cb60-2">small_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  a b  c
3 3 7 11</code></pre>
</div>
</div>
<p>Is there any difference as to the types of objects we get when doing these different types of selection? We can use the function <code>str()</code> to see what type of R object we have in the different scenarios.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first row, second column</span></span>
<span id="cb62-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(small_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> int 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all rows, second column</span></span>
<span id="cb64-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(small_df[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> int [1:4] 5 6 7 8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># third row, all columns</span></span>
<span id="cb66-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(small_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   1 obs. of  3 variables:
 $ a: int 3
 $ b: int 7
 $ c: int 11</code></pre>
</div>
</div>
<p>Back to the original idea - how would we take the data only from column <code>a</code> and log base 2 transform it, but leave the rest of <code>small_df</code> as it is?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first save our df with a new name</span></span>
<span id="cb68-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is like doing a "save as" for an existing df</span></span>
<span id="cb68-3">small_df_log2_a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> small_df</span>
<span id="cb68-4"></span>
<span id="cb68-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># log2 transform the first column, and then assign that back to the first column</span></span>
<span id="cb68-6">small_df_log2_a[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log2</span>(small_df[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb68-7"></span>
<span id="cb68-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check to see if it worked</span></span>
<span id="cb68-9">small_df_log2_a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         a b  c
1 0.000000 5  9
2 1.000000 6 10
3 1.584963 7 11
4 2.000000 8 12</code></pre>
</div>
</div>
<p>Note that column <code>a</code> now is the object type “dbl” or numeric, instead of “int” or integer, since our log2 transformation has made our values no longer integers.</p>
</section>
<section id="by-name" class="level3" data-number="7.2">
<h3 data-number="7.2" class="anchored" data-anchor-id="by-name"><span class="header-section-number">7.2</span> By name</h3>
<p>We can also index by providing column names - this is a nice approach since when going back to read code, a column name is often more informative than a column index/number. Note that in this case the column name <code>a</code> is in quotes since it is a character string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all rows, the column "a"</span></span>
<span id="cb70-2">small_df[,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4</code></pre>
</div>
</div>
<p>We can also use the dollar sign accessor <code>$</code> to extract an element in a data frame or list. In the case of a data frame, you are accessing a column (though you could be accessing something else if a different type of object). Note that when you type the name of a data frame, and then the $, R will prompt you with some possible column names.</p>
<p><img src="https://osu-codeclub.github.io/posts/S07E04_basics_04/img/autofill-dollarsign.png" class="img-fluid"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">small_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4</code></pre>
</div>
</div>
<p>By using this syntax, you are turning your data frame into a vector. This may or may not be what you want to do, so just be aware.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Accessing certain observations can also be performed using the `tidyverse` functions `select()` and `filter()`. If you don't know what I'm talking about simply ignore this, we will go over it in a future Code Club.">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Accessing certain observations can also be performed using the <code>tidyverse</code> functions <code>select()</code> and <code>filter()</code>. If you don’t know what I’m talking about simply ignore this, we will go over it in a future Code Club.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
</section>
<section id="practice-1" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">8</span> Practice</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Create a new data frame and assign it to the variable df. Give is 5 columns and 3 rows, and add some numbers in each of the cells, it doesn't matter what they are.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Create a new data frame and assign it to the variable df. Give is 5 columns and 3 rows, and add some numbers in each of the cells, it doesn’t matter what they are.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i'm just using different ways to creating strings of numbers </span></span>
<span id="cb74-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb74-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>),</span>
<span id="cb74-4">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_3 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb74-5">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_4 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb74-6">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_5 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  col_1 col_2 col_3     col_4 col_5
1     2   5.0     4  8.706182     6
2     3   7.5     5 13.453908     6
3     4  10.0     6  7.366212     6</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Multiply all of column 1 by column 2.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Multiply all of column 1 by column 2.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Here are some different ways to do this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10.0 22.5 40.0</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">df[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10.0 22.5 40.0</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1">df[,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col_1"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df[,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col_2"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10.0 22.5 40.0</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Create a sixth column that is the result of the addition of columns 3 and 4.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Create a sixth column that is the result of the addition of columns 3 and 4.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">col_6 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col_3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col_4</span>
<span id="cb83-2"></span>
<span id="cb83-3">new_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(df,</span>
<span id="cb83-4">                     col_6)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">new_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  col_1 col_2 col_3     col_4 col_5    col_6
1     2   5.0     4  8.706182     6 12.70618
2     3   7.5     5 13.453908     6 18.45391
3     4  10.0     6  7.366212     6 13.36621</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="How does having NAs in a vector change the class of your vector?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How does having NAs in a vector change the class of your vector?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">test_NA_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb86-2"></span>
<span id="cb86-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(test_NA_1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">test_NA_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>)</span>
<span id="cb88-2"></span>
<span id="cb88-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(test_NA_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
</div>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <guid>https://osu-codeclub.github.io/posts/S07E04_basics_04/index.html</guid>
  <pubDate>Fri, 02 Feb 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E04_basics_04/img/vector-vs-df.png" medium="image" type="image/png" height="119" width="144"/>
</item>
<item>
  <title>R Basics 3: Built-in functions, Vectors, and Help</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E03_basics_03/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-last-week" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-last-week"><strong>Recap of last week</strong></h4>
<p>Last week, we did a little more basic interaction with R (missing prompts and data types), we wrote code in R scripts (and added comments to our code), and used and named R objects.</p>
<p>Here are some additional tips from our previous session: Go to <kbd>Tools</kbd> and then <kbd>Keyboard Shortcuts Help</kbd>. Identify useful keyboard shortcuts and use them during today’s session.</p>
</section>
<section id="learning-objectives-for-today" class="level4">
<h4 class="anchored" data-anchor-id="learning-objectives-for-today"><strong>Learning objectives for today</strong></h4>
<ul>
<li><p><strong>Built-in Functions</strong></p></li>
<li><p><strong>Vectors in R</strong></p></li>
<li><p><strong>Getting Help with R</strong></p></li>
</ul>
<p><br></p>
</section>
</section>
<section id="types-of-functions-in-r" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="types-of-functions-in-r"><span class="header-section-number">2</span> Types of Functions in R</h2>
<p>Functions are the foundation of almost everything in R. In programming, they are sets of organized instructions designed to perform specific tasks. The purpose of functions is to create self-contained programs that can be called upon as needed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.codingninjas.com%2Fstudio%2Flibrary%2Fwhat-are-the-functions-in-r&amp;psig=AOvVaw1EyYcYzGf65a8LlRDmR8UO&amp;ust=1706296144697000&amp;source=images&amp;cd=vfe&amp;opi=89978449&amp;ved=0CBMQjRxqGAoTCKjXn9Ke-YMDFQAAAAAdAAAAABCDAg"><img src="https://osu-codeclub.github.io/posts/S07E03_basics_03/img/Types_of_Functions.png" class="img-fluid figure-img" alt="Types of Functions in R"></a></p>
<figcaption class="figure-caption">Fig. 1. Types of Functions in R</figcaption>
</figure>
</div>
<section id="whats-in-a-function" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="whats-in-a-function"><span class="header-section-number">2.1</span> What’s in a function?</h3>
<p>What exactly is a function? Let’s recall from our math knowledge:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.google.com/imgres?imgurl=https%3A%2F%2Fwww.basic-mathematics.com%2Fimages%2Ffunction-rules.png&amp;tbnid=_J3drvXZ3dYIPM&amp;vet=12ahUKEwjZy_j4yfmDAxUQyMkDHdknD40QMygFegQIARBi..i&amp;imgrefurl=https%3A%2F%2Fwww.basic-mathematics.com%2Fwrite-a-function-rule.html&amp;docid=Sv_R0La-1wD7kM&amp;w=395&amp;h=278&amp;q=example%20function%20in%20R%20rule&amp;client=safari&amp;ved=2ahUKEwjZy_j4yfmDAxUQyMkDHdknD40QMygFegQIARBi"><img src="https://osu-codeclub.github.io/posts/S07E03_basics_03/img/function-rules.png" class="img-fluid figure-img" alt="Function Rules"></a></p>
<figcaption class="figure-caption">Fig. 2. Function Rules</figcaption>
</figure>
</div>
<p>A function in R is a collection of statements that can be reused in a program. This is the syntax of <strong><em>defining</em></strong> a function in R:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.learnbyexample.org/r-functions/"><img src="https://osu-codeclub.github.io/posts/S07E03_basics_03/img/r-function-syntax.png" class="img-fluid figure-img" alt="R Function Syntax"></a></p>
<figcaption class="figure-caption">Fig. 3. R Function Syntax</figcaption>
</figure>
</div>
<details>
<summary>
<b>Which function was covered during our first session of Code Club?</b> (Click for the answer)
</summary>
<p>During our first session of Code Club, we examined the <code>setwd</code> function.</p>
</details>
</section>
<section id="types-of-built-in-functions-in-r" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="types-of-built-in-functions-in-r"><span class="header-section-number">2.2</span> Types of built-in functions in R?</h3>
<p>Built-in functions, which are already created or defined in the programming framework, are referred to as built-in functions. R offers a comprehensive collection of functions that can effectively handle almost any task for the user. These built-in functions are categorized based on their functionality as follows.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.javatpoint.com/r-built-in-functions"><img src="https://osu-codeclub.github.io/posts/S07E03_basics_03/img/r-built-in-functions.png" class="img-fluid figure-img" alt="Types of built-in functions in R"></a></p>
<figcaption class="figure-caption">Fig. 4. Types of built-in functions in R</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Before we begin examining various functions
</div>
</div>
<div class="callout-body-container callout-body">
<p>Please refer to:</p>
<ul>
<li><p><a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.html#A">The R Base Package</a></p></li>
<li><p><a href="https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf">Base R Cheat Sheet</a></p></li>
</ul>
</div>
</div>
<p><br></p>
<section id="math-functions" class="level4">
<h4 class="anchored" data-anchor-id="math-functions"><strong>Math functions</strong></h4>
<p>A numeric function in R is defined as a function that can accept either a set of numeric values or a numeric vector (see below) as an input argument to carry out specific tasks. Here are several frequently used numeric functions in R programming.</p>
<table class="table">
<colgroup>
<col style="width: 46%">
<col style="width: 54%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Function</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr class="even">
<td><strong>abs(</strong><em>x</em><strong>)</strong></td>
<td>absolute value</td>
</tr>
<tr class="odd">
<td><strong>sqrt(</strong><em>x</em><strong>)</strong></td>
<td>square root</td>
</tr>
<tr class="even">
<td><strong>ceiling(</strong><em>x</em><strong>)</strong></td>
<td>ceiling(3.475) is 4</td>
</tr>
<tr class="odd">
<td><strong>floor(</strong><em>x</em><strong>)</strong></td>
<td>floor(3.475) is 3</td>
</tr>
<tr class="even">
<td><strong>trunc(</strong><em>x</em><strong>)</strong></td>
<td>trunc(5.99) is 5</td>
</tr>
<tr class="odd">
<td><strong>round(</strong><em>x</em>&nbsp;<strong>, digits=</strong>&nbsp;<em>n</em><strong>)</strong></td>
<td>round(3.475, digits=2) is 3.48</td>
</tr>
<tr class="even">
<td><strong>signif(</strong><em>x</em>&nbsp;<strong>, digits=</strong>&nbsp;<em>n</em><strong>)</strong></td>
<td>signif(3.475, digits=2) is 3.5</td>
</tr>
<tr class="odd">
<td><strong>cos(</strong><em>x</em><strong>), sin(</strong><em>x</em><strong>), tan(</strong><em>x</em><strong>)</strong></td>
<td>also asin(x), acos(<em>x</em>), cosh(<em>x</em>), acosh(<em>x</em>), etc.</td>
</tr>
<tr class="even">
<td><strong>log(</strong><em>x</em><strong>)</strong></td>
<td>natural logarithm</td>
</tr>
<tr class="odd">
<td><strong>log10(</strong><em>x</em><strong>)</strong></td>
<td>common logarithm</td>
</tr>
<tr class="even">
<td><strong>exp(</strong><em>x</em><strong>)</strong></td>
<td>e^<em>x</em></td>
</tr>
</tbody>
</table>
</section>
<section id="exercises-1" class="level4">
<h4 class="anchored" data-anchor-id="exercises-1"><strong>Exercises 1</strong></h4>
<p>A) Let’s explore one function in particular: <code>sum</code></p>
<p>Last week we used R as a calculator. Add 5 and 7 the way we did last week and then try using the built-in function <code>sum</code>.</p>
<p>Using R as a calculator to add 5 and 7:</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 12</code></pre>
</div>
</div>
</details>
<p>Using the <code>sum</code> built-in function in R, add 5 and 7:</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 12</code></pre>
</div>
</div>
</details>
<p>B) Now, let’s combine functions by adding 3, 7, 9, and 11. After that, we will multiply the sum by 3. Lastly, we will calculate the square root of this result and round it to the nearest whole number.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9</code></pre>
</div>
</div>
</details>
<p>C) Below is a very common example in my data analysis.</p>
<details>
<summary>
<b>In the field of Plant Pathology, data such as disease incidence or severity is typically collected as a percentage or proportion. To prepare the data for analysis, it is common to apply a data transformation known as the <code>arc-sine square root</code>. You have gathered disease severity data from three plots: 0.75 (control), 0.70 (Trt 1), and 0.30 (Trt 2). Apply the transformation mentioned above to your data for analysis. </b> (Click for the answer)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">Control <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span></span>
<span id="cb7-2">Trt1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.70</span></span>
<span id="cb7-3">Trt2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.30</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(Control))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.047198</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(Trt1))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.9911566</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(Trt2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.5796397</code></pre>
</div>
</div>
</details>
</section>
<section id="statistical-probability-functions" class="level4">
<h4 class="anchored" data-anchor-id="statistical-probability-functions"><strong>Statistical probability functions</strong></h4>
<p>The table below provides descriptions of functions pertaining to probability distributions.</p>
<table class="table">
<colgroup>
<col style="width: 38%">
<col style="width: 61%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Function</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr class="even">
<td><strong>dnorm(</strong><em>x</em><strong>)</strong></td>
<td>normal density function (by default m=0 sd=1)</td>
</tr>
<tr class="odd">
<td><strong>pnorm(</strong><em>q</em><strong>)</strong></td>
<td>cumulative normal probability for q<br>
(area under the normal curve to the left of q)<br>
pnorm(1.96) is 0.975</td>
</tr>
<tr class="even">
<td><strong>qnorm(</strong><em>p</em><strong>)</strong></td>
<td>normal quantile.&nbsp;<br>
value at the p percentile of normal distribution<br>
qnorm(.9) is 1.28 # 90th percentile</td>
</tr>
<tr class="odd">
<td><strong>rnorm(</strong><em>n</em><strong>, m=0, sd=1)</strong></td>
<td>n random normal deviates with mean m<br>
and standard deviation sd.</td>
</tr>
</tbody>
</table>
<p>Let’s generate 10 random normal variates with mean=50, sd=10.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rounding to the nearest whole number. </span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 50 62 78 58 51 38 47 56 66 57</code></pre>
</div>
</div>
<p>Now let’s do the same thing, but call it <code>y</code> .</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Did you get the same result?
</div>
</div>
<div class="callout-body-container callout-body">
<p>To ensure reproducibility of pseudo-random numbers for the random number generators listed, you can utilize set.seed(1234) or any other integer.</p>
</div>
</div>
<details>
<summary>
<b>Example</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb15-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb15-3">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 38 53 61 27 54 55 44 45 44 41</code></pre>
</div>
</div>
</details>
</section>
<section id="other-statistical-and-useful-functions" class="level4">
<h4 class="anchored" data-anchor-id="other-statistical-and-useful-functions"><strong>Other statistical and useful functions</strong></h4>
<p>Other useful statistical functions are provided in the following table.</p>
<table class="table">
<colgroup>
<col style="width: 58%">
<col style="width: 41%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Function</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr class="even">
<td><strong>seq(</strong><em>from</em>&nbsp;<strong>,</strong>&nbsp;<em>to</em>&nbsp;<strong>,</strong>&nbsp;<em>by</em><strong>)</strong></td>
<td>generate a sequence<br>
indices &lt;- seq(1,10,2)<br>
#indices is c(1, 3, 5, 7, 9)</td>
</tr>
<tr class="odd">
<td><strong>rep(</strong><em>x</em>&nbsp;<strong>,</strong>&nbsp;<em>ntimes</em><strong>)</strong></td>
<td>repeat&nbsp;<em>x</em>&nbsp;<em>n</em>&nbsp;times<br>
y &lt;- rep(1:3, 2)<br>
# y is c(1, 2, 3, 1, 2, 3)</td>
</tr>
</tbody>
</table>
<p>Each has the option <code>na.rm</code> to strip missing values before calculations. Otherwise the presence of missing values will lead to a missing result.</p>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 48%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>mean(</strong><em>x</em>&nbsp;<strong>, trim=</strong><em>0</em><strong>,</strong><br>
<strong>na.rm=</strong>&nbsp;FALSE&nbsp;<strong>)</strong></td>
<td>mean of object x</td>
</tr>
<tr class="even">
<td><strong>sd(</strong><em>x</em><strong>)</strong></td>
<td>standard deviation of object(x).</td>
</tr>
<tr class="odd">
<td><strong>median(</strong><em>x</em><strong>)</strong></td>
<td>median</td>
</tr>
<tr class="even">
<td><strong>range(</strong><em>x</em><strong>)</strong></td>
<td>range</td>
</tr>
<tr class="odd">
<td><strong>sum(</strong><em>x</em><strong>)</strong></td>
<td>sum</td>
</tr>
<tr class="even">
<td><strong>min(</strong><em>x</em><strong>)</strong></td>
<td>minimum</td>
</tr>
<tr class="odd">
<td><strong>max(</strong><em>x</em><strong>)</strong></td>
<td>maximum</td>
</tr>
</tbody>
</table>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<em>Nota bene</em>
</div>
</div>
<div class="callout-body-container callout-body">
<p>Object can be a numeric vector or data frame.</p>
</div>
</div>
</section>
<section id="exercises-2" class="level4">
<h4 class="anchored" data-anchor-id="exercises-2"><strong>Exercises 2</strong></h4>
<p>A) Let’s explore the following functions together using the group of numbers: 5, 7, 3, and 9 (in this order). These functions include: <code>sum</code>, <code>min</code>, <code>max</code>, and <code>range</code></p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 24</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3 9</code></pre>
</div>
</div>
</details>
<p>B) Let’s now get the average, standard deviation, and sort these numbers using <code>mean</code>, <code>sd</code>, and <code>sort</code>.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in sd(5, 7, 3, 9): unused arguments (3, 9)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in sort(5, 7, 3, 9): 'decreasing' must be a length-1 logical vector.
Did you intend to set 'partial'?</code></pre>
</div>
</div>
</details>
<p><br></p>
</section>
</section>
</section>
<section id="vectors-in-r" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="vectors-in-r"><span class="header-section-number">3</span> Vectors in R</h2>
<p>Depending on the type of data that one needs to store in R, different data structures can be used. The four most commonly used data structures in R are vectors, lists, matrices, and data frames. In this session, we will only be working with vectors.</p>
<p>The fundamental data structure in R is vectors, which are 1-dimensional data structures that can only contain one type of data (e.g., all entries must have the same mode). To create a vector in R, the <strong>function</strong> <code>c()</code> (concatenate or combine) is used, as shown below.</p>
<p>Let’s create a vector named “my_vector” with 5 entries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">my_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb31-2">my_vector</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10 30 50 20 40</code></pre>
</div>
</div>
<p>The output generated on the previous <code>code chunk</code> displays the entries in your vector, with the 1 in squared brackets indicating the position of the entry to its right in the vector. In this case, 10 is the first entry of the vector.</p>
<p>If, for any reason, we only wish to extract the value 50 from this vector, we can utilize our knowledge of it being in the third position to do so.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">my_vector[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 50</code></pre>
</div>
</div>
<p>Since a vector can only contain one data type, all its members need to be of the same type. If you attempt to combine data of different types into a vector, R will not provide a warning, but rather <strong>coerce</strong> it to the most flexible type. (The order of flexibility, from least to most, is: logical, integer, double, character). Therefore, if you add a number to a logical vector, the entire vector will be converted to a numeric vector.</p>
<p>To check what data type an object is, run the R built-in function <code>class()</code>, with the object as the only parameter.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(my_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
</div>
<p>If you for any reason want to have more information about any object you have stored in your R session the command&nbsp;<code>str()</code>&nbsp;is very helpful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(my_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> num [1:5] 10 30 50 20 40</code></pre>
</div>
</div>
<section id="exercises-3" class="level4">
<h4 class="anchored" data-anchor-id="exercises-3"><strong>Exercises 3</strong></h4>
<p>A) Let’s revisit <code>mean</code>, <code>sd</code>, <code>sort</code>, and other basic R operators.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(my_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 30</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(my_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15.81139</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(my_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10 20 30 40 50</code></pre>
</div>
</div>
<p>B) Add 7 to the my_vector, multiply 3 by my_vector, and check which values are greater than 25.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> my_vector</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 17 37 57 27 47</code></pre>
</div>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> my_vector</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  30  90 150  60 120</code></pre>
</div>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> my_vector</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE FALSE FALSE  TRUE FALSE</code></pre>
</div>
</div>
</details>
<p>C) Please create <code>another_vector</code> and add it to <code>my_vector</code>. Next, use the <code>sum</code> function to combine these vectors.</p>
<p><br></p>
</section>
</section>
<section id="getting-help-with-r" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="getting-help-with-r"><span class="header-section-number">4</span> Getting Help with R</h2>
<p>Before seeking assistance from others, it is generally advisable for you to attempt to resolve the problem on your own. R provides comprehensive tools for accessing documentation and searching for help.</p>
<section id="r-help-help-and" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="r-help-help-and"><span class="header-section-number">4.1</span> <strong>R Help: <code>help()</code> and <code>?</code></strong></h3>
<p>The <code>help()</code> function and <code>?</code> help operator in R offer access to documentation pages for R functions, data sets, and other objects. They provide access to both packages in the standard R distribution and contributed packages.</p>
<section id="exercises-4" class="level4">
<h4 class="anchored" data-anchor-id="exercises-4"><strong>Exercises 4</strong></h4>
<p>A) Can you obtain information about the type of R object that <code>mean()</code> and <code>sum()</code> functions take by using the <code>help()</code> or <code>?</code> functions?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E03_basics_03/img/Help.png" class="img-fluid figure-img"></p>
</figure>
</div>


</section>
</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <guid>https://osu-codeclub.github.io/posts/S07E03_basics_03/index.html</guid>
  <pubDate>Fri, 26 Jan 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E03_basics_03/img/R2D2.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>R Basics 2: Scripts and Objects</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E02_basics_02/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-last-week" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-last-week">Recap of last week</h4>
<p>Last week, we installed R and RStudio, learned about the distinction between the two, familiarized ourselves with RStudio, learned about “working directories” and RStudio Projects, and had our first interactions with R by using it as a calculator.</p>
</section>
<section id="learning-objectives-for-today" class="level4">
<h4 class="anchored" data-anchor-id="learning-objectives-for-today">Learning objectives for today</h4>
<ul>
<li><p>A little more basic interaction with R: <strong>missing prompts</strong> and <strong>data types</strong></p></li>
<li><p>Writing code in <strong>R scripts</strong> instead of the console, and <strong>commenting</strong> your code</p></li>
<li><p>Using and naming <strong>R objects</strong>, and (not) saving your <strong>environment</strong></p></li>
</ul>
</section>
<section id="setting-up" class="level4">
<h4 class="anchored" data-anchor-id="setting-up">Setting up</h4>
<p>If you created an RStudio Project for Code Club last week, then be sure to <strong>have that Project open before we get started</strong>. When you start RStudio, it may well have already opened that project for you (check the top-right corner, and see the screenshots below) — if not, click <code>File</code> (top menu bar) &gt; <code>Recent Projects</code>, and select your Project for Code Club from the list.</p>
<div class="columns">
<div class="column" style="width:45%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E02_basics_02/img/project_open.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption class="figure-caption">You have an open project “codeclub”</figcaption>
</figure>
</div>
</div><div class="column" style="width:45%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E02_basics_02/img/project_none.png" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption class="figure-caption">You have no Project open</figcaption>
</figure>
</div>
</div>
</div>
<p>If you don’t have an RStudio Project, no worries. We’ll be saving a file today, but you can always save it in an appropriate directory on the fly.</p>
<p><br></p>
</section>
</section>
<section id="a-little-more-basic-interaction-with-r" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="a-little-more-basic-interaction-with-r"><span class="header-section-number">2</span> A little more basic interaction with R</h2>
<section id="the-r-prompt-revisited" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="the-r-prompt-revisited"><span class="header-section-number">2.1</span> The R prompt, revisited</h3>
<p>The <strong><code>&gt;</code></strong> sign in your console is the R “prompt”. It indicates that R is ready for you to type something.</p>
<p>When you are not seeing the <code>&gt;</code> prompt, R is either <strong>busy</strong> (because you asked it to do a longer-running computation) or <strong>waiting</strong> for you to complete an incomplete command.</p>
<p>Type the following into your console, and press <kbd>Enter</kbd> (called <kbd>Return</kbd> on a Mac, but you get the idea):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span></code></pre></div>
</div>
<p>You should notice that your prompt turned into a <strong><code>+</code></strong>.</p>
<details>
<summary>
<b>What is going on here?</b> (Click for the answer)
</summary>
<p><strong>R is waiting for you to finish the command, since you typed an incomplete command</strong>: something has to follow the division sign <code>/</code>.</p>
</details>
<p>To get out of this situation, one option is to try and finish the command (in this case, by typing another number) — but here, let’s practice another option: <strong>aborting</strong> <strong>the command by pressing</strong> <kbd><strong>Esc</strong></kbd>.</p>
<p>While it was obvious here that our command was incomplete, you will often type incomplete commands without realizing you did so (typical cases include forgetting a closing parenthesis <code>)</code>). Aborting and fixing the command in full is often the way to go, especially if you’re writing code in a script (as we’ll do below).</p>
<p><br></p>
</section>
<section id="r-data-types" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="r-data-types"><span class="header-section-number">2.2</span> R data types</h3>
<p>If we just type a <strong>number</strong> and press <kbd>Enter</kbd>…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 203</code></pre>
</div>
</div>
<p>… then R will simply <strong>print the number back to us</strong>.</p>
<p>Under the hood, R is calling a <em>function</em> called <code>print()</code><sup>1</sup>, and we saw an example of this last week, too — typing the name of an object will print it’s value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
</div>
<p>Rather than a number, what if we want R to print back to us some <strong>text</strong>, which in programming lingo is called a “<strong>character string</strong>”?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">Fantastic</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in eval(expr, envir, enclos): object 'Fantastic' not found</code></pre>
</div>
</div>
<details>
<summary>
<b>What seems to be going wrong?</b> (Click for the answer)
</summary>
<p>Whenever you type a character string, <strong>R expects to find an <em>object</em> with that name</strong> (we saw our first object <code>x</code> last week, and will talk more about them today).</p>
<p>When no object exists with that name, R will throw an error.</p>
</details>
<p>We <em>can</em> get R to print character strings back to us, and use them in other ways, as long as they are quoted:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fantastic"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Fantastic"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Code Club"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Code Club"</code></pre>
</div>
</div>
<p>So, R treats numbers and character strings differently: <strong>unlike numbers, character strings need to be quoted.</strong> This <em>avoids confusion with objects</em> because unquoted character strings are assumed to be objects, and also <em>allows for “special characters”</em> like spaces.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Quote types
</div>
</div>
<div class="callout-body-container callout-body">
<p>Double quotes (<code>"Fantastic"</code>) and single quotes (<code>'Fantastic'</code>) can be used interchangeably in R. Double quotes are preferred by most “style guides”.</p>
</div>
</div>
<p>A little more on R’s main “data types”:</p>
<ul>
<li><p>Numbers are by default of the data type <strong><code>numeric</code></strong> (and can also be <code>integer</code> - whole numbers only)</p></li>
<li><p>Character strings are by default of the data type <strong><code>character</code></strong> (and can also be <code>factor</code> for categorical data)</p></li>
<li><p>The final main data type is <code>logical</code>, which can be either <code>TRUE</code> or <code>FALSE</code>.</p></li>
</ul>
<p><br></p>
</section>
</section>
<section id="exercises-1" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="exercises-1"><span class="header-section-number">3</span> Exercises 1</h2>
<p><strong>A)</strong> Which of the following do you think would work and which would return an error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">session_topic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"introduction"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">session_topic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> introduction</span></code></pre></div>
</div>
<p>Try both to see which works and what error you get for the other one. Also, try to describe in words what the correct line of code is doing.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The first of the two options was correct R code, while the second returns an error.</p>
<p>In general, keep in mind that <strong>unquoted character strings represent objects</strong> whereas <strong>quoted character strings are “literals”</strong>. Here, we wanted to assign the literal string <code>"introduction"</code> to the object <code>session_topic</code> — so the former should be quoted and the latter not.</p>
<p>An error is produced when you run the second option, because the object <code>introduction</code> does not exist (unless, of course, you had created an object of that name!):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">session_topic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> introduction</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in eval(expr, envir, enclos): object 'introduction' not found</code></pre>
</div>
</div>
</details>
<p><strong>B)</strong> Having run the code above, which of the following would make R print <code>"introduction"</code>?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"session_topic"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">session_topic</span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The second option is the correct one: here, we want to have R print the value of the <strong>object <code>session_topic</code></strong> (which we had just created in exercise A), so we shouldn’t use quotes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">session_topic</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "introduction"</code></pre>
</div>
</div>
</details>
<p><strong>C)</strong> Do you think the following code would successfully add <code>5</code> and <code>7</code>? If not, what might happen instead?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7"</span></span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>In the code above, the “numbers” are saved not as numbers (in R lingo: as a <code>numeric</code>) but as character strings (<code>character</code>).</p>
<p>R can’t add character strings, so it will return an error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7"</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in "5" + "7": non-numeric argument to binary operator</code></pre>
</div>
</div>
<p>(Perhaps you expected it to combine/“concatenate” the two strings in some way — this is in fact what Python would do. Or to automatically convert the characters to numbers, since you’re clearly wanting them to be numbers — but it doesn’t do that either.)</p>
</details>
<p><strong>D) (Bonus)</strong> Execute the following code and check its output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span></code></pre></div>
</div>
<p>Had you expected this result? If not, can you make sense of it: the fact that it works, the specific results, and the fact that we are not using quotes in the code.</p>
<p>And based on your deliberations, what do you expect the following code to return?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<ul>
<li><p>Logicals (<code>TRUE</code> and <code>FALSE</code>) can be used as numbers, in which case <code>TRUE</code> is equivalent to 1, and <code>FALSE</code> is equivalent to 0.</p></li>
<li><p>Therefore, <code>TRUE + FALSE</code> will return <code>1</code>, and <code>TRUE + TRUE</code> will therefore return <code>2</code>.</p></li>
<li><p>Logicals (<code>TRUE</code> and <code>FALSE</code>) are made up of letters but are <strong>not</strong> character strings, so they shouldn’t be quoted.</p></li>
</ul>
</details>
<p><br></p>
</section>
<section id="r-scripts" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="r-scripts"><span class="header-section-number">4</span> R scripts</h2>
<section id="the-editor-pane" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="the-editor-pane"><span class="header-section-number">4.1</span> The editor pane</h3>
<p>Jess showed us the four quadrants of RStudio last week:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E02_basics_02/img/rstudio-ide-simplified.png" class="img-fluid figure-img" style="width:85.0%"></p>
</figure>
</div>
<p>One of those contains a “<strong>Source Editor</strong>” pane, as in a <em>Text Editor</em>. Here, we can open and edit all sorts of text files — including R scripts. This quadrant will disappear if you have no files open:</p>
<blockquote class="blockquote">
<p><strong>Create and open a new R script by clicking</strong> <strong><code>File</code> (top menu bar) &gt; <code>New File</code> &gt; <code>R Script</code>.</strong></p>
</blockquote>
<p><br></p>
</section>
<section id="why-use-a-script" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="why-use-a-script"><span class="header-section-number">4.2</span> Why use a script?</h3>
<p>An R script is a text file that contains R code.</p>
<p>So far, we have been typing commands directly into the R console. But it’s a good idea to write and save most of our code in scripts.</p>
<p>This helps us <strong>keep track of what we’ve been doing</strong>, especially in the longer run, and to <strong>re-run our code</strong> after modifying input data or one of the lines of code.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Interactive scripts
</div>
</div>
<div class="callout-body-container callout-body">
<p>For those of you who are familiar with the notion of a script from other contexts or programming languages — saving our code as a script does not mean that we necessarily need to run the entire script all at once.</p>
<p>In R, it is instead most common to write and run code interactively, often line by line.</p>
</div>
</div>
<p><br></p>
</section>
<section id="saving-the-script" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="saving-the-script"><span class="header-section-number">4.3</span> Saving the script</h3>
<p>Let’s save this new script right away…</p>
<blockquote class="blockquote">
<p><strong>Click <code>File</code> &gt; <code>Save As</code></strong></p>
</blockquote>
<p>… and give it a descriptive name like <code>codeclub_02.R</code>:</p>
<ul>
<li><p>You may want to put the script in a folder for Code Club — which should be automatically selected if you are using your Code Club RStudio Project.</p></li>
<li><p>Make sure it has the <strong>file extension <code>.R</code></strong> — which should also have been automatically suggested by the pop-up window.</p></li>
</ul>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
File extensions
</div>
</div>
<div class="callout-body-container callout-body">
<p>An R script is just a <strong>plain-text file</strong> and you <em>could</em> also save it with, for example, a <code>.txt</code> extension — this will not break the file, but does have drawbacks.</p>
<p>When you use a <code>.R</code> extension, your computer and RStudio alike will recognize it as an R script. In RStudio, this means you’ll get some formatting that helps when writing your R code, and it can even recognize and warn you about certain errors in your code.</p>
</div>
</div>
<p><br></p>
</section>
<section id="sending-code-to-the-console" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="sending-code-to-the-console"><span class="header-section-number">4.4</span> Sending code to the console</h3>
<p>If you write most of your code in a script in the Editor, as we recommended above, wouldn’t it be a hassle to execute it? Do you need to copy-and-paste the code into the console? Luckily not.</p>
<p>Start by by typing another simple calculation, this time <strong>in your R script</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.54</span></span></code></pre></div>
</div>
<p>With the cursor still on this line of code in the script, <strong>press</strong> <kbd><strong>Ctrl</strong></kbd> <strong>+</strong> <kbd><strong>Enter</strong></kbd> (or, on a Mac: <kbd>Cmd</kbd> + <kbd>Enter</kbd>).</p>
<p>The code will be <em>copied to the R console and executed</em> (so you should see the result printed as shown below), and additionally, the <em>cursor will move</em> to the next line in the script.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[1] 79.92126</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
More on sending code to the console
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that it <em>doesn’t matter where on the line your cursor is</em>: <kbd>Ctrl</kbd> + <kbd>Enter</kbd> will always <strong>execute the entire line</strong> unless you have selected only part of it. (And when you have selected multiple lines of code, it will execute them all.)</p>
<p>To execute a line of code, an alternative to the keyboard shortcut is to <strong>click the <code>Run</code> button</strong> in the bar right above your script, but we recommend using the keyboard shortcut — it is much faster, at least once you get used to it.</p>
</div>
</div>
<p>For the rest of this Code Club session, try to write your code in your script, and send it to the console using the keyboard shortcut.</p>
<p><br></p>
</section>
<section id="commenting" class="level3" data-number="4.5">
<h3 data-number="4.5" class="anchored" data-anchor-id="commenting"><span class="header-section-number">4.5</span> Commenting</h3>
<p>You can use <strong><code>#</code> signs</strong> to comment your code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Divide by 2.54 to get the wingspan in inches:</span></span>
<span id="cb27-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.54</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original measurement was in cm</span></span></code></pre></div>
</div>
<ul>
<li><p>Anything to the right of a <code>#</code> is ignored by R, meaning it won’t be executed</p></li>
<li><p>You can use <code>#</code> both <strong>at the start of a line</strong> (entire line is a comment) or anywhere in a line <strong>following code</strong> (rest of the line is a comment)</p></li>
<li><p>In your R script, comments are formatted differently so you can clearly distinguish them from code</p></li>
</ul>
<p>We recommend that you <strong>use lots of comments in your R scripts</strong>! They are useful not only for others that you may share your code with, but also for yourself when you look back at your code a day, a month, or a year later.</p>
<p><br></p>
</section>
</section>
<section id="r-objects" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="r-objects"><span class="header-section-number">5</span> R Objects</h2>
<section id="assigning-stuff-to-r-objects" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="assigning-stuff-to-r-objects"><span class="header-section-number">5.1</span> Assigning stuff to R objects</h3>
<p>As we’ve seen a couple of times now, we can assign a value to an object with the <strong>assignment operator <code>&lt;-</code></strong>. A few more examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">wingspan_cm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span></span>
<span id="cb28-2">conversion <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.54</span></span></code></pre></div>
</div>
<p>Type that into your script, and use <kbd>Ctrl/Cmd</kbd> + <kbd>Enter</kbd> twice to send it to the console.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The Environment tab
</div>
</div>
<div class="callout-body-container callout-body">
<p>Recall also that the objects you create get added to your “environment”, which RStudio shows in the <strong>Environment tab</strong> in the top-right panel — check that <code>wingspan_cm</code> and <code>conversion</code> are indeed there.</p>
</div>
</div>
<p>After you’ve assigned a number to an object, you can use it in calculations like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">wingspan_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> conversion</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 79.92126</code></pre>
</div>
</div>
<p>Or, similarly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">wingspan_inch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wingspan_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> conversion</span>
<span id="cb31-2">wingspan_inch</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 79.92126</code></pre>
</div>
</div>
<p>This illustrates that when you execute code with objects, R substitutes the object name that you provide by its contents under the hood. In other words, <em>the object is just a reference to the underlying value(s)</em>.</p>
<p>“Object” is a general term that encompasses R items of any size or complexity:</p>
<ul>
<li><p>Objects can also contain character strings, collections of numbers or character strings (including in table or matrix format), and functions.</p></li>
<li><p>The above does not mean that “anything goes” — R distinguishes between a limited number of “<strong>data structures</strong>”, each with their own defined structure. We’ll learn about the most important ones next week.</p></li>
<li><p>The objects we created so far are called <strong>vectors</strong>, which are more commonly thought of as containing a <em>series of values</em>, but in R, can have a length of one<sup>2</sup>.</p></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
More on assignment operators
</div>
</div>
<div class="callout-body-container callout-body">
<p>The keyboard shortcut for the assignment operator is <kbd>Alt/Option</kbd> + <kbd>-</kbd>.</p>
<p>Note that <strong>you can also use <code>=</code> as an assignment operator</strong>, as is common in other programming languages. But because <code>=</code> can have other meanings, we recommend sticking with the <code>&lt;-</code> combination.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This also works to assign the value 5 to x (but we recommend using &lt;- instead)</span></span>
<span id="cb33-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="object-names" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="object-names"><span class="header-section-number">5.2</span> Object names</h3>
<p>Objects can be given almost any name such as <code>x</code>, <code>current_temperature</code>, or <code>subject_id</code>. Some pointers on object names:</p>
<ul>
<li><p>Because R is <strong>case sensitive</strong>, <code>wingspan_inch</code> is different from <code>Wingspan_inch</code>!</p></li>
<li><p>An object name <strong>cannot contain spaces</strong> — so for readability, you should <em>separate words</em> using:</p>
<ul>
<li><strong>Underscores:</strong> <code>wingspan_inch</code> (this is called “snake case”, which we often use in Code Club)</li>
<li><strong>Periods</strong>: <code>wingspan.inch</code></li>
<li><strong>Capitalization:</strong> <code>wingspanInch</code> or <code>WingspanInch</code> (“camel case”)</li>
</ul></li>
<li><p>You will make things easier for yourself by naming objects in a consistent way, for instance by always sticking to your favorite case style like “snake case.”<sup>3</sup></p></li>
<li><p>Object names can <em>contain</em> but cannot <em>start</em> with a number: <code>x2</code> is valid but <code>2x</code> is not. (There are also some other restrictions that are beyond the scope of this introduction<sup>4</sup>.)</p></li>
<li><p>Make object names descriptive yet not too long — this is not always easy!</p></li>
</ul>
<p><br></p>
<blockquote class="blockquote">
<p>There are only two hard things in Computer Science: cache invalidation and naming things.</p>
<p>– Phil Karlton</p>
</blockquote>
<p><br></p>
</section>
<section id="saving-the-environment" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="saving-the-environment"><span class="header-section-number">5.3</span> Saving the environment</h3>
<p>Recall that your environment contains all the R objects that you created. When you close R, it will probably ask you whether you want to save your environment (AKA workspace) — something like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E02_basics_02/img/rdata-popup.png" class="img-fluid figure-img" style="width:55.0%"></p>
</figure>
</div>
<p>When you do save this, the next time you start R, R will reload your environment so you can pick up right where you left off. While this may seem convenient, we recommend that you don’t do this.</p>
<details>
<summary>
<b>Can you think of a reason why automatically saving and reloading your workspace may not be a good idea?</b> (Click for the answer)
</summary>
<p>The main reason why this is generally not considered good practice relates to the idea that you should be able to <em>reproduce your</em> environment <em>(and more broadly speaking, your analysis) from the code in your script</em>.</p>
<p>Remember that you can modify your environment either by entering commands in the console directly, or by running them from a script — or even from multiple different scripts. Additionally, it is common to run lines in a script out of order, or write lines in the script that you don’t execute.</p>
<p>Therefore, if you “carry around” the same environment across multiple different sessions, you run a greater risk of not having a reproducible set of steps in your script.</p>
</details>
<p>Generally, a better way of working in R than saving your entire environment is to <strong>use and save script</strong>s (as we’ve seen today) and to <strong>save <em>specific</em> outputs</strong> such as tables and plots (as we’ll see soon).</p>
<p>To make RStudio stop asking you about saving your workspace, click <code>Tools</code> &gt; <code>Global Options</code> &gt; <code>General</code> and (un)check the boxes as follows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E02_basics_02/img/r_environment.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Restarting R
</div>
</div>
<div class="callout-body-container callout-body">
<p>Taking the ideas about reproducibility a step further, it can be a good idea to <strong>occasionally restart R</strong> in the middle of working on some code.</p>
<p>That way, you can check whether the code in your script is correct and complete, that you are not relying on code that is not in the script, and so on.</p>
<p>To do so, you don’t need to close and reopen RStudio itself: under <code>Session</code> in the top menu bar, you can click <code>Restart R</code> (and you should also see the keyboard shortcut for it in the menu bar: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F10</kbd> (Windows) / <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>0</kbd> (Mac).</p>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="exercises-2" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="exercises-2"><span class="header-section-number">6</span> Exercises 2</h2>
<p><strong>A)</strong> Why do the following bits of code fail with an error?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">session number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">Expert_Level <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb35-2">Expert_level</span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The first fails because an object name cannot contain a space.</p>
<p>The second fails because of a difference in capitalization (<code>Level</code> vs <code>level)</code>: recall that R is case sensitive.</p>
</details>
<p><strong>B)</strong> What will be the value of <code>distance_miles</code> after executing the following lines in R: <code>31</code> or <code>62</code>?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">distance_km <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb36-2">distance_miles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> distance_km <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.62</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># distance_miles is now 31 </span></span>
<span id="cb36-3">distance_km <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb36-4"></span>
<span id="cb36-5">distance_miles                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># What is the value of distance_miles now?</span></span></code></pre></div>
</div>
<p>Come up with an expectation, then run the code above and see if you were right. What does this tell you about “linkage” between objects in R?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>Objects don’t get “linked” to each other at all in R.</p>
<p>In other words, <code>distance_miles</code> was really assigned <strong>the outcome</strong> of <code>distance_km * 2</code>, which is <code>31</code>, rather than its “formula”.</p>
<p>Therefore, <code>distance_miles</code> wasn’t (and couldn’t be!) “updated” after we changed the value of <code>distance_km</code>, and continued to be <code>31</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">distance_km <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb37-2">distance_miles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> distance_km <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.62</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># distance_miles is now 31.07 </span></span>
<span id="cb37-3">distance_km <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb37-4"></span>
<span id="cb37-5">distance_miles                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># What is the value of distance_miles now?</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 31</code></pre>
</div>
</div>
</details>
<p><br></p>
<hr>
<p><br></p>
<p><strong>Attribution</strong></p>
<p>This was modified after material from <a href="https://carpentries.org/">The Carpentries</a>, especially from <a href="http://uw-madison-aci.github.io/2016-06-01-uwmadison/">this Data Carpentry workshop</a> and <a href="https://datacarpentry.org/R-ecology-lesson">this “R for Ecology” workshop</a>.</p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>We’ll talk about functions soon, likely next week.↩︎</p></li>
<li id="fn2"><p>Objects that contain a single value are a distinct data structure called “<strong>scalars</strong>” in some languages, and are more informally also called “<strong>variables</strong>”.↩︎</p></li>
<li id="fn3"><p>It is also recommended to use <em>nouns</em> for variable names, and <em>verbs</em> for function names. For more, two popular R style guides are <a href="http://adv-r.had.co.nz/Style.html">Hadley Wickham’s</a> and <a href="https://google.github.io/styleguide/Rguide.xml">Google’s</a>.↩︎</p></li>
<li id="fn4"><p>For example, there are some names that cannot be used because they are the names of fundamental keywords in R (e.g., <code>if</code>, <code>else</code>, <code>for</code>, see <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html">here</a> for a complete list). In general, it’s also best not to use the names of existing <strong>functions</strong>, even though this <em>is</em> possible.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r-basics</category>
  <guid>https://osu-codeclub.github.io/posts/S07E02_basics_02/index.html</guid>
  <pubDate>Fri, 19 Jan 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E02_basics_02/img/r_environment.png" medium="image" type="image/png" height="54" width="144"/>
</item>
<item>
  <title>R Basics 1: Getting Started</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E01_basics_01/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>We are going to begin this semester’s Code Club right from the beginning working in R. This session does not assume any prior knowledge of R or other programming languages.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E01_basics_01/img/r-line-graph.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Artwork by <a href="https://twitter.com/allison_horst">@allison_horst</a></figcaption>
</figure>
</div>
</section>
<section id="why-use-r" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="why-use-r"><span class="header-section-number">2</span> Why use R?</h2>
<p>Since you’re here, I can assume you don’t need to be convinced that learning R is useful. R is a programming language that is used widely by data and other scientists. Most people get into R to conduct statistics, though its a top way to make <a href="https://www.rdataviz.com/">data visualizations</a> and do lots of other things. Since R is open source, there are endlessly available free resource to learn how to do practically whatever you want on the internet.</p>
</section>
<section id="installing-r-and-rstudio" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="installing-r-and-rstudio"><span class="header-section-number">3</span> Installing R and RStudio</h2>
<p>But first, what is the difference between R and RStudio? R is a programming language while RStudio has a graphical user interface (GUI) that allows you to more easily use R. RStudio is an Integrated Development Environment (IDE), meaning its a separate program that has an interface designed for running R. You can run R just using the R console (i.e., standalone R) but it is really easier and you will find additional functionality if you use RStudio. We need to download both R and RStudio.</p>
<section id="downloadinginstalling-r" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="downloadinginstalling-r"><span class="header-section-number">3.1</span> Downloading/installing R</h3>
<div class="callout callout-style-default callout-important callout-titled" title="If you are using an Ohio State computer where you don't have administrative access, R and RStudio are available to download through the Software Center (Windows) and Self Service (Mac).">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
If you are using an Ohio State computer where you don’t have administrative access, R and RStudio are available to download through the Software Center (Windows) and Self Service (Mac).
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>We will download R first. At the time of me writing this (January 2024) the most updated version of R is <code>R-4.3.2</code>.</p>
<ul>
<li>You can download R for Windows, Mac, or UNIX. https://www.r-project.org/</li>
<li>Pick your preferred <a href="https://cran.r-project.org/mirrors.html">CRAN mirror</a>, I like to use the one from <a href="https://cran.case.edu/">Case Western Reserve University</a> since it’s the closest to us in Ohio I think it’s probably the fastest, though any mirror will work.</li>
<li>Download R for Linux, Windows, or Mac, depending on what type of operating system you are running. You can use these direct links to download 4.3.2.
<ul>
<li><a href="https://cran.case.edu/bin/windows/base/R-4.3.2-win.exe">Windows</a></li>
<li><a href="https://cran.case.edu/bin/macosx/big-sur-arm64/base/R-4.3.2-arm64.pkg">M1/M2 Mac</a>, requires <a href="https://www.xquartz.org/">Xquartz</a></li>
<li><a href="https://cran.case.edu/bin/macosx/big-sur-x86_64/base/R-4.3.2-x86_64.pkg">Older Macs</a>, requires <a href="https://www.xquartz.org/">Xquartz</a></li>
</ul></li>
</ul>
<p>Navigate to where you’ve downloaded your executable R file, and install it.</p>
<p>You can also <a href="https://osu-codeclub.github.io/pages/setup.html#osc">use R and RStudio through the Ohio Supercomputing Center</a>. If you want to do this, connect with Jelmer and he can add you to our Code Club project.</p>
<p>As of January 2024, the most recent version of R is 4.3.2. If you already have R and it is version &gt;4.2, no need to do anything.</p>
<blockquote class="blockquote">
<p>If you’ve already installed R and just need to update, and want to make sure you keep all your downloaded packages, follow <a href="https://www.r-bloggers.com/2017/05/upgrade-r-without-losing-your-packages/">these instructions</a>. Updating only RStudio doesn’t do anything to your packages.</p>
</blockquote>
</section>
<section id="downloadinginstalling-rstudio" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="downloadinginstalling-rstudio"><span class="header-section-number">3.2</span> Downloading/installing RStudio</h3>
<p>Once you have R, you can download RStudio. <a href="https://posit.co/download/rstudio-desktop/#download">Here</a> you can download the version of RStudio</p>
<p>Navigate to where you’ve downloaded your executable RStudio file, and install it.</p>
<p>Once you’ve downloaded both R and RStudio, you can open RStudio.</p>
</section>
</section>
<section id="orienting-to-rstudio" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="orienting-to-rstudio"><span class="header-section-number">4</span> Orienting to RStudio</h2>
<p>The RStudio integrated development environment (IDE) has four quadrants.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E01_basics_01/img/rstudio-ide-simplified.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">A screenshot of the RStudio IDE</figcaption>
</figure>
</div>
<ul>
<li><strong>Top left</strong>: your source editor. Here you can open, edit, and send code to be executed from files like <code>.R</code>, <code>.Rmd</code>, <code>.qmd</code> or others.</li>
<li><strong>Bottom left</strong>: by default this is your console. If you’ve used standalone R, this is the same thing. It is here where your code will be actually executed. You can also type here directly to execute code. There are also two additional tabs, terminal and background jobs which we won’t talk about now.</li>
<li><strong>Top right</strong>: by default this is your environment. It will show you all the objects that are active in your R environment. Here, you can also see history, connections, build a website, use git, or open tutorials but we won’t talk about those now.</li>
<li><strong>Bottom right</strong>: by default this shows the files in your working directory (more about that next). There are also additional tabs which show plots, packages, help, viewers, presentations but we won’t talk about those now.</li>
</ul>
<p>There is an RStudio cheatsheet for the IDE which is very useful, and you can find it <a href="https://rstudio.github.io/cheatsheets/html/rstudio-ide.html">here</a>.</p>
</section>
<section id="working-directories" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="working-directories"><span class="header-section-number">5</span> Working directories</h2>
<section id="what-is-a-directory-and-a-working-directory" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="what-is-a-directory-and-a-working-directory"><span class="header-section-number">5.1</span> What is a directory and a working directory?</h3>
<p>The concept of a directories and your working directory is an important one when coding. You can think of a directory as a synonym for a folder. Each file is contained within a directory, these folders have physical locations on your computer, or a defined path. Directories are hierarchical, and slightly different on different operating systems (e.g., Mac, Windows, Linux). If you open up your Finder (Mac) or File Explorer (Windows), you can navigate around the different locations on your computer.</p>
<p>Your working directory is just as it sounds - it’s the location/path on your computer where you are currently working. This is important as your files will be by default read in, stored, and saved to this location. This means you need to know where this is.</p>
</section>
<section id="find-your-working-directory" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="find-your-working-directory"><span class="header-section-number">5.2</span> Find your working directory</h3>
<p>We can figure out where our working directory is by typing into the console the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/Users/poelstra.1/Library/CloudStorage/Dropbox/mcic/teach/codeclub/codeclub-site/posts/S07E01_basics_01"</code></pre>
</div>
</div>
<p>You can see that the output path is <strong>MY</strong> working directory - yours will be different as the set up of your computer organization structure is different from mine. I am also using a Mac so you can see my path as forward slashes <code>/</code> while Windows machines will have backslashes<code>\</code>.</p>
<p>You can also use the RStudio GUI to navigate to your working directory by going to the Files quadrant (bottom right), click the gear, and select <code>Go To Working Directory</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E01_basics_01/img/getwd-gui.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Go to your working directory by clicking</figcaption>
</figure>
</div>
</section>
<section id="set-your-working-directory" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="set-your-working-directory"><span class="header-section-number">5.3</span> Set your working directory</h3>
<p>If your working directory is not where you want to store your files for code club, you can change it. We can do that using the function <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/getwd"><code>setwd()</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/this/should/be/your/working-directory/path"</span>)</span></code></pre></div>
</div>
<p>Alternatively, you can set your working directory by navigating in the Files (bottom right) quadrant to the location you want your working directory to be, then clicking the gear, and clicking <code>Set As Working Directory</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E01_basics_01/img/setwd-gui.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Set your working directory by clicking</figcaption>
</figure>
</div>
</section>
<section id="avoid-all-working-directory-nonsense-with-a-.rproj" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="avoid-all-working-directory-nonsense-with-a-.rproj"><span class="header-section-number">5.4</span> Avoid all working directory nonsense with a <code>.RProj</code></h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E01_basics_01/img/rproj.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Artwork by <a href="https://twitter.com/allison_horst">@allison_horst</a></figcaption>
</figure>
</div>
<p>Using an Rproject (<code>.RProj</code>) will help you with working directory management. An Rproject allows you to keep all of the files associated with a particular project together - from input data, output data, code, resulting figures etc. What it does is set the location of the working directory to be the same place as where your Rproject is located.</p>
<p>We will make a new Rproject for all your code club files. You can create a project by navigating to <code>File</code> &gt; <code>New Project</code>. You can put your file in a <code>New Directory</code> (i.e., make a new folder where your code club files will live), or you can indicate an <code>Existing Directory</code> (i.e., the folder you already have where your code club files are located). I’m going to assume you don’t have already a code club folder, so we will pick: <code>New Directory</code> &gt; <code>New Project</code>. You can navigate to where you want the directory to be on your computer (best to put it somewhere static and not in your downloads or on your desktop), and give it a meaningful name, like <code>code-club</code>.</p>
<p>Now, as long as I have the code-club Rproject open in RStudio, R knows to set the working directory to be the location you picked. This means if you want to load data, you should put it in that same folder, and when you write out results, they will also be by default in that same place.</p>
</section>
</section>
<section id="practice-1" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">6</span> Practice #1</h2>
<div class="callout callout-style-default callout-tip callout-titled" title="Check where the working directory is for your computer">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Check where the working directory is for your computer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Type the code below into your console (bottom left quadrant).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Try changing the working directory to your desktop">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Try changing the working directory to your desktop
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>It’s important you know the path for your desktop. You can open your Finder or File Explorer, right click on Desktop and find the path.</p>
<ul>
<li>Mac: Right click on Desktop in your Finder, click Get Info, and in General, copy the path listed next to Where. On my Mac, my Desktop path is <code>"/Users/jessicacooperstone/Desktop"</code>.</li>
<li>Windows: Right click on Desktop in your File Explorer, click Properties, and in Location you will see your path. On one of our lab computers, my Desktop path is <code>"C:Users\cooperstone.1\Desktop"</code>.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path-to-your-desktop"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Create yourself a new Rproject in a static location where your code club files will reside.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Create yourself a new Rproject in a static location where your code club files will reside.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Use the instructions <a href="">here</a> to create a Rproject.</p>
</div>
</div>
</div>
</section>
<section id="using-r-like-a-calculator" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="using-r-like-a-calculator"><span class="header-section-number">7</span> Using R like a calculator</h2>
<p>Now that we are a bit oriented to RStudio, we can begin actually using it. We aren’t going to be using any scripts today, simply working in the console (bottom left quadrant).</p>
<p>In the bottom left part of the console you should see a greater than sign (<code>&gt;</code>). This is where you will start typing. If you don’t see this <code>&gt;</code> it means your console is not ready to receive commands. You can press <kbd>Esc</kbd> once or a couple times to get back to your <code>&gt;</code>.</p>
<p>Let’s start by typing the following code into your console:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7</code></pre>
</div>
</div>
<p>When we ask R to calculate this sum we get the answer, 7. Note that this number is simply printed into our console. You’ll also note that there is also a [1] next to the answer of 7 since R is telling us that 7 is the first value in our vector. More about this another time.</p>
<p>What if now, instead of asking R to calculate what <code>2 + 5</code> is and print the result we want to save this output as a variable stored within R? We can do that by assigning it to a variable. Here, I am going to assign the output to <code>x</code> and do this using the assignment operator <code>&lt;-</code> which looks like an arrow pointing to the left.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</div>
<p>You will see when you do this in your console, you no longer see the answer 7. You only see the code you typed in, and your <code>&gt;</code> indicating R is ready for more.</p>
<p>This is because we have asked R to store this output as the variable <code>x</code> and we have not asked R to show us what <code>x</code> is. We can do that by simply typing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7</code></pre>
</div>
</div>
<p>Now we see the answer 7.</p>
<p>We can also now see that the variable <code>x</code> is stored in our Environment (top right quadrant). This is where all of the objects that are active in your environment will live.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E01_basics_01/img/environment-x.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">A screenshot of our Environment tab (top right quadrant) now that we have assigned the sum of 2 and 5 to x</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="There is a R shorthand to both assign an object and print it at the same time.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
There is a R shorthand to both assign an object and print it at the same time.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>If you surround your code that is doing some assigning with parentheses, you will both assign the object and print it at the same time. Here’s an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">(j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
</div>
</div>
</div>
<p>If we ask R for something that is not in our environment, like <code>y</code> we will get an error.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">y</span></code></pre></div>
</div>
<p><img src="https://osu-codeclub.github.io/posts/S07E01_basics_01/img/y.png" class="img-fluid"></p>
<p>But, now that we have <code>x</code> in our environment, we can use it to create new objects. If we wanted to create a new object <code>y</code> that was the result of <code>x * 3</code>, we could simply do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<p>And if we want to see the answer, we type <code>y</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 21</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Remember that R uses classic mathematical order of operations, so do mind your parentheses.</p>
</blockquote>
</section>
<section id="practice-2" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="practice-2"><span class="header-section-number">8</span> Practice #2</h2>
<div class="callout callout-style-default callout-tip callout-titled" title="Create a new variable z which has the result of 10 divided by 5. Print your answer.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Create a new variable z which has the result of 10 divided by 5. Print your answer.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Type the code below into your console (bottom left quadrant).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">z</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Multiple the sum of 3 and 4 by the subtraction of 4 from 10. Don't save it to a variable, just print it to your console.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Multiple the sum of 3 and 4 by the subtraction of 4 from 10. Don’t save it to a variable, just print it to your console.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Type the code below into your console (bottom left quadrant).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 42</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Try setting the sum of 1 and 2 to x. What does this do to the value of x stored in your environment?.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Try setting the sum of 1 and 2 to x. What does this do to the value of x stored in your environment?.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Type the code below into your console (bottom left quadrant).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb21-2"></span>
<span id="cb21-3">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<p>Be careful about writing over variables!</p>
</div>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <guid>https://osu-codeclub.github.io/posts/S07E01_basics_01/index.html</guid>
  <pubDate>Fri, 12 Jan 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E01_basics_01/img/rstudio-ide-simplified.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Shiny 04: Deploying Shiny App</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S06E11_shiny_04/index.html</link>
  <description><![CDATA[ 



<p>Welcome to our <code>shiny</code> app development class! We are now fully prepared to deploy our <code>shiny</code> app to our website.</p>
<p>There are several options available for deploying a <code>shiny</code> app, and we will utilize our knowledge of using the <code>quarto</code> website to accomplish this task.</p>
<section id="deploying-shiny-app-using-quarto-with-r-shinylive" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Deploying Shiny App using Quarto with R Shinylive</h1>
<p>We are going to use the following tutorial: <em>Using r-shinylive for Serverless Shiny Apps in Quarto Documents</em></p>
<ul>
<li><a href="https://www.youtube.com/watch?v=6y2FnAugP8E">Creating a Serverless R Shiny App using Quarto with R Shinylive</a></li>
<li>Links:
<ul>
<li><a href="https://github.com/coatless-quarto/r-shinylive-demo">Github Repo</a></li>
<li><a href="https://quarto.thecoatlessprofessor.com/r-shinylive-demo/">R-shinylive app in Quarto!</a></li>
</ul></li>
</ul>
<section id="step-1" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="step-1"><span class="header-section-number">1.1</span> Step 1</h2>
<p>To begin, you’ll need to install the <code>r-shinylive</code> R package. This package is currently hosted on GitHub and can be easily obtained from the R console by executing the following command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install the 'pak' package manager if you haven't already</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pak"</span>)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install 'r-shinylive' using 'pak'</span></span>
<span id="cb1-4">pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pak</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posit-dev/r-shinylive"</span>)</span></code></pre></div>
</div>
</section>
<section id="step-2" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="step-2"><span class="header-section-number">1.2</span> Step 2</h2>
<p>To install the Quarto extension for <code>shinylive</code>, follow these steps:</p>
<ol type="1">
<li>Open the Terminal tab.</li>
<li>Run the following command:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># quarto add quarto-ext/shinylive</span></span></code></pre></div>
</div>
</section>
<section id="step-3" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="step-3"><span class="header-section-number">1.3</span> Step 3</h2>
<p>To include a Shiny app directly in your <code>Quarto</code> file (.qmd), you need to add a filter key for <code>shinylive</code> at the top of the desired <code>Quarto</code> file. Open your <code>Quarto</code> file and insert the following YAML header:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">filters<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> shinylive</span></code></pre></div>
</div>
</section>
<section id="step-4" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="step-4"><span class="header-section-number">1.4</span> Step 4</h2>
<p>You can include the code for a Shiny application in a code block indicated by {shinylive-r}. Here is an example of how your code block could appear:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb4-2">title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Our first r-shinylive Quarto document!"</span></span>
<span id="cb4-3">filters<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-4">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> shinylive</span>
<span id="cb4-5"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{shinylive-r}</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#| standalone: true</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#library(shiny)</span></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"># Define your Shiny UI here</span></span>
<span id="cb4-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#ui &lt;- fluidPage(</span></span>
<span id="cb4-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  # Your UI components go here</span></span>
<span id="cb4-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"># Define your Shiny server logic here</span></span>
<span id="cb4-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#server &lt;- function(input, output, session) {</span></span>
<span id="cb4-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  # Your server code goes here</span></span>
<span id="cb4-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"># Create and launch the Shiny app</span></span>
<span id="cb4-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#shinyApp(ui, server)</span></span></code></pre></div>
</div>
</section>
<section id="step-5" class="level2" data-number="1.5">
<h2 data-number="1.5" class="anchored" data-anchor-id="step-5"><span class="header-section-number">1.5</span> Step 5</h2>
<p>If you have encountered issues with the <code>quarto publish</code> function, you can easily resolve them by adding the following steps:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">format<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-2">  html<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3">    resources<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> </span>
<span id="cb5-4">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> shinylive<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sw.js</span></code></pre></div>
</div>
</section>
</section>
<section id="here-is-an-example-of-a-shiny-app-deployed-on-our-website" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Here is an example of a ‘shiny’ app deployed on our website!</h1>
<pre class="shinylive-r" data-engine="r"><code>#| standalone: true
#| viewerHeight: 600

library(shiny)

# Define UI for app that draws a histogram ----
ui &lt;- fluidPage(

  # App title ----
  titlePanel("Hello Shiny!"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)

    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Histogram ----
      plotOutput(outputId = "distPlot")

    )
  )
)

# Define server logic required to draw a histogram ----
server &lt;- function(input, output) {

  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot
  output$distPlot &lt;- renderPlot({

    x    &lt;- faithful$waiting
    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)

    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")

    })

}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
</code></pre>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shiny</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S06E11_shiny_04/index.html</guid>
  <pubDate>Mon, 04 Dec 2023 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S06E11_shiny_04/img/shiny_logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Shiny 03: Map viz. in Shiny</title>
  <dc:creator>Sandip Mondal and Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S06E10_shiny_03/index.html</link>
  <description><![CDATA[ 



<p>Welcome to our <code>shiny</code> app development class! Throughout this session, Dr.&nbsp;Sandip Mondal will walk us through a case study to generate interactive maps using <code>shiny</code> app.</p>
<section id="shiny-app-to-visualize-maps." class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="shiny-app-to-visualize-maps."><span class="header-section-number">1</span> Shiny App to visualize maps.</h2>
<p>To follow step-by-step what we will cover today in class, please refer to this <a href="https://www.wvview.org/os_sa/ShinyApp_module.html#the-west-virginia-view-app-data">Shiny App</a>.</p>
<p><strong>Dataset description:</strong> This dataset was created by <a href="https://www.wvview.org/maxwell.html">Prof.&nbsp;Maxwell</a> for use in his courses. A variety of attributes have been summarized at the county-level. A total of 3,104 records are provided representing the majority of the counties in the contiguous United States. A few counties were excluded due to their small size.</p>
</section>
<section id="types-of-spatial-data." class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="types-of-spatial-data."><span class="header-section-number">2</span> Types of Spatial Data.</h2>
<p>There are two types of spatial data: vector and raster. Below is a graphical explanation of these data.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://zia207.github.io/geospatial-r-github.io/"><img src="https://osu-codeclub.github.io/posts/S06E10_shiny_03/img/Types of spatial data.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Type of Spatial Data (Ahmed, 2023)</figcaption>
</figure>
</div>
</section>
<section id="what-do-we-expect-to-achieve-by-the-end-of-this-tutorial." class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="what-do-we-expect-to-achieve-by-the-end-of-this-tutorial."><span class="header-section-number">3</span> What do we expect to achieve by the end of this tutorial.</h2>
<p>Today we will start with the output, understand the components of the <code>shiny</code> app and what we want achieve.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E10_shiny_03/img/Application screenshot.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Different parameters from Ohio, Pennsylvania, and Indiana in an interactive map.</figcaption>
</figure>
</div>
</section>
<section id="building-our-shiny-app." class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="building-our-shiny-app."><span class="header-section-number">4</span> Building our Shiny App.</h2>
<p>Let’s make a <code>shiny</code> app and see how this works!</p>
<p>First <a href="https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data">download the following files</a> and set it to a working directory.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#import libraries used in the APP</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#setwd("...map_data/")  </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">###</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Please make sure to use your own working directory</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(leaflet)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RColorBrewer)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(htmlwidgets)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(htmltools)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(bslib)</span>
<span id="cb1-12">us <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_read</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/map_data/OH_IN_PA.shp"</span>) </span>
<span id="cb1-13">us <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> us <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(STATE_A<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OH'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> STATE_A<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IN'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> STATE_A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PA'</span>)  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### Ohio, Indiana, Pennsylvania</span></span>
<span id="cb1-14">us <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_transform</span>(us, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">crs=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>)</span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(us)</span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(us)</span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(us[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>])</span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fist graph on ggplot = Income (boxplot)</span></span>
<span id="cb1-19">inc_p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(us, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>STATE_A, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>med_ncm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span>STATE_A)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() </span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second graph on ggplot = Temperature (densityplot)</span></span>
<span id="cb1-22">temp_p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(us, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>tempmn, ..density.., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span>STATE_A))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># third graph on ggplot = Population vs Development (scatterplot)</span></span>
<span id="cb1-25">pop_p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(us, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>POPULAT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>per_dev, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span> STATE_A, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span> med_ncm))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#color palette for Temperature, Income and Population</span></span>
<span id="cb1-28">temp_pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorBin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YlOrRd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">domain=</span>us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tempmn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bin=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-29">pop_pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorNumeric</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Purples'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">domain=</span> us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>POPULAT)</span>
<span id="cb1-30">ncm_pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorNumeric</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greens'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">domain=</span> us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>med_ncm)</span>
<span id="cb1-31"></span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define UI for the APP</span></span>
<span id="cb1-34"></span>
<span id="cb1-35">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb1-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bootswatch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spacelab"</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># theme from the library(bslib)</span></span>
<span id="cb1-37">  </span>
<span id="cb1-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ohio, Indiana and Pennsylvania"</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color:#0d793e"</span>)), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Main title of the App use h1</span></span>
<span id="cb1-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">br</span>(),<span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### break the line two times</span></span>
<span id="cb1-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">br</span>(),</span>
<span id="cb1-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabsetPanel</span>(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#the tabset panel layout will include the three tab</span></span>
<span id="cb1-42">    </span>
<span id="cb1-43">    </span>
<span id="cb1-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tab 1: Data Exploration</span></span>
<span id="cb1-45">    </span>
<span id="cb1-46">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data explorer"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># title of the first tab</span></span>
<span id="cb1-47">             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">br</span>(), </span>
<span id="cb1-48">             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidRow</span>(</span>
<span id="cb1-49">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-50">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"countryInput1"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#unique input ID</span></span>
<span id="cb1-51">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose a State"</span>,</span>
<span id="cb1-52">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>STATE_N),</span>
<span id="cb1-53">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ohio"</span>), </span>
<span id="cb1-54">               ), </span>
<span id="cb1-55">             ),</span>
<span id="cb1-56">             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hr</span>(),</span>
<span id="cb1-57">             DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dataTableOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#output ID</span></span>
<span id="cb1-58">    ),</span>
<span id="cb1-59">    </span>
<span id="cb1-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tab 2: Visualization </span></span>
<span id="cb1-61">    </span>
<span id="cb1-62">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sum plots"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#title of the second tab</span></span>
<span id="cb1-63">             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">br</span>(), </span>
<span id="cb1-64">             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#left section of the page used by the user to select input    </span></span>
<span id="cb1-65">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb1-66">                 </span>
<span id="cb1-67">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inc_pop_temp'</span>,<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#unique input ID</span></span>
<span id="cb1-68">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Select a variable'</span>,</span>
<span id="cb1-69">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population vs Development"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Median Temperature'</span>), ),</span>
<span id="cb1-70">              </span>
<span id="cb1-71">               ),</span>
<span id="cb1-72">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>( <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right section of the page </span></span>
<span id="cb1-73">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plotOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boxplot"</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#output ID</span></span>
<span id="cb1-74">               ))),</span>
<span id="cb1-75">    </span>
<span id="cb1-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tab 3: Interactive Map</span></span>
<span id="cb1-77">    </span>
<span id="cb1-78">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Interactive Map"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#title of the third tab  </span></span>
<span id="cb1-79">             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(    </span>
<span id="cb1-80">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#left section of the page used by the user to select input</span></span>
<span id="cb1-81">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"countryInput"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#unique input ID</span></span>
<span id="cb1-82">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose a State"</span>,</span>
<span id="cb1-83">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>STATE_N),</span>
<span id="cb1-84">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ohio"</span>),</span>
<span id="cb1-85">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"varInput"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#unique input ID</span></span>
<span id="cb1-86">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose a variable"</span>,</span>
<span id="cb1-87">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Income'</span>))</span>
<span id="cb1-88">                 ,),</span>
<span id="cb1-89">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right section of the page </span></span>
<span id="cb1-90">                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">leafletOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"map"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#output ID  </span></span>
<span id="cb1-91">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"500px"</span>))))  </span>
<span id="cb1-92">  ),)</span>
<span id="cb1-93"></span>
<span id="cb1-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define server logic </span></span>
<span id="cb1-95"></span>
<span id="cb1-96">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output) {</span>
<span id="cb1-97">  </span>
<span id="cb1-98">  selectedCountry1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#reactive expression for the Data Explorer</span></span>
<span id="cb1-99">    us[us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>STATE_N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>countryInput1, ] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#match input of the user with the state name</span></span>
<span id="cb1-100">  })</span>
<span id="cb1-101">  </span>
<span id="cb1-102">  selectedCountry <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({ <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#reactive expression for the Interactive Map</span></span>
<span id="cb1-103">    us[us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>STATE_N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>countryInput, ] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#match input of the user with the state name</span></span>
<span id="cb1-104">  })</span>
<span id="cb1-105">  </span>
<span id="cb1-106">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderDataTable</span>({ <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Data Explorer tab output</span></span>
<span id="cb1-107">    </span>
<span id="cb1-108">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry1</span>()</span>
<span id="cb1-109">    </span>
<span id="cb1-110">  })</span>
<span id="cb1-111">  </span>
<span id="cb1-112">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>boxplot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({ <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Visualization tab output</span></span>
<span id="cb1-113">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inc_pop_temp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If input of the user is Income</span></span>
<span id="cb1-114">    {inc_p} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#then print Income graph</span></span>
<span id="cb1-115">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inc_pop_temp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median Temperature"</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If input of the user is Median Temperature</span></span>
<span id="cb1-116">    {temp_p} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#then print Temperature graph</span></span>
<span id="cb1-117">    </span>
<span id="cb1-118">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inc_pop_temp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population vs Development"</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If input of the user is Pop vs Dev</span></span>
<span id="cb1-119">    {pop_p} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#then print Pop vs Dev graph</span></span>
<span id="cb1-120">    </span>
<span id="cb1-121">  })</span>
<span id="cb1-122">  </span>
<span id="cb1-123">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>map <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderLeaflet</span>({<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Interactive Map tab output</span></span>
<span id="cb1-124">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">leaflet</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'map'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#base map</span></span>
<span id="cb1-125">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">leafletOptions</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zoomControl=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-126">      </span>
<span id="cb1-127">      htmlwidgets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">onRender</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function(el, x) {</span></span>
<span id="cb1-128"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      L.control.zoom({ position: 'topright' }).addTo(this)</span></span>
<span id="cb1-129"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-130">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addTiles</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OSM"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-131">      </span>
<span id="cb1-132">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addProviderTiles</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Esri.NatGeoWorldMap"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ESRI"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-133">      </span>
<span id="cb1-134">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addProviderTiles</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CartoDB.DarkMatter"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CartoDB"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-135">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLayersControl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">baseGroups =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CartoDB"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OSM"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ESRI"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-136">      </span>
<span id="cb1-137">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLegend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottomright"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pal=</span>temp_pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values=</span>us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tempmn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-138">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLegend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottomright"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pal=</span>pop_pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values=</span>us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>POPULAT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-139">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLegend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottomleft"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pal=</span>ncm_pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values=</span>us<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>med_ncm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income in $"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-140">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setView</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lat=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lng=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zoom=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb1-141">  })</span>
<span id="cb1-142">  </span>
<span id="cb1-143">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#observer</span></span>
<span id="cb1-144">    </span>
<span id="cb1-145">    state_popup <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;strong&gt;County: &lt;/strong&gt;"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#popup </span></span>
<span id="cb1-146">                          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>NAME,</span>
<span id="cb1-147">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;br&gt;&lt;strong&gt; Temperature: &lt;/strong&gt;"</span>,</span>
<span id="cb1-148">                          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tempmn,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;#x2103"</span>,</span>
<span id="cb1-149">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;br&gt;&lt;strong&gt; Median Income: &lt;/strong&gt;"</span>,</span>
<span id="cb1-150">                          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>med_ncm,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$'</span>,</span>
<span id="cb1-151">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;br&gt;&lt;strong&gt; Population: &lt;/strong&gt;"</span>,</span>
<span id="cb1-152">                          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>POPULAT)</span>
<span id="cb1-153">    </span>
<span id="cb1-154">    high_opt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">highlightOptions</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bringToFront =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#highlight when user select county</span></span>
<span id="cb1-155">    </span>
<span id="cb1-156">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>varInput <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature"</span>) {</span>
<span id="cb1-157">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">leafletProxy</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"map"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-158">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#understand when to clearshapes</span></span>
<span id="cb1-159">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clearShapes() %&gt;%</span></span>
<span id="cb1-160">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addPolygons</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillColor =</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">temp_pal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tempmn),</span>
<span id="cb1-161">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popup =</span> state_popup,</span>
<span id="cb1-162">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#302E2D"</span>,</span>
<span id="cb1-163">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillOpacity =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-164">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-165">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highlight =</span> high_opt )</span>
<span id="cb1-166">    }</span>
<span id="cb1-167">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>varInput <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>) {</span>
<span id="cb1-168">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">leafletProxy</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"map"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-169">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#understand when to clearshapes</span></span>
<span id="cb1-170">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clearShapes() %&gt;%</span></span>
<span id="cb1-171">        </span>
<span id="cb1-172">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addPolygons</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillColor =</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncm_pal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>med_ncm),</span>
<span id="cb1-173">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popup =</span> state_popup,</span>
<span id="cb1-174">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#302E2D"</span>,</span>
<span id="cb1-175">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillOpacity =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-176">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-177">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highlight =</span> high_opt )</span>
<span id="cb1-178">      </span>
<span id="cb1-179">    }</span>
<span id="cb1-180">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>varInput <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population"</span>) {</span>
<span id="cb1-181">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">leafletProxy</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"map"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-182">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#understand when to clearshapes</span></span>
<span id="cb1-183">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clearShapes() %&gt;%</span></span>
<span id="cb1-184">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addPolygons</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillColor =</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pop_pal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectedCountry</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>POPULAT),</span>
<span id="cb1-185">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popup =</span> state_popup,</span>
<span id="cb1-186">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#302E2D"</span>,</span>
<span id="cb1-187">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillOpacity =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-188">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-189">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highlight =</span> high_opt )</span>
<span id="cb1-190">    }</span>
<span id="cb1-191">    </span>
<span id="cb1-192">    </span>
<span id="cb1-193">  })</span>
<span id="cb1-194">  </span>
<span id="cb1-195">}</span>
<span id="cb1-196"></span>
<span id="cb1-197"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> server)</span></code></pre></div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shiny</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S06E10_shiny_03/index.html</guid>
  <pubDate>Mon, 13 Nov 2023 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S06E10_shiny_03/img/shiny_logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Shiny 02: Intro to Shiny (cont.)</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S06E09_shiny_02/index.html</link>
  <description><![CDATA[ 



<p>Welcome to our <code>shiny</code> app development class! Throughout this session, we will continue diving into the world of Shiny and explore its incredible potential for creating interactive web applications. Today we will use the function <code>reactiveVal</code>.</p>
<section id="shiny-app-to-collect-data." class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="shiny-app-to-collect-data."><span class="header-section-number">1</span> Shiny App to collect data.</h2>
<p>The <code>reactiveVal</code> function is utilized to create a “reactive value” object which has special capabilities for reactive programming. It serves as a variable that allows both reading and writing of values. Whenever the value is read from a <code>reactiveVal</code> object, the calling reactive expression becomes dependent on it. Similarly, when the value is altered, any reactives that were previously dependent on it are notified.</p>
<p>Let’s make a <code>shiny</code> app and see how this works!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install and call the following packages.</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DT)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize an empty data frame to store the collected data</span></span>
<span id="cb1-6">collected_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Treatment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PlotNumber =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">StandCount =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PlantHeight =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Severity =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12">)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a variable to store the selected rows</span></span>
<span id="cb1-15">selected_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>()</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the UI</span></span>
<span id="cb1-18">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Soybean Field Data Collection"</span>),</span>
<span id="cb1-20">  </span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb1-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb1-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"treatment"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select Treatment:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T3"</span>)),</span>
<span id="cb1-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter Plot Number:"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">304</span>),</span>
<span id="cb1-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stand_count"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter Stand Count:"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-26">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plant_height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter Plant Height (in cm):"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-27">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"severity"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter Severity Rating:"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-28">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">actionButton</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submit"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Submit Data"</span>),</span>
<span id="cb1-29">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">actionButton</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delete"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Delete Selected Row"</span>),</span>
<span id="cb1-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">downloadButton</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"downloadData"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Download Data"</span>)</span>
<span id="cb1-31">    ),</span>
<span id="cb1-32">    </span>
<span id="cb1-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb1-34">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DTOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataTable"</span>)</span>
<span id="cb1-35">    )</span>
<span id="cb1-36">  )</span>
<span id="cb1-37">)</span>
<span id="cb1-38"></span>
<span id="cb1-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the server</span></span>
<span id="cb1-40">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb1-41">  collected_data_reactive <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb1-42">  </span>
<span id="cb1-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>submit, {</span>
<span id="cb1-44">    new_entry <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-45">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Treatment =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>treatment,</span>
<span id="cb1-46">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PlotNumber =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plot,</span>
<span id="cb1-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">StandCount =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>stand_count,</span>
<span id="cb1-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PlantHeight =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plant_height,</span>
<span id="cb1-49">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Severity =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>severity</span>
<span id="cb1-50">    )</span>
<span id="cb1-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append the new entry to the collected data</span></span>
<span id="cb1-52">    collected_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collected_data_reactive</span>(), new_entry)</span>
<span id="cb1-53">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collected_data_reactive</span>(collected_data)</span>
<span id="cb1-54">    </span>
<span id="cb1-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset input fields</span></span>
<span id="cb1-56">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"treatment"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T1"</span>)</span>
<span id="cb1-57">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateNumericInput</span>(session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb1-58">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateNumericInput</span>(session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stand_count"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-59">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateNumericInput</span>(session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plant_height"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-60">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateNumericInput</span>(session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"severity"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-61">  })</span>
<span id="cb1-62">  </span>
<span id="cb1-63">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>delete, {</span>
<span id="cb1-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the selected row(s) and remove them from the collected data</span></span>
<span id="cb1-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selected_rows</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataTable_rows_selected)</span>
<span id="cb1-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selected_rows</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-67">      collected_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collected_data_reactive</span>()</span>
<span id="cb1-68">      collected_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> collected_data[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selected_rows</span>(), ]</span>
<span id="cb1-69">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collected_data_reactive</span>(collected_data)</span>
<span id="cb1-70">    }</span>
<span id="cb1-71">  })</span>
<span id="cb1-72">  </span>
<span id="cb1-73">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataTable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderDT</span>({</span>
<span id="cb1-74">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datatable</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collected_data_reactive</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">select =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multi"</span>))</span>
<span id="cb1-75">  })</span>
<span id="cb1-76">  </span>
<span id="cb1-77">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download data as a CSV file</span></span>
<span id="cb1-78">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>downloadData <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">downloadHandler</span>(</span>
<span id="cb1-79">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb1-80">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"collected_data.csv"</span></span>
<span id="cb1-81">    },</span>
<span id="cb1-82">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(file) {</span>
<span id="cb1-83">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collected_data_reactive</span>(), file)</span>
<span id="cb1-84">    }</span>
<span id="cb1-85">  )</span>
<span id="cb1-86">}</span>
<span id="cb1-87"></span>
<span id="cb1-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the app</span></span>
<span id="cb1-89"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>Now that we have successfully developed a <code>shiny</code> app for data collection, we can now proceed to working on another app designed for processing the collected data.</p>
</section>
<section id="shiny-app-to-process-collected-data." class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="shiny-app-to-process-collected-data."><span class="header-section-number">2</span> Shiny App to process collected data.</h2>
<p>We will use <code>shinyjs</code> and <code>ggstatsplot</code> to generate a <code>shiny</code> app that will use collected data to process and generate some preliminary data viz and descriptive stats. For this you will need to use <code>.csv</code> file <strong>Aggressiveness_Zone.csv</strong> that was sent to your email.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load required libraries</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggstatsplot)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shinyjs)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define UI</span></span>
<span id="cb2-9">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">useShinyjs</span>(),</span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Summary Statistics and Plots"</span>),</span>
<span id="cb2-12">  </span>
<span id="cb2-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb2-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb2-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fileInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose CSV File"</span>),</span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotType"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select Plot Type"</span>,</span>
<span id="cb2-17">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Box-violin Plot"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Box Plot"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Violin Plot"</span>)),</span>
<span id="cb2-18">      </span>
<span id="cb2-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add options to modify axis label and tick label size</span></span>
<span id="cb2-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sliderInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axisLabelSize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Axis Label Size"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb2-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sliderInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axisTickLabelSize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Axis Tick Label Size"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-22">    ),</span>
<span id="cb2-23">    </span>
<span id="cb2-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb2-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabsetPanel</span>(</span>
<span id="cb2-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Summary Statistics"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"summaryTable"</span>)),</span>
<span id="cb2-27">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plots"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plotOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot"</span>))</span>
<span id="cb2-28">      )</span>
<span id="cb2-29">    )</span>
<span id="cb2-30">  )</span>
<span id="cb2-31">)</span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define server</span></span>
<span id="cb2-34">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output) {</span>
<span id="cb2-35">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb2-36">    inFile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>file</span>
<span id="cb2-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(inFile)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb2-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(inFile<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>datapath)</span>
<span id="cb2-39">  })</span>
<span id="cb2-40">  </span>
<span id="cb2-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define plot_type in the global scope</span></span>
<span id="cb2-42">  plot_type <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb2-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>())) {</span>
<span id="cb2-44">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plotType,</span>
<span id="cb2-45">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Box-violin Plot"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-46">               ggstatsplot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggbetweenstats</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> AEZ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> RF, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">messages =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-47">             },</span>
<span id="cb2-48">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Box Plot"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> AEZ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> RF, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> AEZ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-49">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-50">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-51">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>axisTickLabelSize),</span>
<span id="cb2-52">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>axisTickLabelSize),</span>
<span id="cb2-53">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>axisLabelSize),</span>
<span id="cb2-54">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>axisLabelSize))</span>
<span id="cb2-55">             ,</span>
<span id="cb2-56">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Violin Plot"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> AEZ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> RF, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> AEZ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-57">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-58">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> AEZ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> RF), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">position_jitterdodge</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">jitter.width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dodge.width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-59">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> AEZ), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.data =</span> mean_cl_boot, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crossbar"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-60">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-61">               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>axisTickLabelSize),</span>
<span id="cb2-62">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>axisTickLabelSize),</span>
<span id="cb2-63">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>axisLabelSize),</span>
<span id="cb2-64">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>axisLabelSize))</span>
<span id="cb2-65">      )</span>
<span id="cb2-66">    }</span>
<span id="cb2-67">  })</span>
<span id="cb2-68">  </span>
<span id="cb2-69">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>summaryTable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderTable</span>({</span>
<span id="cb2-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>())) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb2-71">    summary_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-72">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(AEZ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-73">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(</span>
<span id="cb2-74">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(RF),</span>
<span id="cb2-75">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Standard_Deviation =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(RF),</span>
<span id="cb2-76">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Standard_Error =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(RF) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span>
<span id="cb2-77">      )</span>
<span id="cb2-78">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(summary_stats)</span>
<span id="cb2-79">  })</span>
<span id="cb2-80">  </span>
<span id="cb2-81">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({</span>
<span id="cb2-82">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_type</span>()</span>
<span id="cb2-83">  })</span>
<span id="cb2-84">}</span>
<span id="cb2-85"></span>
<span id="cb2-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the application</span></span>
<span id="cb2-87"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shiny</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S06E09_shiny_02/index.html</guid>
  <pubDate>Mon, 06 Nov 2023 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S06E09_shiny_02/img/shiny_logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Shiny 01: Intro to Shiny</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S06E08_shiny_01/index.html</link>
  <description><![CDATA[ 



<p>Welcome to our <code>shiny</code> app development class! Throughout this session, we will dive into the world of Shiny and explore its incredible potential for creating interactive web applications.</p>
<p>By the end of this session, you will have a solid understanding of what Shiny is and how it can be utilized to build dynamic apps. We will also focus on mastering the basic structure of a Shiny app, equipping you with the necessary skills to create your own customized applications.</p>
<section id="what-is-shiny" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> What is Shiny?</h1>
<p>Shiny is an R package (<code>shiny</code>) and web framework that allows users to build interactive web applications using R. With the Shiny package, users can easily share their models, plots, or tables with others who can then access and interact with them on the web. This allows anyone to input values and obtain estimates for outcomes without having to perform any calculations themselves.</p>
<p>The <a href="https://shiny.posit.co">Shiny</a> package and <a href="https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html">accompanying teaching materials</a> are designed to make building web applications manageable even for those with limited programming experience. Before we get started today, check out the <a href="https://shiny.posit.co/r/gallery/">Shiny Gallery</a>! Here, you will discover numerous Shiny apps that can inspire and educate you.</p>
</section>
<section id="the-basic-structure-of-a-shiny-app" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> The Basic Structure of a Shiny App</h1>
<p>A Shiny app has two sections, as seen in the diagram below:</p>
<ul>
<li><p>the <strong><em>user interface (ui)</em></strong> section which accepts inputs from users, and displays output values to users</p></li>
<li><p>the <strong><em>server section</em></strong>, which ingests the input, processes the data, renders output values to HTML, and sends these back to the user interface (ui).</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html"><img src="https://osu-codeclub.github.io/posts/S06E08_shiny_01/img/shiny-input-flow.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">The basic structure of a Shiny App. (Higgins 2023)</figcaption>
</figure>
</div>
<section id="the-user-interface-section-structure" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="the-user-interface-section-structure"><span class="header-section-number">2.1</span> The User Interface Section Structure</h2>
<p>The user interface, commonly referred to as the “front end” of an application, is the visual and interactive aspect that users encounter. It is typically organized into several sections: <code>titlePanel()</code>, <code>sidebarPanel()</code>, and <code>mainPanel()</code>. In order to establish this structure, the code must be organized into sections that are constructed with functions, as demonstrated below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#the-user-interface-section-structure"><img src="https://osu-codeclub.github.io/posts/S06E08_shiny_01/img/shiny-ui-structure.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Basic ui (User Interface) code structure (Higgins 2023)</figcaption>
</figure>
</div>
<p>The code required to achieve this follows a similar hierarchy, as depicted in the figure below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#the-user-interface-section-structure"><img src="https://osu-codeclub.github.io/posts/S06E08_shiny_01/img/shiny-ui-hierarchy.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">User Interface (ui) hierarchy code structure (Higgins 2023)</figcaption>
</figure>
</div>
</section>
<section id="the-server-section-structure" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="the-server-section-structure"><span class="header-section-number">2.2</span> The Server Section Structure</h2>
<p>The server section of an app, also known as the “back end”, is where data processing takes place. Users don’t see this part but it handles inputs from the user and generates outputs such as model predictions or tables. These results are rendered to HTML and assigned to unique output values.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#the-server-section-structure"><img src="https://osu-codeclub.github.io/posts/S06E08_shiny_01/img/shiny-server-structure.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Basic server code structure (Higgins 2023)</figcaption>
</figure>
</div>
</section>
<section id="how-to-run-a-shiny-app" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="how-to-run-a-shiny-app"><span class="header-section-number">2.3</span> How to Run a Shiny App</h2>
<p>The code required to run a Shiny app is always the same and quite straightforward. The <code>shinyApp()</code> function takes two arguments: the user interface (ui) and the server code (server) that are being used.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#how-to-run-an-app"><img src="https://osu-codeclub.github.io/posts/S06E08_shiny_01/img/shiny-run-code.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Executing and running a Shiny App (Higgins 2023)</figcaption>
</figure>
</div>
</section>
<section id="how-to-stop-a-shiny-app" class="level2" data-number="2.4">
<h2 data-number="2.4" class="anchored" data-anchor-id="how-to-stop-a-shiny-app"><span class="header-section-number">2.4</span> How to Stop a Shiny App</h2>
<p>To stop your app, you have several options:</p>
<ol type="1">
<li>Click the stop sign icon located on the toolbar of the R Console pane.</li>
<li>Close the Shiny app window.</li>
<li>Click within the Console pane and then press Esc (or Ctrl-C if using the command line) to halt it.</li>
</ol>
</section>
</section>
<section id="lets-build-our-first-shiny-app" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Let’s Build Our First Shiny App</h1>
<p>To begin, make sure you have the <code>shiny</code> package installed. If not, go ahead and install it now.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shiny'</span>)</span></code></pre></div>
</div>
<p>Secondly, let’s assemble the three fundamental structures of a Shiny App.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb2-2">ui<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb2-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># *Input () functions</span></span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># *Output () functions</span></span>
<span id="cb2-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># *Layout () functions</span></span>
<span id="cb2-6">)</span>
<span id="cb2-7">server<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output){</span>
<span id="cb2-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># render * () functions with R expressions inside</span></span>
<span id="cb2-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reactive () expressions</span></span>
<span id="cb2-10">}</span>
<span id="cb2-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui=</span>ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server=</span>server)</span></code></pre></div>
</div>
<section id="lets-complete-each-section." class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="lets-complete-each-section."><span class="header-section-number">3.1</span> Let’s Complete Each Section.</h2>
<ol type="1">
<li>Call <code>shiny</code> into R environment</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Let’s complete some of the sections:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>( </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is my First Shiny App"</span>), </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>( </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is the sidebar panel."</span>), </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is the main panel, where output is displayed."</span>) </span>
<span id="cb4-6">    ) </span>
<span id="cb4-7">  )</span></code></pre></div>
</div>
<ol start="3" type="1">
<li>We have no input, so, we just need the basic server function.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyServer</span>(</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input,output){ </span>
<span id="cb5-3">    } </span>
<span id="cb5-4">  )</span></code></pre></div>
</div>
<ol start="4" type="1">
<li>Let’s run our Shiny App!</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui=</span>ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server=</span>server)</span></code></pre></div>
</div>
</section>
<section id="lets-make-some-modifications." class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="lets-make-some-modifications."><span class="header-section-number">3.2</span> Let’s Make Some Modifications.</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1. Load your library, always.</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#2. Let’s fill some of the sections</span></span>
<span id="cb7-5">ui<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is my First Shiny App"</span>), </span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>,</span>
<span id="cb7-8">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h3</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is sidebar panel."</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h4</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Notice the sidebar is displayed on the right."</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h5</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"But looked better on the left side."</span>)),</span>
<span id="cb7-9">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h4</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is the main panel, where output is displayed."</span>),</span>
<span id="cb7-10">                          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h5</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is additional explanation about the output."</span>))</span>
<span id="cb7-11">  )</span>
<span id="cb7-12">)</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#3. We have no input, so, we just need the basic server function</span></span>
<span id="cb7-15">server<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyServer</span>(</span>
<span id="cb7-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input,output){</span>
<span id="cb7-17">  }</span>
<span id="cb7-18">)</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#4. Let’s run the app</span></span>
<span id="cb7-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui=</span>ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server=</span>server)</span></code></pre></div>
</div>
</section>
<section id="lets-include-text-input" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="lets-include-text-input"><span class="header-section-number">3.3</span> Let’s Include Text Input</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb8-2"></span>
<span id="cb8-3">ui<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Our First Shiny App"</span>), </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb8-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your first and last name"</span>),</span>
<span id="cb8-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your email"</span>),</span>
<span id="cb8-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select the country you live in"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Australia"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Germany"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"India"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Paraguay"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UK"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USA"</span>))</span>
<span id="cb8-10">    ),</span>
<span id="cb8-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb8-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your contact information"</span>),</span>
<span id="cb8-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>),</span>
<span id="cb8-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>),</span>
<span id="cb8-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>)</span>
<span id="cb8-16">    ) </span>
<span id="cb8-17">  )  </span>
<span id="cb8-18">)</span>
<span id="cb8-19"></span>
<span id="cb8-20">server<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyServer</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output){</span>
<span id="cb8-21">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderText</span>({</span>
<span id="cb8-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name)</span>
<span id="cb8-23">  })</span>
<span id="cb8-24">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>email<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderText</span>({</span>
<span id="cb8-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>email)</span>
<span id="cb8-26">  })</span>
<span id="cb8-27">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderText</span>({</span>
<span id="cb8-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country)</span>
<span id="cb8-29">  })</span>
<span id="cb8-30">})</span>
<span id="cb8-31"></span>
<span id="cb8-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui=</span>ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> server)</span></code></pre></div>
</div>
</section>
</section>
<section id="summary" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Summary</h1>
<p>For more information, please visit the <a href="https://rstudio.github.io/cheatsheets/shiny.pdf">Shiny CheatSheet</a> and refer to the figure below to gain a better understanding of the sections of the Shiny App <strong><em>ui</em></strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://bookdown.org/pdr_higgins/rmrwr/a-gentle-introduction-to-shiny.html#the-user-interface-section-structure"><img src="https://osu-codeclub.github.io/posts/S06E08_shiny_01/img/shiny-ui-sections.png" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Understanding the Shiny User Interface (<strong><em>ui</em></strong>) Sections (Higgins 2023)</figcaption>
</figure>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shiny</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S06E08_shiny_01/index.html</guid>
  <pubDate>Mon, 30 Oct 2023 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S06E08_shiny_01/img/shiny_logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Quarto website 7: making a presentation</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S06E06_website_07/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>Today we are going to learn how to make a presentation using Quarto. We will go over how to:</p>
<ol type="1">
<li>Create a Quarto presentation document</li>
<li>Alter the YAMl to change your theming</li>
<li>Create slides</li>
</ol>
<p><a href="https://quarto.org/docs/presentations/revealjs/demo/">Here</a> you can find a demo presentation that will show you some of the options of things you can do in a Quarto presentation.</p>
</section>
<section id="create-a-quarto-presentation" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Create a Quarto presentation</h1>
<p>Open the project that contains your website. Then go to <code>File</code> &gt; <code>New File</code> &gt; <code>Quarto Presentation</code>. We are going to render our prsentation into a <a href="https://revealjs.com/">Reveal JS</a> format (kind of like the presentation equivalent of .html). This is an open source .html format for presentations. Since we’ve been using the visual markdown editor, check the box to use it now.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/new-quarto-presentation.png" class="img-fluid"></p>
<p>Save this file in your website directory.</p>
</section>
<section id="the-yaml" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> The YAML</h1>
<p>We will first look at the YAML.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My practice presentation"</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jessica Cooperstone"</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> revealjs</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">editor</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> visual</span></span></code></pre></div>
<p>Let’s render the <code>.qmd</code> file to see what it looks like.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/my-practice-presentation.png" class="img-fluid"></p>
<p>In your viewer, if you click on the hamburger in the bottom left corner, we can see:</p>
<ul>
<li>Slides: here we have our first slide, and an empty second slide</li>
<li>Tools: which let’s us view the slides in different way, and export them as a pdf</li>
<li>Close: which just gets us out of this view</li>
</ul>
<p>We can adjust our YAML to change the themeing of our slides by setting key:value pairs under <code>format</code>. Here are some that I’ve set which renders like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My practice presentation"</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jessica Cooperstone"</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">revealjs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slide-number</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"img/my-image.png"</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">footer</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I ❤️ [Code Club](https://osu-codeclub.github.io/)"</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> moon</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/my-practice-presentation-moon.png" class="img-fluid"></p>
<p>Just like there are</p>
<ul>
<li><code>slide-number</code> can be <code>true</code> or <code>false</code>, and there are <a href="https://quarto.org/docs/reference/formats/presentations/revealjs.html#slides">different formats</a> of numbering to pick from.</li>
<li><code>logo</code> allows you to specify a logo which will appear on the bottom right of your slide, I’ve selected an image of the code slash</li>
<li><code>footer</code> sets a footer which appears in the middle of your slides</li>
<li><code>theme</code> can be set a preset themes for a presentation. Click <a href="https://quarto.org/docs/presentations/revealjs/themes.html">here</a> to see the full list. You can also set a theme by providing a <code>.scss.</code> file.</li>
<li><code>echo: true</code> means by default all code will be shown, this is the default</li>
</ul>
<p>You can find the full list of all the options for <code>revealjs</code> <a href="https://quarto.org/docs/reference/formats/presentations/revealjs.html">here</a>.</p>
<p>The settings of your YAML will inherit for your whole presentation, unless you override any options for an individual slide.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Let’s all try playing around with our YAML.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="creating-slides" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Creating slides</h1>
<p>You can add a slide by creating a level 2 header (by using two hashtags), or if you’re in the visual editor, you can click on <code>Normal</code> &gt; <code>Header 2</code>. This will insert a slide.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/add-slide.png" class="img-fluid"></p>
<p>If we toggle back to <code>Source</code> you can see that just two <code>##</code> have been added. You might find typing this easier than setting a <code>Header 2</code>.</p>
<p>What we type here in Heading 2 will be the title of our slide.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/heading-2.png" class="img-fluid"></p>
<p>If you wanted to make a bulleted list, you can use the visual editor to insert bullets, and add some content.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/slide-2.png" class="img-fluid"></p>
<p>Try rendering this to see what happens.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/slide-2-rendered.png" class="img-fluid"></p>
<p>If you click back and forth in your viewer, you will see that both items in the bulleted list appear together. If you want bullets to populate one at a time, you can set <code>incremental: true</code> in your YAML, or if you just want the bullets to increment in this slide only, you can set it by clicking on the three dots on the right of your slide, and setting Classes to be <code>.incremental</code>. You can learn more about incremental lists <a href="https://quarto.org/docs/presentations/revealjs/#incremental-lists">here</a>. If you toggle between the visual and source editor, you can see what code you’d need to type to get your bullets to be incremental.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/incremental.png" class="img-fluid"></p>
<p>This is what your incremented slide would look like in the source editor.</p>
<pre><code>## The title of my second slide

::: incremental
-   The first item in my list
-   A second item in my list
:::</code></pre>
<p>One of the main reasons you might want to create a Quarto presentation is because you want to show code. Just like we talked about last week, you can add a code chunk by clicking <code>Insert</code> &gt; <code>Executable cell</code> &gt; <code>R</code> to add an R code chunk.</p>
<p>You can type whatever code you want, here I am putting in some code that makes a plot. I am setting at the top of the chunk that I want the output to be on the next slide, since the code is a little long and the plot is a little big.</p>
<p>A the top of a code chunk, you can set the options for that chunk after <code>#|</code> at the top of that chunk.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| output-location: slide</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb4-4"></span>
<span id="cb4-5">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>,</span>
<span id="cb4-12">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper length, in mm"</span>,</span>
<span id="cb4-13">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin flipper length by species"</span>)</span></code></pre></div>
<p>When this renders, it looks like this:</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/penguins-1.png" class="img-fluid"></p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/penguins-2.png" class="img-fluid"></p>
<p>We can also make it so that the code is collapsable, like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-summary: "Click for the full code"</span></span>
<span id="cb5-3"></span>
<span id="cb5-4">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>,</span>
<span id="cb5-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper length, in mm"</span>,</span>
<span id="cb5-12">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin flipper length by species"</span>)</span></code></pre></div>
<p>When rendered, it looks like this:</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_07/img/penguins-hide-code.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Let’s all try playing around with creating slides and modifying them. Is there anything specific anyone wants to know how to do?
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>website</category>
  <category>quarto presentations</category>
  <guid>https://osu-codeclub.github.io/posts/S06E06_website_07/index.html</guid>
  <pubDate>Mon, 16 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Quarto website 6: Quarto features</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S06E06_website_06/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>The source documents for your website’s pages are in the Quarto (<code>.qmd</code>) format. Today, we will learn more about options to format Quarto documents, and to include code and its output.</p>
<p>As we have mentioned before, <em>Quarto is a type of Markdown format</em> (and essentially the successor to “R Markdown”) with extensions such as:</p>
<ul>
<li><p>Making it possible to include executable <strong>code</strong> and its results. This code will typically be R code, but Quarto also supports Python, for instance.</p></li>
<li><p>A more extensive set of <strong>built-in formatting options</strong>, like “callout boxes” and “tabsets”, which we’ll see today.</p></li>
</ul>
<p>Your website’s Quarto documents will all produce <strong>HTML</strong> output, and this is also the default (and generally preferred) output format for stand-alone Quarto documents, but it is also possible to output to <strong>Word</strong> and <strong>PDF</strong> formats.</p>
<p>A common use case for stand-alone Quarto documents is a <strong>digital notebook or report</strong> that includes results produced by R code. If you use R to produce some results and/or figures that you need to share or compile with accompanying notes, then using Quarto to do so is a lot easier, more robust, and reproducible than copying and pasting figures into (e.g.) a Powerpoint document.</p>
<p>Because it’s straightforward to make the output look polished, and because you can include citations too, it is also a good option for more <strong>formal reports</strong> and even <strong>manuscripts</strong>. As mentioned last week, you can also output a <strong>slide deck</strong>, and it is even possible to include these directly on your website since the output format for slides can be HTML.</p>
<p>We will continue to use RStudio’s <strong>Visual Editor</strong>, and will basically make our way through the options in the bar that is right above your main editor window (but only when you’re in “Visual” mode):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/menu.png" class="img-fluid figure-img" style="width:90.0%"></p>
</figure>
</div>
<section id="creating-a-document-for-practice" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="creating-a-document-for-practice"><span class="header-section-number">1.1</span> Creating a document for practice</h3>
<p>I will start by creating a new Quarto document to practice using these features. If you want to follow along:</p>
<ul>
<li>In RStudio, click “File” =&gt; “New File” =&gt; “Quarto Document”.</li>
<li>Check the box “Use visual markdown editor”, and optionally add a Title and an Author.</li>
</ul>
<p><br></p>
</section>
</section>
<section id="sec-introduction" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="sec-introduction"><span class="header-section-number">2</span> Basic formatting</h2>
<section id="options-from-the-format-dropdown-menu" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="options-from-the-format-dropdown-menu"><span class="header-section-number">2.1</span> Options from the “Format” dropdown menu</h3>
<p>The following options are available under the “Format” dropdown:</p>
<ul>
<li><p>“<strong>Code</strong>” formatting <code>looks like this</code> and can be used for e.g.&nbsp;code snippets, file names, and software names.</p></li>
<li><p><strong>Bold</strong>, <em>italic</em>, <u>underlined</u>, <del>Strikeout</del>, <sup>superscript</sup>, <sub>subscript</sub> , <span class="smallcaps">small caps</span> (some of these are under the “Text” subheading)</p></li>
<li><p><strong>Bullet lists and numbered lists</strong>, which can optionally be in a “tight” layout: press the <code>…</code> at the top-right.</p>
<ul class="task-list">
<li><input type="checkbox">Within a list, you can have an “Item Checkbox” to make a checklist…</li>
<li><input type="checkbox" checked="">…and these boxes can be checked.</li>
</ul></li>
<li><p>“Blockquotes”, which can be used to provide a quote or even to highlight a bit of text in a different format:</p></li>
</ul>
<blockquote class="blockquote">
<p>“Blockquotes are great” — J. Doe</p>
</blockquote>
<p>Several of these items are also present as separate buttons directly in the top bar.</p>
<p><br></p>
</section>
<section id="headers" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="headers"><span class="header-section-number">2.2</span> Headers</h3>
<p>The dropdown menu to the left of the bullet list icon (it will say “Normal” unless you’re cursor is on a header line) allows you to pick a <strong>header level</strong> as opposed to the default, “Normal” formatting for your focal paragraph. Recall that headers will:</p>
<ul>
<li><p>Be <strong>numbered</strong> if you use the YAML option <code>number-sections: true</code> either site-wide (in <code>_quarto.yml</code>) or at the top of your focal document</p></li>
<li><p>Show up in a <strong>Table of Contents</strong> if you use the YAML option <code>toc: true</code>.</p></li>
<li><p>By default have “<strong>anchors</strong>” that you can see when you hover over or near them in the output. Clicking on an anchor will give you a <em>direct link</em> to this section in your document.</p></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Cross-references
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can use regular hyperlinks (see below) to refer to different pages and specific headers on your website. Additionally, it is possible to insert clickable cross-references to e.g.&nbsp;figures and tables — see <a href="https://quarto.org/docs/authoring/cross-references.html">these Quarto docs</a>.</p>
</div>
</div>
<p><br></p>
</section>
<section id="options-from-the-insert-dropdown" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="options-from-the-insert-dropdown"><span class="header-section-number">2.3</span> Options from the “Insert” dropdown</h3>
<ul>
<li><p>“<strong><em>Link</em></strong>” to include a clickable <a href="https://quarto.org/docs/reference/formats/html.html">link</a> with custom text.</p></li>
<li><p><strong><em>Footnote</em></strong><sup>1</sup>, which shows up as a superscripted number in the main text, with the full footnote printed at the bottom of the page. Best of all, you can also <em>hover over the superscripted number</em> to see the footnote text.</p></li>
<li><p>“Special characters” =&gt; “Insert <strong><em>Emoji</em></strong>” =&gt; 🤓.</p></li>
<li><p>“<strong><em>Horizontal rule</em></strong>”, which can be nice to break up your content:</p></li>
</ul>
<hr>
<p><br></p>
</section>
</section>
<section id="citations" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="citations"><span class="header-section-number">3</span> Citations</h2>
<p>Addings citations is also possible via the “Insert” drop-down menu. Any citation you add will be automatically included in a reference list at the bottom of the document! In the text, the citation will show up as a link to the reference list and you can also hover over the link to see the full reference: <span class="citation" data-cites="m.horst2022">(M. Horst, Presmanes Hill, and B. Gorman 2022)</span>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/reflist.png" class="img-fluid figure-img" style="width:90.0%"></p>
<figcaption class="figure-caption">A reference list is automatically added to the end of the document</figcaption>
</figure>
</div>
<p>This is a really nice feature that benefits a lot from the RStudio Visual Editor. Without the Visual Editor, you’ll have to make a text file yourself with all the information for each reference (a bibliography in BibTex (<code>.bib</code>) format) — this can be exported from your reference manager, but that’s still a hassle because you often add citations one-by-one to a piece of text. With the Visual Editor, you can search for references online and when you include a reference:</p>
<ul>
<li>It will be automatically saved in a bibliography file.</li>
<li>When adding your first citation, the following line will be automatically added to the YAML header of your Quarto document: <code>bibliography: references.bib</code>. This line will make sure a reference list is added to the end of the document.</li>
</ul>
<p>If you have Zotero installed on your computer, then your Zotero library will be automatically available. Otherwise, you can search for references in several ways, as shown by the following screenshots:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">CrossRef search</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">DOI search</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Zotero library</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/crossref.png" class="img-fluid figure-img" style="width:90.0%"></p>
</figure>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/doi.png" class="img-fluid figure-img" style="width:90.0%"></p>
</figure>
</div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/zotero.png" class="img-fluid figure-img" style="width:90.0%"></p>
</figure>
</div>
</div>
</div>
</div>
<p>To <strong><em>format your citations</em></strong>, both in terms of how they appear in the text and in your reference list, see <a href="https://quarto.org/docs/authoring/footnotes-and-citations.html">this Quarto documentation page</a>.</p>
<p><br></p>
<section id="your-turn-try-to-use-some-of-the-features-discussed-above" class="level4 unnumbered exercise">
<h4 class="unnumbered anchored" data-anchor-id="your-turn-try-to-use-some-of-the-features-discussed-above">Your turn: Try to use some of the features discussed above</h4>
<ul>
<li><p>If you didn’t already do so, it probably makes sense to create a new Quarto document for this experimentation.</p></li>
<li><p>After you’ve used a couple of features, switch from “Visual” to “Source” editor mode, and check what the syntax is for these features!</p></li>
</ul>
</section>
<p><br></p>
</section>
<section id="sec-chunks" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="sec-chunks"><span class="header-section-number">4</span> Code blocks and chunks</h2>
<p>Both under the “Format” and “Insert” drop-down menus, you can find the “<strong>Code block</strong>” item, which will insert a block (one or more lines) of code-formatted text — but code in this type of block will not be executed. When the pop-up window asks you to type the name of a language, you can type “R”, but this information is only used for code <em>formatting</em> purposes. These kind of blocks can be useful if you just want to demonstrate/explain some code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-2">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span></code></pre></div>
<p>By contrast, the “<strong>Executable Cell</strong>” item (again, choose “R” as the language) will produce blocks also known as “Code Chunks”, which contain code that <em>can</em> be executed. By default, the code will in fact be executed and its results (if any) will be printed below the code chunk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-2">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 30</code></pre>
</div>
</div>
<p>Because code output consisting of just a number is a little boring, let’s insert a chunk with the following code, which will <strong>produce a plot</strong> — and that plot will similarly be shown below the code as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> iris,</span>
<span id="cb4-3">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Sepal.Length, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Sepal.Width, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> Species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>…Or a chunk that <strong>produces a simple table</strong>: in this case, simply the first lines of the <code>iris</code> dataframe. This dataframe output will display as shown below (which is a little nicer than the default formatting) when you include a line <code>df-print: kable</code> in the YAML header of your document:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(iris)</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">Sepal.Length</th>
<th style="text-align: right;">Sepal.Width</th>
<th style="text-align: right;">Petal.Length</th>
<th style="text-align: right;">Petal.Width</th>
<th style="text-align: left;">Species</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">5.1</td>
<td style="text-align: right;">3.5</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">4.9</td>
<td style="text-align: right;">3.0</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="odd">
<td style="text-align: right;">4.7</td>
<td style="text-align: right;">3.2</td>
<td style="text-align: right;">1.3</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">4.6</td>
<td style="text-align: right;">3.1</td>
<td style="text-align: right;">1.5</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">3.6</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">5.4</td>
<td style="text-align: right;">3.9</td>
<td style="text-align: right;">1.7</td>
<td style="text-align: right;">0.4</td>
<td style="text-align: left;">setosa</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Configuring code chunk behavior
</div>
</div>
<div class="callout-body-container callout-body">
<p>Default behaviors for code chunks are to <strong><em>print the code</em></strong> (<code>echo: true</code>), to <strong><em>execute the code</em></strong> (<code>eval: true</code>), and to <strong><em>show the output produced by the code</em></strong> (<code>output: true</code>), including any <strong><em>warnings</em></strong> produced by the code (<code>warning: true</code>).</p>
<p>Any of these can be changed both at a website-wide or document-wide level, as well as at the level of individual code chunks (the latter would override the former).</p>
<p>To change <strong><em>settings at the site or document-level</em></strong>, use the <code>execute</code> key in your YAML file or header (see <a href="https://quarto.org/docs/reference/formats/html.html#execution">these Quarto docs</a>) — in the example below, we turn off printing of the code itself as well of any warnings that the code might produce:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">execute</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span></code></pre></div>
<p>To change <strong><em>settings for an individual chunk</em></strong>, the same YAML keys like <code>echo</code> can be used, but in special comment lines (with <code>#|</code> prefixes) at the start of a code chunk:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/chunk_options.png" class="img-fluid figure-img" style="width:90.0%"></p>
</figure>
</div>
<p><strong>A really useful option is to “fold” the code by using <code>code-fold: true</code> in the YAML header.</strong> That way, code will not be shown by default, but can be shown for each individual code chunk by unfolding it. This is great when you want to emphasize your results, but do want make the underlying code available to anyone who might be interested.</p>
<p>For example, for the plot we produced above, if we set code-folding to true, it would produce a box like this above the plot — and clicking on that box would then show the code:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/code_fold.png" class="img-fluid figure-img" style="width:80.0%"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="figures-and-tables" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="figures-and-tables"><span class="header-section-number">5</span> Figures and Tables</h2>
<section id="figures-images" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="figures-images"><span class="header-section-number">5.1</span> Figures / images</h3>
<p>Above, we saw that we can create plots and include them in the document. Of course, we can also include figures made elsewhere, or photos, etc — and you have probably already done this for your website. When inserting a figure (e.g.&nbsp;by clicking the picture icon in the top bar), you can for example include a caption and specify how you want it aligned:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/insert_figure.png" class="img-fluid figure-img" style="width:60.0%"></p>
</figure>
</div>
<p>Somewhat oddly, the options for the figure <strong>size</strong> only show up once you’ve clicked OK to insert the figure — you’ll see this box below the figure:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/size_figure.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>There are different ways/units to size the figure: I prefer <strong>“%”</strong>, which will allow you to specify the width in percentage of the total page (or focal box) width, as shown above.</p>
</section>
<section id="tables" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="tables"><span class="header-section-number">5.2</span> Tables</h3>
<p>When Clicking “Insert Table” in the “Table” dropdown menu in the top bar, you’ll get a pop-up to create a table, similar to how this works in Word:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/table1.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>This will produce a table skeleton like the one shown below, which you can then fill out:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/table2.png" class="img-fluid figure-img" style="width:70.0%"></p>
</figure>
</div>
<p>Here is an example of what a rendered table will look like, with previous Code Club sessions this semester:</p>
<table class="table">
<caption><em>Table 1: Previous Code Club sessions</em></caption>
<thead>
<tr class="header">
<th>Session</th>
<th>Date</th>
<th>Presenter</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>S06E01</td>
<td>Aug 28</td>
<td>Jess</td>
<td><a href="../../posts/website_01_initiation/">Quarto website 1: <strong>Initiating a website</strong></a></td>
</tr>
<tr class="even">
<td>S06E02</td>
<td>Sep 11</td>
<td>Jelmer</td>
<td><a href="../../posts/website_02/">Quarto website 2: <strong>Adding a page &amp; YAML formatting</strong></a></td>
</tr>
<tr class="odd">
<td>S06E03</td>
<td>Sept 18</td>
<td>Jess</td>
<td><a href="../../posts/website_03_deploy-github/">Quarto website 3: <strong>Deploying to GitHub</strong></a></td>
</tr>
<tr class="even">
<td>S06E04</td>
<td>Sept 25</td>
<td>Jelmer</td>
<td><a href="../../posts/website_04/">Quarto website 4: <strong>Interacting with your repository</strong></a></td>
</tr>
<tr class="odd">
<td>S06E05</td>
<td>Oct 2</td>
<td>Jess</td>
<td><a href="../../posts/website_05">Quarto website 5: <strong>Modifying your site</strong></a></td>
</tr>
</tbody>
</table>
<p>These tables are fairly basic in their appearance and there aren’t many simple formatting options. If you’d like fancy or even interactive tables, you are better off creating them in R with packages like <a href="https://gt.rstudio.com/"><em>gt</em></a>, and then including them like we included part of the <code>iris</code> dataframe above.</p>
<p><br></p>
</section>
</section>
<section id="other-options" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="other-options"><span class="header-section-number">6</span> Other options</h2>
<section id="tabsets" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="tabsets"><span class="header-section-number">6.1</span> Tabsets</h3>
<p>“Tabsets” create a section with content spread across different “tabs”, kind of like tabs in your browser; you saw an example above, in the Citations section. Tabsets can help keep your document clear when you have many outputs, especially when there are <strong>alternative or mutually exclusive ways of showing something</strong>, like results from alternative statistical models you ran on your data, alternative ways of visualizing the same data, or installation instructions for different operating systems.</p>
<p>When you click “Insert” =&gt; “Tabset…”, you can first enter names for two or more tabs, and doing this will also determine how many tabs you’ll get (up to 6):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/tabset1.png" class="img-fluid figure-img" style="width:65.0%"></p>
</figure>
</div>
<p>Then, inside the gray box, below each header that was created for each tab name, you can enter any content that will show up in each tab:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/tabset2.png" class="img-fluid figure-img" style="width:80.0%"></p>
</figure>
</div>
<p>And here is what the output for the above setup would look like:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Sepal length vs sepal width</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Sepal length vs petal length</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell">
<div class="cell-output-display">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell">
<div class="cell-output-display">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="callouts" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="callouts"><span class="header-section-number">6.2</span> Callouts</h3>
<p>So-called “Callouts blocks” are boxes that we regularly use on the Code Club website, like the ones shown below:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example of a “tip” callout box
</div>
</div>
<div class="callout-body-container callout-body">
<p>This tip will help you make the most of your life</p>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example of a “warning” callout box
</div>
</div>
<div class="callout-body-container callout-body">
<p>This warning will help you avoid blowing up your computer</p>
</div>
</div>
<p>When you click “Insert” =&gt; “Callout..”, you can select one of the five types of available Callouts, which only differ in their colors and the symbol in the header (see these <a href="https://quarto.org/docs/authoring/callouts.html">Quarto docs</a>).</p>
<p><br></p>
</section>
<section id="miscellaneous" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="miscellaneous"><span class="header-section-number">6.3</span> Miscellaneous</h3>
<ul>
<li>In your Quarto document, rather than finding a formatting feature in the top bar, you can press <kbd>/</kbd> to see a list of features you can insert, which you can subset by typing some text:</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E06_website_06/img/insert.png" class="img-fluid figure-img" style="width:45.0%"></p>
</figure>
</div>
<ul>
<li>As is true for any Markdown format, you can directly include any HTML code/tags, like <strong><code>&lt;br&gt;</code></strong> <strong><em>to insert an empty line</em></strong> (i.e., to add vertical white space — see the box below) or <code>&lt;kbd&gt;Enter&lt;/kbd&gt;</code> to make text appear formatted as keyboard keys.</li>
</ul>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Whitespace in Markdown
</div>
</div>
<div class="callout-body-container callout-body">
<p>In all Markdown flavors, including Quarto, whitespace is dealt with differently than you may be used to:</p>
<ul>
<li><p>If you leave <strong>multiple spaces between words</strong>, those will be <strong>collapsed</strong> to a single space.</p></li>
<li><p>If you type on <strong>a new line without creating a new paragraph</strong> (in the Visual Editor, that would actually require you to use <kbd>Shift</kbd>+<kbd>Enter</kbd>, since Enter will start a new paragraph), the output would still be on the <strong>same line</strong>.</p></li>
<li><p>If you leave <strong>multiple blank lines between paragraphs</strong>, these will be <strong>collapsed</strong> to a single blank (half-)line. Therefore, if you want to add additional vertical whitespace, use the HTML tag <code>&lt;br&gt;</code>.</p></li>
</ul>
</div>
</div>
<p><br></p>
<section id="your-turn-again-try-to-use-some-of-the-features-discussed-above" class="level4 unnumbered exercise">
<h4 class="unnumbered anchored" data-anchor-id="your-turn-again-try-to-use-some-of-the-features-discussed-above">Your turn: Again, try to use some of the features discussed above</h4>
<ul>
<li>If you have time after trying some of the features we discussed, then read about ways of manipulating code chunk behavior in the box at the end of Section&nbsp;4, and try some of them.</li>
</ul>
</section>
<p><br></p>



</section>
</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-m.horst2022" class="csl-entry">
M. Horst, Allison, Alison Presmanes Hill, and Kristen B. Gorman. 2022. <span>“Palmer Archipelago Penguins Data in the Palmerpenguins R Package - An Alternative to Anderson’s Irises.”</span> <em>The R Journal</em> 14 (1): 244–54. <a href="https://doi.org/10.32614/rj-2022-020">https://doi.org/10.32614/rj-2022-020</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><strong><em>After reading this footnote, you’ll be exceptionally well-informed</em></strong>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>website</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S06E06_website_06/index.html</guid>
  <pubDate>Mon, 09 Oct 2023 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S06E06_website_06/img/crossref.png" medium="image" type="image/png" height="42" width="144"/>
</item>
<item>
  <title>Quarto website 5: modifying your site</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S06E05_website_05/index.html</link>
  <description><![CDATA[ 



<hr>
<p><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S06E05_website_05/img/quarto-cartoon.png" class="img-fluid figure-img" style="width:70.0%" alt="A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto. Artwork from Hello, Quarto keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst"></p>
</figure>
</div>
</div>
</div>
<p>Artwork from <a href="https://mine.quarto.pub/hello-quarto/">“Hello, Quarto”</a> keynote by <a href="https://jules32.github.io/">Julia Lowndes</a> and <a href="https://mine-cr.com/">Mine Çetinkaya-Rundel</a>, presented at RStudio Conference 2022. Illustrated by <a href="https://allisonhorst.com/allison-horst">Allison Horst</a>.”</p>
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>Today we are going to continue customizing our website by:</p>
<ol type="1">
<li>Making a fancy about page</li>
<li>Learning how to make multi-level drop down menu headers</li>
<li>Changing our website themeing in <code>_quarto.yml</code></li>
<li>Doing some light (S)CSS styling to change the visuals of our site</li>
</ol>
<p>Then, we will push our changes to GitHub using GitHub Desktop. But first:</p>
<div class="callout callout-style-simple callout-none no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<h4 class="anchored" data-anchor-id="introduction">
Are there other things you want to learn how to do with your website?
</h4>
<p>
Please share!
</p>
</div>
</div>
</div>
<p>A good way to see what is possible to do with your website is to browse through some other people’s sites. There is a Quarto website gallery <a href="https://quarto.org/docs/gallery/#websites">here</a>. Just like people can access the source code on your website, you can often do the same for others. This means if you see a feature you like, you can go into their website code and try and figure out how its done.</p>
</section>
<section id="updating-our-about-page" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Updating our About page</h1>
<p>Because many people who have a Quarto website will have an About page, there are some special, nicely formatted templates which you can use. You can learn more about fancy about pages <a href="https://quarto.org/docs/websites/website-about.html">here</a>, inclduing seeing what the different templates look like.</p>
<p>We are going to practie with our Code Club <a href="https://osu-codeclub.github.io/practice-website/">practice-website</a>.</p>
<p>First, let’s set one of the about templates in the YAML of our <code>about.qmd</code> file. I am going to start with <code>jolla</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"About me"</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">about</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jolla</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> name_of_image.jpg</span></span></code></pre></div>
<p>Before we render this page, we need to make sure the image we want to appear in this about page is in the home directory of your website. If you want to keep all your images in a subfolder so they’re not just floating around loose, you can. And then your YAML will look like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"About me"</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">about</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jolla</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # could also use trestles, solana, marquee, broadside</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> img/name_of_image.jpg</span></span></code></pre></div>
<p>If you want to use some of the other templates, like <code>trestles</code>, <code>solana</code>, <code>marquee</code>, and <code>broadside</code>, you will want to have other information in your <code>about.qmd</code>, perhaps sections on Education and Experience.</p>
<p>Check out using these different templates and pick the one you like the most if you want to customize your about page.</p>
</section>
<section id="creating-multi-level-drop-down-menu-headers" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Creating multi-level drop down menu headers</h1>
<p>Earlier I mentioned we can go into other websites to see how different features are coded. We are going to do this on the <a href="https://osu-codeclub.github.io/">OSU Code Club website</a> to see how it has achieved having multi-level headers. We can also visit the <a href="https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main">source repository</a> on GitHub to see how this website is formatted.</p>
<p>If you look at the Code Club website homepage, you can see that the header “New here?” has a drop down, and allows you to choose from a few different options.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E05_website_05/img/new-here.png" class="img-fluid"></p>
<p>How was that done? If you remember back a few sessions ago, <a href="https://osu-codeclub.github.io/posts/website_02/#modifying-the-_quarto.yml-file">we set what our headers were going</a> to be in the <code>_quarto.yml</code> file. Let’s see what that file looks like from the Code Club source repo.</p>
<p>The <code>_quarto.yml</code> looks like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> website</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">preview</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navigate</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OSU Code Club"</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">site-url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://osu-codeclub.github.io/</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo-url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/osu-codeclub/osu-codeclub.github.io</span></span>
<span id="cb3-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo-actions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">edit</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> issue</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page-navigation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">back-to-top-navigation</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/schedule.qmd</span></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Schedule</span></span>
<span id="cb3-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/previous.qmd</span></span>
<span id="cb3-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Previous sessions</span></span>
<span id="cb3-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> New here?</span></span>
<span id="cb3-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">menu</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Computer setup for Code Club</span></span>
<span id="cb3-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/setup.qmd</span></span>
<span id="cb3-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> R resources for beginners</span></span>
<span id="cb3-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/r_resources.qmd</span></span>
<span id="cb3-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Sign up!</span></span>
<span id="cb3-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://forms.gle/eYkMvmJShrcANUrt5</span></span></code></pre></div>
<p>Looking at this we can see what code is used for make drop down headers. You can copy this code into your <code>_quarto.yml</code> and then modify the text and href to be appropriate for your site.</p>
<p>Remember that when you link to new pages, you will need to have material for that page to populate. If we look at the example above, the “Computer setup for Code Club” material is in a file called <code>setup.qmd</code> in a folder called <code>pages</code> in the home directory of the website.</p>
</section>
<section id="altering-website-styling-in-_quarto.yml" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Altering website styling in <code>_quarto.yml</code></h1>
<p>Making simpler changes, like setting your background colors and fonts, you can do by altering your <code>_quarto.yml</code> file under the <code>format</code> header. For example, we could make the following changes to our practice-website.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">background</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#06280C"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # foresty green</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> flatly</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">number-sections</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainfont</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Proxima Nova</span></span>
<span id="cb4-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">backgroundcolor</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#CFDAD3"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # light grey</span></span>
<span id="cb4-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">monobackgroundcolor</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#CFDAD3"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # light grey</span></span>
<span id="cb4-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title-block-banner</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#06280C"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # foresty green</span></span>
<span id="cb4-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title-block-banner-color</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#CFDAD3"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # light grey</span></span>
<span id="cb4-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fontcolor</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#06280C"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # foresty green</span></span>
<span id="cb4-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linkcolor</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0E11E2"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # hyperlink blue</span></span></code></pre></div>
<p>You don’t need to comment on what your colors are, I just like to do this since I have no connection between hexadecimal codes and actual colors, and this helps me to remember what is what. You can see all of the html options you can change within your YAML <a href="https://quarto.org/docs/reference/formats/html.html">here</a></p>
<p>Once you made changes, render your website to see what they look like.</p>
</section>
<section id="altering-scss-code-to-change-website-styling" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Altering (S)CSS code to change website styling</h1>
<p>Sometimes you might want to make more changes that what you can do using the avaiable keys in your YAML. When that is the case, you can make additional alterations by creating a <code>.scss</code> theme file.</p>
<p>CSS stands for Cascading Style Sheets and it is used to format the layout of a webpage. By learning how to modify existing CSS files, it is relatively simple to change how your website looks. SCSS is Sassy CSS and the difference is not really important right now, but I think the <code>.scss</code> files are a little easier to modify, and are the default in Quarto, so we are going to work from those.</p>
<p>The Quarto website built in themes use <a href="https://bootswatch.com/">Bootswatch</a> and both the Code Club and practice-website use flatly so let’s start there. You can find <code>.scss.</code> files for each theme in the Quarto GitHub source repo <a href="https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes">here</a>. I am going to go to the flatly theme and download it using the “Download raw file” button in the top right of the page. Save this file in the home directory of your website.</p>
<p><img src="https://osu-codeclub.github.io/posts/S06E05_website_05/img/download-scss.png" class="img-fluid"></p>
<p>Let’s open it in RStudio. We will play around with making some changes.</p>
<p>One thing you might want to change first are the colors. Quarto accepts color information as hexadecimal codes. If you want to know the hexadecimal 6 digit code for any color you can go to <a href="https://htmlcolorcodes.com/">www.htmlcolorcodes.com</a> to find the color/code pair that you want.</p>
<p>In the <a href="https://quarto.org/docs/output-formats/html-themes.html#sass-variables">Quarto documentation</a>, you can find information about the Sass variables that can be specified within your <code>.scss.</code> file what what they mean.</p>
</section>
<section id="commit-and-push-to-github" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Commit and push to GitHub</h1>
<p>Once you are happy with your changes, the last step is to commit and push them to GitHub so the changes can be reflected on your website. You can do this in GitHub desktop by entering a comment in the bottom left, committing to main (or master), and then push to origin.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>website</category>
  <category>git</category>
  <guid>https://osu-codeclub.github.io/posts/S06E05_website_05/index.html</guid>
  <pubDate>Mon, 02 Oct 2023 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S06E05_website_05/img/quarto-cartoon.png" medium="image" type="image/png" height="81" width="144"/>
</item>
</channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>OSU Code Club</title>
<link>https://osu-codeclub.github.io/</link>
<atom:link href="https://osu-codeclub.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Mon, 02 Dec 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Accessing and using R at the Ohio Supercomputer Center (OSC)</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S09E11_OSC/</link>
  <description><![CDATA[ 




<hr>
<hr style="height:1pt; visibility:hidden;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/osc_logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
</figure>
</div>
<section id="todays-content" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="todays-content"><span class="header-section-number">1</span> Today’s content</h2>
<p>Today, I will show you how to access resources such as R and RStudio through the Ohio Supercomputer Center (OSC). To give some context, I will start with a brief general introduction to high-performance computing and OSC.</p>
<p>Since this is the last Code CLub session of the semester, we will also leave for more general questions and comments and ask for suggestions for content for the next semester of Code Club.</p>
<p><br></p>
</section>
<section id="high-performance-computing-and-osc" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="high-performance-computing-and-osc"><span class="header-section-number">2</span> High-performance computing and OSC</h2>
<hr style="height:1pt; visibility:hidden;">
<p>A <strong>supercomputer</strong> (also known as a “compute cluster” or simply a “<strong>cluster</strong>”) consists of many computers that are connected by a high-speed network, and that can be accessed remotely by its users. In more general terms, supercomputers provide high-performance computing (<strong>HPC</strong>) resources.</p>
<p>This is what Owens, one of the OSC supercomputers, physically looks like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/owens.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>Here are some possible reasons to use a supercomputer instead of your own laptop or desktop:</p>
<ul>
<li>Your analyses take a long time to run, need large numbers of CPUs, or a large amount of memory.</li>
<li>You need to run some analyses many times.</li>
<li>You need to store a lot of data.</li>
<li>Your analyses require specialized hardware, such as GPUs (Graphical Processing Units).</li>
<li>Your analyses require software available only for the Linux operating system, but you use Windows.</li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<p>The <strong>Ohio Supercomputer Center (OSC)</strong> is a facility provided by the state of Ohio. It has three supercomputers, lots of storage space, and an excellent infrastructure for accessing these resources.</p>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OSC websites and “Projects”
</div>
</div>
<div class="callout-body-container callout-body">
<p>OSC has <strong>three main websites</strong> — we will mostly or only use the first:</p>
<ul>
<li><strong><a href="https://ondemand.osc.edu" class="uri">https://ondemand.osc.edu</a></strong>: A web portal to use OSC resources through your browser (<em>login needed</em>).</li>
<li><a href="https://my.osc.edu" class="uri">https://my.osc.edu</a>: Account and project management (<em>login needed</em>).</li>
<li><a href="https://osc.edu" class="uri">https://osc.edu</a>: General website with information about the supercomputers, installed software, and usage.</li>
</ul>
<hr>
<p>Access to OSC’s computing power and storage space goes through <strong>OSC “Projects”</strong>:</p>
<ul>
<li>A project can be tied to a research project or lab, or be educational like Code Club’s project, <code>PAS1838</code>.</li>
<li>Each project has a budget in terms of “compute hours” and storage space<sup>1</sup>.</li>
<li>As a user, it’s possible to be a member of multiple different projects.</li>
</ul>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="the-structure-of-a-supercomputer-center" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-structure-of-a-supercomputer-center"><span class="header-section-number">3</span> The structure of a supercomputer center</h2>
<section id="terminology" class="level3">
<h3 class="anchored" data-anchor-id="terminology">Terminology</h3>
<p>Let’s start with some (super)computing terminology, going from smaller things to bigger things:</p>
<ul>
<li><strong>Node</strong><br>
A single computer that is a part of a supercomputer.</li>
<li><strong>Supercomputer / Cluster</strong><br>
A collection of computers connected by a high-speed network. OSC currently has three: “Pitzer”, “Owens”, and “Cardinal”.</li>
<li><strong>Supercomputer Center</strong><br>
A facility like OSC that has one or more supercomputers.</li>
</ul>
</section>
<section id="supercomputer-components" class="level3">
<h3 class="anchored" data-anchor-id="supercomputer-components">Supercomputer components</h3>
<p>We can think of a supercomputer as having three main parts:</p>
<ul>
<li><strong>File Systems</strong>: Where files are stored (these are shared between the two OSC supercomputers!)</li>
<li><strong>Login Nodes</strong>: The handful of computers everyone shares after logging in</li>
<li><strong>Compute Nodes</strong>: The many computers you can reserve to run your analyses</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/cluster_overview_ed.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
<section id="login-nodes" class="level4">
<h4 class="anchored" data-anchor-id="login-nodes">Login Nodes</h4>
<p>Login nodes are set aside as an initial landing spot for everyone who logs in to a supercomputer. There are only a handful of them on each supercomputer, they are shared among everyone, and cannot be “reserved”.</p>
<p>As such, login nodes are meant only to do things like organizing your files and creating scripts for compute jobs, and are <strong><em>not</em></strong> <strong>meant for any serious computing</strong>, which should be done on the compute nodes.</p>
</section>
<section id="compute-nodes" class="level4">
<h4 class="anchored" data-anchor-id="compute-nodes">Compute Nodes</h4>
<p>Data processing and analysis is done on compute nodes. You can only use compute nodes after putting in a <strong>request</strong> for resources (a “job”). The Slurm <em>job scheduler</em>, which we will learn to use in week 5, will then assign resources to your request.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What works differently on a supercomputer like at OSC? <em>(Click to expand)</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Compared to command-line computing on a laptop or desktop, a number of aspects are different when working on a supercomputer like at OSC. We’ll learn much more about these later on in the course, but here is an overview:</p>
<ul>
<li><strong>“Non-interactive” computing is common</strong><br>
It is common to write and “submit” scripts to a queue instead of running programs interactively.</li>
<li><strong>Software</strong><br>
You generally can’t install “the regular way”, and a lot of installed software needs to be “loaded”.</li>
<li><strong>Operating system</strong><br>
Supercomputers run on the Linux operating system.</li>
<li><strong>Login versus compute nodes</strong><br>
As mentioned, the nodes you end up on after logging in are not meant for heavy computing and you have to <em>request access to “compute nodes”</em> to run most analyses.<br>
</li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OSC file systems <em>(Click to expand)</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>OSC has several distinct file systems:</p>
<table class="table">
<colgroup>
<col style="width: 13%">
<col style="width: 16%">
<col style="width: 19%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th>File system</th>
<th>Located within</th>
<th>Quota</th>
<th>Backed up?</th>
<th>Auto-purged?</th>
<th>One for each…</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Home</strong></td>
<td><code>/users/</code></td>
<td>500 GB / 1 M files</td>
<td>Yes</td>
<td>No</td>
<td>User</td>
</tr>
<tr class="even">
<td><strong>Project</strong></td>
<td><code>/fs/ess/</code></td>
<td>Flexible</td>
<td>Yes</td>
<td>No</td>
<td>OSC Project</td>
</tr>
<tr class="odd">
<td><strong>Scratch</strong></td>
<td><code>/fs/scratch/</code></td>
<td>100 TB</td>
<td>No</td>
<td>After 90 days</td>
<td>OSC Project</td>
</tr>
</tbody>
</table>
<p><em>(Directory is just another word for folder, often written as “dir” for short.)</em></p>
</div>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
</section>
</section>
<section id="osc-ondemand" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="osc-ondemand"><span class="header-section-number">4</span> OSC OnDemand</h2>
<p>The OSC OnDemand web portal allows you to use a web browser to access OSC resources such as:</p>
<ul>
<li>A <strong>file browser</strong> where you can also create and rename folders and files, etc.</li>
<li>A <strong>Unix shell</strong></li>
<li>“<strong>Interactive Apps</strong>”: programs such as <strong><em>RStudio</em></strong>, Jupyter, VS Code and QGIS.</li>
</ul>
<p><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> <strong>Go to <a href="https://ondemand.osc.edu" class="uri">https://ondemand.osc.edu</a> and log in</strong> (use the boxes on the left-hand side)</p>
<p>You should see a landing page similar to the one below:</p>
<p align="center">
</p><p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/ondemand_home.png" width="90%"></p>
<p></p>
<p>We will now go through some of the dropdown menus in the <strong>blue bar along the top</strong>.</p>
<hr style="height:1pt; visibility:hidden;">
<section id="files-file-system-access" class="level3">
<h3 class="anchored" data-anchor-id="files-file-system-access">Files: File system access</h3>
<p>Hovering over the <strong>Files</strong> dropdown menu gives a list of directories that you have access to. If your account is brand new, and you were added to <code>PAS1838</code>, you should only have three directories listed:</p>
<ol type="1">
<li>A <strong>Home</strong> directory (starts with <code>/users/</code>)</li>
<li>The <code>PAS1838</code> project’s “<em>scratch</em>” directory for temporary project-related storage (<code>/fs/scratch/PAS1838</code>)</li>
<li>The <code>PAS1838</code> project’s “<em>project</em>” directory for permanent project-related storage (<code>/fs/ess/PAS1838</code>)</li>
</ol>
<p>You will only ever have one Home directory at OSC, but for every additional project you are a member of, you should usually see additional <code>/fs/ess</code> and <code>/fs/scratch</code> directories appear.</p>
<p><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> <strong>Click on your Home directory</strong>.</p>
<p>Once there, you should see whichever directories and files are present at the selected location, and you can click on the directories to explore the contents further:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/ondemand_files_pas2700.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
<p>This interface is <strong>much like the file browser on your own computer</strong>, so you can also create, delete, move and copy files and folders, and even upload (from your computer to OSC) and download (from OSC your computer) files<sup>2</sup> — see the buttons across the top.</p>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="clusters-unix-shell-access" class="level3">
<h3 class="anchored" data-anchor-id="clusters-unix-shell-access">Clusters: Unix shell access</h3>
<p>Interacting with a supercomputer is most commonly done using a Unix shell. Under the <strong>Clusters</strong> dropdown menu, you can access a Unix shell either on Owens or Pitzer:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/ondemand_shell_select.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>I’m selecting a shell on the Pitzer supercomputer (“Pitzer Shell Access”), which will open a new browser tab, where the bottom of the page looks like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/ondemand_shell2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
<p>The “<strong>Clusters</strong>” dropdown menu also has item “<strong>System Status</strong>”. When you click on that, a new browser tab will open with a page that shows an overview of the live, current usage of the clusters — this can be useful to get an idea of the scale of the supercomputer center, which cluster is being used more, and so on:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/ondemand_systemstatus.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%"></p>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="interactive-apps" class="level3">
<h3 class="anchored" data-anchor-id="interactive-apps">Interactive Apps</h3>
<p>We can access programs with Graphical User Interfaces (<strong>GUI</strong>s; point-and-click interfaces) via the <strong>Interactive Apps</strong> dropdown menu:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/ondemand_vscode_select.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:32.0%"></p>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="rstudio-at-osc-rstudio-server" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="rstudio-at-osc-rstudio-server"><span class="header-section-number">5</span> RStudio at OSC (RStudio Server)</h2>
<p>From within our browser, we can access a version of RStudio (“RStudio Sever”) that will be running on OSC’s computers.</p>
<p>Some potential advantages of doing this are:</p>
<ul>
<li>You can access multiple different versions of R!</li>
<li>You have access to OSC’s compute power and could easily request say 20 cores or 100 GB of memory (RAM)</li>
<li>You have large amounts of data that are stored on OSC anyway, or are best stored there</li>
</ul>
<section id="starting-an-rstudio-server-session" class="level3">
<h3 class="anchored" data-anchor-id="starting-an-rstudio-server-session">Starting an RStudio Server session</h3>
<ol type="1">
<li><p>Click on <strong><code>Interactive Apps</code></strong> (top bar) and then <strong><code>RStudio Server</code></strong> (all the way at the bottom)</p></li>
<li><p>Fill out the form as follows:</p>
<ul>
<li>Cluster: <strong><code>Pitzer</code></strong></li>
<li>R version: <strong><code>4.4.0</code></strong></li>
<li>Project: <strong><code>PAS1838</code></strong></li>
<li>Number of hours: <strong><code>1</code></strong></li>
<li>Node type: <strong><code>any</code></strong></li>
<li>Number of cores: <strong><code>1</code></strong></li>
</ul></li>
</ol>
<details>
<summary>
<em>Click to see a screenshot</em>
</summary>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/rstudio_form.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:50.0%"></p>
</figure>
</div>
</details>
<ol start="4" type="1">
<li><p>Click the big blue <strong><code>Launch</code></strong> button at the bottom</p></li>
<li><p>Now, you should be sent to a new page with a box at the top for your RStudio Server “job”, which should initially be “Queued” (waiting to start).</p></li>
</ol>
<details>
<summary>
<em>Click to see a screenshot</em>
</summary>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/rstudio_queued.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
</figure>
</div>
</details>
<ol start="6" type="1">
<li>Your job should start running very soon, with the top bar of the box turning green and saying “Running”.</li>
</ol>
<details>
<summary>
<em>Click to see a screenshot</em>
</summary>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S09E11_OSC/img/rstudio_running.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
</figure>
</div>
</details>
<ol start="7" type="1">
<li>Click <strong><code>Connect to RStudio Server</code></strong> at the bottom of the box, and an RStudio Server instance will open in a new browser tab. You’re ready to go!</li>
</ol>
</section>
<section id="installing-r-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-r-packages">Installing R packages</h3>
<p>You can install R packages as usual with <code>install.packages()</code> and related functions: these will automatically be installed in your default personal library somewhere in your Home directory.</p>
<p><br></p>


</section>
</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p> But we don’t have to pay anything for educational projects like this one. Otherwise, for OSC’s rates for academic research, see <a href="https://www.osc.edu/content/academic_fee_model_faq">this page</a>.↩︎</p></li>
<li id="fn2"><p>Though this is not meant for large (&gt;1 GB) transfers. Different methods are available — we’ll talk about those later on.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reproducibility</category>
  <category>osc</category>
  <category>hpc</category>
  <guid>https://osu-codeclub.github.io/posts/S09E11_OSC/</guid>
  <pubDate>Mon, 02 Dec 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Reproducibility 05: Making Changes with Git and GitHub 🐱</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E10_reprod_05/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>We are continuing this semester’s Code Club series on reproducible research. So far, we have gone through:</p>
<ol type="1">
<li><a href="https://osu-codeclub.github.io/posts/S08E06_reprod_01/">Some basics of reproducibility, file organization, and RStudio projects</a></li>
<li><a href="https://osu-codeclub.github.io/posts/S08E07_reprod_02/">An intro to Quarto</a></li>
<li><a href="https://osu-codeclub.github.io/posts/S08E08_reprod_03/">A little more about Quarto</a></li>
</ol>
<p>Last time, we went over how to:</p>
<ul>
<li>Install <a href="https://git-scm.com/downloads">Git</a></li>
<li>Create a <a href="https://github.com/join">GitHub account</a></li>
<li>Install <a href="https://desktop.github.com/">GitHub desktop</a> and link it to your GitHub account</li>
<li>Render a GitHub flavored markdown document</li>
<li>Add our repository to GitHub desktop and add version control</li>
<li>Publish your repository</li>
</ul>
<p>The book <a href="https://happygitwithr.com/">Happy Git and GitHub for the useR</a> is a super good resource by Jenny Bryan that talks about all this in extreme detail. Some of my materials below are inspired by some of this material.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/github-cartoon.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%" alt="A basic git workflow represented as two islands, one with local repo and working directory, and another with remote repo. Bunnies move file boxes from the working directory to the staging area, then with Commit move them to the local repo. Bunnies in rowboats move changes from the local repo to the remote repo (labeled PUSH) and from the remote repo to the working directory (labeled PULL). Art by Allison Horst"></p>
<figcaption>Figure from <a href="https://github.com/allisonhorst/stats-illustrations">Allison Horst</a></figcaption>
</figure>
</div>
</div>
</div>
<p>Today, we are going to go over:</p>
<ul>
<li>How to edit contents in your repository</li>
<li>How to push those changes to GitHub</li>
<li>How to set up a <code>.gitignore</code></li>
</ul>
</section>
<section id="edit-contents-in-your-repo" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Edit contents in your repo</h1>
<p>You all should by now have a repo which contains our material from the last Code Club session. One thing that came up last time was making changes to your <code>README.md</code> so that the material on the front page of your repo is updated with some information about its contents.</p>
<p>Last time, we initialized our repository with a README. If we look into our directory that is being tracked by git, we will see a file called <code>README.md</code>. Go ahead and open it.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
If you didn’t initialize with a README, that is ok, we can make one.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Go to <code>File</code> &gt; <code>New File</code> &gt; <code>Markdown file</code>. Save this file in your folder being tracked by git with the name <code>README.md</code>.</p>
</div>
</div>
<p>Since my README was pushed to GitHub, you can see it there:</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/readme-original-screenshot.png" class="img-fluid"></p>
<p>When I initialized my README, I gave it a description, so you can see that listed underneath the name of the repo on GitHub.</p>
<p>We can open up that <code>README.md</code> in RStudio to make edits to it.</p>
<p>My file looks like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode md code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># first-repo</span></span>
<span id="cb1-2"> Understanding which countries have grown the most and least from 2000 to 2015.</span></code></pre></div>
<p>Let’s make some changes to our <code>README.md</code> and push them to GitHub.</p>
<p>Since this is a Markdown document (file extension <code>.md</code>), it needs to be written in the Markdown language.</p>
<ul>
<li>The “#” indicates a level 1 (i.e., top level) header. That is why this is rendered to be larger and bolded text.</li>
<li>Regular text can be typed just like you would in a text editor.</li>
</ul>
<p>I am going to change my file to look like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode md code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Country-level population growth from 2000 to 2015</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">This repository contains code to calculate the percent rate of growth for each </span>
<span id="cb2-4">country from 2000 to 2015. The data comes from </span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">The World Factbook</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](https://www.cia.gov/the-world-factbook/)</span> and can be </span>
<span id="cb2-6">downloaded on its own <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">here</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](https://github.com/osu-codeclub/osu-codeclub.github.io/blob/main/posts/S08E01_wrangling_01/factbook_download.csv)</span>.</span></code></pre></div>
<p>Click <code>Preview</code> to render your <code>README.md</code> and see how it looks.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/readme-rendered.png" class="img-fluid"></p>
<section id="practice" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="practice"><span class="header-section-number">2.1</span> Practice</h2>
<p>Try making a change to your README and preview the change.</p>
</section>
<section id="push-your-changes-to-github" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="push-your-changes-to-github"><span class="header-section-number">2.2</span> Push your changes to GitHub</h2>
<p>Now that we’ve made a change to our <code>README.md</code>, let’s push that change to GitHub. Start by opening GitHub Desktop. Make sure your repo is selected in the top right corner.</p>
<p>We now see something we didn’t see before.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/readme-github-desktop-changes.png" class="img-fluid"></p>
<p>All of the changes we made are now tracked and specified in GitHub Desktop. We can see that two files have changed (our <code>README.md</code> and <code>README.html</code>). If you click on <code>README.md</code> you can see the changes we just made. These changes look more chaotic because they’re rendered in html.</p>
<p>To send these changes to GitHub, we can enter a commit message, and click <code>Commit to main</code>.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/readme-commit.png" class="img-fluid"></p>
<p>Then we will click <code>Push origin</code> (either as the blue button or on the top right). Note that in the bottom right corner, we can see what our commit was (here, mine was “Updating to a more descriptive readme”).</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/readme-push.png" class="img-fluid"></p>
<p>Once we have done that, we are now “working clean,” meaning we have made no new changes to our files being tracked by git, and what is present locally will be the same as what is on GitHub.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/post-readme-push.png" class="img-fluid"></p>
<p>We can look online to see how our repo looks now, a few things to notice:</p>
<ul>
<li>Our README has changed - we can now see the changes we made reflected in the README that populates on the home page of our repo. If we click on <code>README.md</code>, we can also see those changes.</li>
<li>We have a new most recent commit message (here, “Updating to a more descriptive readme”), and we can also see when this commit was made (here, 4 min ago)</li>
<li>We see now that our repo has a total of 2 commits.</li>
</ul>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/post-readme-push-github.png" class="img-fluid"></p>
</section>
</section>
<section id="edit-our-.gitignore" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Edit our <code>.gitignore</code></h1>
<p>If we look in our repo, we see some files are on GitHub that perhaps don’t need to be there. For example:</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/post-readme-push-github_trim.png" class="img-fluid"></p>
<p>Let’s look at our current <code>.gitignore</code> and see what’s in that file. Mine looks like this:</p>
<pre><code># History files
.Rhistory
.Rapp.history

# Session Data files
.RData
.RDataTmp

# User-specific files
.Ruserdata

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# R Environment Variables
.Renviron

# pkgdown site
docs/

# translation temp files
po/*~

# RStudio Connect folder
rsconnect/</code></pre>
<p>This gives you some options to types of files you can put in your <code>.gitignore</code>. Today we are going to add:</p>
<ul>
<li><code>.DS_Store</code> - this is a Mac specific filetyle</li>
<li><code>.gitattributes</code></li>
</ul>
<p>I will add these files to my <code>.gitignore</code> and leave the rest of the text as it is.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode md code-with-copy"><code class="sourceCode markdown"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Mac specific files</span></span>
<span id="cb4-2">.DS_Store</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># git attributes</span></span>
<span id="cb4-5">.gitattributes</span></code></pre></div>
<p>If I look in GitHub Desktop now, I can see that those changes have been tracked.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/update-gitignore.png" class="img-fluid"></p>
<p>Now, we can make a commit, and then push to main.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/update-gitignore-commit.png" class="img-fluid"></p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/update-gitignore-push.png" class="img-fluid"></p>
<p>But - when we look at our repo, those files are still there!</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/ignored-but-still-on-github.png" class="img-fluid"></p>
<p>That is because we have told Git to stop tracking them, but we haven’t actually removed them from GitHub. We can do that now.</p>
<p>This is a good opportunity for us to try using the terminal a little, since I can’t figure out how to do this without doing so. In GitHub Desktop, go to <code>Repository</code> &gt; <code>Open in Terminal</code>. This will open up a terminal on your computer in the location of your tracked directory.</p>
<p>In our terminal, we can remove the files we do not want on GitHub. When your terminal is open you should see something like this:</p>
<pre><code>computer-username@name-of-computer repo-name %</code></pre>
<p>You will use the command <code>git rm --cached name-of-file</code> to remove the files you added to your <code>.gitignore</code> but are still on GitHub. Two examples are below:</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/rm_ds_store.png" class="img-fluid"></p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/rm_gitattributes.png" class="img-fluid"></p>
<section id="practice-1" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">3.1</span> Practice</h2>
<p>Try removing files that you don’t want tracked with git.</p>
</section>
<section id="push-our-.gitignore-changes-to-github" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="push-our-.gitignore-changes-to-github"><span class="header-section-number">3.2</span> Push our <code>.gitignore</code> changes to GitHub</h2>
<p>Now that we’ve removed the files we want, we can push our changes to GitHub. If you look at your GitHub Desktop, you should now see something like this:</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/removed-files-github-desktop.png" class="img-fluid"></p>
<p>We can make another commit, and push that change to main.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/remove-files-commit.png" class="img-fluid"></p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/remove-files-push.png" class="img-fluid"></p>
<p>Now, if we look on GitHub, we can see those files are now gone.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/ignored-files-gone.png" class="img-fluid"></p>
<p>Do keep in mind that those files are not totally gone – if we go back to our original commit, we will see those files again. Keep this in mind, that once something is committed, it is really tracked. You can see this by clicking on “commits” in the top right corner of your repo. When you do this, you can see the whole commit history of this repo.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/commit-history.png" class="img-fluid"></p>
<p>And if we click on our original commit, we can see those files we added to our <code>.gitignore</code> and their contents.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/ignored-files-original-commit.png" class="img-fluid"></p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>git</category>
  <category>github</category>
  <category>version control</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S08E10_reprod_05/</guid>
  <pubDate>Mon, 18 Nov 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S08E10_reprod_05/img/github-cartoon-commits.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Reproducibility 04: Getting started with Git and GitHub 🐱</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E09_reprod_04/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>We are continuing this semester’s Code Club series on reproducible research. So far, we have gone through:</p>
<ol type="1">
<li><a href="https://osu-codeclub.github.io/posts/S08E06_reprod_01/">Some basics of reproducibility, file organization, and RStudio projects</a></li>
<li><a href="https://osu-codeclub.github.io/posts/S08E07_reprod_02/">An intro to Quarto</a></li>
<li><a href="https://osu-codeclub.github.io/posts/S08E08_reprod_03/">A little more about Quarto</a></li>
</ol>
<p>Today, we are going to take some code we’ve written and push it to a repository on GitHub. To do this we will need to:</p>
<ul>
<li>Install <a href="https://git-scm.com/downloads">Git</a></li>
<li>Create a <a href="https://github.com/join">GitHub account</a></li>
<li>Install <a href="https://desktop.github.com/">GitHub desktop</a> and link it to your GitHub account</li>
<li>Render a GitHub flavored markdown document</li>
<li>Add our repository to GitHub desktop and add version control</li>
<li>Publish your repository</li>
</ul>
<p>The book <a href="https://happygitwithr.com/">Happy Git and GitHub for the useR</a> is a super good resource by Jenny Bryan that talks about all this in extreme detail. Some of my materials below are inspired by some of this material.</p>
<section id="what-is-git" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="what-is-git"><span class="header-section-number">1.1</span> What is Git?</h2>
<p><a href="https://git-scm.com/">Git</a> is a version control system that allows materials (mostly code) to be tracked in an organized way. Every time any changes to the files that are being monitored by Git are changed, that change is tracked. You can think of it as combining the tracked changes capabilities of Word, with the file sharing from OneDrive.</p>
<p>We are going to use Git (combined with GitHub, more on that in a second) to take the information embedded within our Quarto document and make it available on GitHub. You could opt use Git for just yourself because it would allow you to always revert back to a previous version of any of your files in case you make a big mistake.</p>
<p>Here is a nice illustration by <a href="https://allisonhorst.com/allison-horst">Allison Horst</a> that shows the basics of git (at least the basics of what we will be using).</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/github-cartoon.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%" alt="A basic git workflow represented as two islands, one with local repo and working directory, and another with remote repo. Bunnies move file boxes from the working directory to the staging area, then with Commit move them to the local repo. Bunnies in rowboats move changes from the local repo to the remote repo (labeled PUSH) and from the remote repo to the working directory (labeled PULL). Art by Allison Horst"></p>
<figcaption>Figure from <a href="https://github.com/allisonhorst/stats-illustrations">Allison Horst</a></figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="what-is-github" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="what-is-github"><span class="header-section-number">1.2</span> What is GitHub?</h2>
<p><a href="https://github.com/">GitHub</a> hosts Git-based projects. GitHub can be free (especially for academic projects), and is where we house all our <a href="https://github.com/osu-codeclub/osu-codeclub.github.io">Code Club content</a>. I additionally use GitHub in my lab for <a href="https://github.com/CooperstoneLab">creating code repositories that go along with our publications</a>.</p>
</section>
<section id="what-is-github-desktop" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="what-is-github-desktop"><span class="header-section-number">1.3</span> What is GitHub Desktop?</h2>
<p><a href="https://desktop.github.com/">GitHub Desktop</a> is a application that lets you use Git and GitHub in a less-scary-than-working-in-your-terminal way. <a href="https://www.simplilearn.com/how-to-use-github-desktop-tutorial-article">Here</a> is a longer tutorial on how to use GitHub desktop.</p>
</section>
</section>
<section id="install-git" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Install Git</h1>
<p>If you don’t already have Git, download and install it: <a href="https://git-scm.com/downloads" class="uri">https://git-scm.com/downloads</a>.</p>
</section>
<section id="create-a-github-account" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Create a GitHub account</h1>
<p>In order to connect your local files to GitHub, you need a GitHub account.</p>
<p>Create a GitHub account by going to <a href="https://github.com/join">github.com/join</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/create-gh-account.png" class="img-fluid figure-img"></p>
<figcaption>a screenshot of getting a GitHub account</figcaption>
</figure>
</div>
<p>You will have to pick a username - remember that other people will see this username so use one you’d feel comfortable with. <a href="https://happygitwithr.com/github-acct.html">Here</a> is some advice for picking a username. I use my OSU email address with GitHub but you can use a personal one too.</p>
<p>You will then have a profile on GitHub, here’s an example of <a href="https://github.com/jcooperstone">mine</a>.</p>
</section>
<section id="install-github-desktop-and-link-it-to-your-account" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Install GitHub Desktop and link it to your account</h1>
<p>We are going to interface with GitHub via Github Desktop because I think this is the easiest way to do it/teach it. It is definitely not the only way.</p>
<p>First download GitHub Desktop and install it: <a href="https://desktop.github.com/" class="uri">https://desktop.github.com/</a></p>
<p>Open GitHub Desktop and log into your GitHub account by going to <code>Preferences</code> &gt; <code>Accounts</code> &gt; <code>Sign in</code></p>
</section>
<section id="render-a-github-flavored-markdown-gfm-document-to-prepare-to-push" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Render a GitHub flavored markdown (GFM) document to prepare to push</h1>
<p>We need some material to put in our new repository. We can use the <a href="https://osu-codeclub.github.io/posts/S08E08_reprod_03/">code that we practiced wrangling with last week</a>.</p>
<p>If you missed last week, you can download a <code>.qmd</code> file to work from <a href="https://github.com/osu-codeclub/osu-codeclub.github.io/blob/main/posts/S08E09_reprod_04/factbook_20241028.qmd">here</a>.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
If you download my <code>.qmd</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p>I indicated in the YAML that <code>eval: false</code> so that the code doesn’t run on the website. You will want to remove this part of the YAML on lines 5 and 6.</p>
</div>
</div>
<p>Open up this <code>.qmd</code> and set your YAML such that it renders as the format GitHub flavored markdown.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My first code on GitHub"</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jessica Cooperstone"</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"November 4, 2024"</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gfm</span></span>
<span id="cb1-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>Render this document. You should now see in the <code>Files</code> quadrant a new file called <code>name-of-quarto-doc.md</code> which contains your rendered document in GitHub flavored markdown (markdown is what the <code>.md</code> is).</p>
<p>Your rendered document should look something like this:</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/md-rendered-screenshot.png" class="img-fluid"></p>
<p>In the folder of my repo, I have the following content:</p>
<ul>
<li>an .<code>Rproj</code> file</li>
<li>a <code>.qmd</code> file</li>
<li>a <code>.md</code> file that rendered from the <code>.qmd</code></li>
<li>a data folder where I store the data I read in</li>
</ul>
<p>We can upload all, or only some of this material to GitHub. I am going to show you how to send it all today, and in the next lesson on Git, we will go over gitignore.</p>
</section>
<section id="add-a-local-repository-to-github-desktop-and-add-version-control" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Add a local repository to GitHub desktop and add version control</h1>
<p>Now we are going to add the folder containing our <code>.Rproj</code> to be tracked with GitHub Desktop.</p>
<p>In GitHub Desktop, click <code>File</code> &gt; <code>Add Local Repository</code>, select the directory with your <code>.Rproj</code>’s top-level folder, and click <code>Add Repository</code>.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/add-local-repo.png" class="img-fluid"></p>
<p>When we go to do this, we see that GitHub desktop is telling us that this directory does not appear to be a Git repository. We can click “create a repository” to initiate version control on this folder.</p>
<p>Here, you want to:</p>
<ul>
<li>give your repo a name (mine is first-repo)</li>
<li>provide a description</li>
<li>provide a local path to your folder (this should have already been done in the previous step)</li>
<li>check if you want to initialize with a README (we do, check yes)</li>
<li>select if you want a git ignore (we do, set the type as R, and we will talk about it more next week)</li>
<li>indicate if you want a license on your repo (I am not going to set one up)</li>
</ul>
<p>Then you can click the blue button <code>Create Repository</code>.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/create-repo-github-desktop.png" class="img-fluid"></p>
<p>You will notice that now in our <code>.Rproj</code> folder, we have some new files, including:</p>
<ul>
<li><code>.gitattributes</code> (which gives attributes for pathnames)</li>
<li><code>.gitignore</code> (which tells git which files to ignore, and we are going to go over this in the next sessions)</li>
<li><code>README.md</code> (contains the information that will be a part of your readme file)</li>
</ul>
</section>
<section id="publish-our-repo" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Publish our repo</h1>
<p>Now, we can publish our repo on GitHub. This will create the repo on GitHub, and it will contain all of our content in it.</p>
<p>What we can see that GitHub desktop has done for us, since we are setting our repo up for the first time, is automatically made an Initial Commit (see bottom left). We are going to click Undo next to this so we can practice doing this ourselves. You won’t have to do this step in the future.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/undo-initial-commit.png" class="img-fluid"></p>
<p>Now we can see in GitHub desktop all of the files that are going to be sent to our repository on the lefthand side of the screen.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/before-first-commit.png" class="img-fluid"></p>
<p>Remember, this is the process of interacting with GitHub.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/github-cartoon.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%" alt="A basic git workflow represented as two islands, one with local repo and working directory, and another with remote repo. Bunnies move file boxes from the working directory to the staging area, then with Commit move them to the local repo. Bunnies in rowboats move changes from the local repo to the remote repo (labeled PUSH) and from the remote repo to the working directory (labeled PULL). Art by Allison Horst"></p>
<figcaption>Figure from <a href="https://github.com/allisonhorst/stats-illustrations">Allison Horst</a></figcaption>
</figure>
</div>
</div>
</div>
<p>We can then add a message about our first commit and click <code>Commit to main</code>.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/first-commit.png" class="img-fluid"></p>
<p>Now we need to send our repository to GitHub. Since we are doing this for the first time, we see a button that says <code>Publish repository</code>. In the future, this button will say <code>Push to origin</code>.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/publish-repository-post-commit.png" class="img-fluid"></p>
<p>We are getting one last popup asking us to confirm our repo info, which can do with the <code>Publish Repository</code> button.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/publish-repo-final-conf.png" class="img-fluid"></p>
<p>Our repo is now on GitHub, and we can see it online if we go to the repositories tab of your personal GitHub page. You can see how this looks on my page - this is probably your first repo, and although I’ve called mine <code>first-repo</code> it is not for me.</p>
<p><img src="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/git-repo-screenshot.png" class="img-fluid"></p>
<p>We can click on our repo and see what it contains. If we click on our file that ends in <code>.md</code>, we can see our GitHub flavored markdown rendered document. Here is <a href="https://github.com/jcooperstone/first-repo/blob/main/first-push.md">mine</a>.</p>
</section>
<section id="next-time" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Next time</h1>
<p>Next session we are going to go over:</p>
<ul>
<li>Making changes and pushing them to GitHub</li>
<li>Setting our gitignore</li>
<li>Maybe some other stuff</li>
</ul>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>git</category>
  <category>github</category>
  <category>version control</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S08E09_reprod_04/</guid>
  <pubDate>Mon, 04 Nov 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S08E09_reprod_04/img/github-cartoon.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Reproducibility 3: More about Quarto</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E08_reprod_03/</link>
  <description><![CDATA[ 




<hr>
<section id="a-recap" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> A recap</h1>
<p>Last week we introduced Quarto, and using Quarto within RStudio. Next week, we will go over how to push our Quarto document to Github.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E08_reprod_03/img/quarto-gazing.png" class="img-fluid figure-img"></p>
<figcaption>Artwork by <a href="https://twitter.com/allison_horst">@allison_horst</a></figcaption>
</figure>
</div>
<p>Open up the <code>.Rproj</code> you are using for Code Club. We can open up a new Quarto document by going to <code>File</code> &gt; <code>New File</code> &gt; <code>Quarto Document</code>.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Does everyone have an <code>.Rproj</code> set up? We are going to need this for next week!</p>
</div>
</div>
<p>Let’s add some material to our document so we can better see what our resulting documents will look like. This will also give us an opportunity to practice some of what we’ve been going over in Code Club this semester.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>Let’s go back to what we started with this semester. Let’s revisit data from <a href="https://www.cia.gov/the-world-factbook/">The World Factbook</a>, put together by the CIA to “provides basic intelligence on the history, people, government, economy, energy, geography, environment, communications, transportation, military, terrorism, and transnational issues for 265 world entities.” I thought this data would give us some opportunities to flex our R skills, and learn a bit about the world.</p>
<p>The data we are going to download can be found <a href="https://www.cia.gov/the-world-factbook/field/population/country-comparison/">here</a>, though I have saved the file, added it to our Code Club Github, and included some code below for you to download it. This is a little bit different than the data we started with which included only info from 2015. This dataset includes many more years.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/osu-codeclub/osu-codeclub.github.io/raw/refs/heads/main/posts/S08E01_wrangling_01/data/factbook.csv"</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factbook_download.csv"</span></span>
<span id="cb3-4">)</span></code></pre></div>
</div>
<p>You should now see the file “factbook_download.csv” in your working directory.</p>
<p>We can read it in using the tidyverse function from the <a href="https://readr.tidyverse.org/index.html"><code>readr</code></a> package called <a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_csv()</code></a>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i've stored mine in a folder called data for organizational sake</span></span>
<span id="cb4-2">factbook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/factbook_download.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 11072 Columns: 20
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (20): Series Name, Series Code, Country Name, Country Code, 2000 [YR2000...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>Let’s look at our data.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">View</span>(factbook)</span></code></pre></div>
</div>
<p>Let’s pull just the data for total population.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">factbook_pop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> factbook <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Series Name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population, total"</span>)</span></code></pre></div>
</div>
<p>And then we can look at it:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(factbook_pop)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 6%">
<col style="width: 4%">
<col style="width: 5%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Series Name</th>
<th style="text-align: left;">Series Code</th>
<th style="text-align: left;">Country Name</th>
<th style="text-align: left;">Country Code</th>
<th style="text-align: left;">2000 [YR2000]</th>
<th style="text-align: left;">2001 [YR2001]</th>
<th style="text-align: left;">2002 [YR2002]</th>
<th style="text-align: left;">2003 [YR2003]</th>
<th style="text-align: left;">2004 [YR2004]</th>
<th style="text-align: left;">2005 [YR2005]</th>
<th style="text-align: left;">2006 [YR2006]</th>
<th style="text-align: left;">2007 [YR2007]</th>
<th style="text-align: left;">2008 [YR2008]</th>
<th style="text-align: left;">2009 [YR2009]</th>
<th style="text-align: left;">2010 [YR2010]</th>
<th style="text-align: left;">2011 [YR2011]</th>
<th style="text-align: left;">2012 [YR2012]</th>
<th style="text-align: left;">2013 [YR2013]</th>
<th style="text-align: left;">2014 [YR2014]</th>
<th style="text-align: left;">2015 [YR2015]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Population, total</td>
<td style="text-align: left;">SP.POP.TOTL</td>
<td style="text-align: left;">Afghanistan</td>
<td style="text-align: left;">AFG</td>
<td style="text-align: left;">19542982</td>
<td style="text-align: left;">19688632</td>
<td style="text-align: left;">21000256</td>
<td style="text-align: left;">22645130</td>
<td style="text-align: left;">23553551</td>
<td style="text-align: left;">24411191</td>
<td style="text-align: left;">25442944</td>
<td style="text-align: left;">25903301</td>
<td style="text-align: left;">26427199</td>
<td style="text-align: left;">27385307</td>
<td style="text-align: left;">28189672</td>
<td style="text-align: left;">29249157</td>
<td style="text-align: left;">30466479</td>
<td style="text-align: left;">31541209</td>
<td style="text-align: left;">32716210</td>
<td style="text-align: left;">33753499</td>
</tr>
<tr class="even">
<td style="text-align: left;">Population, total</td>
<td style="text-align: left;">SP.POP.TOTL</td>
<td style="text-align: left;">Albania</td>
<td style="text-align: left;">ALB</td>
<td style="text-align: left;">3089027</td>
<td style="text-align: left;">3060173</td>
<td style="text-align: left;">3051010</td>
<td style="text-align: left;">3039616</td>
<td style="text-align: left;">3026939</td>
<td style="text-align: left;">3011487</td>
<td style="text-align: left;">2992547</td>
<td style="text-align: left;">2970017</td>
<td style="text-align: left;">2947314</td>
<td style="text-align: left;">2927519</td>
<td style="text-align: left;">2913021</td>
<td style="text-align: left;">2905195</td>
<td style="text-align: left;">2900401</td>
<td style="text-align: left;">2895092</td>
<td style="text-align: left;">2889104</td>
<td style="text-align: left;">2880703</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Population, total</td>
<td style="text-align: left;">SP.POP.TOTL</td>
<td style="text-align: left;">Algeria</td>
<td style="text-align: left;">DZA</td>
<td style="text-align: left;">30774621</td>
<td style="text-align: left;">31200985</td>
<td style="text-align: left;">31624696</td>
<td style="text-align: left;">32055883</td>
<td style="text-align: left;">32510186</td>
<td style="text-align: left;">32956690</td>
<td style="text-align: left;">33435080</td>
<td style="text-align: left;">33983827</td>
<td style="text-align: left;">34569592</td>
<td style="text-align: left;">35196037</td>
<td style="text-align: left;">35856344</td>
<td style="text-align: left;">36543541</td>
<td style="text-align: left;">37260563</td>
<td style="text-align: left;">38000626</td>
<td style="text-align: left;">38760168</td>
<td style="text-align: left;">39543154</td>
</tr>
<tr class="even">
<td style="text-align: left;">Population, total</td>
<td style="text-align: left;">SP.POP.TOTL</td>
<td style="text-align: left;">American Samoa</td>
<td style="text-align: left;">ASM</td>
<td style="text-align: left;">58230</td>
<td style="text-align: left;">58324</td>
<td style="text-align: left;">58177</td>
<td style="text-align: left;">57941</td>
<td style="text-align: left;">57626</td>
<td style="text-align: left;">57254</td>
<td style="text-align: left;">56837</td>
<td style="text-align: left;">56383</td>
<td style="text-align: left;">55891</td>
<td style="text-align: left;">55366</td>
<td style="text-align: left;">54849</td>
<td style="text-align: left;">54310</td>
<td style="text-align: left;">53691</td>
<td style="text-align: left;">52995</td>
<td style="text-align: left;">52217</td>
<td style="text-align: left;">51368</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Population, total</td>
<td style="text-align: left;">SP.POP.TOTL</td>
<td style="text-align: left;">Andorra</td>
<td style="text-align: left;">AND</td>
<td style="text-align: left;">66097</td>
<td style="text-align: left;">67820</td>
<td style="text-align: left;">70849</td>
<td style="text-align: left;">73907</td>
<td style="text-align: left;">76933</td>
<td style="text-align: left;">79826</td>
<td style="text-align: left;">80221</td>
<td style="text-align: left;">78168</td>
<td style="text-align: left;">76055</td>
<td style="text-align: left;">73852</td>
<td style="text-align: left;">71519</td>
<td style="text-align: left;">70567</td>
<td style="text-align: left;">71013</td>
<td style="text-align: left;">71367</td>
<td style="text-align: left;">71621</td>
<td style="text-align: left;">71746</td>
</tr>
<tr class="even">
<td style="text-align: left;">Population, total</td>
<td style="text-align: left;">SP.POP.TOTL</td>
<td style="text-align: left;">Angola</td>
<td style="text-align: left;">AGO</td>
<td style="text-align: left;">16394062</td>
<td style="text-align: left;">16941587</td>
<td style="text-align: left;">17516139</td>
<td style="text-align: left;">18124342</td>
<td style="text-align: left;">18771125</td>
<td style="text-align: left;">19450959</td>
<td style="text-align: left;">20162340</td>
<td style="text-align: left;">20909684</td>
<td style="text-align: left;">21691522</td>
<td style="text-align: left;">22507674</td>
<td style="text-align: left;">23364185</td>
<td style="text-align: left;">24259111</td>
<td style="text-align: left;">25188292</td>
<td style="text-align: left;">26147002</td>
<td style="text-align: left;">27128337</td>
<td style="text-align: left;">28127721</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(factbook_pop)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>Rows: 217
Columns: 20
$ `Series Name`   &lt;chr&gt; "Population, total", "Population, total", "Population,…
$ `Series Code`   &lt;chr&gt; "SP.POP.TOTL", "SP.POP.TOTL", "SP.POP.TOTL", "SP.POP.T…
$ `Country Name`  &lt;chr&gt; "Afghanistan", "Albania", "Algeria", "American Samoa",…
$ `Country Code`  &lt;chr&gt; "AFG", "ALB", "DZA", "ASM", "AND", "AGO", "ATG", "ARG"…
$ `2000 [YR2000]` &lt;chr&gt; "19542982", "3089027", "30774621", "58230", "66097", "…
$ `2001 [YR2001]` &lt;chr&gt; "19688632", "3060173", "31200985", "58324", "67820", "…
$ `2002 [YR2002]` &lt;chr&gt; "21000256", "3051010", "31624696", "58177", "70849", "…
$ `2003 [YR2003]` &lt;chr&gt; "22645130", "3039616", "32055883", "57941", "73907", "…
$ `2004 [YR2004]` &lt;chr&gt; "23553551", "3026939", "32510186", "57626", "76933", "…
$ `2005 [YR2005]` &lt;chr&gt; "24411191", "3011487", "32956690", "57254", "79826", "…
$ `2006 [YR2006]` &lt;chr&gt; "25442944", "2992547", "33435080", "56837", "80221", "…
$ `2007 [YR2007]` &lt;chr&gt; "25903301", "2970017", "33983827", "56383", "78168", "…
$ `2008 [YR2008]` &lt;chr&gt; "26427199", "2947314", "34569592", "55891", "76055", "…
$ `2009 [YR2009]` &lt;chr&gt; "27385307", "2927519", "35196037", "55366", "73852", "…
$ `2010 [YR2010]` &lt;chr&gt; "28189672", "2913021", "35856344", "54849", "71519", "…
$ `2011 [YR2011]` &lt;chr&gt; "29249157", "2905195", "36543541", "54310", "70567", "…
$ `2012 [YR2012]` &lt;chr&gt; "30466479", "2900401", "37260563", "53691", "71013", "…
$ `2013 [YR2013]` &lt;chr&gt; "31541209", "2895092", "38000626", "52995", "71367", "…
$ `2014 [YR2014]` &lt;chr&gt; "32716210", "2889104", "38760168", "52217", "71621", "…
$ `2015 [YR2015]` &lt;chr&gt; "33753499", "2880703", "39543154", "51368", "71746", "…</code></pre>
</div>
</div>
<p>Looks like our year columns are characters, let’s convert them to be numeric, and in the process practice pivoting.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">factbook_pop_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> factbook_pop <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick columns start with 2</span></span>
<span id="cb11-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take names to new col "year"</span></span>
<span id="cb11-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pop"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># values in cells to new col "pop"</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use mutate to remove extra year garbage</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pop =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(pop)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert pop to be numeric</span></span></code></pre></div>
</div>
<p>Now that we’ve cleaned that up, let’s go back wide to calculate which country had the largest percent population growth from 2000 to 2015.</p>
<p>Go wide! And let’s clean up those column names at the same time.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">factbook_pop_wide <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> factbook_pop_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> year, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># go from long to wide data</span></span>
<span id="cb12-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> pop) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-4">  janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>()</span></code></pre></div>
</div>
<p>Let’s now see which country had the largest percent population growth from 2000 to 2015.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">factbook_pop_wide <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perc_pop_growth =</span> ((x2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x2000)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>x2000 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, perc_pop_growth, x2000, x2015) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pull only the columns we want</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(perc_pop_growth, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick top 5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 4
  country_name             perc_pop_growth   x2000   x2015
  &lt;chr&gt;                              &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
1 Qatar                              274.   645937 2414573
2 United Arab Emirates               172.  3275333 8916899
3 Kuwait                             102.  1934901 3908743
4 Equatorial Guinea                   96.6  684977 1346973
5 Turks and Caicos Islands            94.9   18744   36538</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">factbook_pop_wide <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perc_pop_growth =</span> ((x2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x2000)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>x2000 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, perc_pop_growth, x2000, x2015) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pull only the columns we want</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_min</span>(perc_pop_growth, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick lowest 5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 4
  country_name             perc_pop_growth   x2000   x2015
  &lt;chr&gt;                              &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
1 Northern Mariana Islands           -35.9   80338   51514
2 Lithuania                          -17.0 3499536 2904910
3 Latvia                             -16.5 2367550 1977527
4 Bosnia and Herzegovina             -15.7 4179350 3524324
5 Bulgaria                           -12.1 8170172 7177991</code></pre>
</div>
</div>
<p>Now that we have some stuff, we can now see how making changes to our Quarto document affects the output.</p>
<p>Remember, there are three parts of a Quarto document:</p>
<ul>
<li>The YAML (rhymes with camel) header</li>
<li>Text</li>
<li>Code</li>
</ul>
</section>
<section id="yaml" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> YAML</h1>
<p>Horacio talked last week about the YAML. The YAML is where you can set the content that will show up on the top of your knitted document, as well as control how your document is rendered.</p>
<p>The YAML is surrounded by three dashes <code>---</code>.</p>
<p>Here’s a simple example:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb17-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is my descriptive title"</span></span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jessica Cooperstone"</span></span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"October 28, 2024"</span></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> html</span></span>
<span id="cb17-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">editor</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> visual </span></span>
<span id="cb17-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>But we can make some changes to arguments we pass to our YAML that will adjust how our resulting report looks. For example, the code below will add a table of contents, and number the sections according to the header levels we set.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb18-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My document"</span></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb18-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # set parameters under the html category</span></span>
<span id="cb18-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # add a table of contents</span></span>
<span id="cb18-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">number-sections</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # incremental numbering of sections</span></span>
<span id="cb18-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb18-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>Let’s look at what our options are for rendering to <code>.html</code> <a href="https://quarto.org/docs/output-formats/html-basics.html">here</a>.</p>
<section id="rendering-to-other-formats" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="rendering-to-other-formats"><span class="header-section-number">2.1</span> Rendering to other formats</h2>
<p>We’ve been practicing by rendering to a <code>.html</code>file, but you can render your <code>.qmd</code> document to other formats, including PDFs, Microsoft Word, Markdown, and a special one that we will talk about in the coming weeks called Github (or Github Flavored Markdown (GFM)). <a href="https://github.com/CooperstoneLab/tomato-liver-omics/blob/main/metabolomics/Dzakovich_MouseLiverMetabolomics_20221211_githubdoc.md">Here</a> is an example of what some code that comes from my team that you push to Github could look like, and could serve as supplementary material for a paper, for example.</p>
<p>You can see all the different formats you can render a Quarto document to <a href="https://quarto.org/docs/output-formats/all-formats.html">here</a>.</p>
</section>
<section id="themes" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="themes"><span class="header-section-number">2.2</span> Themes</h2>
<p>You can also change the theming of your document to make it look very pretty. Quarto comes with some complete themes, which we can look at here with <a href="https://bootswatch.com/">Bootswatch</a>. You can see the full list of complete themes <a href="https://quarto.org/docs/output-formats/html-themes.html">here</a>.</p>
<p>This website for example, uses the theme <code>flatly</code> (and <code>darkly</code> if you are a dark mode afficionado). The Quarto website uses the theme <code>cosmo</code>.</p>
<p>You can set your theme in your YAML like this:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb19-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My document"</span></span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb19-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # set parameters under the html category</span></span>
<span id="cb19-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> litera</span></span>
<span id="cb19-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</section>
<section id="practice" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="practice"><span class="header-section-number">2.3</span> Practice</h2>
<ol type="1">
<li>Try adding a theme to your <code>.qmd</code></li>
<li>Add a new parameter to your YAML - you can pick one from <a href="https://quarto.org/docs/reference/formats/html.html">here</a> and see how that goes.</li>
</ol>
</section>
</section>
<section id="text" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Text</h1>
<p>Unlike an R script (<code>.R</code>), where R by default interprets anything as code (and material that isn’t code needed to be commented out by using <code>#</code>), in an Quarto, the <em>default is text</em> (and code exists only within code chunks or backticks).</p>
<p>The text portion of the document is written in a language called <a href="https://pandoc.org/MANUAL.html#pandocs-markdown">Markdown</a>. The philosophy of Markdown is that it is easy to both write and read. If you want to learn more about markup languages I’d recommend the this <a href="https://biodash.github.io/codeclub/s02e03_rmarkdown/#i-markdown">brief explanation by Michael Broe from a past Code Club Session</a> and the <a href="https://en.m.wikipedia.org/wiki/Markup_language">Markup language wikipedia page</a>.</p>
<p>Below I’m compiling some commonly used markdown syntax.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E08_reprod_03/img/syntax.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:120.0%" alt="A list of the commonly used markdown syntax."></p>
<figcaption>Figure from <a href="https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf?_ga=2.18808953.1342527773.1652110638-1577376121.1638478125">R Markdown Reference Guide</a></figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="code" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Code</h1>
<p>Like Horacio taught us last week, Code chunks are sections of your Quarto document designated for executing code. To insert a new code chunk, you can:</p>
<ol type="1">
<li>Use the keyboard shortcut <code>Cmd</code> + <code>Option</code> + <code>I</code> (Mac) or <code>Ctrl</code> + <code>Alt</code> + <code>I</code> (Windows).</li>
<li>Type <code>```{r}</code> to start the chunk and <code>```</code> to end it, placing your code in between.</li>
<li>Use the “Add Chunk” command from the editor toolbar and select R.</li>
</ol>
<p>Code chunks appear as follows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E08_reprod_03/img/chunk-screenshot.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>You place your code on the empty line within the chunk. You can include multiple lines of code in a single chunk; however, if you find yourself needing to scroll through the chunk, it might be too lengthy.</p>
<ul>
<li>The gear icon allows you to modify chunk options, which we will discuss in more detail later.</li>
<li>The triangle with a line below it executes all code chunks that precede the current one.</li>
<li>The play button runs the current chunk.</li>
</ul>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>When you render your Quarto document, the process will execute all the code within it. This means that if your code contains errors or doesn’t function properly, your document <strong>will not be rendered</strong>.</p>
</div>
</div>
<section id="code-chunk-options" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="code-chunk-options"><span class="header-section-number">4.1</span> Code chunk options</h2>
<p>We can set different options for our code chunks to adjust if/how they are run. Here are some that we can set.</p>
<ul>
<li><code>echo: FALSE</code> runs your code chunk, displays output, but does not display code in your final doc (this is useful if you want to show a figure but not the code used to create it)</li>
<li><code>eval: FALSE</code> does not run your code, but does display it in your final doc</li>
<li><code>include: FALSE</code> runs your code but does not display the code or its output in your final doc</li>
<li><code>message: FALSE</code> prevents messages from showing up in your final doc</li>
<li><code>warning: FALSE</code> prevents earnings from showing up in your final doc</li>
<li><code>fig.height: X</code> and <code>fig.width: Y</code> will allow you to specify the dimensions of your figures (in inches)</li>
<li><code>fig.align:</code> can be set to “left”, “right”, or “center”</li>
<li><code>fig.cap: "Your figure caption"</code> will allow you to set a figure caption</li>
<li><code>fig.alt: "Your alt text"</code> will allow you to set alt text for screen readers</li>
<li><code>cache: TRUE</code> will cache results, meaning if you have a chunk that takes a long time to run, if you haven’t changed anything and you knit again, the code won’t run again but access the cache.</li>
</ul>
<p>You can find a long list of code chunk options <a href="https://quarto.org/docs/reference/cells/cells-knitr.html#code-output">here</a>.</p>
<p>We can set the code chunk options 3 ways:</p>
<ol type="1">
<li>by using the syntax <code>|#</code> within the chunk, like this:</li>
</ol>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">{r}</span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: TRUE </span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| warning: FALSE</span></span></code></pre></div>
<ol start="2" type="1">
<li>by clicking on the gear icon in the top right corner of a code chunk.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E08_reprod_03/img/chunk-screenshot.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<ol start="3" type="1">
<li>within the <code>{r}</code> of a chunk</li>
</ol>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">{r, echo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, fig.width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>}</span></code></pre></div>
<p>The options can be very useful to get your document to render exactly how you want it.</p>
</section>
<section id="practice-1" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">4.2</span> Practice</h2>
<ol type="1">
<li>Try adjusting your code chunk options and see how that affects the rendering of your document.</li>
<li>Notice what gets printed after you load the tidyverse with <code>library(tidyverse)</code> - can you get that to go away?</li>
</ol>
</section>
<section id="prep-for-next-week" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="prep-for-next-week"><span class="header-section-number">4.3</span> Prep for next week</h2>
<p>We are going to render our <code>.qmd</code> file to GitHub Flavored Markdown (GFM) to prepare to push it to GitHub next week. Let’s do that by adjusting our YAML and rendering our document.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb22-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My first GitHub document"</span></span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jessica Cooperstone"</span></span>
<span id="cb22-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"October 28, 2024"</span></span>
<span id="cb22-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> gfm</span></span>
<span id="cb22-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</section>
</section>
<section id="other-things-you-can-make-with-quarto" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Other things you can make with Quarto</h1>
<p>We have focused on using Quarto to store and annotate code, and create reports based on that information. But, there is lots more you can do with Quarto, including:</p>
<ul>
<li>Websites: we have a <a href="https://osu-codeclub.github.io/#category=website">whole series of Code Club sessions</a> on making a website with Quarto. This website is made with Quarto!</li>
<li>Presentations: you can make pretty nice looking presentations, here’s a <a href="https://osu-codeclub.github.io/#category=quarto%20presentations">Code Club session on the basics of making presentations</a></li>
<li><a href="https://quarto.org/docs/books/">Books</a></li>
<li><a href="https://quarto.org/docs/manuscripts/">Manuscripts</a></li>
<li><a href="https://quarto.org/docs/dashboards/">Dashboards</a></li>
<li>and <a href="https://quarto.org/docs/guide/">more</a></li>
</ul>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>reproducibility</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S08E08_reprod_03/</guid>
  <pubDate>Mon, 28 Oct 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S08E08_reprod_03/img/quarto-selfie.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Reproducibility 2: Introduction to Quarto</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E07_reprod_02/</link>
  <description><![CDATA[ 




<hr>
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>Quarto is an open-source scientific and technical publishing system supporting multiple programming languages. It allows seamless integration of code, outputs, and narrative in a single document.</p>
<p>Quarto documents include all code and data analysis steps, which improves understanding and reproducibility for readers. Reproducibility ensures that analyses can be independently verified, enhancing credibility and transparency.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/Quarto_MultiLanguage.png" class="img-fluid figure-img"></p>
<figcaption>Artwork by <a href="https://twitter.com/allison_horst">@allison_horst</a></figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><strong>Why Choose Quarto?</strong>
<ul>
<li>Consistent document creation for reports, articles, and documentation.</li>
<li>Supports multi-format outputs like HTML, PDF, Markdown, etc.</li>
<li>Facilitates collaborative analysis through version control systems.</li>
</ul></li>
<li><strong>Applications of Reproducibility</strong>:
<ul>
<li>Essential in academic research for replicating experiments.</li>
<li>Useful in data science for maintaining project integrity across teams.</li>
</ul></li>
</ol>
</div>
</div>
</section>
<section id="creating-a-quarto-document" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Creating a Quarto Document</h1>
<p>Quarto (<code>.qmd</code> files) is a versatile document format that enables the integration of narrative text, R code, and the results of code execution into a single document. In RStudio, navigate to <em>File &gt; New File &gt; Quarto Document</em> to create a new document.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/Create_Quarto_Doc.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Initially, this document will be titled <code>Untitled.qmd</code>. Let’s rename it to something more recognizable for future reference. To do so, go to <em>File &gt; Save As</em>, place this new Quarto document alongside your other course materials, and give it a meaningful name.</p>
<section id="practice" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="practice"><span class="header-section-number">2.1</span> Practice</h2>
<ol type="1">
<li>Start a new R Project.</li>
<li>Within your R Project, create a new Quarto document and save it.</li>
</ol>
</section>
</section>
<section id="rendering-your-quarto-document" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Rendering your Quarto document</h1>
<p>Once you create and save your Quarto document (<code>.qmd</code>), open it in RStudio, and click on <img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/rstudio-render-button.png" width="25" height="20"> Render.</p>
<p>To render the file and preview the output quickly in the RStudio IDE, simply click the <img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/rstudio-render-button.png" width="25" height="20"> Render button or use the keyboard shortcut (⇧⌘K).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/rstudio-render.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>If you prefer to have the file render automatically every time you save, you can enable the “Render on Save” option located on the editor toolbar. This ensures the preview updates each time you re-render the document. The side-by-side preview feature supports both HTML and PDF outputs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/rstudio-render-on-save.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Additionally, more options can be discovered by clicking the gear icon next to the <img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/rstudio-render-button.png" width="25" height="20"> Render button.</p>
<section id="how-does-it-works" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="how-does-it-works"><span class="header-section-number">3.1</span> How does it works</h2>
<p>When you render a Quarto document, the process begins with <a href="https://yihui.org/knitr/">knitr</a> executing all the code chunks and generating a new markdown (<code>.md</code>) document that includes both the code and its output. This Markdown file is then processed by <a href="https://pandoc.org">Pandoc</a>, which creates the final, polished format. The <img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/rstudio-render-button.png" width="25" height="20"> Render button automates and organizes these steps, executing them in the correct sequence for you.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://quarto.org/docs/get-started/"><img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/Quarto_Rendering.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
<p>During the rendering process, Quarto creates a new file that includes the selected text, code, and results from the <code>.qmd</code> file. This new file can be formatted as an <a href="https://quarto.org/docs/output-formats/html-basics.html">HTML</a>, <a href="https://quarto.org/docs/output-formats/pdf-basics.html">PDF</a>, <a href="https://quarto.org/docs/output-formats/ms-word.html">MS Word</a> document, <a href="https://quarto.org/docs/presentations/">presentation</a>, <a href="https://quarto.org/docs/websites/">website</a>, <a href="https://quarto.org/docs/books/">book</a>, <a href="https://quarto.org/docs/interactive/">interactive document</a>, or <a href="https://quarto.org/docs/output-formats/all-formats.html">other formats</a>.</p>
</section>
<section id="practice-1" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">3.2</span> Practice</h2>
<ol type="1">
<li>Render your Quarto document.</li>
<li>Use the gear icon to select your preferred preview option, such as displaying it in the viewer panel or opening it in a new window, after rendering.</li>
</ol>
</section>
</section>
<section id="components-of-a-quarto-document" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Components of a Quarto document</h1>
<p>There are 3 main parts of a Quarto document:</p>
<ol type="1">
<li>The YAML (rhymes with camel) header</li>
<li>Text</li>
<li>Code</li>
</ol>
<section id="yaml-header" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="yaml-header"><span class="header-section-number">4.1</span> YAML Header</h2>
<p>The YAML (Yet Another Markdown Language, or YAML Ain’t Markup Language) is located at the top of your document and is enclosed by “—” lines.</p>
<p>YAML is where you can set the content that will appear at the beginning of your compiled document. For instance:</p>
<ul>
<li><strong>title</strong>: “Your title here” (make sure it is enclosed in quotes)</li>
<li><strong>author</strong>: “The author’s name” (again, in quotes)</li>
<li><strong>date</strong>: The date you want to display at the top of your document, enclosed in quotes. If you wish to learn more about other options, see <a href="https://quarto.org/docs/reference/dates.html" class="uri">https://quarto.org/docs/reference/dates.html</a>.</li>
<li><strong>output</strong>: Specifies the format of the compiled document. For this class, I recommend using <code>html_document</code>, as it offers the richest format. Your output will be a <code>.html</code> file, which you can save or share.</li>
</ul>
<p>Here’s a simple example:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is my descriptive title"</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Horacio Lopez-Nicora"</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"October 21, 2024"</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> html</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">editor</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> visual </span></span>
<span id="cb1-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>Quarto supports various format types, such as HTML, PDF, and Word documents. In this course, we will focus exclusively on HTML. The example below demonstrates how you can modify the YAML to include a table of contents (<code>toc</code>). The YAML provided below highlights several options available for HTML output.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is my descriptive title"</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Horacio Lopez-Nicora"</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> today</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date-format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> long</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>A full list of HTML format options can be found at the <a href="https://quarto.org/docs/reference/formats/html.html">HTML Options</a> page on the quarto website.</p>
</section>
<section id="text" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="text"><span class="header-section-number">4.2</span> Text</h2>
<p>By default, a Quarto document opens in <strong>Visual Editor</strong> mode. This user-friendly visual interface resembles writing in programs like Word or Google Docs, offering options for clickable buttons such as Bold (or keyboard shortcut ⌘B), Italicize (or keyboard shortcut ⌘I), and adding bulleted lists, among others.</p>
<p>Alternatively, switching to <strong>Source Editor</strong> mode provides a text-based editor where these buttons are not available. In this mode, familiarity with Markdown syntax is necessary.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Markdown Syntax:</strong> see cheatsheet here:<a href="https://www.markdownguide.org/cheat-sheet/" class="uri">https://www.markdownguide.org/cheat-sheet/</a>) or in RStudio <em>Help &gt; Markdown Quick Reference</em>.</p>
</div>
</div>
</section>
<section id="code" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="code"><span class="header-section-number">4.3</span> Code</h2>
<p>Code chunks are sections of your Quarto document designated for executing code. To insert a new code chunk, you can:</p>
<ol type="1">
<li>Use the keyboard shortcut <code>Cmd</code> + <code>Option</code> + <code>I</code> (Mac) or <code>Ctrl</code> + <code>Alt</code> + <code>I</code> (Windows).</li>
<li>Type <code>```{r}</code> to start the chunk and <code>```</code> to end it, placing your code in between.</li>
<li>Use the “Add Chunk” command from the editor toolbar and select R.</li>
</ol>
<p>Code chunks appear as follows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/chunk_screenshot.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>You place your code on the empty line within the chunk. You can include multiple lines of code in a single chunk; however, if you find yourself needing to scroll through the chunk, it might be too lengthy.</p>
<ul>
<li>The gear icon allows you to modify chunk options, which we will discuss in more detail later.</li>
<li>The triangle with a line below it executes all code chunks that precede the current one.</li>
<li>The play button runs the current chunk.</li>
</ul>
<p>You can also include comments within a code chunk by using the # symbol to comment them out.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A very interesting comment</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Super_Code</span>()</span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>When you render your Quarto document, the process will execute all the code within it. This means that if your code contains errors or doesn’t function properly, your document <strong>will not be rendered</strong>.</p>
</div>
</div>
<p>In Quarto, you can use inline code to embed code directly within your document’s text. To apply this syntax, simply enclose the expression in backticks. For example:</p>
<p>The sum of 6 and 6 is 12. In this case, <code>12</code> was generated with the following inline code <code>`r 6+6`</code>.</p>
<section id="enhancing-your-code-chunks-with-options" class="level3" data-number="4.3.1">
<h3 data-number="4.3.1" class="anchored" data-anchor-id="enhancing-your-code-chunks-with-options"><span class="header-section-number">4.3.1</span> Enhancing Your Code Chunks with Options</h3>
<p>You can enhance your code chunks by adding options using <code>#|</code>. This provides R with further instructions on executing your code and compiling your document. <a href="https://quarto.org/docs/reference/cells/cells-knitr.html#code-output">HERE</a> are some common examples.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">{r}</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: FALSE</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: TRUE</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: TRUE</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span></code></pre></div>
<p>This occurs after the code chunk is rendered.</p>
<div class="cell" data-layout-align="center">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="practice-2" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="practice-2"><span class="header-section-number">4.4</span> Practice</h2>
<p>Now, let’s edit our Quarto document.</p>
<ol type="1">
<li>In your Quarto document’s YAML section, include a subtitle and specify a date format. Additionally, enable a table of contents for improved navigation.</li>
<li>Make use of the Visual editor to draft text. Regularly switch between the visual and source editors to familiarize yourself with <a href="https://rmarkdown.rstudio.com/lesson-8.html">RMarkdown</a>.</li>
<li>Integrate code chunks while configuring them with the following options: execute the code but hide the code itself in the output.</li>
</ol>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>reproducibility</category>
  <category>quarto</category>
  <guid>https://osu-codeclub.github.io/posts/S08E07_reprod_02/</guid>
  <pubDate>Mon, 21 Oct 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S08E07_reprod_02/img/Quarto.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Reproducibility 1:  Intro, File Organization, and RStudio Projects</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E06_reprod_01/</link>
  <description><![CDATA[ 




<hr>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E06_reprod_01/img/rproj.png" class="img-fluid figure-img"></p>
<figcaption>Artwork by <a href="https://twitter.com/allison_horst">@allison_horst</a></figcaption>
</figure>
</div>
<p><br></p>
<section id="introduction-a-series-on-reproducibility" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction-a-series-on-reproducibility"><span class="header-section-number">1</span> Introduction: A series on reproducibility</h2>
<p>Today is the first of a series of 6 Code Club sessions that will cover several topics under the umbrella of “reproducibility”.</p>
<p>What do we mean by <strong>reproducibility</strong>? Your research is reproducible when third parties are <em>able to perform the same analysis on your data, and produce the same results.</em></p>
<p>Reproducibility is perhaps a low bar compared to the related concept of <strong>replicability</strong>, which is the ability to produce the same (qualitative) results when applying the <em>same analysis to different data</em>. Here is a helpful table showing these two and two other related concepts:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E06_reprod_01/img/reproducible-matrix.jpg" class="img-fluid figure-img"></p>
<figcaption>From <a href="https://book.the-turing-way.org/reproducible-research/reproducible-research">The Turing Way</a></figcaption>
</figure>
</div>
<p>For example:</p>
<ul>
<li><p>Say that you’ve written a paper in which you present the results of one of your research projects. When this research is fully reproducible, it means that someone else should be able to be able to run the exact same analysis and produce all the results and figures using your paper and its associated documentation.</p></li>
<li><p>Relatedly, when you work in a reproducible manner and you abandon an analysis for say two years, you will be able to pick up from where you left off without much trouble.</p></li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<section id="using-r-is-already-a-big-step-in-the-right-direction" class="level3">
<h3 class="anchored" data-anchor-id="using-r-is-already-a-big-step-in-the-right-direction">Using R is already a big step in the right direction!</h3>
<blockquote class="blockquote">
<p><em>“The most basic principle for reproducible research is: Do everything via code.”</em> —Karl Broman, University of Wisconsin-Madison</p>
</blockquote>
<p>It is inherently more reproducible to write code, such as in R, as opposed to clicking around in a program with a Graphical User Interface (GUI).</p>
<p>In addition, R is open source and freely available. If you use a proprietary program that requires an expensive license, your work may be reproducible in principle, but won’t be in practice for many people.</p>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="additional-aspects-the-plan-for-this-series" class="level3">
<h3 class="anchored" data-anchor-id="additional-aspects-the-plan-for-this-series">Additional aspects &amp; the plan for this series</h3>
<p>Research that is fully reproducible should use a set of tools and best-practice related to:</p>
<ul>
<li>File organization</li>
<li>File version management</li>
<li>Project documentation</li>
<li>Code style and organization</li>
<li>Data and code sharing</li>
<li>Software management</li>
</ul>
<p>This series of Code Club sessions will not extensively cover the above, but we will cover three topics that touch on all of them:</p>
<ol type="1">
<li><strong>File organization and “RStudio Projects” (today)</strong></li>
<li>Combining code and text (“literate programming”) with Quarto (sessions 2 and 3)</li>
<li>File version control and code sharing with Git and GitHub (sessions 4 and 5)</li>
<li>Using RStudio at OSC (session 6, part I)</li>
<li>R version &amp; package management (session 6, part II)</li>
</ol>
<p><br></p>
</section>
</section>
<section id="research-project-file-organization" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="research-project-file-organization"><span class="header-section-number">2</span> Research project file organization</h2>
<section id="recommendation-1-use-one-folder-hierarchy-for-one-project" class="level3">
<h3 class="anchored" data-anchor-id="recommendation-1-use-one-folder-hierarchy-for-one-project">Recommendation 1: Use one folder hierarchy for one project</h3>
<p>Using one folder, or really a hierarchy of folders, for one project means that you:</p>
<ul>
<li>Don’t mix files for multiple distinct projects inside one folder.</li>
<li>Don’t keep files for one project in multiple places.</li>
</ul>
<p>For example:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E06_reprod_01/img/proj-dirs-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%"></p>
<figcaption>Two project folder hierarchies, nicely separated and self-contained.</figcaption>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>When you have a single folder hierarchy for each project, it is:</p>
<ul>
<li>Easier to find files and to share your project, harder to accidentally throw away stuff, etc.</li>
<li>Possible to use <em>relative paths</em> within a project’s scripts, which improves reproducibility (see below).</li>
</ul>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="recommendation-2-separate-different-kinds-of-files-using-a-consistent-subfolder-structure" class="level3">
<h3 class="anchored" data-anchor-id="recommendation-2-separate-different-kinds-of-files-using-a-consistent-subfolder-structure">Recommendation 2: Separate different kinds of files using a consistent subfolder structure</h3>
<p>Within your project’s directory hierarchy:</p>
<ul>
<li>Separate code from data.</li>
<li>Separate raw data from processed data and from results.</li>
</ul>
<p>Also:</p>
<ul>
<li>Treat raw data as read-only.</li>
<li>Treat generated output as somewhat disposable and as possible to regenerate.</li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<p>For example, here is one good way of organizing a (bioinformatics) research project:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E06_reprod_01/img/proj-ex_annot.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="directories-and-paths" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="directories-and-paths"><span class="header-section-number">3</span> Directories and paths</h2>
<p>First, <strong>“directory”</strong> (<strong>“dir”</strong> for short) is just <em>another word for folder</em> that you will see commonly used for anything coding-related.</p>
<p>Second, your <strong>“working directory”</strong> is the <em>directory where you are currently located</em>. When you open R (or Python, or a Terminal, etc.), it will always have a starting point at a specific location in your computer<sup>1</sup>.</p>
<p>There are functions to <em>change your working dir</em> as well as ways to refer to any location on the computer regardless of whether you are there. That brings us to the third term, <strong>path</strong>, which is a specification of the location of a file or folder on the computer.</p>
<p>The key concept here is that folders are separated by slashes – forward slashes in Mac and Linux, for example:</p>
<pre class="bash-out-solo"><code>/Users/John Doe/Desktop/cats.png</code></pre>
<p>…and backward slashes in Windows, for example:</p>
<pre class="bash-out-solo"><code>C:\Users\John Doe\Desktop\cats.png</code></pre>
<p>There are two types of paths:</p>
<ul>
<li><p><strong>Absolute paths</strong> start from a root (top-level) directory, and correctly point to a file or folder regardless of what your working dir is. If you think of a path as a way to point to a geographic location, then absolute paths are like GPS coordinates. The two paths above are examples of absolute (or “full”) paths.</p></li>
<li><p><strong>Relative paths</strong> start from a specific <em>working dir</em> (and won’t work if you’re elsewhere). If you think of a path as a way to point to a geographic location, then relative paths are like directions like “Take the second left”. For example:</p></li>
</ul>
<pre class="bash-out-solo"><code>results/fastqc/sampleA.html</code></pre>
<hr style="height:1pt; visibility:hidden;">
<details>
<summary>
Could a file name by itself, like <code>myscript.R</code>, be considered a path? If so, what kind, and what is the implied location of the file?
</summary>
<p>A file name that does not include a folder, like <code>myscript.R</code>, can indeed be considered a path: a relative path that assumes the file is in your current working directory.</p>
</details>
<details>
<summary>
Don’t absolute paths sound better? What could be a disadvantage of them?
</summary>
<p>Absolute paths:</p>
<ul>
<li>Don’t generally work across computers</li>
<li>Break when your move a project folder hierarchy to a a different place on your computer</li>
</ul>
<p>On the other hand, relative paths that use the root of the project folder hierarchy as the working dir, also work when moving the folder within and between computers.</p>
<hr style="height:1pt; visibility:hidden;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E06_reprod_01/img/proj-dirs-2.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
<figcaption>Two project dir hierarchies, and the absolute and relative path to a (FASTQ) file.</figcaption>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E06_reprod_01/img/proj-dirs-3.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
<figcaption>Now everything was moved into <code>Dropbox</code>.<br>The absolute path has changed, but the relative path remains the same.</figcaption>
</figure>
</div>
</details>
<p><br></p>
</section>
<section id="getting-and-setting-the-working-directory-in-r" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="getting-and-setting-the-working-directory-in-r"><span class="header-section-number">4</span> Getting and setting the working directory in R</h2>
<p>In R, we can see what our working directory is using the function <code>getwd()</code> (short for “get working dir”):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] "/Users/jessicacooperstone/Library/CloudStorage/OneDrive-TheOhioStateUniversity/BuckeyeBox Data/JLC_Files/OSU/research/code club/osu-codeclub.github.io/posts/S08E06_reprod_01"</code></pre>
</div>
</div>
<p>You can see that the output path is <strong>MY</strong> working directory – yours will be different as the set up of your computer organization structure is different from mine (and recall that you will see backslashes if you have Windows).</p>
<p>You can change (set) your working directory using the function <code>setwd()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/this/should/be/your/working-directory/path"</span>)</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="use-an-rstudio-project-instead" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="use-an-rstudio-project-instead"><span class="header-section-number">5</span> Use an RStudio Project instead!</h2>
<p><strong>RStudio Projects are an RStudio-specific concept that create a special file (<code>.Rproj</code>)</strong>, primarily to designate a directory as the working directory for everything within it, and to make it easy to switch between projects.</p>
<hr style="height:1pt; visibility:hidden;">
<section id="create-an-rstudio-project-for-code-club" class="level3">
<h3 class="anchored" data-anchor-id="create-an-rstudio-project-for-code-club">Create an RStudio Project for Code Club</h3>
<ul>
<li><p>You may already have a folder on your computer for all things Code Club. <strong>If not, please create one now</strong>. You can do this outside of R in your regular file browser (or if you feel adventurous you can use the R function <code>dir.create()</code>, e.g.&nbsp;<code>dir.create("path/to/your/dir")</code>).</p></li>
<li><p>Click <code>File</code> (top menu bar) &gt; <code>New Project</code>, and then select <code>Existing Directory</code>. Select the folder for Code Club that you created in the previous step.</p></li>
</ul>
<p>After RStudio automatically reloads, <strong>the R working directory will be set to the place where your RStudio Project file is located.</strong></p>
<p>Therefore, you should see the file ending in <code>.Rproj</code> in the RStudio <code>Files</code> tab in the lower right pane. Also, you can check your working dir:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span></code></pre></div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="why-rstudio-projects-are-useful" class="level3">
<h3 class="anchored" data-anchor-id="why-rstudio-projects-are-useful">Why RStudio Projects are useful</h3>
<p>In brief, RStudio Projects help you to organize your work and make it more reproducible:</p>
<ul>
<li><p>When using Projects, you can avoid manually setting your working directory and <strong>can therefore use relative file paths</strong> to refer to files within the project. This way, even if you move the project directory, or copy it to a different computer, the same paths will still work. (Just make sure your Project is in the appropriate location: in the top-level dir of your folder hierarchy for your research project or stuff like Code Club.)</p></li>
<li><p>Projects encourage you to organize research projects inside self-contained folder hierarchies exactly as recommended above.</p></li>
<li><p>They record which scripts (and R Markdown files) are open in RStudio, and will reopen all of those when you reopen the project. This becomes quite handy, say, when you work on three different projects, each of which uses a number of scripts.</p>
<p>Additionally, when you switch between Projects, R will restart, which is a good thing, since you don’t want to randomly carry over objects and loaded packages across research projects.</p></li>
</ul>
<hr>
<p><br></p>
</section>
</section>
<section id="bonus-file-naming" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="bonus-file-naming"><span class="header-section-number">6</span> Bonus: File naming</h2>
<p>We’ll go through three principles for good file names (<a href="https://speakerdeck.com/jennybc/how-to-name-files">from Jenny Bryan</a>) — good file names:</p>
<ul>
<li>Are machine-readable</li>
<li>Are human-readable</li>
<li>Play well with default file ordering</li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<section id="machine-readable" class="level3">
<h3 class="anchored" data-anchor-id="machine-readable">Machine-readable</h3>
<p>Consistent and informative naming helps you to programmatically find and process files.</p>
<ul>
<li><p>In file names, provide <strong>metadata</strong> like Sample ID, date, and treatment – with such file names, you can easily select samples from e.g.&nbsp;a certain month or treatment:</p>
<ul>
<li><code>sample032_2016-05-03_low.txt</code><br>
</li>
<li><code>samples_soil_treatmentA_2019-01.txt</code></li>
</ul></li>
<li><p>Avoid spaces in file names. More generally, only use the following in file names:</p>
<ul>
<li><p>Alphanumeric characters <kbd>A-Z</kbd>, <kbd>a-z</kbd>, <kbd>0-9</kbd></p></li>
<li><p>Underscores <kbd>_</kbd></p></li>
<li><p>Hyphens (dashes) <kbd>-</kbd></p></li>
<li><p>Periods (dots) <kbd>.</kbd></p></li>
</ul></li>
</ul>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="human-readable" class="level3">
<h3 class="anchored" data-anchor-id="human-readable">Human-readable</h3>
<blockquote class="blockquote">
<p><em>“Name all files to reflect their content or function.</em> <em>For example, use names such as bird_count_table.csv, manuscript.md,</em> <em>or sightings_analysis.py.</em>”<br>
— <a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510">Wilson et al.&nbsp;2017</a></p>
</blockquote>
<p>One good way to combine machine- and human-readable (opinionated recommendations):</p>
<ul>
<li>Use <strong>underscores</strong> (<kbd>_</kbd>) to delimit units you may later want to separate on: sampleID, treatment, date.</li>
<li>Within such units, use <strong>dashes</strong> (<kbd>-</kbd>) to delimit words: <code>grass-samples</code>.</li>
<li>Limit the use of <strong>periods</strong> (<kbd>.</kbd>) to indicate file extensions.</li>
<li>Generally <em>avoid capitals</em>.</li>
</ul>
<p>For example:</p>
<pre class="bash-out-solo"><code>mmus001_treatmentA_filtered-by-quality.bam
mmus001_treatmentA_filtered-by-quality.bam
.
.
mmus086_treatmentA_filtered-by-quality.bam</code></pre>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="play-well-with-default-file-ordering" class="level3">
<h3 class="anchored" data-anchor-id="play-well-with-default-file-ordering">Play well with default file ordering</h3>
<ul>
<li>Use <strong>leading zeros</strong> for lexicographic sorting: <code>sample005</code>.</li>
<li><strong>Dates</strong> should always be written as <code>YYYY-MM-DD</code>: <code>2020-10-11</code>.</li>
<li><strong>Group similar files together</strong> by starting with same phrase, and <strong>number scripts</strong> by execution order:</li>
</ul>
<pre class="bash-out-solo"><code>DE-01_normalize.R
DE-02_test.R
DE-03_process-significant.R</code></pre>
<p><br></p>
<hr>
<p><br></p>
<section id="further-resources" class="level4">
<h4 class="anchored" data-anchor-id="further-resources">Further resources</h4>
<ul>
<li><a href="https://book.the-turing-way.org/reproducible-research">“The Turing Way” E-book on Reproducible Research</a></li>
<li>Wilson et al.&nbsp;2017, PLOS Computational Biology: “<a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510">Good enough practices in scientific computing</a>”</li>
<li>Kieran Healy: <a href="https://plain-text.co/">“The Plain Person’s Guide to Plain Text Social Science”</a></li>
</ul>


</section>
</section>
</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p> You can think of this along the lines of opening a file browser (Finder / File Explorer etc.) – it will always have a starting point, and you can move around to go to other locations.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reproducibility</category>
  <guid>https://osu-codeclub.github.io/posts/S08E06_reprod_01/</guid>
  <pubDate>Mon, 14 Oct 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Wrangling 5: Tidy Data and Pivoting</title>
  <dc:creator>Aaron Max Wiedemer and Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E05_wrangling_05/</link>
  <description><![CDATA[ 




<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E05_wrangling_05/img/tidy_data_img.jpeg" title="Tidy Data By Julia Lowndes and Allison Horst" class="img-fluid figure-img"></p>
<figcaption>Tidy Data By Julia Lowndes and Allison Horst</figcaption>
</figure>
</div>
<section id="overview" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Overview</h1>
<div class="callout callout-style-default callout-tip callout-titled" title="Document Summary">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Document Summary
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><strong>tidy data</strong> : a way of organizing data where <em>columns contain variables</em> and <em>rows contain observations</em></p>
<p><strong>Terms</strong></p>
<ul>
<li><p><strong>variable</strong> : contains values of an attribute that is measured (i.e., length, sex, pH, color)</p></li>
<li><p><strong>observation</strong> : contains all the values measured on the same unit (i.e., person, sample, day)</p></li>
</ul>
<p><strong>Functions</strong></p>
<ul>
<li><p><strong>pivot_longer()</strong> : a function that “lengthens” data by transforming a set of columns containing values into two columns - one containing the previous column names, and the other contain all of the values. This is the inverse of <code>pivot_wider()</code></p></li>
<li><p><strong>pivot_wider()</strong> : a function that “widens” data by transforming a set of two columns (though can be more) containing names and values into a larger set of columns. This is the inverse of <code>pivot_longer()</code></p></li>
</ul>
</div>
</div>
</div>
<section id="starting-note" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="starting-note"><span class="header-section-number">1.1</span> Starting note</h2>
<p>Much of this page is inspired from and has examples from - <a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html">Hadley Wickam’s Tidy Data</a> - <a href="https://r4ds.had.co.nz/tidy-data.html#wider">R for Data Science</a></p>
</section>
</section>
<section id="introduction" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Introduction</h1>
<p>So far, we’ve been learning a lot of functions within the <code>tidyverse</code> to manipulate datasets</p>
<ul>
<li><code>filter()</code> to choose rows</li>
<li><code>select()</code> to choose columns</li>
<li><code>arrange()</code> to sort data</li>
<li><code>rename()</code> to change data names</li>
<li><code>mutate()</code> to add and change data</li>
<li><code>summarise()</code> to produce data summaries</li>
</ul>
<p>Today we will be learning more about the structure of datasets, specifically <strong>tidy data</strong> .</p>
<p>Most of what we have been working in code club this semester has actually been using tidy data, as most functions in the <strong>tidyverse</strong> are used to create or manipulate tidy data.</p>
<p>While we have been focusing on how to manipulate tidy data, today we will be learning two functions that can be used to manipulate and more powerfully create tidy data - <code>pivot_longer()</code> and <code>pivot_wider()</code></p>
<section id="set-up" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="set-up"><span class="header-section-number">2.1</span> Set up</h2>
<p>Lets get our favorite library loaded up</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("tidyverse") # delete first hash and run to install if you havent already</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
</section>
</section>
<section id="tidy-data" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Tidy data</h1>
<section id="data-structure" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="data-structure"><span class="header-section-number">3.1</span> Data Structure</h2>
<p>Most datasets we work with in R are organized in a roughly rectangular grid-like format made up of <strong>rows</strong> and <strong>columns</strong> that contain some values.</p>
<p>Each value in a dataset belongs to some <strong>variable</strong> and some <strong>observation</strong>.</p>
<ul>
<li>A <strong>variable</strong> contains values of an attribute that was measured (i.e., length, sex, pH, color)</li>
<li>An <strong>observation</strong> contains all the values measured on the same thing (unit) (i.e., person, sample, day)</li>
</ul>
<p>Examples:</p>
<blockquote class="blockquote">
<p>If I’m measuring the height of a population each person will be one <strong>observation</strong> and the variable I am measuring is <strong>height</strong></p>
</blockquote>
<blockquote class="blockquote">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_in =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb3-3"> )</span>
<span id="cb3-4"></span>
<span id="cb3-5">height</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 43 × 1
   height_in
       &lt;dbl&gt;
 1      56.3
 2      80.8
 3      64.0
 4      61.1
 5      53.3
 6      69.4
 7      71.2
 8      87.3
 9      71.3
10      58.6
# ℹ 33 more rows</code></pre>
</div>
</div>
</blockquote>
<blockquote class="blockquote">
<p>If I’m counting the number of geese I see on campus throughout the year every day, the variables will be <strong>number of geese I see, and the day I count them on</strong>. The observation will be <strong>one instance of me counting geese on a specific day</strong></p>
</blockquote>
<blockquote class="blockquote">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">geese <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>),</span>
<span id="cb5-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geese_number =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb5-4"> )</span>
<span id="cb5-5"></span>
<span id="cb5-6">geese</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 365 × 2
     day geese_number
   &lt;int&gt;        &lt;dbl&gt;
 1     1           14
 2     2           29
 3     3           12
 4     4           25
 5     5           20
 6     6           42
 7     7           16
 8     8           19
 9     9           35
10    10           32
# ℹ 355 more rows</code></pre>
</div>
</div>
</blockquote>
<p>This may sound like review, but in practice can be somewhat tricky</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Looking at the <code>diamonds</code> dataset, what is the observation and variable of the the value <code>diamonds[5,7]</code> ?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">diamonds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 1
  price
  &lt;int&gt;
1   335</code></pre>
</div>
</div>
<p>The observation here is the <strong>5th diamond</strong> and the variable we are measuring is <strong>price</strong></p>
</details>
</div>
</div>
</section>
<section id="pre-tidy-date" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="pre-tidy-date"><span class="header-section-number">3.2</span> Pre-Tidy Date</h2>
<blockquote class="blockquote">
<p>“All tidy data sets are alike. Each messy dataset is messy in its own way” - Hadley Wickham.</p>
</blockquote>
<p>At risk of stating the obvious, organizing values in datasets can be accomplished in many ways</p>
<p>Here with an example of table of student grades on several assignments adapted from <a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html">Hadley Wickam’s Tidy Data</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb9-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>name,    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz1, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz2, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>test1,</span>
<span id="cb9-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>,  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>,</span>
<span id="cb9-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb9-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>,</span>
<span id="cb9-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span></span>
<span id="cb9-7">  )</span>
<span id="cb9-8"></span>
<span id="cb9-9">classroom</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 4 × 4
  name   quiz1 quiz2 test1
  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;
1 Billy  &lt;NA&gt;  67    75   
2 Suzy   44    &lt;NA&gt;  &lt;NA&gt; 
3 Lionel 86    74    84   
4 Jenny  94    98    88   </code></pre>
</div>
</div>
<p>There is more than one way to organize this information in a table - for instance here we can flip (transpose) the table to have student names in columns and assessments in rows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb11-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>assessment, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Billy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Suzy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Lionel, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Jenny,</span>
<span id="cb11-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>,</span>
<span id="cb11-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>,</span>
<span id="cb11-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span></span>
<span id="cb11-6">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 5
  assessment Billy Suzy  Lionel Jenny
  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;
1 quiz1      &lt;NA&gt;  44    86     94   
2 quiz2      67    &lt;NA&gt;  74     98   
3 test1      75    &lt;NA&gt;  84     88   </code></pre>
</div>
</div>
<p>This data isn’t <strong>tidy data</strong> yet though.</p>
<div class="callout callout-style-default callout-note callout-titled" title="SIde Note: Different Organizations Serve Different Purposes">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
SIde Note: Different Organizations Serve Different Purposes
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Different ways of organizing data can serve different purposes - some ways of organizing data are great for collecting data, some good for analyzing data, some both, and some neither.</p>
</div>
</div>
</div>
<section id="the-look-of-tidy-data" class="level3" data-number="3.2.1">
<h3 data-number="3.2.1" class="anchored" data-anchor-id="the-look-of-tidy-data"><span class="header-section-number">3.2.1</span> The look of tidy data</h3>
<p>Roughly speaking, in tidy data <strong>columns contain variables</strong> and <strong>rows contain observations</strong></p>
<p>Here’s the dataset manually remade in a tidy format</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">tidy_classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>( <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb13-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assessment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)),</span>
<span id="cb13-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb13-4"></span>
<span id="cb13-5"></span>
<span id="cb13-6">tidy_classroom</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 3
   name   assessment grade
   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;
 1 Billy  quiz1      &lt;NA&gt; 
 2 Billy  quiz2      67   
 3 Billy  test1      75   
 4 Jenny  quiz1      94   
 5 Jenny  quiz2      98   
 6 Jenny  test1      88   
 7 Lionel quiz1      86   
 8 Lionel quiz2      74   
 9 Lionel test1      84   
10 Suzy   quiz1      44   
11 Suzy   quiz2      &lt;NA&gt; 
12 Suzy   test1      &lt;NA&gt; </code></pre>
</div>
</div>
<p>Here, the values, variables, and observations are more clear</p>
<p>The variables are</p>
<ol type="1">
<li>the <strong>names</strong> of the students (in the <code>name</code> column)</li>
<li>the <strong>assessments</strong> (in the <code>assessment</code> column)</li>
<li>the <strong>grades</strong> (in the <code>grade</code> column)</li>
</ol>
<p>Each observation here is <strong>a particular grade, on each assessmnet, for each student</strong>.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Note">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Look at the <strong>dimensions</strong> of this table. From this, we can immediatly tell the number of variables, and the number of observations in this dataset</p>
</div>
</div>
</div>
</section>
</section>
<section id="tidy-data-definition" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="tidy-data-definition"><span class="header-section-number">3.3</span> Tidy data definition</h2>
<p>Tidy data is a standard way of organizing data, and is defined by 3 things</p>
<p><strong>In tidy data</strong></p>
<ol type="1">
<li><strong>Each variable is one column</strong>; columns are single variables</li>
<li><strong>Each observation is one row</strong>; rows are single observations</li>
<li><strong>Each value is a cell</strong>; cells are values</li>
</ol>
<p><strong>Messy data</strong> is defined as any data organization that is not tidy data</p>
<section id="why-use-tidy-data" class="level4">
<h4 class="anchored" data-anchor-id="why-use-tidy-data">Why use tidy data?</h4>
<ul>
<li><p>Having data structured as tidy data makes it easier to manipulate and analyze data in <strong>tidy R</strong> - in fact, <em>most of the functions we have been learning up to now have been preformed on tidy data</em> - this is the <strong>tidyverse</strong> after all</p></li>
<li><p>Some functions require tidy data, and most operations on data in the <strong>tidyverse</strong> are made significantly easier by having your data as tidy data (i.e., data visualization, statistics)</p></li>
<li><p>Having data in a standardized format makes it easier to collaborate on</p></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="Order of Columns">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Order of Columns
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><em>A note on ordering of columns</em> : While order of columns doesn’t really matter for data to be considered tidy, it is standard and common practice to put meta data (aka fixed or random variables) first, followed by the columns for measured data (i.e., sample name columns go first)</p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="making-data-tidy---pivot_longer-and-pivot_wider" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Making data tidy - <code>pivot_longer()</code> and <code>pivot_wider()</code></h1>
<p>Not all data is tidy, which creates the need for us to know how to clean it.</p>
<section id="pivoting-longer" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="pivoting-longer"><span class="header-section-number">4.1</span> Pivoting Longer</h2>
<p>One common problem mentioned in R for data science and by Hadley Wickham is when you <strong>have column names that are actually variable values</strong> (when a single variable is spread across multiple columns)</p>
<div class="callout callout-style-default callout-note callout-titled" title="Sidenote">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Sidenote
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Having a set of columns with variable values for names is actually very common in metabomolics or genomics data, where column titles are metabolites, genes, taxa, etc.</p>
</div>
</div>
</div>
<p>Here is a dataset with this issue - This data denotes the population of Afghanistan, Brazil, and China for the years 1999 and 2000</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">table4b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 3
  country         `1999`     `2000`
  &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;
1 Afghanistan   19987071   20595360
2 Brazil       172006362  174504898
3 China       1272915272 1280428583</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>What are the variables in the <code>table4b</code> data?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The variables are</p>
<ul>
<li><strong>country</strong></li>
<li><strong>year</strong></li>
<li><strong>population</strong></li>
</ul>
</details>
</div>
</div>
<p>This format of data is sometimes called <strong>wide</strong> data, where the row of column names (the very first row) actually contains variable values.</p>
<p>In this data it doesn’t look very wide, but imagine how much wider if data was taken every year up to or past this year. Wide data tends to get wide very quickly.</p>
<blockquote class="blockquote">
<p>For an example of very wide data, look at the <code>who</code> dataset</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(who)</span>
<span id="cb17-2"> who</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 7,240 × 60
   country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544
   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;
 1 Afghani… AF    AFG    1980          NA           NA           NA           NA
 2 Afghani… AF    AFG    1981          NA           NA           NA           NA
 3 Afghani… AF    AFG    1982          NA           NA           NA           NA
 4 Afghani… AF    AFG    1983          NA           NA           NA           NA
 5 Afghani… AF    AFG    1984          NA           NA           NA           NA
 6 Afghani… AF    AFG    1985          NA           NA           NA           NA
 7 Afghani… AF    AFG    1986          NA           NA           NA           NA
 8 Afghani… AF    AFG    1987          NA           NA           NA           NA
 9 Afghani… AF    AFG    1988          NA           NA           NA           NA
10 Afghani… AF    AFG    1989          NA           NA           NA           NA
# ℹ 7,230 more rows
# ℹ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,
#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,
#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,
#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,
#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,
#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;, …</code></pre>
</div>
</div>
</blockquote>
<p>To make this data tidy, we need to the the column names (the year variable) and turn it into its own column (called <code>year</code>), and take all of the population data and put that into a second variable column (called <code>population</code>)</p>
<p>Previously with the <code>classroom</code> data we did this manually, but there is a much better way to pivot from wide messy data, to longer tidy data with the function <code>pivot_longer</code></p>
<p>Lets look at the help file for it</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">?pivot_longer</span></code></pre></div>
</div>
<p>From this, we see that the <code>pivot_longer</code> function can take a lot of aruguments, but there are only a few important ones</p>
<ol type="1">
<li><code>cols</code>, in which we select the columns to pivot (i.e., the columns whos names contain a variable)</li>
<li><code>names_to</code>, in which we create a new column for where our old column names are to be put into</li>
<li><code>values_to</code>, in which we create a second new column for the values to be put into</li>
</ol>
<p>Here’s what that looks like in our example</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">tidy_table4b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> table4b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">1999</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">2000</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, </span>
<span id="cb20-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"population"</span>) </span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note here the numbers are in backticks. This is because R treats column names as characters, and calling a name as number data won't work here. </span></span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the new column names also need to be in quotes here</span></span>
<span id="cb20-9"></span>
<span id="cb20-10">tidy_table4b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 3
  country     year  population
  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;
1 Afghanistan 1999    19987071
2 Afghanistan 2000    20595360
3 Brazil      1999   172006362
4 Brazil      2000   174504898
5 China       1999  1272915272
6 China       2000  1280428583</code></pre>
</div>
</div>
<p>using <code>pivot_longer</code> we turned a 3x3 table where the column names stored variable values into a 6x3 table where each column contains a single variable, and each row a single observation - and presto, tidy data!</p>
<p>One other thing to note here is that we are not pivoting every column. In some datasets you may only have a few columns that you would like to be longer</p>
<section id="more-examples-and-uses-of-pivot" class="level3" data-number="4.1.1">
<h3 data-number="4.1.1" class="anchored" data-anchor-id="more-examples-and-uses-of-pivot"><span class="header-section-number">4.1.1</span> More examples and uses of pivot</h3>
<p>Pivoting isn’t just for cleaning up! When combined with other functions, pivoting can also be a very useful way to manipulate data to make it easier to analyze</p>
<p>Last week, we used the summary function to find the mean height, width and depth of diamonds in the <code>diamonds</code> dataset</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(diamonds)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x),</span>
<span id="cb23-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y),</span>
<span id="cb23-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(z))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 3
  mean_x mean_y mean_z
   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
1   5.73   5.73   3.54</code></pre>
</div>
</div>
<p>For this we had to create a new column for every dimensional mean, which a.) takes a while to type, especially if we wanted to find the mean of further values and b.) comes out to not be tidy data</p>
<p>Another way to find the means for these columns is to use the <code>pivot_longer</code> function to make another column which we can group the values by</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), </span>
<span id="cb25-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dimension"</span>, </span>
<span id="cb25-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value),</span>
<span id="cb25-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> dimension)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 2
  dimension mean_value
  &lt;chr&gt;          &lt;dbl&gt;
1 x               5.73
2 y               5.73
3 z               3.54</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note in cols, I'm not specifying x, y, and z individually. In the dataset they are all next to each other, so I can use the : operator to signify that I want columns x through z. This can be really helpful on wider datasets. </span></span></code></pre></div>
</div>
<p>Here we only have three values, but for wider datasets this can be a very powerful tool</p>
</section>
<section id="pivot-longer-problems" class="level3" data-number="4.1.2">
<h3 data-number="4.1.2" class="anchored" data-anchor-id="pivot-longer-problems"><span class="header-section-number">4.1.2</span> Pivot longer problems</h3>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make the classroom data from earlier into a tidy format using <code>pivot_longer</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb28-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>name,    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz1, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz2, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>test1,</span>
<span id="cb28-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>,  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>,</span>
<span id="cb28-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb28-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>,</span>
<span id="cb28-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span></span>
<span id="cb28-7">  )</span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">classroom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(quiz1,quiz2, test1), </span>
<span id="cb29-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assesment"</span>, </span>
<span id="cb29-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grade"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 3
   name   assesment grade
   &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;
 1 Billy  quiz1     &lt;NA&gt; 
 2 Billy  quiz2     D    
 3 Billy  test1     C    
 4 Suzy   quiz1     F    
 5 Suzy   quiz2     &lt;NA&gt; 
 6 Suzy   test1     &lt;NA&gt; 
 7 Lionel quiz1     B    
 8 Lionel quiz2     C    
 9 Lionel test1     B    
10 Jenny  quiz1     A    
11 Jenny  quiz2     A    
12 Jenny  test1     B    </code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Find the means, minimum values, maximum values, and standard deviations of all of the numeric columns in the <code>diamonds</code> dataset using <code>pivot_longer</code> followed by <code>summarise</code></p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<p>Which are the numeric columns?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>tibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)
 $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
 $ cut    : Ord.factor w/ 5 levels "Fair"&lt;"Good"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...
 $ color  : Ord.factor w/ 7 levels "D"&lt;"E"&lt;"F"&lt;"G"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...
 $ clarity: Ord.factor w/ 8 levels "I1"&lt;"SI2"&lt;"SI1"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...
 $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
 $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...
 $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...
 $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
 $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
 $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...</code></pre>
</div>
</div>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(carat,depth<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), </span>
<span id="cb33-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>, </span>
<span id="cb33-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value),</span>
<span id="cb33-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(value),</span>
<span id="cb33-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(value),</span>
<span id="cb33-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(value),</span>
<span id="cb33-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> parameter)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 7 × 5
  parameter     mean   min      max       sd
  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 carat        0.798   0.2     5.01    0.474
2 depth       61.7    43      79       1.43 
3 table       57.5    43      95       2.23 
4 price     3933.    326   18823    3989.   
5 x            5.73    0      10.7     1.12 
6 y            5.73    0      58.9     1.14 
7 z            3.54    0      31.8     0.706</code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3 - Challange
</div>
</div>
<div class="callout-body-container callout-body">
<p>Take a look at the very wide dataset <code>who</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(who)</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(who)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 60
  country   iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544
  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;
1 Afghanis… AF    AFG    1980          NA           NA           NA           NA
2 Afghanis… AF    AFG    1981          NA           NA           NA           NA
3 Afghanis… AF    AFG    1982          NA           NA           NA           NA
4 Afghanis… AF    AFG    1983          NA           NA           NA           NA
5 Afghanis… AF    AFG    1984          NA           NA           NA           NA
6 Afghanis… AF    AFG    1985          NA           NA           NA           NA
# ℹ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,
#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,
#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,
#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,
#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,
#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;,
#   new_sn_f014 &lt;dbl&gt;, new_sn_f1524 &lt;dbl&gt;, new_sn_f2534 &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>This data contains records of the counts of confirmed tuberculosis cases by country, year, and demographic group. The demographic groups are broken down by sex (m, f) and age (0-14, 15-25, 25-34, 35-44, 45-54, 55-64, unknown).</p>
<p>After using <code>pivot_longer</code>, find the country with the most cases of tb in 2011.</p>
<p><strong>Note</strong>: The first four columns (<code>country</code>, <code>iso2</code>, <code>iso3</code>, and <code>year</code>) are already properly formatted and do not need to be pivoted here.</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<p><code>NA</code> values are liekly to mess up your analysis here - check the <code>pivot_longer()</code> help file to see what arguments are available to remove <code>NA</code> values</p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">who <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(country<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>year), </span>
<span id="cb37-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demographic"</span>, </span>
<span id="cb37-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tb_counts"</span>, </span>
<span id="cb37-5">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_drop_na =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(tb_counts),</span>
<span id="cb37-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(country,year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(count))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 210 × 3
   country                                year  count
   &lt;chr&gt;                                 &lt;dbl&gt;  &lt;dbl&gt;
 1 China                                  2011 865059
 2 India                                  2011 642311
 3 Indonesia                              2011 313601
 4 South Africa                           2011 289111
 5 Bangladesh                             2011 148198
 6 Pakistan                               2011 127571
 7 Russian Federation                     2011 104320
 8 Philippines                            2011  93580
 9 Democratic People's Republic of Korea  2011  85564
10 Kenya                                  2011  84548
# ℹ 200 more rows</code></pre>
</div>
</div>
<p>China is our winner with a sum of 865059 cases in 2011</p>
</details>
</div>
</div>
</section>
</section>
<section id="pivoting-wider" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="pivoting-wider"><span class="header-section-number">4.2</span> Pivoting Wider</h2>
<p>The other function of the day here is <code>pivot_wider</code></p>
<p><code>pivot_wider</code> , as the name might imply, is the inverse of <code>pivot_longer</code> and creates columns from from values stored in another column</p>
<section id="uses-of-pivot_wider" class="level3" data-number="4.2.1">
<h3 data-number="4.2.1" class="anchored" data-anchor-id="uses-of-pivot_wider"><span class="header-section-number">4.2.1</span> Uses of <code>pivot_wider()</code></h3>
<p>You may be thinking, “why would I ever need this? I thought the whole point was to avoid having columns of variable values”</p>
<p><code>pivot_wider</code> is an especially useful function in many situations. Here are only a few:</p>
<ol type="1">
<li><code>pivot_wider</code> is useful where we have the opposite problem as we saw when learning <code>pivot_longer</code> - when a multiple variables are stored in a single column (single observation is scattered across more than one row)</li>
<li><code>pivot_wider</code> can be useful when we want to make calculations across columns</li>
<li>Not every function in R accepts tidy data, sometimes we do need wide data! (e.g., anything that requires a matrix, PCA)</li>
</ol>
</section>
<section id="using-pivot_wider" class="level3" data-number="4.2.2">
<h3 data-number="4.2.2" class="anchored" data-anchor-id="using-pivot_wider"><span class="header-section-number">4.2.2</span> Using <code>pivot_wider()</code></h3>
<p>Lets see how <code>pivot_wider()</code> is used</p>
<p>This is a dataset containing population data and the number of cases of some disease in Afghanistan, Brazil, and China for the years 1999 and 2000</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">table2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 4
   country      year type            count
   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;
 1 Afghanistan  1999 cases             745
 2 Afghanistan  1999 population   19987071
 3 Afghanistan  2000 cases            2666
 4 Afghanistan  2000 population   20595360
 5 Brazil       1999 cases           37737
 6 Brazil       1999 population  172006362
 7 Brazil       2000 cases           80488
 8 Brazil       2000 population  174504898
 9 China        1999 cases          212258
10 China        1999 population 1272915272
11 China        2000 cases          213766
12 China        2000 population 1280428583</code></pre>
</div>
</div>
<p>Here, we have columns containing <strong>more</strong> than one variable this time (<code>type</code> has both cases and population).</p>
<p>Lets check out <code>pivot_wider</code> to see how we can undo this and make our data tidy again</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">?pivot_wider</span></code></pre></div>
</div>
<p>Again, <code>pivot_wider</code> has a bunch of arguments, but this time there are really only two essential ones</p>
<ol type="1">
<li><code>names_from</code> which denotes the column in which our new column names are stored</li>
<li><code>values_from</code> which denotes the column in which the values we will be filling our new columns with are stored</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled" title="Note:">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>There are fewer important arguments in <code>pivot_wider</code> - which one is missing its inverse from <code>pivot_longer</code>?</p>
</div>
</div>
</div>
<p>Lets see it in action</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">table2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> count)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 4
  country      year  cases population
  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;
1 Afghanistan  1999    745   19987071
2 Afghanistan  2000   2666   20595360
3 Brazil       1999  37737  172006362
4 Brazil       2000  80488  174504898
5 China        1999 212258 1272915272
6 China        2000 213766 1280428583</code></pre>
</div>
</div>
<p>We have now seperated our variables into seperate columns, and now our rows each contain only one observation. Tidy data!</p>
</section>
<section id="pivot-wider-problems" class="level3" data-number="4.2.3">
<h3 data-number="4.2.3" class="anchored" data-anchor-id="pivot-wider-problems"><span class="header-section-number">4.2.3</span> Pivot Wider Problems</h3>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>Undo the <code>tidy_classroom</code> and make it look like one of its untidy form using <code>pivot_wider</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">tidy_classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>( <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb44-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assessment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)),</span>
<span id="cb44-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">tidy_classroom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> assessment, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> grade)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 4 × 4
  name   quiz1 quiz2 test1
  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;
1 Billy  &lt;NA&gt;  67    75   
2 Jenny  94    98    88   
3 Lionel 86    74    84   
4 Suzy   44    &lt;NA&gt;  &lt;NA&gt; </code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>In one of the questions from using pivot_longer, we put all of the numeric variables into two columns, here named <code>parameter</code> and <code>value</code>. Can you return the data <code>tampered_diamonds</code> to its original state?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">tampered_diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(carat, depth<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div>
</div>
<p><strong>note</strong> : if you encounter an error, be sure to check the hint</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> parameter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> value)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Values from `value` are not uniquely identified; output will contain list-cols.
• Use `values_fn = list` to suppress this warning.
• Use `values_fn = {summary_fun}` to summarise duplicates.
• Use the following dplyr code to identify duplicates.
  {data} |&gt;
  dplyr::summarise(n = dplyr::n(), .by = c(cut, color, clarity, parameter)) |&gt;
  dplyr::filter(n &gt; 1L)</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 276 × 10
   cut       color clarity carat       depth       table price x     y     z    
   &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;list&gt;      &lt;list&gt;      &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;
 1 Ideal     E     SI2     &lt;dbl [469]&gt; &lt;dbl [469]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 2 Premium   E     SI1     &lt;dbl [614]&gt; &lt;dbl [614]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 3 Good      E     VS1     &lt;dbl [89]&gt;  &lt;dbl [89]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 4 Premium   I     VS2     &lt;dbl [315]&gt; &lt;dbl [315]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 5 Good      J     SI2     &lt;dbl [53]&gt;  &lt;dbl [53]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 6 Very Good J     VVS2    &lt;dbl [29]&gt;  &lt;dbl [29]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 7 Very Good I     VVS1    &lt;dbl [69]&gt;  &lt;dbl [69]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 8 Very Good H     SI1     &lt;dbl [547]&gt; &lt;dbl [547]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 9 Fair      E     VS2     &lt;dbl [42]&gt;  &lt;dbl [42]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
10 Very Good H     VS1     &lt;dbl [257]&gt; &lt;dbl [257]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
# ℹ 266 more rows</code></pre>
</div>
</div>
<p>Uh-oh! Uh-oh! With what we have learned so far, we cant undo <code>pivot_longer</code> with <code>pivot_wider</code> here! Can you figure out why?</p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code from the error read out</span></span>
<span id="cb51-2">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cut, color, clarity, parameter) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1,897 × 5
   cut   color clarity parameter     n
   &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;     &lt;int&gt;
 1 Fair  D     I1      carat         4
 2 Fair  D     I1      depth         4
 3 Fair  D     I1      price         4
 4 Fair  D     I1      table         4
 5 Fair  D     I1      x             4
 6 Fair  D     I1      y             4
 7 Fair  D     I1      z             4
 8 Fair  D     SI2     carat        56
 9 Fair  D     SI2     depth        56
10 Fair  D     SI2     price        56
# ℹ 1,887 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># example of multiple replicates</span></span>
<span id="cb53-2">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(cut<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>, color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, clarity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VS2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 2,373 × 5
   cut     color clarity parameter  value
   &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;      &lt;dbl&gt;
 1 Premium D     VS2     carat       0.22
 2 Premium D     VS2     depth      59.3 
 3 Premium D     VS2     table      62   
 4 Premium D     VS2     price     404   
 5 Premium D     VS2     x           3.91
 6 Premium D     VS2     y           3.88
 7 Premium D     VS2     z           2.31
 8 Premium D     VS2     carat       0.71
 9 Premium D     VS2     depth      62.5 
10 Premium D     VS2     table      60   
# ℹ 2,363 more rows</code></pre>
</div>
</div>
<p>multiple values for each “type” of diamond - not uniquely identifiable, thus we can’t get to the original dataset</p>
</details>
</div>
</div>
</section>
</section>
</section>
<section id="citations" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Citations</h1>
<p><a href="https://allisonhorst.com/other-r-fun">Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst</a></p>
<p>https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html</p>
<p>https://r4ds.had.co.nz/tidy-data.html#wider</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S08E05_wrangling_05/</guid>
  <pubDate>Mon, 30 Sep 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S08E05_wrangling_05/img/back_to_the_future.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data Wrangling 4: Merging/Joining Data Frames</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E04_wrangling_04/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In the past two weeks, we’ve been learning about several functions from the <em>dplyr</em> package, a central workhorse of the tidyverse ecosystem, to manipulate data in data frames.</p>
<p>In real-world data analysis, it’s uncommon to work with just a single data frame. More often than not, you will be dealing with multiple data frames that you need to combine to effectively address your analytical questions.</p>
<p>In this session, we will explore the essential techniques for merging data frames using the <code>_join</code> functions provided by the <em>dplyr</em> package.</p>
<hr style="height:1pt; visibility:hidden;">
<section id="learning-objectives-for-today" class="level4">
<h4 class="anchored" data-anchor-id="learning-objectives-for-today">Learning objectives for today</h4>
<ol type="1">
<li><strong>Understand Join Fundamentals:</strong>
<ul>
<li>Grasp the basics of <strong>joins</strong> and their significance in merging datasets.</li>
<li>Learn about <em>keys</em> and their use in linking different data frames.</li>
</ul></li>
<li><strong>Explore Mutating Joins:</strong>
<ul>
<li>Get acquainted with <strong>mutating join</strong> functions in <code>dplyr</code>, such as <code>inner_join</code>, <code>left_join</code>, <code>right_join</code>, and <code>full_join</code>.</li>
<li>Learn how to add new columns to a data frame using matching records from another.</li>
</ul></li>
<li><strong>Discover Filtering Joins:</strong>
<ul>
<li>Learn how to use <strong>filtering join</strong> functions like <code>semi_join</code> and <code>anti_join</code>.</li>
<li>Understand how to retain or exclude records in one data frame based on matches with another data frame.</li>
</ul></li>
</ol>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="setting-up" class="level4">
<h4 class="anchored" data-anchor-id="setting-up">Setting up</h4>
<p>Load the tidyverse meta-package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="data-jazz-merging-with-dplyr-joins" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="data-jazz-merging-with-dplyr-joins"><span class="header-section-number">2</span> Data Jazz: Merging with <code>dplyr</code> Joins</h2>
<p>Just as a <a href="https://medium.com/@birdlandjazz/what-exactly-is-jazz-anyway-9cc462f28c10">jazz</a> band brings together a variety of instruments to create a rich, spontaneous musical experience, data analysis often involves merging different data sets to form a coherent and insightful whole. Each data set can be thought of as an instrument in a jazz ensemble, contributing its unique timbre and melody to the overall composition.</p>
<p>When you use join functions from the `dplyr` package in R Studio, it’s like orchestrating an improvisational jazz performance where the trumpet’s crisp notes (one data set) harmonize with the saxophone’s smooth riffs (another data set), underpinned by the piano’s rhythmic chords (yet another data set).</p>
<p>By cleverly combining these data sets through joins, you can produce an insightful and dynamic data analysis, much like a jazz composition that resonates on multiple levels.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.shutterstock.com/g/barandash+karandashich"><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/jazz.png" class="img-fluid figure-img" alt="Illustration by Barandash Karandashich"></a></p>
<figcaption>Illustration by Barandash Karandashich</figcaption>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Looking to get excited about jazz? Click here for a book recommendation!
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><a href="https://www.amazon.com/But-Beautiful-Book-About-Jazz/dp/0312429479">But Beautiful: A Book About Jazz</a> by Geoff Dyer.</p>
</div>
</div>
</div>
<section id="to-explore-the-_join-functions-we-will-create-our-own-data-sets" class="level4">
<h4 class="anchored" data-anchor-id="to-explore-the-_join-functions-we-will-create-our-own-data-sets"><strong>To explore the <code>_join</code> functions we will create our own data sets:</strong></h4>
<section id="musicians-data-frame" class="level5">
<h5 class="anchored" data-anchor-id="musicians-data-frame"><strong>Musicians data frame:</strong></h5>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">musicians <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">musician_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Coltrane"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miles Davis"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thelonious Monk"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ella Fitzgerald"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Louis Armstrong"</span>),</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">instrument =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Saxophone"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trumpet"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Piano"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vocals"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trumpet"</span>),</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">years_active =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1945-1967"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1944-1975"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1934-1975"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1934-1993"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1919-1971"</span>),</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">genre =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jazz"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jazz"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bebop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Swing"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jazz"</span>)</span>
<span id="cb3-7">)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz"},{"1":"3","2":"Thelonious Monk","3":"Piano","4":"1934-1975","5":"Bebop"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
</section>
<section id="albums-data-frame" class="level5">
<h5 class="anchored" data-anchor-id="albums-data-frame"><strong>Albums data frame:</strong></h5>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">albums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">album_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">musician_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">album_title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blue Train"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kind of Blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monk's Dream"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bitches Brew"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ella in Berlin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Louis Armstrong Plays W.C. Handy"</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">release_year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1957</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1959</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1963</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1970</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1960</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1954</span>),</span>
<span id="cb4-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">genre =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hard Bop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modal Jazz"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bebop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fusion"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vocal Jazz"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jazz"</span>)</span>
<span id="cb4-7">)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["album_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["musician_id"],"name":[2],"type":["dbl"],"align":["right"]},{"label":["album_title"],"name":[3],"type":["chr"],"align":["left"]},{"label":["release_year"],"name":[4],"type":["dbl"],"align":["right"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]}],"data":[{"1":"1","2":"1","3":"Blue Train","4":"1957","5":"Hard Bop"},{"1":"2","2":"2","3":"Kind of Blue","4":"1959","5":"Modal Jazz"},{"1":"3","2":"3","3":"Monk's Dream","4":"1963","5":"Bebop"},{"1":"4","2":"2","3":"Bitches Brew","4":"1970","5":"Fusion"},{"1":"5","2":"4","3":"Ella in Berlin","4":"1960","5":"Vocal Jazz"},{"1":"6","2":"5","3":"Louis Armstrong Plays W.C. Handy","4":"1954","5":"Jazz"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
</section>
<section id="awards-data-frame" class="level5">
<h5 class="anchored" data-anchor-id="awards-data-frame"><strong>Awards data frame:</strong></h5>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">awards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">award_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">musician_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">award_name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grammy Hall of Fame"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grammy Lifetime Achievement Award"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grammy Hall of Fame"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"National Medal of Arts"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grammy Lifetime Achievement Award"</span>),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1999</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1990</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1999</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1987</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1972</span>)</span>
<span id="cb5-6">)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["award_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["musician_id"],"name":[2],"type":["dbl"],"align":["right"]},{"label":["award_name"],"name":[3],"type":["chr"],"align":["left"]},{"label":["year"],"name":[4],"type":["dbl"],"align":["right"]}],"data":[{"1":"1","2":"1","3":"Grammy Hall of Fame","4":"1999"},{"1":"2","2":"2","3":"Grammy Lifetime Achievement Award","4":"1990"},{"1":"3","2":"4","3":"Grammy Hall of Fame","4":"1999"},{"1":"4","2":"4","3":"National Medal of Arts","4":"1987"},{"1":"5","2":"5","3":"Grammy Lifetime Achievement Award","4":"1972"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
</section>
<section id="gigs-data-frame" class="level5">
<h5 class="anchored" data-anchor-id="gigs-data-frame"><strong>Gigs data frame:</strong></h5>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">gigs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gig_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">musician_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">venue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blue Note"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Village Vanguard"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Birdland"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Newport Jazz Festival"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Montreux Jazz Festival"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cotton Club"</span>),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1961-11-18"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1961-03-21"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1961-04-12"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1962-07-11"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1965-03-10"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1937-06-26"</span>)),</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Newport"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Montreux"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Harlem"</span>)</span>
<span id="cb6-7">)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["gig_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["musician_id"],"name":[2],"type":["dbl"],"align":["right"]},{"label":["venue"],"name":[3],"type":["chr"],"align":["left"]},{"label":["date"],"name":[4],"type":["date"],"align":["right"]},{"label":["city"],"name":[5],"type":["chr"],"align":["left"]}],"data":[{"1":"1","2":"1","3":"Blue Note","4":"1961-11-18","5":"New York"},{"1":"2","2":"2","3":"Village Vanguard","4":"1961-03-21","5":"New York"},{"1":"3","2":"2","3":"Birdland","4":"1961-04-12","5":"New York"},{"1":"4","2":"4","3":"Newport Jazz Festival","4":"1962-07-11","5":"Newport"},{"1":"5","2":"1","3":"Montreux Jazz Festival","4":"1965-03-10","5":"Montreux"},{"1":"6","2":"5","3":"Cotton Club","4":"1937-06-26","5":"Harlem"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
</section>
</section>
<section id="lets-explore-the-different-_join-funtions" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="lets-explore-the-different-_join-funtions"><span class="header-section-number">3</span> Let’s explore the different <code>_join</code> funtions</h2>
<p>When merging datasets, we typically integrate variables from one dataset into another using a specific “key” variable. Let’s examine our <strong>JAZZ</strong> datasets and explore the joining verbs:</p>
<section id="setting-the-stage" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="setting-the-stage"><span class="header-section-number">3.1</span> Setting the Stage</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/setup_key.png" class="img-fluid figure-img"></p>
<figcaption>Key variables</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/setup2.png" class="img-fluid figure-img"></p>
<figcaption>Set up</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="mutating-_join-funtions" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="mutating-_join-funtions"><span class="header-section-number">3.2</span> Mutating <code>_join</code> funtions:</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://r4ds.hadley.nz/joins"><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/venn.png" class="img-fluid figure-img" alt="Illustration by Barandash Karandashich"></a></p>
<figcaption>Chapter 19: Joins [R4DS (2ed)]</figcaption>
</figure>
</div>
<section id="left_join-and-right_join" class="level4">
<h4 class="anchored" data-anchor-id="left_join-and-right_join"><strong><code>left_join</code> (and <code>right_join</code>)</strong></h4>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/left_join.png" class="img-fluid figure-img"></p>
<figcaption>left_join</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/right_join.png" class="img-fluid figure-img"></p>
<figcaption>right_join</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p><strong>Left join: Musicians with all their gigs.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(gigs, </span>
<span id="cb7-2">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id)) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["dbl"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]},{"label":["gig_id"],"name":[6],"type":["int"],"align":["right"]},{"label":["venue"],"name":[7],"type":["chr"],"align":["left"]},{"label":["date"],"name":[8],"type":["date"],"align":["right"]},{"label":["city"],"name":[9],"type":["chr"],"align":["left"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"1","7":"Blue Note","8":"1961-11-18","9":"New York"},{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"5","7":"Montreux Jazz Festival","8":"1965-03-10","9":"Montreux"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"2","7":"Village Vanguard","8":"1961-03-21","9":"New York"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"3","7":"Birdland","8":"1961-04-12","9":"New York"},{"1":"3","2":"Thelonious Monk","3":"Piano","4":"1934-1975","5":"Bebop","6":"NA","7":"NA","8":"<NA>","9":"NA"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"4","7":"Newport Jazz Festival","8":"1962-07-11","9":"Newport"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz","6":"6","7":"Cotton Club","8":"1937-06-26","9":"Harlem"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p><strong>Right join: All albums and related musicians.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">right_join</span>(albums, </span>
<span id="cb8-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id)) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["dbl"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre.x"],"name":[5],"type":["chr"],"align":["left"]},{"label":["album_id"],"name":[6],"type":["int"],"align":["right"]},{"label":["album_title"],"name":[7],"type":["chr"],"align":["left"]},{"label":["release_year"],"name":[8],"type":["dbl"],"align":["right"]},{"label":["genre.y"],"name":[9],"type":["chr"],"align":["left"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"1","7":"Blue Train","8":"1957","9":"Hard Bop"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"2","7":"Kind of Blue","8":"1959","9":"Modal Jazz"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"4","7":"Bitches Brew","8":"1970","9":"Fusion"},{"1":"3","2":"Thelonious Monk","3":"Piano","4":"1934-1975","5":"Bebop","6":"3","7":"Monk's Dream","8":"1963","9":"Bebop"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"5","7":"Ella in Berlin","8":"1960","9":"Vocal Jazz"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz","6":"6","7":"Louis Armstrong Plays W.C. Handy","8":"1954","9":"Jazz"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
</section>
<section id="inner_join-and-full_join" class="level4">
<h4 class="anchored" data-anchor-id="inner_join-and-full_join"><strong><code>inner_join</code> (and <code>full_join</code>)</strong></h4>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/inner_join.png" class="img-fluid figure-img"></p>
<figcaption>inner_join</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/full_join.png" class="img-fluid figure-img"></p>
<figcaption>full_join</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p><strong>Inner join: Musicians and their albums.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(awards, </span>
<span id="cb9-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id)) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["dbl"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]},{"label":["award_id"],"name":[6],"type":["int"],"align":["right"]},{"label":["award_name"],"name":[7],"type":["chr"],"align":["left"]},{"label":["year"],"name":[8],"type":["dbl"],"align":["right"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"1","7":"Grammy Hall of Fame","8":"1999"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"2","7":"Grammy Lifetime Achievement Award","8":"1990"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"3","7":"Grammy Hall of Fame","8":"1999"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"4","7":"National Medal of Arts","8":"1987"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz","6":"5","7":"Grammy Lifetime Achievement Award","8":"1972"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p><strong>Full join: Complete overview of musicians and their awards.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_join</span>(awards, </span>
<span id="cb10-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id)) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["dbl"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]},{"label":["award_id"],"name":[6],"type":["int"],"align":["right"]},{"label":["award_name"],"name":[7],"type":["chr"],"align":["left"]},{"label":["year"],"name":[8],"type":["dbl"],"align":["right"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"1","7":"Grammy Hall of Fame","8":"1999"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"2","7":"Grammy Lifetime Achievement Award","8":"1990"},{"1":"3","2":"Thelonious Monk","3":"Piano","4":"1934-1975","5":"Bebop","6":"NA","7":"NA","8":"NA"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"3","7":"Grammy Hall of Fame","8":"1999"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"4","7":"National Medal of Arts","8":"1987"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz","6":"5","7":"Grammy Lifetime Achievement Award","8":"1972"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
</section>
</section>
<section id="exercises-i" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="exercises-i"><span class="header-section-number">3.3</span> Exercises I</h3>
<p><strong>A)</strong> Find all albums by Miles Davis.</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
Use an inner join to list all albums released by Miles Davis. Then use <code>filter()</code> to end up with a data set with information only for Miles Davis.
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(albums, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miles Davis"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 2 × 9
  musician_id name        instrument years_active genre.x album_id album_title 
        &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;       
1           2 Miles Davis Trumpet    1944-1975    Jazz           2 Kind of Blue
2           2 Miles Davis Trumpet    1944-1975    Jazz           4 Bitches Brew
# ℹ 2 more variables: release_year &lt;dbl&gt;, genre.y &lt;chr&gt;</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<p><strong>B)</strong> Combine musicians, gigs, and awards information.</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
Perform a left join to combine musicians with their gigs and awards information.
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(gigs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(awards, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relationship =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"many-to-many"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 12
  musician_id name   instrument years_active genre gig_id venue date       city 
        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;  &lt;int&gt; &lt;chr&gt; &lt;date&gt;     &lt;chr&gt;
1           1 John … Saxophone  1945-1967    Jazz       1 Blue… 1961-11-18 New …
2           1 John … Saxophone  1945-1967    Jazz       5 Mont… 1965-03-10 Mont…
3           2 Miles… Trumpet    1944-1975    Jazz       2 Vill… 1961-03-21 New …
4           2 Miles… Trumpet    1944-1975    Jazz       3 Bird… 1961-04-12 New …
5           3 Thelo… Piano      1934-1975    Bebop     NA &lt;NA&gt;  NA         &lt;NA&gt; 
6           4 Ella … Vocals     1934-1993    Swing      4 Newp… 1962-07-11 Newp…
7           4 Ella … Vocals     1934-1993    Swing      4 Newp… 1962-07-11 Newp…
8           5 Louis… Trumpet    1919-1971    Jazz       6 Cott… 1937-06-26 Harl…
# ℹ 3 more variables: award_id &lt;int&gt;, award_name &lt;chr&gt;, year &lt;dbl&gt;</code></pre>
</div>
</div>
</details>
<p><strong>C)</strong> List of venues with musician information.</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
Perform a right join to get a list of all gig venues and the associated musician details.
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">right_join</span>(gigs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 9
  musician_id name   instrument years_active genre gig_id venue date       city 
        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;  &lt;int&gt; &lt;chr&gt; &lt;date&gt;     &lt;chr&gt;
1           1 John … Saxophone  1945-1967    Jazz       1 Blue… 1961-11-18 New …
2           1 John … Saxophone  1945-1967    Jazz       5 Mont… 1965-03-10 Mont…
3           2 Miles… Trumpet    1944-1975    Jazz       2 Vill… 1961-03-21 New …
4           2 Miles… Trumpet    1944-1975    Jazz       3 Bird… 1961-04-12 New …
5           4 Ella … Vocals     1934-1993    Swing      4 Newp… 1962-07-11 Newp…
6           5 Louis… Trumpet    1919-1971    Jazz       6 Cott… 1937-06-26 Harl…</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="filtering-_join-funtions" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="filtering-_join-funtions"><span class="header-section-number">3.4</span> Filtering <code>_join</code> funtions:</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://lindsaydbrin.github.io/CREATE_R_Workshop/Lesson_-_dplyr_join.html"><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/Join_AntiJoin.png" class="img-fluid figure-img" alt="Anti join"></a></p>
<figcaption>Anti join</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://lindsaydbrin.github.io/CREATE_R_Workshop/Lesson_-_dplyr_join.html"><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/Join_InnerJoin.png" class="img-fluid figure-img" alt="Semi join"></a></p>
<figcaption>Semi join</figcaption>
</figure>
</div>
</div>
</div>
</div>
<section id="anti_join-and-semi_join" class="level4">
<h4 class="anchored" data-anchor-id="anti_join-and-semi_join"><strong><code>anti_join</code> (and <code>semi_join</code>)</strong></h4>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/anti.png" class="img-fluid figure-img"></p>
<figcaption>anti_join</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E04_wrangling_04/img/semi.png" class="img-fluid figure-img"></p>
<figcaption>semi_join</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p><strong>Semi join: Musicians who have received awards.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">semi_join</span>(awards, </span>
<span id="cb17-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id)) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What is the difference between <code>inner_join</code> and <code>semi_join</code> ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Notice that the observations in both data frames are the similar, but that the inner join adds the variables from the data frame “y”, whereas the semi join only uses the “y” data frame to determine which observations to keep.</p>
</div>
</div>
</div>
</section>
</section>
<section id="exercises-ii" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="exercises-ii"><span class="header-section-number">3.5</span> Exercises II</h3>
<p><strong>A)</strong> Find musicians without any gigs.</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
Using an anti join, find musicians who haven’t have any gigs in this period.
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">musicians <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(gigs, </span>
<span id="cb18-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(musician_id)) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]}],"data":[{"1":"3","2":"Thelonious Monk","3":"Piano","4":"1934-1975","5":"Bebop"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
</section>
<section id="merging-data-sets-in-base-r" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="merging-data-sets-in-base-r"><span class="header-section-number">4</span> Merging Data Sets in Base R</h2>
<p>The <code>merge</code> function in base R can perform inner joins, left joins, right joins, and full joins by specifying appropriate parameters.</p>
<p><strong>Left join: Musicians with all their gigs.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(musicians, gigs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"musician_id"</span>) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]},{"label":["gig_id"],"name":[6],"type":["int"],"align":["right"]},{"label":["venue"],"name":[7],"type":["chr"],"align":["left"]},{"label":["date"],"name":[8],"type":["date"],"align":["right"]},{"label":["city"],"name":[9],"type":["chr"],"align":["left"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"1","7":"Blue Note","8":"1961-11-18","9":"New York"},{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"5","7":"Montreux Jazz Festival","8":"1965-03-10","9":"Montreux"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"2","7":"Village Vanguard","8":"1961-03-21","9":"New York"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"3","7":"Birdland","8":"1961-04-12","9":"New York"},{"1":"3","2":"Thelonious Monk","3":"Piano","4":"1934-1975","5":"Bebop","6":"NA","7":"NA","8":"<NA>","9":"NA"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"4","7":"Newport Jazz Festival","8":"1962-07-11","9":"Newport"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz","6":"6","7":"Cotton Club","8":"1937-06-26","9":"Harlem"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p><strong>Right join: All albums and related musicians.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(musicians, albums, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"musician_id"</span>) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre.x"],"name":[5],"type":["chr"],"align":["left"]},{"label":["album_id"],"name":[6],"type":["int"],"align":["right"]},{"label":["album_title"],"name":[7],"type":["chr"],"align":["left"]},{"label":["release_year"],"name":[8],"type":["dbl"],"align":["right"]},{"label":["genre.y"],"name":[9],"type":["chr"],"align":["left"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"1","7":"Blue Train","8":"1957","9":"Hard Bop"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"2","7":"Kind of Blue","8":"1959","9":"Modal Jazz"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"4","7":"Bitches Brew","8":"1970","9":"Fusion"},{"1":"3","2":"Thelonious Monk","3":"Piano","4":"1934-1975","5":"Bebop","6":"3","7":"Monk's Dream","8":"1963","9":"Bebop"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"5","7":"Ella in Berlin","8":"1960","9":"Vocal Jazz"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz","6":"6","7":"Louis Armstrong Plays W.C. Handy","8":"1954","9":"Jazz"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p><strong>Inner join: Musicians and their albums.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(musicians, awards, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"musician_id"</span>) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]},{"label":["award_id"],"name":[6],"type":["int"],"align":["right"]},{"label":["award_name"],"name":[7],"type":["chr"],"align":["left"]},{"label":["year"],"name":[8],"type":["dbl"],"align":["right"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"1","7":"Grammy Hall of Fame","8":"1999"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"2","7":"Grammy Lifetime Achievement Award","8":"1990"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"3","7":"Grammy Hall of Fame","8":"1999"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"4","7":"National Medal of Arts","8":"1987"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz","6":"5","7":"Grammy Lifetime Achievement Award","8":"1972"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p><strong>Full join: Complete overview of musicians and their awards.</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(musicians, awards, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"musician_id"</span>) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["musician_id"],"name":[1],"type":["int"],"align":["right"]},{"label":["name"],"name":[2],"type":["chr"],"align":["left"]},{"label":["instrument"],"name":[3],"type":["chr"],"align":["left"]},{"label":["years_active"],"name":[4],"type":["chr"],"align":["left"]},{"label":["genre"],"name":[5],"type":["chr"],"align":["left"]},{"label":["award_id"],"name":[6],"type":["int"],"align":["right"]},{"label":["award_name"],"name":[7],"type":["chr"],"align":["left"]},{"label":["year"],"name":[8],"type":["dbl"],"align":["right"]}],"data":[{"1":"1","2":"John Coltrane","3":"Saxophone","4":"1945-1967","5":"Jazz","6":"1","7":"Grammy Hall of Fame","8":"1999"},{"1":"2","2":"Miles Davis","3":"Trumpet","4":"1944-1975","5":"Jazz","6":"2","7":"Grammy Lifetime Achievement Award","8":"1990"},{"1":"3","2":"Thelonious Monk","3":"Piano","4":"1934-1975","5":"Bebop","6":"NA","7":"NA","8":"NA"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"3","7":"Grammy Hall of Fame","8":"1999"},{"1":"4","2":"Ella Fitzgerald","3":"Vocals","4":"1934-1993","5":"Swing","6":"4","7":"National Medal of Arts","8":"1987"},{"1":"5","2":"Louis Armstrong","3":"Trumpet","4":"1919-1971","5":"Jazz","6":"5","7":"Grammy Lifetime Achievement Award","8":"1972"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>With <code>merge()</code>, you can achieve the same results as <code>dplyr</code>’s <strong>mutating joins</strong>, though <code>dplyr</code> provides a more explicit and often more readable syntax for many users. Both methods are powerful, and understanding both can be very useful in different contexts!</p>
<hr style="height:1pt; visibility:hidden;">


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S08E04_wrangling_04/</guid>
  <pubDate>Mon, 23 Sep 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Wrangling 3: Counting and Summarizing Data by Group</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E03_wrangling_03/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-the-past-two-weeks" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-the-past-two-weeks">Recap of the past two weeks</h4>
<p>In the past two weeks, we’ve been learning about the following functions from the <em>dplyr</em> package, a central workhorse of the tidyverse ecosystem, to manipulate data in data frames:</p>
<ul>
<li><code>filter()</code> to pick rows (which typically represent observations/samples/individuals)</li>
<li><code>select()</code> to pick columns (which typically represent variables/properties)</li>
<li><code>arrange()</code> to sort data frame rows</li>
<li><code>mutate()</code> to add and manipulate data frame columns</li>
</ul>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="learning-objectives-for-today" class="level4">
<h4 class="anchored" data-anchor-id="learning-objectives-for-today">Learning objectives for today</h4>
<ul>
<li><p>Our main focus is another very useful <em>dplyr</em> function: <code>summarize()</code> to compute summaries across rows, typically across <strong>groups of rows</strong>.</p></li>
<li><p>We will start with an introduction to a new dataset, the <code>count()</code> function, and dealing with missing data.</p></li>
<li><p>If we manage to get to it, we will also learn about the <code>slice_()</code> family of functions, to pick rows in a different manner than with <code>filter()</code>.</p></li>
</ul>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="setting-up" class="level4">
<h4 class="anchored" data-anchor-id="setting-up">Setting up</h4>
<p>Load the tidyverse meta-package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Still need to install the tidyverse? <em>Click here for instructions</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="a-penguins-dataset" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="a-penguins-dataset"><span class="header-section-number">2</span> A penguins dataset</h2>
<p>The data set we will use today is from the <a href="https://allisonhorst.github.io/palmerpenguins/index.html"><code>palmerpenguins</code></a> package, which contains a data set on 🐧 collected by Dr.&nbsp;Kristen Gorman at the Palmer Station Antarctica.</p>
<p>It is a nice, relatively simple data set to practice data exploration and visualization in R.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E03_wrangling_03/img/palmerpenguins_hex.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Illustration by <a href="https://allisonhorst.github.io/palmerpenguins/articles/art.html">Allison Horst</a></figcaption>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
<section id="installing-and-loading-the-package" class="level4">
<h4 class="anchored" data-anchor-id="installing-and-loading-the-package">Installing and loading the package</h4>
<p>We’ll have to install that package first, which should be quick:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"palmerpenguins"</span>)</span></code></pre></div>
</div>
<p>Now we’re ready to load the package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span></code></pre></div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="taking-a-look-at-the-data-set" class="level4">
<h4 class="anchored" data-anchor-id="taking-a-look-at-the-data-set">Taking a look at the data set</h4>
<p>Once you’ve loaded the <em>palmerpenguins</em> package, you will have a data frame called <code>penguins</code> at your disposal — let’s take a look:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">penguins</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["species"],"name":[1],"type":["fct"],"align":["left"]},{"label":["island"],"name":[2],"type":["fct"],"align":["left"]},{"label":["bill_length_mm"],"name":[3],"type":["dbl"],"align":["right"]},{"label":["bill_depth_mm"],"name":[4],"type":["dbl"],"align":["right"]},{"label":["flipper_length_mm"],"name":[5],"type":["int"],"align":["right"]},{"label":["body_mass_g"],"name":[6],"type":["int"],"align":["right"]},{"label":["sex"],"name":[7],"type":["fct"],"align":["left"]},{"label":["year"],"name":[8],"type":["int"],"align":["right"]}],"data":[{"1":"Adelie","2":"Torgersen","3":"39.1","4":"18.7","5":"181","6":"3750","7":"male","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"39.5","4":"17.4","5":"186","6":"3800","7":"female","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"40.3","4":"18.0","5":"195","6":"3250","7":"female","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"NA","4":"NA","5":"NA","6":"NA","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"36.7","4":"19.3","5":"193","6":"3450","7":"female","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"39.3","4":"20.6","5":"190","6":"3650","7":"male","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"38.9","4":"17.8","5":"181","6":"3625","7":"female","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"39.2","4":"19.6","5":"195","6":"4675","7":"male","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"34.1","4":"18.1","5":"193","6":"3475","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"42.0","4":"20.2","5":"190","6":"4250","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"37.8","4":"17.1","5":"186","6":"3300","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"37.8","4":"17.3","5":"180","6":"3700","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"41.1","4":"17.6","5":"182","6":"3200","7":"female","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"38.6","4":"21.2","5":"191","6":"3800","7":"male","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"34.6","4":"21.1","5":"198","6":"4400","7":"male","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"36.6","4":"17.8","5":"185","6":"3700","7":"female","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"38.7","4":"19.0","5":"195","6":"3450","7":"female","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"42.5","4":"20.7","5":"197","6":"4500","7":"male","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"34.4","4":"18.4","5":"184","6":"3325","7":"female","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"46.0","4":"21.5","5":"194","6":"4200","7":"male","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"37.8","4":"18.3","5":"174","6":"3400","7":"female","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"37.7","4":"18.7","5":"180","6":"3600","7":"male","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"35.9","4":"19.2","5":"189","6":"3800","7":"female","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"38.2","4":"18.1","5":"185","6":"3950","7":"male","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"38.8","4":"17.2","5":"180","6":"3800","7":"male","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"35.3","4":"18.9","5":"187","6":"3800","7":"female","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"40.6","4":"18.6","5":"183","6":"3550","7":"male","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"40.5","4":"17.9","5":"187","6":"3200","7":"female","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"37.9","4":"18.6","5":"172","6":"3150","7":"female","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"40.5","4":"18.9","5":"180","6":"3950","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"39.5","4":"16.7","5":"178","6":"3250","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"37.2","4":"18.1","5":"178","6":"3900","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"39.5","4":"17.8","5":"188","6":"3300","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"40.9","4":"18.9","5":"184","6":"3900","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"36.4","4":"17.0","5":"195","6":"3325","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"39.2","4":"21.1","5":"196","6":"4150","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"38.8","4":"20.0","5":"190","6":"3950","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"42.2","4":"18.5","5":"180","6":"3550","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"37.6","4":"19.3","5":"181","6":"3300","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"39.8","4":"19.1","5":"184","6":"4650","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"36.5","4":"18.0","5":"182","6":"3150","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"40.8","4":"18.4","5":"195","6":"3900","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"36.0","4":"18.5","5":"186","6":"3100","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"44.1","4":"19.7","5":"196","6":"4400","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"37.0","4":"16.9","5":"185","6":"3000","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"39.6","4":"18.8","5":"190","6":"4600","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"41.1","4":"19.0","5":"182","6":"3425","7":"male","8":"2007"},{"1":"Adelie","2":"Dream","3":"37.5","4":"18.9","5":"179","6":"2975","7":"NA","8":"2007"},{"1":"Adelie","2":"Dream","3":"36.0","4":"17.9","5":"190","6":"3450","7":"female","8":"2007"},{"1":"Adelie","2":"Dream","3":"42.3","4":"21.2","5":"191","6":"4150","7":"male","8":"2007"},{"1":"Adelie","2":"Biscoe","3":"39.6","4":"17.7","5":"186","6":"3500","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"40.1","4":"18.9","5":"188","6":"4300","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"35.0","4":"17.9","5":"190","6":"3450","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"42.0","4":"19.5","5":"200","6":"4050","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"34.5","4":"18.1","5":"187","6":"2900","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"41.4","4":"18.6","5":"191","6":"3700","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"39.0","4":"17.5","5":"186","6":"3550","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"40.6","4":"18.8","5":"193","6":"3800","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"36.5","4":"16.6","5":"181","6":"2850","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"37.6","4":"19.1","5":"194","6":"3750","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"35.7","4":"16.9","5":"185","6":"3150","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"41.3","4":"21.1","5":"195","6":"4400","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"37.6","4":"17.0","5":"185","6":"3600","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"41.1","4":"18.2","5":"192","6":"4050","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"36.4","4":"17.1","5":"184","6":"2850","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"41.6","4":"18.0","5":"192","6":"3950","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"35.5","4":"16.2","5":"195","6":"3350","7":"female","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"41.1","4":"19.1","5":"188","6":"4100","7":"male","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"35.9","4":"16.6","5":"190","6":"3050","7":"female","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"41.8","4":"19.4","5":"198","6":"4450","7":"male","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"33.5","4":"19.0","5":"190","6":"3600","7":"female","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"39.7","4":"18.4","5":"190","6":"3900","7":"male","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"39.6","4":"17.2","5":"196","6":"3550","7":"female","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"45.8","4":"18.9","5":"197","6":"4150","7":"male","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"35.5","4":"17.5","5":"190","6":"3700","7":"female","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"42.8","4":"18.5","5":"195","6":"4250","7":"male","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"40.9","4":"16.8","5":"191","6":"3700","7":"female","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"37.2","4":"19.4","5":"184","6":"3900","7":"male","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"36.2","4":"16.1","5":"187","6":"3550","7":"female","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"42.1","4":"19.1","5":"195","6":"4000","7":"male","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"34.6","4":"17.2","5":"189","6":"3200","7":"female","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"42.9","4":"17.6","5":"196","6":"4700","7":"male","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"36.7","4":"18.8","5":"187","6":"3800","7":"female","8":"2008"},{"1":"Adelie","2":"Torgersen","3":"35.1","4":"19.4","5":"193","6":"4200","7":"male","8":"2008"},{"1":"Adelie","2":"Dream","3":"37.3","4":"17.8","5":"191","6":"3350","7":"female","8":"2008"},{"1":"Adelie","2":"Dream","3":"41.3","4":"20.3","5":"194","6":"3550","7":"male","8":"2008"},{"1":"Adelie","2":"Dream","3":"36.3","4":"19.5","5":"190","6":"3800","7":"male","8":"2008"},{"1":"Adelie","2":"Dream","3":"36.9","4":"18.6","5":"189","6":"3500","7":"female","8":"2008"},{"1":"Adelie","2":"Dream","3":"38.3","4":"19.2","5":"189","6":"3950","7":"male","8":"2008"},{"1":"Adelie","2":"Dream","3":"38.9","4":"18.8","5":"190","6":"3600","7":"female","8":"2008"},{"1":"Adelie","2":"Dream","3":"35.7","4":"18.0","5":"202","6":"3550","7":"female","8":"2008"},{"1":"Adelie","2":"Dream","3":"41.1","4":"18.1","5":"205","6":"4300","7":"male","8":"2008"},{"1":"Adelie","2":"Dream","3":"34.0","4":"17.1","5":"185","6":"3400","7":"female","8":"2008"},{"1":"Adelie","2":"Dream","3":"39.6","4":"18.1","5":"186","6":"4450","7":"male","8":"2008"},{"1":"Adelie","2":"Dream","3":"36.2","4":"17.3","5":"187","6":"3300","7":"female","8":"2008"},{"1":"Adelie","2":"Dream","3":"40.8","4":"18.9","5":"208","6":"4300","7":"male","8":"2008"},{"1":"Adelie","2":"Dream","3":"38.1","4":"18.6","5":"190","6":"3700","7":"female","8":"2008"},{"1":"Adelie","2":"Dream","3":"40.3","4":"18.5","5":"196","6":"4350","7":"male","8":"2008"},{"1":"Adelie","2":"Dream","3":"33.1","4":"16.1","5":"178","6":"2900","7":"female","8":"2008"},{"1":"Adelie","2":"Dream","3":"43.2","4":"18.5","5":"192","6":"4100","7":"male","8":"2008"},{"1":"Adelie","2":"Biscoe","3":"35.0","4":"17.9","5":"192","6":"3725","7":"female","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"41.0","4":"20.0","5":"203","6":"4725","7":"male","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"37.7","4":"16.0","5":"183","6":"3075","7":"female","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"37.8","4":"20.0","5":"190","6":"4250","7":"male","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"37.9","4":"18.6","5":"193","6":"2925","7":"female","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"39.7","4":"18.9","5":"184","6":"3550","7":"male","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"38.6","4":"17.2","5":"199","6":"3750","7":"female","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"38.2","4":"20.0","5":"190","6":"3900","7":"male","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"38.1","4":"17.0","5":"181","6":"3175","7":"female","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"43.2","4":"19.0","5":"197","6":"4775","7":"male","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"38.1","4":"16.5","5":"198","6":"3825","7":"female","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"45.6","4":"20.3","5":"191","6":"4600","7":"male","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"39.7","4":"17.7","5":"193","6":"3200","7":"female","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"42.2","4":"19.5","5":"197","6":"4275","7":"male","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"39.6","4":"20.7","5":"191","6":"3900","7":"female","8":"2009"},{"1":"Adelie","2":"Biscoe","3":"42.7","4":"18.3","5":"196","6":"4075","7":"male","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"38.6","4":"17.0","5":"188","6":"2900","7":"female","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"37.3","4":"20.5","5":"199","6":"3775","7":"male","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"35.7","4":"17.0","5":"189","6":"3350","7":"female","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"41.1","4":"18.6","5":"189","6":"3325","7":"male","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"36.2","4":"17.2","5":"187","6":"3150","7":"female","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"37.7","4":"19.8","5":"198","6":"3500","7":"male","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"40.2","4":"17.0","5":"176","6":"3450","7":"female","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"41.4","4":"18.5","5":"202","6":"3875","7":"male","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"35.2","4":"15.9","5":"186","6":"3050","7":"female","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"40.6","4":"19.0","5":"199","6":"4000","7":"male","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"38.8","4":"17.6","5":"191","6":"3275","7":"female","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"41.5","4":"18.3","5":"195","6":"4300","7":"male","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"39.0","4":"17.1","5":"191","6":"3050","7":"female","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"44.1","4":"18.0","5":"210","6":"4000","7":"male","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"38.5","4":"17.9","5":"190","6":"3325","7":"female","8":"2009"},{"1":"Adelie","2":"Torgersen","3":"43.1","4":"19.2","5":"197","6":"3500","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"36.8","4":"18.5","5":"193","6":"3500","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"37.5","4":"18.5","5":"199","6":"4475","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"38.1","4":"17.6","5":"187","6":"3425","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"41.1","4":"17.5","5":"190","6":"3900","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"35.6","4":"17.5","5":"191","6":"3175","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"40.2","4":"20.1","5":"200","6":"3975","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"37.0","4":"16.5","5":"185","6":"3400","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"39.7","4":"17.9","5":"193","6":"4250","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"40.2","4":"17.1","5":"193","6":"3400","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"40.6","4":"17.2","5":"187","6":"3475","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"32.1","4":"15.5","5":"188","6":"3050","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"40.7","4":"17.0","5":"190","6":"3725","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"37.3","4":"16.8","5":"192","6":"3000","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"39.0","4":"18.7","5":"185","6":"3650","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"39.2","4":"18.6","5":"190","6":"4250","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"36.6","4":"18.4","5":"184","6":"3475","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"36.0","4":"17.8","5":"195","6":"3450","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"37.8","4":"18.1","5":"193","6":"3750","7":"male","8":"2009"},{"1":"Adelie","2":"Dream","3":"36.0","4":"17.1","5":"187","6":"3700","7":"female","8":"2009"},{"1":"Adelie","2":"Dream","3":"41.5","4":"18.5","5":"201","6":"4000","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"46.1","4":"13.2","5":"211","6":"4500","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"50.0","4":"16.3","5":"230","6":"5700","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"48.7","4":"14.1","5":"210","6":"4450","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"50.0","4":"15.2","5":"218","6":"5700","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"47.6","4":"14.5","5":"215","6":"5400","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"46.5","4":"13.5","5":"210","6":"4550","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"45.4","4":"14.6","5":"211","6":"4800","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"46.7","4":"15.3","5":"219","6":"5200","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"43.3","4":"13.4","5":"209","6":"4400","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"46.8","4":"15.4","5":"215","6":"5150","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"40.9","4":"13.7","5":"214","6":"4650","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"49.0","4":"16.1","5":"216","6":"5550","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"45.5","4":"13.7","5":"214","6":"4650","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"48.4","4":"14.6","5":"213","6":"5850","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"45.8","4":"14.6","5":"210","6":"4200","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"49.3","4":"15.7","5":"217","6":"5850","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"42.0","4":"13.5","5":"210","6":"4150","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"49.2","4":"15.2","5":"221","6":"6300","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"46.2","4":"14.5","5":"209","6":"4800","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"48.7","4":"15.1","5":"222","6":"5350","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"50.2","4":"14.3","5":"218","6":"5700","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"45.1","4":"14.5","5":"215","6":"5000","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"46.5","4":"14.5","5":"213","6":"4400","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"46.3","4":"15.8","5":"215","6":"5050","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"42.9","4":"13.1","5":"215","6":"5000","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"46.1","4":"15.1","5":"215","6":"5100","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"44.5","4":"14.3","5":"216","6":"4100","7":"NA","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"47.8","4":"15.0","5":"215","6":"5650","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"48.2","4":"14.3","5":"210","6":"4600","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"50.0","4":"15.3","5":"220","6":"5550","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"47.3","4":"15.3","5":"222","6":"5250","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"42.8","4":"14.2","5":"209","6":"4700","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"45.1","4":"14.5","5":"207","6":"5050","7":"female","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"59.6","4":"17.0","5":"230","6":"6050","7":"male","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"49.1","4":"14.8","5":"220","6":"5150","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"48.4","4":"16.3","5":"220","6":"5400","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"42.6","4":"13.7","5":"213","6":"4950","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"44.4","4":"17.3","5":"219","6":"5250","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"44.0","4":"13.6","5":"208","6":"4350","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"48.7","4":"15.7","5":"208","6":"5350","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"42.7","4":"13.7","5":"208","6":"3950","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"49.6","4":"16.0","5":"225","6":"5700","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.3","4":"13.7","5":"210","6":"4300","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"49.6","4":"15.0","5":"216","6":"4750","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"50.5","4":"15.9","5":"222","6":"5550","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"43.6","4":"13.9","5":"217","6":"4900","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.5","4":"13.9","5":"210","6":"4200","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"50.5","4":"15.9","5":"225","6":"5400","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"44.9","4":"13.3","5":"213","6":"5100","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.2","4":"15.8","5":"215","6":"5300","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"46.6","4":"14.2","5":"210","6":"4850","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"48.5","4":"14.1","5":"220","6":"5300","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.1","4":"14.4","5":"210","6":"4400","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"50.1","4":"15.0","5":"225","6":"5000","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"46.5","4":"14.4","5":"217","6":"4900","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.0","4":"15.4","5":"220","6":"5050","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"43.8","4":"13.9","5":"208","6":"4300","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.5","4":"15.0","5":"220","6":"5000","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"43.2","4":"14.5","5":"208","6":"4450","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"50.4","4":"15.3","5":"224","6":"5550","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.3","4":"13.8","5":"208","6":"4200","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"46.2","4":"14.9","5":"221","6":"5300","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.7","4":"13.9","5":"214","6":"4400","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"54.3","4":"15.7","5":"231","6":"5650","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.8","4":"14.2","5":"219","6":"4700","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"49.8","4":"16.8","5":"230","6":"5700","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"46.2","4":"14.4","5":"214","6":"4650","7":"NA","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"49.5","4":"16.2","5":"229","6":"5800","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"43.5","4":"14.2","5":"220","6":"4700","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"50.7","4":"15.0","5":"223","6":"5550","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"47.7","4":"15.0","5":"216","6":"4750","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"46.4","4":"15.6","5":"221","6":"5000","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"48.2","4":"15.6","5":"221","6":"5100","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"46.5","4":"14.8","5":"217","6":"5200","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"46.4","4":"15.0","5":"216","6":"4700","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"48.6","4":"16.0","5":"230","6":"5800","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"47.5","4":"14.2","5":"209","6":"4600","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"51.1","4":"16.3","5":"220","6":"6000","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.2","4":"13.8","5":"215","6":"4750","7":"female","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"45.2","4":"16.4","5":"223","6":"5950","7":"male","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"49.1","4":"14.5","5":"212","6":"4625","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"52.5","4":"15.6","5":"221","6":"5450","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"47.4","4":"14.6","5":"212","6":"4725","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"50.0","4":"15.9","5":"224","6":"5350","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"44.9","4":"13.8","5":"212","6":"4750","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"50.8","4":"17.3","5":"228","6":"5600","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"43.4","4":"14.4","5":"218","6":"4600","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"51.3","4":"14.2","5":"218","6":"5300","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"47.5","4":"14.0","5":"212","6":"4875","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"52.1","4":"17.0","5":"230","6":"5550","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"47.5","4":"15.0","5":"218","6":"4950","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"52.2","4":"17.1","5":"228","6":"5400","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"45.5","4":"14.5","5":"212","6":"4750","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"49.5","4":"16.1","5":"224","6":"5650","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"44.5","4":"14.7","5":"214","6":"4850","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"50.8","4":"15.7","5":"226","6":"5200","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"49.4","4":"15.8","5":"216","6":"4925","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"46.9","4":"14.6","5":"222","6":"4875","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"48.4","4":"14.4","5":"203","6":"4625","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"51.1","4":"16.5","5":"225","6":"5250","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"48.5","4":"15.0","5":"219","6":"4850","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"55.9","4":"17.0","5":"228","6":"5600","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"47.2","4":"15.5","5":"215","6":"4975","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"49.1","4":"15.0","5":"228","6":"5500","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"47.3","4":"13.8","5":"216","6":"4725","7":"NA","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"46.8","4":"16.1","5":"215","6":"5500","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"41.7","4":"14.7","5":"210","6":"4700","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"53.4","4":"15.8","5":"219","6":"5500","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"43.3","4":"14.0","5":"208","6":"4575","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"48.1","4":"15.1","5":"209","6":"5500","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"50.5","4":"15.2","5":"216","6":"5000","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"49.8","4":"15.9","5":"229","6":"5950","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"43.5","4":"15.2","5":"213","6":"4650","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"51.5","4":"16.3","5":"230","6":"5500","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"46.2","4":"14.1","5":"217","6":"4375","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"55.1","4":"16.0","5":"230","6":"5850","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"44.5","4":"15.7","5":"217","6":"4875","7":"NA","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"48.8","4":"16.2","5":"222","6":"6000","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"47.2","4":"13.7","5":"214","6":"4925","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"NA","4":"NA","5":"NA","6":"NA","7":"NA","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"46.8","4":"14.3","5":"215","6":"4850","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"50.4","4":"15.7","5":"222","6":"5750","7":"male","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"45.2","4":"14.8","5":"212","6":"5200","7":"female","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"49.9","4":"16.1","5":"213","6":"5400","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"46.5","4":"17.9","5":"192","6":"3500","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"50.0","4":"19.5","5":"196","6":"3900","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"51.3","4":"19.2","5":"193","6":"3650","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"45.4","4":"18.7","5":"188","6":"3525","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"52.7","4":"19.8","5":"197","6":"3725","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"45.2","4":"17.8","5":"198","6":"3950","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"46.1","4":"18.2","5":"178","6":"3250","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"51.3","4":"18.2","5":"197","6":"3750","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"46.0","4":"18.9","5":"195","6":"4150","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"51.3","4":"19.9","5":"198","6":"3700","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"46.6","4":"17.8","5":"193","6":"3800","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"51.7","4":"20.3","5":"194","6":"3775","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"47.0","4":"17.3","5":"185","6":"3700","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"52.0","4":"18.1","5":"201","6":"4050","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"45.9","4":"17.1","5":"190","6":"3575","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"50.5","4":"19.6","5":"201","6":"4050","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"50.3","4":"20.0","5":"197","6":"3300","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"58.0","4":"17.8","5":"181","6":"3700","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"46.4","4":"18.6","5":"190","6":"3450","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"49.2","4":"18.2","5":"195","6":"4400","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"42.4","4":"17.3","5":"181","6":"3600","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"48.5","4":"17.5","5":"191","6":"3400","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"43.2","4":"16.6","5":"187","6":"2900","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"50.6","4":"19.4","5":"193","6":"3800","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"46.7","4":"17.9","5":"195","6":"3300","7":"female","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"52.0","4":"19.0","5":"197","6":"4150","7":"male","8":"2007"},{"1":"Chinstrap","2":"Dream","3":"50.5","4":"18.4","5":"200","6":"3400","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"49.5","4":"19.0","5":"200","6":"3800","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"46.4","4":"17.8","5":"191","6":"3700","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"52.8","4":"20.0","5":"205","6":"4550","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"40.9","4":"16.6","5":"187","6":"3200","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"54.2","4":"20.8","5":"201","6":"4300","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"42.5","4":"16.7","5":"187","6":"3350","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"51.0","4":"18.8","5":"203","6":"4100","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"49.7","4":"18.6","5":"195","6":"3600","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"47.5","4":"16.8","5":"199","6":"3900","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"47.6","4":"18.3","5":"195","6":"3850","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"52.0","4":"20.7","5":"210","6":"4800","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"46.9","4":"16.6","5":"192","6":"2700","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"53.5","4":"19.9","5":"205","6":"4500","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"49.0","4":"19.5","5":"210","6":"3950","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"46.2","4":"17.5","5":"187","6":"3650","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"50.9","4":"19.1","5":"196","6":"3550","7":"male","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"45.5","4":"17.0","5":"196","6":"3500","7":"female","8":"2008"},{"1":"Chinstrap","2":"Dream","3":"50.9","4":"17.9","5":"196","6":"3675","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"50.8","4":"18.5","5":"201","6":"4450","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"50.1","4":"17.9","5":"190","6":"3400","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"49.0","4":"19.6","5":"212","6":"4300","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"51.5","4":"18.7","5":"187","6":"3250","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"49.8","4":"17.3","5":"198","6":"3675","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"48.1","4":"16.4","5":"199","6":"3325","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"51.4","4":"19.0","5":"201","6":"3950","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"45.7","4":"17.3","5":"193","6":"3600","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"50.7","4":"19.7","5":"203","6":"4050","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"42.5","4":"17.3","5":"187","6":"3350","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"52.2","4":"18.8","5":"197","6":"3450","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"45.2","4":"16.6","5":"191","6":"3250","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"49.3","4":"19.9","5":"203","6":"4050","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"50.2","4":"18.8","5":"202","6":"3800","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"45.6","4":"19.4","5":"194","6":"3525","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"51.9","4":"19.5","5":"206","6":"3950","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"46.8","4":"16.5","5":"189","6":"3650","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"45.7","4":"17.0","5":"195","6":"3650","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"55.8","4":"19.8","5":"207","6":"4000","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"43.5","4":"18.1","5":"202","6":"3400","7":"female","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"49.6","4":"18.2","5":"193","6":"3775","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"50.8","4":"19.0","5":"210","6":"4100","7":"male","8":"2009"},{"1":"Chinstrap","2":"Dream","3":"50.2","4":"18.7","5":"198","6":"3775","7":"female","8":"2009"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>In this data set, <strong>each row represents an individual penguin</strong> for which we know the <code>species</code>, <code>sex</code>, <code>island</code> of origin, and for which, across several <code>year</code>s, we have a set of size measurements:</p>
<ul>
<li>Bill length in mm (<code>bill_length_mm</code> column)</li>
<li>Bill depth in mm (<code>bill_depth_mm</code> column)</li>
<li>Flipper length in mm (<code>flipper_length_mm</code> column)</li>
<li>Body mass in grams (<code>body_mass_g</code> column)</li>
</ul>
<p>Here’s a visual for what the two bill measurements represent:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E03_wrangling_03/img/culmen_depth.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="exploring-data-with-the-count-function" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="exploring-data-with-the-count-function"><span class="header-section-number">3</span> Exploring data with the <code>count()</code> function</h2>
<p>To orient yourself a bit more to this dataset, you may want to see, for example, how many species and how many islands are in it, and how frequently each occur.</p>
<p>In other words, we may want to produce a few “count tables”, which is a common part of Exploratory Data Analysis (EDA). We can do this with the <em>dplyr</em> function <a href="https://dplyr.tidyverse.org/reference/count.html"><code>count()</code></a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 2
  species       n
  &lt;fct&gt;     &lt;int&gt;
1 Adelie      152
2 Chinstrap    68
3 Gentoo      124</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(island)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 2
  island        n
  &lt;fct&gt;     &lt;int&gt;
1 Biscoe      168
2 Dream       124
3 Torgersen    52</code></pre>
</div>
</div>
<p>OK, so we have penguins that belong to 3 different species occur on 3 different islands. Which species occur on which islands? We can answer this with <code>count()</code> simply by specifying both columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(species, island)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 3
  species   island        n
  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;
1 Adelie    Biscoe       44
2 Adelie    Dream        56
3 Adelie    Torgersen    52
4 Chinstrap Dream        68
5 Gentoo    Biscoe      124</code></pre>
</div>
</div>
<details>
<summary>
Why are not all possible combinations of <code>species</code> and <code>island</code> shown here?
</summary>
Some <code>species</code> do not appear to occur on (or at least haven’t been sampled on) certain <code>island</code>s. These zero-counts are not show, or “dropped, by default.
</details>
<hr style="height:1pt; visibility:hidden;">
<p>To <strong>show zero-count combinations</strong>, add <code>.drop = FALSE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(species, island, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 9 × 3
  species   island        n
  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;
1 Adelie    Biscoe       44
2 Adelie    Dream        56
3 Adelie    Torgersen    52
4 Chinstrap Biscoe        0
5 Chinstrap Dream        68
6 Chinstrap Torgersen     0
7 Gentoo    Biscoe      124
8 Gentoo    Dream         0
9 Gentoo    Torgersen     0</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Side note: Base R’s <code>table()</code> function <em>(Click to expand)</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Also worth mentioning is the base R <code>table()</code> function, which is similar to <code>count()</code>. While its output format is unwieldy for follow-up analyses, you may prefer its formatting especially when wanting to glance at a 2-way count table to see patterns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(penguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species, penguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>island)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>           
            Biscoe Dream Torgersen
  Adelie        44    56        52
  Chinstrap      0    68         0
  Gentoo       124     0         0</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>Additionally, as a <em>dplyr</em> function, <code>count()</code> only works with data frames. You may sometimes need to create a count table for a <strong>vector</strong>, and <code>table()</code> can do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">species_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species</span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(species_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>species_vector
   Adelie Chinstrap    Gentoo 
      152        68       124 </code></pre>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="missing-data" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="missing-data"><span class="header-section-number">4</span> Missing data</h2>
<p>Let’s compute the mean bill length across all penguins: we can do so by running the <code>mean()</code> function on the bill length column from the <code>penguins</code> data frame, which we can extract using the base R <code>$</code> notation, <code>penguins$bill_length_mm</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(penguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bill_length_mm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] NA</code></pre>
</div>
</div>
<details>
<summary>
What does <code>NA</code> mean and why are we getting this?
</summary>
<code>NA</code> means “not any” and is R’s way of representing missing data. When a computation in R returns <code>NA</code>, this means that some of the values used must themselves have been <code>NA</code>. In other words, one or more of the values in the <code>bill_length_mm</code> columns are <code>NA</code>: perhaps the penguin in question got away before its bill was measured.
</details>
<hr style="height:1pt; visibility:hidden;">
<p>We can overcome this issue, and compute the mean among the non-missing bill length values, by setting the argument <code>na.rm</code> (“NA-remove”) to <code>TRUE</code> – and note that this argument is available in many functions in R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(penguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 43.92193</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>Let’s find the penguins with a missing bill length measurement using <code>filter()</code> in combination with the <code>is.na()</code> function, which tests whether a value is <code>NA</code> or not:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(bill_length_mm))</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["species"],"name":[1],"type":["fct"],"align":["left"]},{"label":["island"],"name":[2],"type":["fct"],"align":["left"]},{"label":["bill_length_mm"],"name":[3],"type":["dbl"],"align":["right"]},{"label":["bill_depth_mm"],"name":[4],"type":["dbl"],"align":["right"]},{"label":["flipper_length_mm"],"name":[5],"type":["int"],"align":["right"]},{"label":["body_mass_g"],"name":[6],"type":["int"],"align":["right"]},{"label":["sex"],"name":[7],"type":["fct"],"align":["left"]},{"label":["year"],"name":[8],"type":["int"],"align":["right"]}],"data":[{"1":"Adelie","2":"Torgersen","3":"NA","4":"NA","5":"NA","6":"NA","7":"NA","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"NA","4":"NA","5":"NA","6":"NA","7":"NA","8":"2009"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="exercises-i" class="level2 exercise" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="exercises-i"><span class="header-section-number">5</span> Exercises I</h2>
<section id="count" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="count"><span class="header-section-number">5.1</span> <code>count()</code></h3>
<p><strong>A)</strong> Use <code>count()</code> to get the number of penguins for each combination of <code>species</code>, <code>year</code> and <code>sex</code>.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(species, year, sex)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 22 × 4
   species    year sex        n
   &lt;fct&gt;     &lt;int&gt; &lt;fct&gt;  &lt;int&gt;
 1 Adelie     2007 female    22
 2 Adelie     2007 male      22
 3 Adelie     2007 &lt;NA&gt;       6
 4 Adelie     2008 female    25
 5 Adelie     2008 male      25
 6 Adelie     2009 female    26
 7 Adelie     2009 male      26
 8 Chinstrap  2007 female    13
 9 Chinstrap  2007 male      13
10 Chinstrap  2008 female     9
# ℹ 12 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<p><strong>B)</strong> What is the least common combination of <code>species</code> and <code>sex</code> for penguins weighing less than 4,000 grams?</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
You’ll have to <code>filter()</code> first.
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The least common combination among such light-weight penguins is female Gentoo, of which there is only 1. Or you may also argue that the answer should be male Gentoo, of which there are none.</p>
<p>In the code below, I’m sorting the dataframe by the count (column <code>n</code>), so we’ll see the least common combinations at the top:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(body_mass_g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(species, sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(n)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 7 × 3
  species   sex        n
  &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;
1 Gentoo    male       0
2 Gentoo    female     1
3 Adelie    &lt;NA&gt;       4
4 Chinstrap male      19
5 Chinstrap female    33
6 Adelie    male      35
7 Adelie    female    73</code></pre>
</div>
</div>
<p>P.S.: <code>count()</code> does have a <code>sort</code> argument so you can omit the separate call to <code>arrange()</code>, though note that it can only sort descendingly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(body_mass_g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(species, sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 7 × 3
  species   sex        n
  &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;
1 Adelie    female    73
2 Adelie    male      35
3 Chinstrap female    33
4 Chinstrap male      19
5 Adelie    &lt;NA&gt;       4
6 Gentoo    female     1
7 Gentoo    male       0</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
</section>
<section id="removing-rows-with-missing-data" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="removing-rows-with-missing-data"><span class="header-section-number">5.2</span> Removing rows with missing data</h3>
<p>For the sake of convenience, we will here remove these two penguins that don’t seem to have had <em>any</em> measurements taken<sup>1</sup>.</p>
<p><strong>A</strong>) Do so by storing the output of an appropriate <code>filter()</code> operation in a new data frame <code>penguins_noNA</code>.</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
The code will be very similar to our <code>is.na</code> filtering operation above, except that you should negate this using a <code>!</code>: this will instead keep rows that are <em>not</em> <code>NA</code>.
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">penguins_noNA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(bill_length_mm))</span></code></pre></div>
</div>
</details>
<p><strong>B</strong>) Check how many penguins (rows) were removed.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>2 rows should have been removed.</p>
<p>There are many ways to check this! You can simply look for these objects in the Environment pane, print them to screen, or use the <code>nrow()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 344</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(penguins_noNA)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 342</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(penguins_noNA)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 2</code></pre>
</div>
</div>
</details>
</section>
</section>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Side note: Checking and removing all columns with missing data <em>(Click to expand)</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You can see rows with missing data in <em>any</em> column, regardless of how many there are in total, using the <code>if_any()</code> helper function of <code>filter()</code>:</p>
<ul>
<li>Its first argument is a column selection (here, <code>everything()</code> will select all columns),</li>
<li>Its second argument is the name of a function to run for each column (here, <code>is.na</code>)</li>
<li>Rows for which the function returns <code>TRUE</code> in <em>any</em> (hence “<code>if_any()</code>”) of the will be kept.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), is.na))</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":["species"],"name":[1],"type":["fct"],"align":["left"]},{"label":["island"],"name":[2],"type":["fct"],"align":["left"]},{"label":["bill_length_mm"],"name":[3],"type":["dbl"],"align":["right"]},{"label":["bill_depth_mm"],"name":[4],"type":["dbl"],"align":["right"]},{"label":["flipper_length_mm"],"name":[5],"type":["int"],"align":["right"]},{"label":["body_mass_g"],"name":[6],"type":["int"],"align":["right"]},{"label":["sex"],"name":[7],"type":["fct"],"align":["left"]},{"label":["year"],"name":[8],"type":["int"],"align":["right"]}],"data":[{"1":"Adelie","2":"Torgersen","3":"NA","4":"NA","5":"NA","6":"NA","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"34.1","4":"18.1","5":"193","6":"3475","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"42.0","4":"20.2","5":"190","6":"4250","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"37.8","4":"17.1","5":"186","6":"3300","7":"NA","8":"2007"},{"1":"Adelie","2":"Torgersen","3":"37.8","4":"17.3","5":"180","6":"3700","7":"NA","8":"2007"},{"1":"Adelie","2":"Dream","3":"37.5","4":"18.9","5":"179","6":"2975","7":"NA","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"44.5","4":"14.3","5":"216","6":"4100","7":"NA","8":"2007"},{"1":"Gentoo","2":"Biscoe","3":"46.2","4":"14.4","5":"214","6":"4650","7":"NA","8":"2008"},{"1":"Gentoo","2":"Biscoe","3":"47.3","4":"13.8","5":"216","6":"4725","7":"NA","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"44.5","4":"15.7","5":"217","6":"4875","7":"NA","8":"2009"},{"1":"Gentoo","2":"Biscoe","3":"NA","4":"NA","5":"NA","6":"NA","7":"NA","8":"2009"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>It looks like besides the 2 rows with missing measurements, there are also 9 rows where the <code>sex</code> of the penguins is missing (on the website, click the right arrow to see that column).</p>
<p>Removing all rows with missing data could be done by adding a <code>!</code> to the above code, but there is also a <code>drop_na()</code> convenience function available:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">penguins_noNA2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>()</span></code></pre></div>
</div>
<p>Let’s check the numbers of rows in the different data frames:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(penguins)         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The original data frame</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 344</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(penguins_noNA)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without the 2 penguins with missing measurements</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 342</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(penguins_noNA2)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without all rows with missing data</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 333</code></pre>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
<section id="the-summarize-function" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="the-summarize-function"><span class="header-section-number">6</span> The <code>summarize()</code> function</h2>
<p>The <a href="https://dplyr.tidyverse.org/reference/summarise.html"><code>summarize()</code> function from the <em>dplyr</em> package</a> can compute across-row data summaries. As a first example, here’s how you can compute the overall mean bill length with this function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 1
  `mean(bill_length_mm)`
                   &lt;dbl&gt;
1                   43.9</code></pre>
</div>
</div>
<p>(Note that we are now using <code>penguins_noNA</code>, which you created in the exercise above, and we will continue to do so during the rest of the session.)</p>
<p>As you can see, this function has quite a different output from the <em>dplyr</em> functions we’d seen so far. All of those returned a manipulated version of our original dataframe, whereas <code>summarize()</code> returns a “completely new” dataframe with a summary of the original data.</p>
<p>Note that the default summary column above is quite unwieldy, so we’ll typically want to provide a column name for it ourselves:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_len_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 1
  bill_len_mean
          &lt;dbl&gt;
1          43.9</code></pre>
</div>
</div>
<p>Also, summarizing <em>across all rows at once</em> with <code>summarize()</code>, like we just did, is much more verbose than the simple “base R” solution we saw earlier (<code>mean(penguins_noNA$bill_length_mm)</code>). Are we sure this function is useful?</p>
<hr style="height:1pt; visibility:hidden;">
<section id="summarizing-by-group" class="level4">
<h4 class="anchored" data-anchor-id="summarizing-by-group">Summarizing by group</h4>
<p>The real power of <code>summarize()</code> comes with its ability to easily compute <strong>group-wise summaries</strong>. For example, simply by adding <code>.by = species</code>, it will calculate the mean bill length separately for each species:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_len_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_length_mm), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 2
  species   bill_len_mean
  &lt;fct&gt;             &lt;dbl&gt;
1 Adelie             38.8
2 Gentoo             47.5
3 Chinstrap          48.8</code></pre>
</div>
</div>
<p>Nice! We can also compute multiple summarized variables — and use summarizing functions other than <code>mean()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_len_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_length_mm),</span>
<span id="cb51-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_len_max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(bill_length_mm),</span>
<span id="cb51-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_len_min =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(bill_length_mm),</span>
<span id="cb51-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 4
  species   bill_len_mean bill_len_max bill_len_min
  &lt;fct&gt;             &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;
1 Adelie             38.8         46           32.1
2 Gentoo             47.5         59.6         40.9
3 Chinstrap          48.8         58           40.9</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="including-group-counts" class="level4">
<h4 class="anchored" data-anchor-id="including-group-counts">Including group counts</h4>
<p>A handy helper function related to the <code>count()</code> function we used above is <strong><code>n()</code></strong>, which will compute the <strong>number of rows for each group</strong> (i.e.&nbsp;the group sizes, which can be good to know, for example so you don’t make unfounded conclusions based on really small sample sizes):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_depth_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_depth_mm),</span>
<span id="cb53-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_penguins =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb53-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 3
  species   bill_depth_mean n_penguins
  &lt;fct&gt;               &lt;dbl&gt;      &lt;int&gt;
1 Adelie               18.3        151
2 Gentoo               15.0        123
3 Chinstrap            18.4         68</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="common-summary-statistic-functions" class="level4">
<h4 class="anchored" data-anchor-id="common-summary-statistic-functions">Common summary statistic functions</h4>
<p>Here is an overview of the most commonly used functions to compute summaries:</p>
<ul>
<li><code>mean()</code> &amp; <code>median()</code></li>
<li><code>min()</code> &amp; <code>max()</code></li>
<li><code>sum()</code></li>
<li><code>sd()</code>: standard deviation</li>
<li><code>IQR()</code>: interquartile range</li>
<li><code>n()</code>: counts the number of rows (observations)</li>
<li><code>n_distinct()</code>: counts the number of distinct (unique) values</li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<p>Two final comments about <code>summarize()</code>:</p>
<ul>
<li><p>You can also ask <code>summarize()</code> to compute summaries by <strong>multiple columns</strong>, which will return separate summaries for each <em>combination</em> of the involved variables — we’ll see this in the exercises.</p></li>
<li><p>This may be obvious, but whatever column you are computing summaries by (using <code>.by</code>) should be a <strong>categorical variable</strong>. In our <code>diamond</code> examples, we’re only using columns that are <code>factor</code>s, but “regular” <code>character</code> columns will work just fine as well.</p></li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Side note: <code>group_by()</code> <em>(Click to expand)</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The “classic” way of using <code>summarize()</code> with multiple groups is by preceding it with a <code>group_by()</code> call — e.g., the code below is equivalent to our last example above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb55-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb55-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_depth_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_depth_mm),</span>
<span id="cb55-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_penguins =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 3
  species   bill_depth_mean n_penguins
  &lt;fct&gt;               &lt;dbl&gt;      &lt;int&gt;
1 Adelie               18.3        151
2 Chinstrap            18.4         68
3 Gentoo               15.0        123</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>The <code>.by</code> argument to <code>summarize()</code> (and other functions!) is a rather recent addition, but I prefer it over <code>group_by()</code>:</p>
<ul>
<li>It is simpler, a bit less typing, and makes the <code>summarize()</code> call self-contained</li>
<li>When grouping by multiple columns, <code>group_by()</code> has some odd, unhelpful behavior where it keeps some of the groupings, such that you likely need an <code>ungroup()</code> call as well.</li>
</ul>
</div>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="exercises-ii" class="level2 exercise" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="exercises-ii"><span class="header-section-number">7</span> Exercises II</h2>
<section id="means-across-variables" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="means-across-variables"><span class="header-section-number">7.1</span> Means across variables</h3>
<p>Compute the per-species means for all 4 size-related variables.</p>
<p>Do all these variables co-vary, such that, for example, one species is the largest for each measurement?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_length_mm),</span>
<span id="cb57-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_dep =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_depth_mm),</span>
<span id="cb57-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">flip_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(flipper_length_mm),</span>
<span id="cb57-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">body_mass =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(body_mass_g),</span>
<span id="cb57-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 5
  species   bill_len bill_dep flip_len body_mass
  &lt;fct&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;
1 Adelie        38.8     18.3     190.     3701.
2 Gentoo        47.5     15.0     217.     5076.
3 Chinstrap     48.8     18.4     196.     3733.</code></pre>
</div>
</div>
<p>The variables seem to largely co-vary across species, but bill depth stands out: the large Gentoo penguins have less deep bills than the other two species.</p>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="summaries-across-multiple-groups" class="level3" data-number="7.2">
<h3 data-number="7.2" class="anchored" data-anchor-id="summaries-across-multiple-groups"><span class="header-section-number">7.2</span> Summaries across multiple groups</h3>
<p>For Adelie penguins only, find the combination of <code>island</code> and <code>year</code> on which the lightest penguins were found, on average.</p>
<p>For this, you’ll have to group by both abovementioned columns. See if you can figure this out by yourself first, but check out the grouping hint below if you can’t get that part to work.</p>
<details>
<summary>
<b>Grouping hint</b> (click here)
</summary>
<code>.by = c(island, year)</code> will group by these 2 columns at once.
</details>
<details>
<summary>
<b>More hints</b> (click here)
</summary>
<ul>
<li><code>filter()</code> before you summarize to only keep Adelie penguins.</li>
<li><code>arrange()</code> after you summarize to see the lowest mean weights at the top.</li>
</ul>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb59-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb59-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mass_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(body_mass_g),</span>
<span id="cb59-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(island, year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb59-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(mass_mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 9 × 3
  island     year mass_mean
  &lt;fct&gt;     &lt;int&gt;     &lt;dbl&gt;
1 Torgersen  2009     3489.
2 Biscoe     2007     3620 
3 Biscoe     2008     3628.
4 Dream      2009     3651.
5 Dream      2007     3671.
6 Dream      2008     3756.
7 Torgersen  2007     3763.
8 Torgersen  2008     3856.
9 Biscoe     2009     3858.</code></pre>
</div>
</div>
</details>
</section>
</section>
<p><br></p>
<section id="bonus-the-slice_-functions" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="bonus-the-slice_-functions"><span class="header-section-number">8</span> Bonus: The <code>slice_</code> functions</h2>
<p>Like the <code>filter()</code> function, <a href="https://dplyr.tidyverse.org/reference/slice.html">functions in the <code>slice_</code> family</a> select specific rows, but have some different functionality that’s quite handy — especially in combination with grouping.</p>
<p>Let’s say we wanted to only get, <strong>for each <code>species</code>, the lightest penguin</strong>. We can do this pretty easily with the <code>slice_max()</code> function, which will return the row(s) with the lowest value for a specified variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_min</span>(body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 4 × 8
  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
1 Adelie    Biscoe           36.5          16.6               181        2850
2 Adelie    Biscoe           36.4          17.1               184        2850
3 Gentoo    Biscoe           42.7          13.7               208        3950
4 Chinstrap Dream            46.9          16.6               192        2700
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<details>
<summary>
Why are we getting more than one penguin per <code>species</code> in some cases? <em>(Click to see the answer)</em>
</summary>
Because of ties in the <code>body_mass_g</code> value. (We’ll get back to this in the next set of exercises.)
</details>
<hr style="height:1pt; visibility:hidden;">
<p>You can get more than just the single highest (<code>slice_max()</code>) / lowest (<code>slice_min()</code>) value per group with the <code>n=</code> argument, and can get a specific proportion of rows with <code>prop=</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the 3 penguins with the longest flippers for each year:</span></span>
<span id="cb63-2">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 10 × 8
   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Gentoo  Biscoe           50            16.3               230        5700
 2 Gentoo  Biscoe           59.6          17                 230        6050
 3 Gentoo  Biscoe           48.7          15.1               222        5350
 4 Gentoo  Biscoe           47.3          15.3               222        5250
 5 Gentoo  Biscoe           54.3          15.7               231        5650
 6 Gentoo  Biscoe           49.8          16.8               230        5700
 7 Gentoo  Biscoe           48.6          16                 230        5800
 8 Gentoo  Biscoe           52.1          17                 230        5550
 9 Gentoo  Biscoe           51.5          16.3               230        5500
10 Gentoo  Biscoe           55.1          16                 230        5850
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the 2% narrowest-billed penguins for each sex</span></span>
<span id="cb65-2">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_min</span>(bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 8
  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
  &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
1 Gentoo  Biscoe           48.5          14.1               220        5300
2 Gentoo  Biscoe           51.3          14.2               218        5300
3 Gentoo  Biscoe           50.2          14.3               218        5700
4 Gentoo  Biscoe           42.9          13.1               215        5000
5 Gentoo  Biscoe           46.1          13.2               211        4500
6 Gentoo  Biscoe           44.9          13.3               213        5100
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The full set of <code>slice_</code> functions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>slice_head(n = 1)</code> takes the first row.</li>
<li><code>slice_tail(n = 1)</code> takes the last row</li>
<li><code>slice_min(x, n = 1)</code> takes the row with the smallest value in column <code>x</code>.</li>
<li><code>slice_max(x, n = 1)</code> takes the row with the largest value in column <code>x</code>.</li>
<li><code>slice_sample(n = 1)</code> takes one random row.</li>
<li><code>slice(15)</code> takes the 15th row.</li>
</ul>
</div>
</div>
<p><br></p>
</section>
<section id="exercises-iii" class="level2 exercise" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="exercises-iii"><span class="header-section-number">9</span> Exercises III</h2>
<section id="no-ties-please" class="level3" data-number="9.1">
<h3 data-number="9.1" class="anchored" data-anchor-id="no-ties-please"><span class="header-section-number">9.1</span> No ties, please</h3>
<p>Above, when we first used <code>slice_min()</code>, we got multiple rows for some groups. Check out the help for this function (<code>?slice_min</code>) and get it to print only one row per group, even in the case of ties.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The <code>with_ties</code> argument controls this. The default is <code>TRUE</code> (do include ties), so we want to set it to <code>FALSE</code> (don’t include ties):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb67-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_min</span>(body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">with_ties =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 8
  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
1 Adelie    Biscoe           36.5          16.6               181        2850
2 Gentoo    Biscoe           42.7          13.7               208        3950
3 Chinstrap Dream            46.9          16.6               192        2700
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="random-penguins" class="level3" data-number="9.2">
<h3 data-number="9.2" class="anchored" data-anchor-id="random-penguins"><span class="header-section-number">9.2</span> Random penguins</h3>
<p>Use <code>slice_sample()</code> to get 5 random penguins for each combination of <code>year</code> and <code>island</code>.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">penguins_noNA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb69-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(year, island))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 45 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           36.6          17.8               185        3700
 2 Adelie  Torgersen           40.3          18                 195        3250
 3 Adelie  Torgersen           42.5          20.7               197        4500
 4 Adelie  Torgersen           38.9          17.8               181        3625
 5 Adelie  Torgersen           46            21.5               194        4200
 6 Gentoo  Biscoe              50.2          14.3               218        5700
 7 Gentoo  Biscoe              42            13.5               210        4150
 8 Gentoo  Biscoe              48.7          15.1               222        5350
 9 Gentoo  Biscoe              45.1          14.5               207        5050
10 Gentoo  Biscoe              46.1          13.2               211        4500
# ℹ 35 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
</details>
</section>
</section>




<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p> Removing rows with <code>NA</code>s <em>may</em> be appropriate for your own data too, but this will depend on the context!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S08E03_wrangling_03/</guid>
  <pubDate>Mon, 16 Sep 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Data wrangling: using select(), arrange(), and mutate()</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E02_wrangling_02/</link>
  <description><![CDATA[ 




<hr>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E02_wrangling_02/img/go-wrangling.png" class="img-fluid figure-img"></p>
<figcaption>Artwork by <a href="https://twitter.com/allison_horst">@allison_horst</a></figcaption>
</figure>
</div>
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>We are going to start off this semester of code club with a series of sessions on how to “wrangle” your data. It can be a struggle to get data into a format that is amenable for analysis, so we will be going through a series of functions and approaches that will get you more comfortable with manipulating your data.</p>
<p>Last Code Club, we didn’t get to go over the function <code>select()</code> - so we are going to do that today, along with the function <code>mutate()</code>. In brief:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/reference/select.html"><code>select()</code></a> picks columns</li>
<li><a href="https://dplyr.tidyverse.org/reference/arrange.html"><code>arrange()</code></a> sorts columns based on their values</li>
<li><a href="https://dplyr.tidyverse.org/reference/mutate.html"><code>mutate()</code></a> creates new columns based on existing ones</li>
</ul>
<section id="load-packages" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="load-packages"><span class="header-section-number">1.1</span> Load packages</h2>
<p>First we will load the packages that we will use today.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse) </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for cleaning column names</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'janitor'

The following objects are masked from 'package:stats':

    chisq.test, fisher.test</code></pre>
</div>
</div>
</section>
<section id="data" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="data"><span class="header-section-number">1.2</span> Data</h2>
<p>We are going to use data from <a href="https://www.cia.gov/the-world-factbook/">The World Factbook</a>, put together by the CIA to “provides basic intelligence on the history, people, government, economy, energy, geography, environment, communications, transportation, military, terrorism, and transnational issues for 265 world entities.” I thought this data would give us some opportunities to flex our R skills, and learn a bit about the world.</p>
<p>The data we are going to download can be found <a href="https://www.cia.gov/the-world-factbook/field/population/country-comparison/">here</a>, though I have saved the file, added it to our Code Club Github, and included some code below for you to download it.</p>
<p>If you downloaded this file two weeks ago, you don’t need to download it again, you just need to make sure you know where it is on your computer to read it in.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/osu-codeclub/osu-codeclub.github.io/main/posts/S08E01_wrangling_01/data/factbook-2015.csv"</span>,</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factbook_download_2015.csv"</span></span>
<span id="cb5-4">)</span></code></pre></div>
</div>
<p>We can read it in using the tidyverse function from the <a href="https://readr.tidyverse.org/index.html"><code>readr</code></a> package called <a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_csv()</code></a>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">factbook_2015 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factbook_download_2015.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 217 Columns: 53
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (2): Country Name, Country Code
dbl (51): Population, total, Population growth (annual %), Surface area (sq....

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>We can look at this data another way, using the function <code>head()</code> to look at the first six rows, and every column.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(factbook_2015)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 53
  `Country Name` `Country Code` `Population, total` Population growth (annual …¹
  &lt;chr&gt;          &lt;chr&gt;                        &lt;dbl&gt;                        &lt;dbl&gt;
1 Afghanistan    AFG                       33753499                        3.12 
2 Albania        ALB                        2880703                       -0.291
3 Algeria        DZA                       39543154                        2.00 
4 American Samoa ASM                          51368                       -1.64 
5 Andorra        AND                          71746                        0.174
6 Angola         AGO                       28127721                        3.62 
# ℹ abbreviated name: ¹​`Population growth (annual %)`
# ℹ 49 more variables: `Surface area (sq. km)` &lt;dbl&gt;,
#   `Poverty headcount ratio at national poverty lines (% of population)` &lt;dbl&gt;,
#   `GNI, Atlas method (current US$)` &lt;dbl&gt;,
#   `GNI per capita, Atlas method (current US$)` &lt;dbl&gt;,
#   `GNI, PPP (current international $)` &lt;dbl&gt;,
#   `GNI per capita, PPP (current international $)` &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>Two weeks ago, we cleaned up the column names, so let’s do that again. If you want to remember why, you can go back to <a href="https://osu-codeclub.github.io/posts/S08E01_wrangling_01/#cleaning-column-names">that lesson</a>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">factbook_2015 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(factbook_2015)</span></code></pre></div>
</div>
</section>
</section>
<section id="choose-columns-with-select" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Choose columns with <code>select()</code></h1>
<p>Often you will want to pick only certain columns in your dataframe, and you can do this with the function <a href="https://dplyr.tidyverse.org/reference/select.html"><code>select()</code></a>. You can pick columns generally by:</p>
<ul>
<li>their names</li>
<li>their position</li>
<li>characteristics of that column</li>
</ul>
<p>If we want to know how the arguments to <code>select()</code> work, we can access the documentation material about the function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">?<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>()</span></code></pre></div>
</div>
<p>Let’s first select columns by their names. Let’s pick just the <code>country_name</code>, <code>population_total</code>, and <code>surface_area_sq_km</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, population_total, surface_area_sq_km)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 3
   country_name        population_total surface_area_sq_km
   &lt;chr&gt;                          &lt;dbl&gt;              &lt;dbl&gt;
 1 Afghanistan                 33753499             652860
 2 Albania                      2880703              28750
 3 Algeria                     39543154            2381741
 4 American Samoa                 51368                200
 5 Andorra                        71746                470
 6 Angola                      28127721            1246700
 7 Antigua and Barbuda            89941                440
 8 Argentina                   43131966            2780400
 9 Armenia                      2878595              29740
10 Aruba                         104257                180
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>Those columns are also the 1st, 3rd, and 5th columns in our data frame, do we can select them by their indices, or by their location.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 3
   country_name        population_total surface_area_sq_km
   &lt;chr&gt;                          &lt;dbl&gt;              &lt;dbl&gt;
 1 Afghanistan                 33753499             652860
 2 Albania                      2880703              28750
 3 Algeria                     39543154            2381741
 4 American Samoa                 51368                200
 5 Andorra                        71746                470
 6 Angola                      28127721            1246700
 7 Antigua and Barbuda            89941                440
 8 Argentina                   43131966            2780400
 9 Armenia                      2878595              29740
10 Aruba                         104257                180
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>In general I would recommend against this because its really hard to remember which column indices are which variables today, nevermind returning back to old code 1 year from now.</p>
<p>We can also select columns that are consecutive, using the <code>:</code> operator. Below I’m selecting the columns <code>country_name</code> through <code>population_growth_annual_percent</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>population_growth_annual_percent)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 4
   country_name        country_code population_total population_growth_annual_…¹
   &lt;chr&gt;               &lt;chr&gt;                   &lt;dbl&gt;                       &lt;dbl&gt;
 1 Afghanistan         AFG                  33753499                       3.12 
 2 Albania             ALB                   2880703                      -0.291
 3 Algeria             DZA                  39543154                       2.00 
 4 American Samoa      ASM                     51368                      -1.64 
 5 Andorra             AND                     71746                       0.174
 6 Angola              AGO                  28127721                       3.62 
 7 Antigua and Barbuda ATG                     89941                       0.787
 8 Argentina           ARG                  43131966                       1.08 
 9 Armenia             ARM                   2878595                      -0.393
10 Aruba               ABW                    104257                       0.638
# ℹ 207 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent</code></pre>
</div>
</div>
<p>We can remove columns using the <code>!</code> operator:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>country_code)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 52
   country_name       population_total population_growth_an…¹ surface_area_sq_km
   &lt;chr&gt;                         &lt;dbl&gt;                  &lt;dbl&gt;              &lt;dbl&gt;
 1 Afghanistan                33753499                  3.12              652860
 2 Albania                     2880703                 -0.291              28750
 3 Algeria                    39543154                  2.00             2381741
 4 American Samoa                51368                 -1.64                 200
 5 Andorra                       71746                  0.174                470
 6 Angola                     28127721                  3.62             1246700
 7 Antigua and Barbu…            89941                  0.787                440
 8 Argentina                  43131966                  1.08             2780400
 9 Armenia                     2878595                 -0.393              29740
10 Aruba                        104257                  0.638                180
# ℹ 207 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent
# ℹ 48 more variables:
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>We can also select data based on its characteristics. We can select using <a href="https://dplyr.tidyverse.org/reference/select.html">selection helpers</a> like:</p>
<ul>
<li><a href="https://tidyselect.r-lib.org/reference/everything.html"><code>everything()</code></a>: picks all variables</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>starts_with()</code></a>: starts with some prefix</li>
<li><a href=""><code>ends_with()</code></a>: ends with some suffix</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>contains()</code></a>: contains a specific string</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>matches()</code></a>: matches a regular expression</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>num_range()</code></a>: matches a numeric range</li>
<li><a href="https://tidyselect.r-lib.org/reference/where.html"><code>where()</code></a>: selects columns where the statement given in the argument is TRUE</li>
<li><a href="https://tidyselect.r-lib.org/reference/all_of.html"><code>all_of()</code></a>: matches all of the variable names in a character vector</li>
<li><a href="https://tidyselect.r-lib.org/reference/all_of.html"><code>any_of()</code></a>: matches any of the names in a character vector</li>
</ul>
<p>For example, we might want each column that has anything to do with gross domestic product, or gdp. We can select all of the columns which contain the string “gdp” in their name. I’m also going to add <code>country_name</code> so we know what we’re working with.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gdp"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 15
   country_name     water_productivity_t…¹ gdp_current_us gdp_growth_annual_pe…²
   &lt;chr&gt;                             &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;
 1 Afghanistan                       0.943    19134221645                  1.45 
 2 Albania                          12.4      11386853113                  2.22 
 3 Algeria                          20.9     187494000000                  3.2  
 4 American Samoa                   NA          673000000                  3.15 
 5 Andorra                          NA         2789881259                  1.43 
 6 Angola                          128.       90496420507                  0.944
 7 Antigua and Bar…                327.        1437755556                  1.45 
 8 Argentina                        15.8     594749000000                  2.73 
 9 Armenia                           3.23     10553337518                  3.20 
10 Aruba                            NA         2962907263                 -0.624
# ℹ 207 more rows
# ℹ abbreviated names:
#   ¹​water_productivity_total_constant_2015_us_gdp_per_cubic_meter_of_total_freshwater_withdrawal,
#   ²​gdp_growth_annual_percent
# ℹ 11 more variables: inflation_gdp_deflator_annual_percent &lt;dbl&gt;,
#   agriculture_forestry_and_fishing_value_added_percent_of_gdp &lt;dbl&gt;,
#   industry_including_construction_value_added_percent_of_gdp &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>We can also select all column that meet a certain predicate. For example, we can pick all of the column that are of the type character.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.character))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 2
   country_name        country_code
   &lt;chr&gt;               &lt;chr&gt;       
 1 Afghanistan         AFG         
 2 Albania             ALB         
 3 Algeria             DZA         
 4 American Samoa      ASM         
 5 Andorra             AND         
 6 Angola              AGO         
 7 Antigua and Barbuda ATG         
 8 Argentina           ARG         
 9 Armenia             ARM         
10 Aruba               ABW         
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>We can also combine selections using the <code>&amp;</code> (and), <code>|</code> (or), and <code>!</code> (not) operators. For example, if I want the columns about GNI but only the international ones I can:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gni"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"international"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 2
   gni_ppp_current_international gni_per_capita_ppp_current_international
                           &lt;dbl&gt;                                    &lt;dbl&gt;
 1                   77739869000                                     2300
 2                   33981401261                                    11800
 3                  541234000000                                    13690
 4                            NA                                       NA
 5                            NA                                       NA
 6                  190283000000                                     6760
 7                    1766297473                                    19640
 8                  848960000000                                    19680
 9                   30505448341                                    10600
10                    3718236361                                    35660
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>We can also use <code>select()</code> to order our columns, as the order we select them in dictates the order they will exist in our dataframe.</p>
<section id="practice" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="practice"><span class="header-section-number">2.1</span> Practice</h2>
<p>Come up with 3 different ways to select the columns about children, and make sure you also include a country column so you know what you’re looking at.</p>
<details>
<summary>
Need a hint?
</summary>
<p>Here are the columns that I’m considering to be about children:</p>
<p>[1] “country_name”<br>
[17] “mortality_rate_under_5_per_1_000_live_births”<br>
[18] “prevalence_of_underweight_weight_for_age_percent_of_children_under_5”<br>
[19] “immunization_measles_percent_of_children_ages_12_23_months”<br>
[20] “primary_completion_rate_total_percent_of_relevant_age_group”<br>
[21] “school_enrollment_secondary_percent_gross”<br>
[22] “school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi”</p>
</details>
<details>
<summary>
Click for the solution
</summary>
<p>By name and for columns in a row, using the <code>:</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, </span>
<span id="cb26-3">         mortality_rate_under_5_per_1_000_live_births<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb26-4">         school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 7
   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²
   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;
 1 Afghanistan                                       72.7                     NA
 2 Albania                                            9.6                     NA
 3 Algeria                                           25.3                     NA
 4 American Samoa                                    NA                       NA
 5 Andorra                                            3.6                     NA
 6 Angola                                            87.9                     19
 7 Antigua and Barbuda                               10.9                     NA
 8 Argentina                                         11.8                     NA
 9 Armenia                                           14.5                     NA
10 Aruba                                             NA                       NA
# ℹ 207 more rows
# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,
#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5
# ℹ 4 more variables:
#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,
#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,
#   school_enrollment_secondary_percent_gross &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>By index:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 7
   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²
   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;
 1 Afghanistan                                       72.7                     NA
 2 Albania                                            9.6                     NA
 3 Algeria                                           25.3                     NA
 4 American Samoa                                    NA                       NA
 5 Andorra                                            3.6                     NA
 6 Angola                                            87.9                     19
 7 Antigua and Barbuda                               10.9                     NA
 8 Argentina                                         11.8                     NA
 9 Armenia                                           14.5                     NA
10 Aruba                                             NA                       NA
# ℹ 207 more rows
# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,
#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5
# ℹ 4 more variables:
#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,
#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,
#   school_enrollment_secondary_percent_gross &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>By name characteristics:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"under_5"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"children"</span>),</span>
<span id="cb30-3">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"primary"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"school"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 7
   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²
   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;
 1 Afghanistan                                       72.7                     NA
 2 Albania                                            9.6                     NA
 3 Algeria                                           25.3                     NA
 4 American Samoa                                    NA                       NA
 5 Andorra                                            3.6                     NA
 6 Angola                                            87.9                     19
 7 Antigua and Barbuda                               10.9                     NA
 8 Argentina                                         11.8                     NA
 9 Armenia                                           14.5                     NA
10 Aruba                                             NA                       NA
# ℹ 207 more rows
# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,
#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5
# ℹ 4 more variables:
#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,
#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,
#   school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>These are just some ways!</p>
</details>
</section>
</section>
<section id="sorting-data-with-arrange" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Sorting data with <code>arrange()</code></h1>
<p>A nice helper function for looking at your data is <a href="https://dplyr.tidyverse.org/reference/arrange.html"><code>arrange()</code></a> which sorts your data.</p>
<p>We can sort our data based on how much forest (<code>forest_area_sq_km</code>) each country has.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(forest_area_sq_km)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 53
   country_name             country_code population_total population_growth_an…¹
   &lt;chr&gt;                    &lt;chr&gt;                   &lt;dbl&gt;                  &lt;dbl&gt;
 1 Gibraltar                GIB                     32520                  0.209
 2 Monaco                   MCO                     36760                  1.78 
 3 Nauru                    NRU                     11185                  2.21 
 4 Qatar                    QAT                   2414573                  8.65 
 5 Curacao                  CUW                    157980                  1.32 
 6 Faroe Islands            FRO                     48816                  0.722
 7 Greenland                GRL                     56114                 -0.322
 8 Malta                    MLT                    445053                  2.39 
 9 Sint Maarten (Dutch par… SXM                     38825                  2.98 
10 Aruba                    ABW                    104257                  0.638
# ℹ 207 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent
# ℹ 49 more variables: surface_area_sq_km &lt;dbl&gt;,
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>By default, <code>arrange()</code> sorts small to big, if we want to go from big to small we can set <code>arrange(desc())</code> to sort by descending.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(forest_area_sq_km))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 53
   country_name       country_code population_total population_growth_annual_p…¹
   &lt;chr&gt;              &lt;chr&gt;                   &lt;dbl&gt;                        &lt;dbl&gt;
 1 Russian Federation RUS                 144640716                        0.279
 2 Brazil             BRA                 205188205                        0.846
 3 Canada             CAN                  35704498                        0.760
 4 United States      USA                 320738994                        0.736
 5 China              CHN                1379860000                        0.581
 6 Australia          AUS                  23815995                        1.44 
 7 Congo, Dem. Rep.   COD                  78656904                        3.39 
 8 Indonesia          IDN                 259091970                        1.11 
 9 Peru               PER                  30711863                        1.17 
10 India              IND                1322866505                        1.19 
# ℹ 207 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent
# ℹ 49 more variables: surface_area_sq_km &lt;dbl&gt;,
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>It’s not too surprising that the biggest countries in forest-feasible lattitudes have the most forest.</p>
<p>We can also add <code>select()</code> into our pipe, so that we don’t have to scroll so far to see what the actual amount of forest is.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, surface_area_sq_km, forest_area_sq_km) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(forest_area_sq_km))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 3
   country_name       surface_area_sq_km forest_area_sq_km
   &lt;chr&gt;                           &lt;dbl&gt;             &lt;dbl&gt;
 1 Russian Federation           17098250          8149305.
 2 Brazil                        8515770          5038848 
 3 Canada                        9879750          3471157.
 4 United States                 9831510          3100950 
 5 China                         9562911          2102942.
 6 Australia                     7741220          1330945 
 7 Congo, Dem. Rep.              2344860          1316621.
 8 Indonesia                     1913580           950279 
 9 Peru                          1285220           731945.
10 India                         3287260           708280 
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>Wow almost 50% of Russia is forested.</p>
<section id="practice-1" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">3.1</span> Practice</h2>
<p>Which countries have the lowest cell phone subscriptions? <code>mobile_cellular_subscriptions_per_100_people</code></p>
<details>
<summary>
Need a hint?
</summary>
<p>You can use the function <code>arrange()</code> to sort your columns. The default arranging is from low to high, so if you want to go from high to low, you can set <code>arrange(desc())</code>.</p>
</details>
<details>
<summary>
Click for the solution
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, mobile_cellular_subscriptions_per_100_people) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(mobile_cellular_subscriptions_per_100_people)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 2
   country_name              mobile_cellular_subscriptions_per_100_people
   &lt;chr&gt;                                                            &lt;dbl&gt;
 1 Korea, Dem. People's Rep.                                         12.8
 2 Eritrea                                                           14.2
 3 Micronesia, Fed. Sts.                                             20.6
 4 Central African Republic                                          25.8
 5 South Sudan                                                       25.9
 6 Cuba                                                              29.4
 7 Djibouti                                                          31.2
 8 Marshall Islands                                                  31.4
 9 Kiribati                                                          35.1
10 Chad                                                              38.7
# ℹ 207 more rows</code></pre>
</div>
</div>
</details>
</section>
</section>
<section id="creating-new-columns-with-mutate" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Creating new columns with <code>mutate()</code></h1>
<p>Sometimes we might want to use our existing columns to create new ones. For example, we might want to know which country has the highest percentage of its land as forest. In our current data set, we can see amount of forested land (<code>forest_area_sq_km</code>) but this doesn’t take into account the size of the country. Fortunately, we also have the variable <code>surface_area_sq_km</code> so this is something we can calculate ourselves.</p>
<p>Conceptually, a new variable representing the percentage of forested land can be created by taking <code>forest_area_sq_km</code>, dividing it by <code>surface_area_sq_km</code> and multiplying by 100.</p>
<p>The function <code>mutate()</code> uses the syntax <code>new_variable = existing_variables</code>. I am also saving over our existing dataframe so we can see our new variable. I am then using <code>select()</code> to see only the variables I want, and order by <code>desc(forest_percent)</code> to see the countries with the highest percentage of forest at the top.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">factbook_2015 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">forest_percent =</span> (forest_area_sq_km <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> surface_area_sq_km)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb40-3"></span>
<span id="cb40-4">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb40-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, forest_area_sq_km, surface_area_sq_km, forest_percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb40-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(forest_percent))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 4
   country_name          forest_area_sq_km surface_area_sq_km forest_percent
   &lt;chr&gt;                             &lt;dbl&gt;              &lt;dbl&gt;          &lt;dbl&gt;
 1 Suriname                        152517.             163820           93.1
 2 Micronesia, Fed. Sts.              643.                700           91.8
 3 Palau                              410.                460           89.1
 4 Equatorial Guinea                24902.              28050           88.8
 5 Gabon                           235900              267670           88.1
 6 Solomon Islands                  25266.              28900           87.4
 7 American Samoa                     173.                200           86.4
 8 Guyana                          184614.             214970           85.9
 9 Papua New Guinea                360244.             462840           77.8
10 Seychelles                         337                 460           73.3
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>Wow! Suriname is 93% forested!</p>
<p>We might be interested to have <code>forest_area_sq_km</code> and <code>surface_area_sq_km</code> show up in scientific notation,. We will use the function <code>format()</code> within a <code>mutate()</code> function to indicate that scientific notation should be true (i.e., <code>scientific = TRUE</code>).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">factbook_2015 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">forest_area_sq_km =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(forest_area_sq_km, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scientific =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb42-3">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">surface_area_sq_km =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(surface_area_sq_km, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scientific =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
</div>
<p>Did it work?</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, forest_area_sq_km, surface_area_sq_km) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(surface_area_sq_km))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 3
   country_name             forest_area_sq_km surface_area_sq_km
   &lt;chr&gt;                    &lt;chr&gt;             &lt;chr&gt;             
 1 Canada                   3.471157e+06      9.879750e+06      
 2 United Arab Emirates     3.173000e+03      9.864790e+04      
 3 United States            3.100950e+06      9.831510e+06      
 4 Sao Tome and Principe    5.500000e+02      9.600000e+02      
 5 China                    2.102942e+06      9.562911e+06      
 6 Turks and Caicos Islands 1.052000e+02      9.500000e+02      
 7 Tanzania                 4.809000e+05      9.473000e+05      
 8 Hungary                  2.060820e+04      9.303000e+04      
 9 Cyprus                   1.727100e+03      9.251000e+03      
10 Nigeria                  2.244345e+05      9.237700e+05      
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>Excellent.</p>
<section id="practice-2" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="practice-2"><span class="header-section-number">4.1</span> Practice</h2>
<p>Which country has the highest dollar amount of GDP due to agricultlure, foresty and fishing products? What is that amount in US dollars?</p>
<details>
<summary>
Need a hint?
</summary>
<p>Our data has <code>gdp_current_us</code> and <code>agriculture_forestry_and_fishing_value_added_percent_of_gdp</code>. From this you can calculate how much the total GDP from these sources.</p>
</details>
<details>
<summary>
Click for the solution
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb45-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ag_gdp =</span> agriculture_forestry_and_fishing_value_added_percent_of_gdp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> gdp_current_us) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, ag_gdp, agriculture_forestry_and_fishing_value_added_percent_of_gdp, gdp_current_us) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(ag_gdp))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 4
   country_name        ag_gdp agriculture_forestry_and_fishing_…¹ gdp_current_us
   &lt;chr&gt;                &lt;dbl&gt;                               &lt;dbl&gt;          &lt;dbl&gt;
 1 China              9.28e13                                8.39        1.11e13
 2 India              3.40e13                               16.2         2.10e12
 3 United States      1.88e13                                1.03        1.83e13
 4 Indonesia          1.16e13                               13.5         8.61e11
 5 Nigeria            1.02e13                               20.6         4.93e11
 6 Brazil             7.78e12                                4.32        1.80e12
 7 Pakistan           6.98e12                               23.3         3.00e11
 8 Turkiye            5.94e12                                6.87        8.64e11
 9 Russian Federation 5.28e12                                3.87        1.36e12
10 Japan              4.60e12                                1.03        4.44e12
# ℹ 207 more rows
# ℹ abbreviated name:
#   ¹​agriculture_forestry_and_fishing_value_added_percent_of_gdp</code></pre>
</div>
</div>
</details>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S08E02_wrangling_02/</guid>
  <pubDate>Mon, 09 Sep 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S08E02_wrangling_02/img/go-wrangling.png" medium="image" type="image/png" height="115" width="144"/>
</item>
<item>
  <title>Data wrangling: more on filter() and select()</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S08E01_wrangling_01/</link>
  <description><![CDATA[ 




<hr>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E01_wrangling_01/img/go-wrangling.png" class="img-fluid figure-img"></p>
<figcaption>Artwork by <a href="https://twitter.com/allison_horst">@allison_horst</a></figcaption>
</figure>
</div>
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>We are going to start off this semester of code club with a series of sessions on how to “wrangle” your data. It can be a struggle to get data into a format that is amenable for analysis, so we will be going through a series of functions and approaches that will get you more comfortable with manipulating your data.</p>
<blockquote class="blockquote">
<p>“Yet far too much handcrafted work — what data scientists call “data wrangling,” “data munging” and “data janitor work” — is still required. Data scientists, according to interviews and expert estimates, spend from 50 percent to 80 percent of their time mired in this more mundane labor of collecting and preparing unruly digital data, before it can be explored for useful nuggets.” - <a href="https://www.nytimes.com/2014/08/18/technology/for-big-data-scientists-hurdle-to-insights-is-janitor-work.html">For Big-Data Scientists, ‘Janitor Work’ Is Key Hurdle to Insights, NY Times</a></p>
</blockquote>
<p>If you don’t have R and RStudio on your computer, you can find instructions for installation <a href="https://osu-codeclub.github.io/pages/setup.html">here</a>. You can also find some additional introductory material on getting set up in RStudio <a href="https://osu-codeclub.github.io/posts/S07E01_basics_01/">here</a>.</p>
<section id="poll---who-is-new-to-r" class="level3" data-number="1.0.1">
<h3 data-number="1.0.1" class="anchored" data-anchor-id="poll---who-is-new-to-r"><span class="header-section-number">1.0.1</span> Poll - who is new to R?</h3>
</section>
<section id="load-libraries" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="load-libraries"><span class="header-section-number">1.1</span> Load libraries</h2>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
</section>
<section id="data" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="data"><span class="header-section-number">1.2</span> Data</h2>
<p>We are going to use data from <a href="https://www.cia.gov/the-world-factbook/">The World Factbook</a>, put together by the CIA to “provides basic intelligence on the history, people, government, economy, energy, geography, environment, communications, transportation, military, terrorism, and transnational issues for 265 world entities.” I thought this data would give us some opportunities to flex our R skills, and learn a bit about the world.</p>
<p>The data we are going to download can be found <a href="https://www.cia.gov/the-world-factbook/field/population/country-comparison/">here</a>, though I have saved the file, added it to our Code Club Github, and included some code below for you to download it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/osu-codeclub/osu-codeclub.github.io/main/posts/S08E01_wrangling_01/data/factbook-2015.csv"</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factbook_download_2015.csv"</span></span>
<span id="cb3-4">)</span></code></pre></div>
</div>
<p>You should now see the file “factbook_download_2015.csv” in your working directory.</p>
<p>We can read it in using the tidyverse function from the <a href="https://readr.tidyverse.org/index.html"><code>readr</code></a> package called <a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_csv()</code></a>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">factbook_2015 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factbook_download_2015.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 217 Columns: 53
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (2): Country Name, Country Code
dbl (51): Population, total, Population growth (annual %), Surface area (sq....

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>Let’s get a better handle on this data. We can use the function <a href="https://dplyr.tidyverse.org/reference/glimpse.html"><code>glimpse()</code></a> to get a “glimpse” at our data.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(factbook_2015)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>Rows: 217
Columns: 53
$ `Country Name`                                                                                     &lt;chr&gt; …
$ `Country Code`                                                                                     &lt;chr&gt; …
$ `Population, total`                                                                                &lt;dbl&gt; …
$ `Population growth (annual %)`                                                                     &lt;dbl&gt; …
$ `Surface area (sq. km)`                                                                            &lt;dbl&gt; …
$ `Poverty headcount ratio at national poverty lines (% of population)`                              &lt;dbl&gt; …
$ `GNI, Atlas method (current US$)`                                                                  &lt;dbl&gt; …
$ `GNI per capita, Atlas method (current US$)`                                                       &lt;dbl&gt; …
$ `GNI, PPP (current international $)`                                                               &lt;dbl&gt; …
$ `GNI per capita, PPP (current international $)`                                                    &lt;dbl&gt; …
$ `Income share held by lowest 20%`                                                                  &lt;dbl&gt; …
$ `Life expectancy at birth, total (years)`                                                          &lt;dbl&gt; …
$ `Fertility rate, total (births per woman)`                                                         &lt;dbl&gt; …
$ `Adolescent fertility rate (births per 1,000 women ages 15-19)`                                    &lt;dbl&gt; …
$ `Contraceptive prevalence, any method (% of married women ages 15-49)`                             &lt;dbl&gt; …
$ `Births attended by skilled health staff (% of total)`                                             &lt;dbl&gt; …
$ `Mortality rate, under-5 (per 1,000 live births)`                                                  &lt;dbl&gt; …
$ `Prevalence of underweight, weight for age (% of children under 5)`                                &lt;dbl&gt; …
$ `Immunization, measles (% of children ages 12-23 months)`                                          &lt;dbl&gt; …
$ `Primary completion rate, total (% of relevant age group)`                                         &lt;dbl&gt; …
$ `School enrollment, secondary (% gross)`                                                           &lt;dbl&gt; …
$ `School enrollment, primary and secondary (gross), gender parity index (GPI)`                      &lt;dbl&gt; …
$ `Prevalence of HIV, total (% of population ages 15-49)`                                            &lt;dbl&gt; …
$ `Forest area (sq. km)`                                                                             &lt;dbl&gt; …
$ `Water productivity, total (constant 2015 US$ GDP per cubic meter of total freshwater withdrawal)` &lt;dbl&gt; …
$ `Energy use (kg of oil equivalent per capita)`                                                     &lt;dbl&gt; …
$ `CO2 emissions (metric tons per capita)`                                                           &lt;dbl&gt; …
$ `Electric power consumption (kWh per capita)`                                                      &lt;dbl&gt; …
$ `GDP (current US$)`                                                                                &lt;dbl&gt; …
$ `GDP growth (annual %)`                                                                            &lt;dbl&gt; …
$ `Inflation, GDP deflator (annual %)`                                                               &lt;dbl&gt; …
$ `Agriculture, forestry, and fishing, value added (% of GDP)`                                       &lt;dbl&gt; …
$ `Industry (including construction), value added (% of GDP)`                                        &lt;dbl&gt; …
$ `Exports of goods and services (% of GDP)`                                                         &lt;dbl&gt; …
$ `Imports of goods and services (% of GDP)`                                                         &lt;dbl&gt; …
$ `Gross capital formation (% of GDP)`                                                               &lt;dbl&gt; …
$ `Revenue, excluding grants (% of GDP)`                                                             &lt;dbl&gt; …
$ `Start-up procedures to register a business (number)`                                              &lt;dbl&gt; …
$ `Market capitalization of listed domestic companies (% of GDP)`                                    &lt;dbl&gt; …
$ `Military expenditure (% of GDP)`                                                                  &lt;dbl&gt; …
$ `Mobile cellular subscriptions (per 100 people)`                                                   &lt;dbl&gt; …
$ `High-technology exports (% of manufactured exports)`                                              &lt;dbl&gt; …
$ `Merchandise trade (% of GDP)`                                                                     &lt;dbl&gt; …
$ `Net barter terms of trade index (2015 = 100)`                                                     &lt;dbl&gt; …
$ `External debt stocks, total (DOD, current US$)`                                                   &lt;dbl&gt; …
$ `Total debt service (% of GNI)`                                                                    &lt;dbl&gt; …
$ `Net migration`                                                                                    &lt;dbl&gt; …
$ `Personal remittances, paid (current US$)`                                                         &lt;dbl&gt; …
$ `Foreign direct investment, net inflows (BoP, current US$)`                                        &lt;dbl&gt; …
$ `Net ODA received per capita (current US$)`                                                        &lt;dbl&gt; …
$ `GDP per capita (current US$)`                                                                     &lt;dbl&gt; …
$ `Foreign direct investment, net (BoP, current US$)`                                                &lt;dbl&gt; …
$ `Inflation, consumer prices (annual %)`                                                            &lt;dbl&gt; …</code></pre>
</div>
</div>
<p>We see that <code>Country Name</code> and <code>Country Code</code> are character columns while the others are numeric (i.e., dbl).</p>
<p>We can look at this data another way, using the function <code>head()</code> to look at the first six rows, and every column.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(factbook_2015)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 53
  `Country Name` `Country Code` `Population, total` Population growth (annual …¹
  &lt;chr&gt;          &lt;chr&gt;                        &lt;dbl&gt;                        &lt;dbl&gt;
1 Afghanistan    AFG                       33753499                        3.12 
2 Albania        ALB                        2880703                       -0.291
3 Algeria        DZA                       39543154                        2.00 
4 American Samoa ASM                          51368                       -1.64 
5 Andorra        AND                          71746                        0.174
6 Angola         AGO                       28127721                        3.62 
# ℹ abbreviated name: ¹​`Population growth (annual %)`
# ℹ 49 more variables: `Surface area (sq. km)` &lt;dbl&gt;,
#   `Poverty headcount ratio at national poverty lines (% of population)` &lt;dbl&gt;,
#   `GNI, Atlas method (current US$)` &lt;dbl&gt;,
#   `GNI per capita, Atlas method (current US$)` &lt;dbl&gt;,
#   `GNI, PPP (current international $)` &lt;dbl&gt;,
#   `GNI per capita, PPP (current international $)` &lt;dbl&gt;, …</code></pre>
</div>
</div>
<section id="cleaning-column-names" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="cleaning-column-names"><span class="header-section-number">1.2.1</span> Cleaning column names</h3>
<p>It looks like we have some column names that don’t use standard R practices (i.e., they have spaces, start with numbers). This isn’t a critical problem (meaning you can use column names like this - we know that because we have them here!) but it does make things slightly more difficult. The main difficulty is that you will have to refer to column names surrounded in back ticks and this can be annoying.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">factbook_2015<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Country Name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
</div>
<p>Let’s use the function <a href=""><code>clean_names()</code></a> from the <code>janitor</code> package to clean those names up.</p>
<p>First, install the package <code>janitor</code> if you don’t have it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"janitor"</span>)</span></code></pre></div>
</div>
<p>Then we can load the package and clean up our column names.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'janitor'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    chisq.test, fisher.test</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># old column names</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(factbook_2015)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code> [1] "Country Name"                                                                                    
 [2] "Country Code"                                                                                    
 [3] "Population, total"                                                                               
 [4] "Population growth (annual %)"                                                                    
 [5] "Surface area (sq. km)"                                                                           
 [6] "Poverty headcount ratio at national poverty lines (% of population)"                             
 [7] "GNI, Atlas method (current US$)"                                                                 
 [8] "GNI per capita, Atlas method (current US$)"                                                      
 [9] "GNI, PPP (current international $)"                                                              
[10] "GNI per capita, PPP (current international $)"                                                   
[11] "Income share held by lowest 20%"                                                                 
[12] "Life expectancy at birth, total (years)"                                                         
[13] "Fertility rate, total (births per woman)"                                                        
[14] "Adolescent fertility rate (births per 1,000 women ages 15-19)"                                   
[15] "Contraceptive prevalence, any method (% of married women ages 15-49)"                            
[16] "Births attended by skilled health staff (% of total)"                                            
[17] "Mortality rate, under-5 (per 1,000 live births)"                                                 
[18] "Prevalence of underweight, weight for age (% of children under 5)"                               
[19] "Immunization, measles (% of children ages 12-23 months)"                                         
[20] "Primary completion rate, total (% of relevant age group)"                                        
[21] "School enrollment, secondary (% gross)"                                                          
[22] "School enrollment, primary and secondary (gross), gender parity index (GPI)"                     
[23] "Prevalence of HIV, total (% of population ages 15-49)"                                           
[24] "Forest area (sq. km)"                                                                            
[25] "Water productivity, total (constant 2015 US$ GDP per cubic meter of total freshwater withdrawal)"
[26] "Energy use (kg of oil equivalent per capita)"                                                    
[27] "CO2 emissions (metric tons per capita)"                                                          
[28] "Electric power consumption (kWh per capita)"                                                     
[29] "GDP (current US$)"                                                                               
[30] "GDP growth (annual %)"                                                                           
[31] "Inflation, GDP deflator (annual %)"                                                              
[32] "Agriculture, forestry, and fishing, value added (% of GDP)"                                      
[33] "Industry (including construction), value added (% of GDP)"                                       
[34] "Exports of goods and services (% of GDP)"                                                        
[35] "Imports of goods and services (% of GDP)"                                                        
[36] "Gross capital formation (% of GDP)"                                                              
[37] "Revenue, excluding grants (% of GDP)"                                                            
[38] "Start-up procedures to register a business (number)"                                             
[39] "Market capitalization of listed domestic companies (% of GDP)"                                   
[40] "Military expenditure (% of GDP)"                                                                 
[41] "Mobile cellular subscriptions (per 100 people)"                                                  
[42] "High-technology exports (% of manufactured exports)"                                             
[43] "Merchandise trade (% of GDP)"                                                                    
[44] "Net barter terms of trade index (2015 = 100)"                                                    
[45] "External debt stocks, total (DOD, current US$)"                                                  
[46] "Total debt service (% of GNI)"                                                                   
[47] "Net migration"                                                                                   
[48] "Personal remittances, paid (current US$)"                                                        
[49] "Foreign direct investment, net inflows (BoP, current US$)"                                       
[50] "Net ODA received per capita (current US$)"                                                       
[51] "GDP per capita (current US$)"                                                                    
[52] "Foreign direct investment, net (BoP, current US$)"                                               
[53] "Inflation, consumer prices (annual %)"                                                           </code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use clean_names and save over the current df factbook_2015</span></span>
<span id="cb17-2">factbook_2015 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(factbook_2015)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new column names</span></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(factbook_2015)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code> [1] "country_name"                                                                                
 [2] "country_code"                                                                                
 [3] "population_total"                                                                            
 [4] "population_growth_annual_percent"                                                            
 [5] "surface_area_sq_km"                                                                          
 [6] "poverty_headcount_ratio_at_national_poverty_lines_percent_of_population"                     
 [7] "gni_atlas_method_current_us"                                                                 
 [8] "gni_per_capita_atlas_method_current_us"                                                      
 [9] "gni_ppp_current_international"                                                               
[10] "gni_per_capita_ppp_current_international"                                                    
[11] "income_share_held_by_lowest_20_percent"                                                      
[12] "life_expectancy_at_birth_total_years"                                                        
[13] "fertility_rate_total_births_per_woman"                                                       
[14] "adolescent_fertility_rate_births_per_1_000_women_ages_15_19"                                 
[15] "contraceptive_prevalence_any_method_percent_of_married_women_ages_15_49"                     
[16] "births_attended_by_skilled_health_staff_percent_of_total"                                    
[17] "mortality_rate_under_5_per_1_000_live_births"                                                
[18] "prevalence_of_underweight_weight_for_age_percent_of_children_under_5"                        
[19] "immunization_measles_percent_of_children_ages_12_23_months"                                  
[20] "primary_completion_rate_total_percent_of_relevant_age_group"                                 
[21] "school_enrollment_secondary_percent_gross"                                                   
[22] "school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi"                       
[23] "prevalence_of_hiv_total_percent_of_population_ages_15_49"                                    
[24] "forest_area_sq_km"                                                                           
[25] "water_productivity_total_constant_2015_us_gdp_per_cubic_meter_of_total_freshwater_withdrawal"
[26] "energy_use_kg_of_oil_equivalent_per_capita"                                                  
[27] "co2_emissions_metric_tons_per_capita"                                                        
[28] "electric_power_consumption_k_wh_per_capita"                                                  
[29] "gdp_current_us"                                                                              
[30] "gdp_growth_annual_percent"                                                                   
[31] "inflation_gdp_deflator_annual_percent"                                                       
[32] "agriculture_forestry_and_fishing_value_added_percent_of_gdp"                                 
[33] "industry_including_construction_value_added_percent_of_gdp"                                  
[34] "exports_of_goods_and_services_percent_of_gdp"                                                
[35] "imports_of_goods_and_services_percent_of_gdp"                                                
[36] "gross_capital_formation_percent_of_gdp"                                                      
[37] "revenue_excluding_grants_percent_of_gdp"                                                     
[38] "start_up_procedures_to_register_a_business_number"                                           
[39] "market_capitalization_of_listed_domestic_companies_percent_of_gdp"                           
[40] "military_expenditure_percent_of_gdp"                                                         
[41] "mobile_cellular_subscriptions_per_100_people"                                                
[42] "high_technology_exports_percent_of_manufactured_exports"                                     
[43] "merchandise_trade_percent_of_gdp"                                                            
[44] "net_barter_terms_of_trade_index_2015_100"                                                    
[45] "external_debt_stocks_total_dod_current_us"                                                   
[46] "total_debt_service_percent_of_gni"                                                           
[47] "net_migration"                                                                               
[48] "personal_remittances_paid_current_us"                                                        
[49] "foreign_direct_investment_net_inflows_bo_p_current_us"                                       
[50] "net_oda_received_per_capita_current_us"                                                      
[51] "gdp_per_capita_current_us"                                                                   
[52] "foreign_direct_investment_net_bo_p_current_us"                                               
[53] "inflation_consumer_prices_annual_percent"                                                    </code></pre>
</div>
</div>
<p>By default, <code>clean_names()</code> converst to “snake_case” (where words are separated by an underscore instead of a space).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E01_wrangling_01/img/cases.png" class="img-fluid figure-img"></p>
<figcaption><a href="https://kiranvajrapu.medium.com/exploring-programming-naming-styles-85aefd54c188">Exploring Programming Naming Styles by Kiran Vajrapu</a></figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Having spaces, starting with numbers, or have unallowable characters (e.g., %, ?, !) is only a problem for column <strong>names</strong> not for cell <strong>contents</strong>.</p>
</div>
</div>
<p>What if we want to see a complete list of our countries? We could run the following code to see that:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">factbook_2015<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>country_name</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>  [1] "Afghanistan"                    "Albania"                       
  [3] "Algeria"                        "American Samoa"                
  [5] "Andorra"                        "Angola"                        
  [7] "Antigua and Barbuda"            "Argentina"                     
  [9] "Armenia"                        "Aruba"                         
 [11] "Australia"                      "Austria"                       
 [13] "Azerbaijan"                     "Bahamas, The"                  
 [15] "Bahrain"                        "Bangladesh"                    
 [17] "Barbados"                       "Belarus"                       
 [19] "Belgium"                        "Belize"                        
 [21] "Benin"                          "Bermuda"                       
 [23] "Bhutan"                         "Bolivia"                       
 [25] "Bosnia and Herzegovina"         "Botswana"                      
 [27] "Brazil"                         "British Virgin Islands"        
 [29] "Brunei Darussalam"              "Bulgaria"                      
 [31] "Burkina Faso"                   "Burundi"                       
 [33] "Cabo Verde"                     "Cambodia"                      
 [35] "Cameroon"                       "Canada"                        
 [37] "Cayman Islands"                 "Central African Republic"      
 [39] "Chad"                           "Channel Islands"               
 [41] "Chile"                          "China"                         
 [43] "Colombia"                       "Comoros"                       
 [45] "Congo, Dem. Rep."               "Congo, Rep."                   
 [47] "Costa Rica"                     "Cote d'Ivoire"                 
 [49] "Croatia"                        "Cuba"                          
 [51] "Curacao"                        "Cyprus"                        
 [53] "Czechia"                        "Denmark"                       
 [55] "Djibouti"                       "Dominica"                      
 [57] "Dominican Republic"             "Ecuador"                       
 [59] "Egypt, Arab Rep."               "El Salvador"                   
 [61] "Equatorial Guinea"              "Eritrea"                       
 [63] "Estonia"                        "Ethiopia"                      
 [65] "Faroe Islands"                  "Fiji"                          
 [67] "Finland"                        "France"                        
 [69] "French Polynesia"               "Gabon"                         
 [71] "Gambia, The"                    "Georgia"                       
 [73] "Germany"                        "Ghana"                         
 [75] "Gibraltar"                      "Greece"                        
 [77] "Greenland"                      "Grenada"                       
 [79] "Guam"                           "Guatemala"                     
 [81] "Guinea"                         "Guinea-Bissau"                 
 [83] "Guyana"                         "Haiti"                         
 [85] "Honduras"                       "Hong Kong SAR, China"          
 [87] "Hungary"                        "Iceland"                       
 [89] "India"                          "Indonesia"                     
 [91] "Iran, Islamic Rep."             "Iraq"                          
 [93] "Ireland"                        "Isle of Man"                   
 [95] "Israel"                         "Italy"                         
 [97] "Jamaica"                        "Japan"                         
 [99] "Jordan"                         "Kazakhstan"                    
[101] "Kenya"                          "Kiribati"                      
[103] "Korea, Dem. People's Rep."      "Korea, Rep."                   
[105] "Kosovo"                         "Kuwait"                        
[107] "Kyrgyz Republic"                "Lao PDR"                       
[109] "Latvia"                         "Lebanon"                       
[111] "Lesotho"                        "Liberia"                       
[113] "Libya"                          "Liechtenstein"                 
[115] "Lithuania"                      "Luxembourg"                    
[117] "Macao SAR, China"               "North Macedonia"               
[119] "Madagascar"                     "Malawi"                        
[121] "Malaysia"                       "Maldives"                      
[123] "Mali"                           "Malta"                         
[125] "Marshall Islands"               "Mauritania"                    
[127] "Mauritius"                      "Mexico"                        
[129] "Micronesia, Fed. Sts."          "Moldova"                       
[131] "Monaco"                         "Mongolia"                      
[133] "Montenegro"                     "Morocco"                       
[135] "Mozambique"                     "Myanmar"                       
[137] "Namibia"                        "Nauru"                         
[139] "Nepal"                          "Netherlands"                   
[141] "New Caledonia"                  "New Zealand"                   
[143] "Nicaragua"                      "Niger"                         
[145] "Nigeria"                        "Northern Mariana Islands"      
[147] "Norway"                         "Oman"                          
[149] "Pakistan"                       "Palau"                         
[151] "Panama"                         "Papua New Guinea"              
[153] "Paraguay"                       "Peru"                          
[155] "Philippines"                    "Poland"                        
[157] "Portugal"                       "Puerto Rico"                   
[159] "Qatar"                          "Romania"                       
[161] "Russian Federation"             "Rwanda"                        
[163] "Samoa"                          "San Marino"                    
[165] "Sao Tome and Principe"          "Saudi Arabia"                  
[167] "Senegal"                        "Serbia"                        
[169] "Seychelles"                     "Sierra Leone"                  
[171] "Singapore"                      "Sint Maarten (Dutch part)"     
[173] "Slovak Republic"                "Slovenia"                      
[175] "Solomon Islands"                "Somalia"                       
[177] "South Africa"                   "South Sudan"                   
[179] "Spain"                          "Sri Lanka"                     
[181] "St. Kitts and Nevis"            "St. Lucia"                     
[183] "St. Martin (French part)"       "St. Vincent and the Grenadines"
[185] "Sudan"                          "Suriname"                      
[187] "Eswatini"                       "Sweden"                        
[189] "Switzerland"                    "Syrian Arab Republic"          
[191] "Tajikistan"                     "Tanzania"                      
[193] "Thailand"                       "Timor-Leste"                   
[195] "Togo"                           "Tonga"                         
[197] "Trinidad and Tobago"            "Tunisia"                       
[199] "Turkiye"                        "Turkmenistan"                  
[201] "Turks and Caicos Islands"       "Tuvalu"                        
[203] "Uganda"                         "Ukraine"                       
[205] "United Arab Emirates"           "United Kingdom"                
[207] "United States"                  "Uruguay"                       
[209] "Uzbekistan"                     "Vanuatu"                       
[211] "Venezuela, RB"                  "Viet Nam"                      
[213] "Virgin Islands (U.S.)"          "West Bank and Gaza"            
[215] "Yemen, Rep."                    "Zambia"                        
[217] "Zimbabwe"                      </code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="pick-observations-with-filter" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Pick observations with <code>filter()</code></h1>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S08E01_wrangling_01/img/filter.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%" alt="Cartoon showing three fuzzy monsters either selecting or crossing out rows of a data table. If the type of animal in the table is “otter” and the site is “bay”, a monster is drawing a purple rectangle around the row. If those conditions are not met, another monster is putting a line through the column indicating it will be excluded. Stylized text reads “dplyr::filter() - keep rows that satisfy your conditions.” Learn more about dplyr::filter."></p>
<figcaption>Figure from <a href="https://github.com/allisonhorst/stats-illustrations">Allison Horst</a></figcaption>
</figure>
</div>
</div>
</div>
<p>Sometimes you want to select observations (rows) based on values. To do this you use <a href="https://dplyr.tidyverse.org/reference/filter.html"><code>filter()</code></a>. Try not to confuse this with <code>select()</code>.</p>
<div class="callout callout-style-default callout-note callout-titled" title="`select()` picks columns, while `filter()` picks rows.">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>select()</code> picks columns, while <code>filter()</code> picks rows.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>The function <code>filter()</code> will keep only observations that meet your filtering criteria.</p>
<p>Let’s filter for countries that have a population more than Ohio (11.76M).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(population_total <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11760000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 73 × 53
   country_name country_code population_total population_growth_annual_percent
   &lt;chr&gt;        &lt;chr&gt;                   &lt;dbl&gt;                            &lt;dbl&gt;
 1 Afghanistan  AFG                  33753499                            3.12 
 2 Algeria      DZA                  39543154                            2.00 
 3 Angola       AGO                  28127721                            3.62 
 4 Argentina    ARG                  43131966                            1.08 
 5 Australia    AUS                  23815995                            1.44 
 6 Bangladesh   BGD                 157830000                            1.19 
 7 Brazil       BRA                 205188205                            0.846
 8 Burkina Faso BFA                  18718019                            2.97 
 9 Cambodia     KHM                  15417523                            1.35 
10 Cameroon     CMR                  23012646                            3.15 
# ℹ 63 more rows
# ℹ 49 more variables: surface_area_sq_km &lt;dbl&gt;,
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;,
#   gni_per_capita_ppp_current_international &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>If we want to see the countries that also have an area that is less than the size of Ohio (116,098 km^2), we can also add that to our filter statement using the <code>&amp;</code> operator.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(population_total <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11760000</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> surface_area_sq_km <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116098</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 4 × 53
  country_name country_code population_total population_growth_annual_percent
  &lt;chr&gt;        &lt;chr&gt;                   &lt;dbl&gt;                            &lt;dbl&gt;
1 Guatemala    GTM                  15567419                            1.69 
2 Korea, Rep.  KOR                  51014947                            0.527
3 Netherlands  NLD                  16939923                            0.443
4 Sri Lanka    LKA                  21336697                            0.457
# ℹ 49 more variables: surface_area_sq_km &lt;dbl&gt;,
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;,
#   gni_per_capita_ppp_current_international &lt;dbl&gt;,
#   income_share_held_by_lowest_20_percent &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>There are four countries that have more people than Ohio in a space that is less than Ohio.</p>
<section id="practice" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="practice"><span class="header-section-number">2.1</span> Practice</h2>
<p>How many countries have negative annual population growth? This variable is called <code>population_growth_annual_percent</code>.</p>
<details>
<summary>
Need a hint?
</summary>
<p>Try to <code>filter</code> for <code>population_growth_annual_percent</code> &lt; 0.</p>
</details>
<details>
<summary>
Click for the solution
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(population_growth_annual_percent <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 34 × 53
   country_name           country_code population_total population_growth_annu…¹
   &lt;chr&gt;                  &lt;chr&gt;                   &lt;dbl&gt;                    &lt;dbl&gt;
 1 Albania                ALB                   2880703                   -0.291
 2 American Samoa         ASM                     51368                   -1.64 
 3 Armenia                ARM                   2878595                   -0.393
 4 Bosnia and Herzegovina BIH                   3524324                   -1.32 
 5 Bulgaria               BGR                   7177991                   -0.638
 6 Croatia                HRV                   4203604                   -0.824
 7 Greece                 GRC                  10820883                   -0.659
 8 Greenland              GRL                     56114                   -0.322
 9 Hungary                HUN                   9843028                   -0.238
10 Isle of Man            IMN                     83593                   -0.362
# ℹ 24 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent
# ℹ 49 more variables: surface_area_sq_km &lt;dbl&gt;,
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>There are 34 countries that have a negative annual growth rate in 2015.</p>
</details>
</section>
</section>
<section id="choose-columns-with-select" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Choose columns with <code>select()</code></h1>
<p>Often you will want to pick only certain columns in your dataframe, and you can do this with the function <a href="https://dplyr.tidyverse.org/reference/select.html"><code>select()</code></a>. You can pick columns generally by:</p>
<ul>
<li>their names</li>
<li>their position</li>
<li>characteristics of that column</li>
</ul>
<p>If we want to know how the arguments to <code>select()</code> work, we can access the documentation material about the function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">?<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>()</span></code></pre></div>
</div>
<p>Let’s first select columns by their names. Let’s pick just the <code>country_name</code>, <code>population_total</code>, and <code>surface_area_sq_km</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, population_total, surface_area_sq_km)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 3
   country_name        population_total surface_area_sq_km
   &lt;chr&gt;                          &lt;dbl&gt;              &lt;dbl&gt;
 1 Afghanistan                 33753499             652860
 2 Albania                      2880703              28750
 3 Algeria                     39543154            2381741
 4 American Samoa                 51368                200
 5 Andorra                        71746                470
 6 Angola                      28127721            1246700
 7 Antigua and Barbuda            89941                440
 8 Argentina                   43131966            2780400
 9 Armenia                      2878595              29740
10 Aruba                         104257                180
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>Those columns are also the 1st, 3rd, and 5th columns in our data frame, do we can select them by their indices, or by their location.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 3
   country_name        population_total surface_area_sq_km
   &lt;chr&gt;                          &lt;dbl&gt;              &lt;dbl&gt;
 1 Afghanistan                 33753499             652860
 2 Albania                      2880703              28750
 3 Algeria                     39543154            2381741
 4 American Samoa                 51368                200
 5 Andorra                        71746                470
 6 Angola                      28127721            1246700
 7 Antigua and Barbuda            89941                440
 8 Argentina                   43131966            2780400
 9 Armenia                      2878595              29740
10 Aruba                         104257                180
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>In general I would recommend against this because its really hard to remember which column indices are which variables today, nevermind returning back to old code 1 year from now.</p>
<p>We can also select columns that are consecutive, using the <code>:</code> operator. Below I’m selecting the columns <code>country_name</code> through <code>population_growth_annual_percent</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>population_growth_annual_percent)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 4
   country_name        country_code population_total population_growth_annual_…¹
   &lt;chr&gt;               &lt;chr&gt;                   &lt;dbl&gt;                       &lt;dbl&gt;
 1 Afghanistan         AFG                  33753499                       3.12 
 2 Albania             ALB                   2880703                      -0.291
 3 Algeria             DZA                  39543154                       2.00 
 4 American Samoa      ASM                     51368                      -1.64 
 5 Andorra             AND                     71746                       0.174
 6 Angola              AGO                  28127721                       3.62 
 7 Antigua and Barbuda ATG                     89941                       0.787
 8 Argentina           ARG                  43131966                       1.08 
 9 Armenia             ARM                   2878595                      -0.393
10 Aruba               ABW                    104257                       0.638
# ℹ 207 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent</code></pre>
</div>
</div>
<p>We can remove columns using the <code>!</code> operator:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>country_code)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 52
   country_name       population_total population_growth_an…¹ surface_area_sq_km
   &lt;chr&gt;                         &lt;dbl&gt;                  &lt;dbl&gt;              &lt;dbl&gt;
 1 Afghanistan                33753499                  3.12              652860
 2 Albania                     2880703                 -0.291              28750
 3 Algeria                    39543154                  2.00             2381741
 4 American Samoa                51368                 -1.64                 200
 5 Andorra                       71746                  0.174                470
 6 Angola                     28127721                  3.62             1246700
 7 Antigua and Barbu…            89941                  0.787                440
 8 Argentina                  43131966                  1.08             2780400
 9 Armenia                     2878595                 -0.393              29740
10 Aruba                        104257                  0.638                180
# ℹ 207 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent
# ℹ 48 more variables:
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>We can also select data based on its characteristics. We can select using <a href="https://dplyr.tidyverse.org/reference/select.html">selection helpers</a> like:</p>
<ul>
<li><a href="https://tidyselect.r-lib.org/reference/everything.html"><code>everything()</code></a>: picks all variables</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>starts_with()</code></a>: starts with some prefix</li>
<li><a href=""><code>ends_with()</code></a>: ends with some suffix</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>contains()</code></a>: contains a specific string</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>matches()</code></a>: matches a regular expression</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>num_range()</code></a>: matches a numeric range</li>
<li><a href="https://tidyselect.r-lib.org/reference/where.html"><code>where()</code></a>: selects columns where the statement given in the argument is TRUE</li>
<li><a href="https://tidyselect.r-lib.org/reference/all_of.html"><code>all_of()</code></a>: matches all of the variable names in a character vector</li>
<li><a href="https://tidyselect.r-lib.org/reference/all_of.html"><code>any_of()</code></a>: matches any of the names in a character vector</li>
</ul>
<p>For example, we might want each column that has anything to do with gross domestic product, or gdp. We can select all of the columns which contain the string “gdp” in their name. I’m also going to add <code>country_name</code> so we know what we’re working with.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gdp"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 15
   country_name     water_productivity_t…¹ gdp_current_us gdp_growth_annual_pe…²
   &lt;chr&gt;                             &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;
 1 Afghanistan                       0.943    19134221645                  1.45 
 2 Albania                          12.4      11386853113                  2.22 
 3 Algeria                          20.9     187494000000                  3.2  
 4 American Samoa                   NA          673000000                  3.15 
 5 Andorra                          NA         2789881259                  1.43 
 6 Angola                          128.       90496420507                  0.944
 7 Antigua and Bar…                327.        1437755556                  1.45 
 8 Argentina                        15.8     594749000000                  2.73 
 9 Armenia                           3.23     10553337518                  3.20 
10 Aruba                            NA         2962907263                 -0.624
# ℹ 207 more rows
# ℹ abbreviated names:
#   ¹​water_productivity_total_constant_2015_us_gdp_per_cubic_meter_of_total_freshwater_withdrawal,
#   ²​gdp_growth_annual_percent
# ℹ 11 more variables: inflation_gdp_deflator_annual_percent &lt;dbl&gt;,
#   agriculture_forestry_and_fishing_value_added_percent_of_gdp &lt;dbl&gt;,
#   industry_including_construction_value_added_percent_of_gdp &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>We can also select all column that meet a certain predicate. For example, we can pick all of the column that are of the type character.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.character))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 2
   country_name        country_code
   &lt;chr&gt;               &lt;chr&gt;       
 1 Afghanistan         AFG         
 2 Albania             ALB         
 3 Algeria             DZA         
 4 American Samoa      ASM         
 5 Andorra             AND         
 6 Angola              AGO         
 7 Antigua and Barbuda ATG         
 8 Argentina           ARG         
 9 Armenia             ARM         
10 Aruba               ABW         
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>We can also combine selections using the <code>&amp;</code> (and), <code>|</code> (or), and <code>!</code> (not) operators. For example, if I want the columns about GNI but only the international ones I can:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gni"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"international"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 2
   gni_ppp_current_international gni_per_capita_ppp_current_international
                           &lt;dbl&gt;                                    &lt;dbl&gt;
 1                   77739869000                                     2300
 2                   33981401261                                    11800
 3                  541234000000                                    13690
 4                            NA                                       NA
 5                            NA                                       NA
 6                  190283000000                                     6760
 7                    1766297473                                    19640
 8                  848960000000                                    19680
 9                   30505448341                                    10600
10                    3718236361                                    35660
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>We can also use <code>select()</code> to order our columns, as the order we select them in dictates the order they will exist in our dataframe.</p>
<section id="practice-1" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">3.1</span> Practice</h2>
<p>Come up with 3 different ways to select the columns about children, and make sure you also include a country column so you know what you’re looking at.</p>
<details>
<summary>
Need a hint?
</summary>
<p>Here are the columns that I’m considering to be about children:</p>
<p>[1] “country_name”<br>
[17] “mortality_rate_under_5_per_1_000_live_births”<br>
[18] “prevalence_of_underweight_weight_for_age_percent_of_children_under_5”<br>
[19] “immunization_measles_percent_of_children_ages_12_23_months”<br>
[20] “primary_completion_rate_total_percent_of_relevant_age_group”<br>
[21] “school_enrollment_secondary_percent_gross”<br>
[22] “school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi”</p>
</details>
<details>
<summary>
Click for the solution
</summary>
<p>By name and for columns in a row, using the <code>:</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, </span>
<span id="cb42-3">         mortality_rate_under_5_per_1_000_live_births<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb42-4">         school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 7
   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²
   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;
 1 Afghanistan                                       72.7                     NA
 2 Albania                                            9.6                     NA
 3 Algeria                                           25.3                     NA
 4 American Samoa                                    NA                       NA
 5 Andorra                                            3.6                     NA
 6 Angola                                            87.9                     19
 7 Antigua and Barbuda                               10.9                     NA
 8 Argentina                                         11.8                     NA
 9 Armenia                                           14.5                     NA
10 Aruba                                             NA                       NA
# ℹ 207 more rows
# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,
#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5
# ℹ 4 more variables:
#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,
#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,
#   school_enrollment_secondary_percent_gross &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>By index:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 7
   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²
   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;
 1 Afghanistan                                       72.7                     NA
 2 Albania                                            9.6                     NA
 3 Algeria                                           25.3                     NA
 4 American Samoa                                    NA                       NA
 5 Andorra                                            3.6                     NA
 6 Angola                                            87.9                     19
 7 Antigua and Barbuda                               10.9                     NA
 8 Argentina                                         11.8                     NA
 9 Armenia                                           14.5                     NA
10 Aruba                                             NA                       NA
# ℹ 207 more rows
# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,
#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5
# ℹ 4 more variables:
#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,
#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,
#   school_enrollment_secondary_percent_gross &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>By name characteristics:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"under_5"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"children"</span>),</span>
<span id="cb46-3">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"primary"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"school"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 7
   country_name        mortality_rate_under_5_per_1_000…¹ prevalence_of_underw…²
   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;
 1 Afghanistan                                       72.7                     NA
 2 Albania                                            9.6                     NA
 3 Algeria                                           25.3                     NA
 4 American Samoa                                    NA                       NA
 5 Andorra                                            3.6                     NA
 6 Angola                                            87.9                     19
 7 Antigua and Barbuda                               10.9                     NA
 8 Argentina                                         11.8                     NA
 9 Armenia                                           14.5                     NA
10 Aruba                                             NA                       NA
# ℹ 207 more rows
# ℹ abbreviated names: ¹​mortality_rate_under_5_per_1_000_live_births,
#   ²​prevalence_of_underweight_weight_for_age_percent_of_children_under_5
# ℹ 4 more variables:
#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,
#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,
#   school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>These are just some ways!</p>
</details>
</section>
</section>
<section id="sorting-data-with-arrange" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Sorting data with <code>arrange()</code></h1>
<p>A nice helper function for looking at your data is <a href="https://dplyr.tidyverse.org/reference/arrange.html"><code>arrange()</code></a> which sorts your data.</p>
<p>We can sort our data based on how much forest (<code>forest_area_sq_km</code>) each country has.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(forest_area_sq_km)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 53
   country_name             country_code population_total population_growth_an…¹
   &lt;chr&gt;                    &lt;chr&gt;                   &lt;dbl&gt;                  &lt;dbl&gt;
 1 Gibraltar                GIB                     32520                  0.209
 2 Monaco                   MCO                     36760                  1.78 
 3 Nauru                    NRU                     11185                  2.21 
 4 Qatar                    QAT                   2414573                  8.65 
 5 Curacao                  CUW                    157980                  1.32 
 6 Faroe Islands            FRO                     48816                  0.722
 7 Greenland                GRL                     56114                 -0.322
 8 Malta                    MLT                    445053                  2.39 
 9 Sint Maarten (Dutch par… SXM                     38825                  2.98 
10 Aruba                    ABW                    104257                  0.638
# ℹ 207 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent
# ℹ 49 more variables: surface_area_sq_km &lt;dbl&gt;,
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>By default, <code>arrange()</code> sorts small to big, if we want to go from big to small we can set <code>arrange(desc())</code> to sort by descending.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(forest_area_sq_km))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 53
   country_name       country_code population_total population_growth_annual_p…¹
   &lt;chr&gt;              &lt;chr&gt;                   &lt;dbl&gt;                        &lt;dbl&gt;
 1 Russian Federation RUS                 144640716                        0.279
 2 Brazil             BRA                 205188205                        0.846
 3 Canada             CAN                  35704498                        0.760
 4 United States      USA                 320738994                        0.736
 5 China              CHN                1379860000                        0.581
 6 Australia          AUS                  23815995                        1.44 
 7 Congo, Dem. Rep.   COD                  78656904                        3.39 
 8 Indonesia          IDN                 259091970                        1.11 
 9 Peru               PER                  30711863                        1.17 
10 India              IND                1322866505                        1.19 
# ℹ 207 more rows
# ℹ abbreviated name: ¹​population_growth_annual_percent
# ℹ 49 more variables: surface_area_sq_km &lt;dbl&gt;,
#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,
#   gni_atlas_method_current_us &lt;dbl&gt;,
#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,
#   gni_ppp_current_international &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>It’s not too surprising that the biggest countries in forest-feasible lattitudes have the most forest.</p>
<p>We can also add <code>select()</code> into our pipe, so that we don’t have to scroll so far to see what the actual amount of forest is.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, surface_area_sq_km, forest_area_sq_km) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb52-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(forest_area_sq_km))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 3
   country_name       surface_area_sq_km forest_area_sq_km
   &lt;chr&gt;                           &lt;dbl&gt;             &lt;dbl&gt;
 1 Russian Federation           17098250          8149305.
 2 Brazil                        8515770          5038848 
 3 Canada                        9879750          3471157.
 4 United States                 9831510          3100950 
 5 China                         9562911          2102942.
 6 Australia                     7741220          1330945 
 7 Congo, Dem. Rep.              2344860          1316621.
 8 Indonesia                     1913580           950279 
 9 Peru                          1285220           731945.
10 India                         3287260           708280 
# ℹ 207 more rows</code></pre>
</div>
</div>
<p>Wow almost 50% of Russia is forested.</p>
<section id="practice-2" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="practice-2"><span class="header-section-number">4.1</span> Practice</h2>
<p>Which countries have the lowest cell phone subscriptions? <code>mobile_cellular_subscriptions_per_100_people</code></p>
<details>
<summary>
Need a hint?
</summary>
<p>You can use the function <code>arrange()</code> to sort your columns. The default arranging is from low to high, so if you want to go from high to low, you can set <code>arrange(desc())</code>.</p>
</details>
<details>
<summary>
Click for the solution
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">factbook_2015 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(country_name, mobile_cellular_subscriptions_per_100_people) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb54-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(mobile_cellular_subscriptions_per_100_people)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 217 × 2
   country_name              mobile_cellular_subscriptions_per_100_people
   &lt;chr&gt;                                                            &lt;dbl&gt;
 1 Korea, Dem. People's Rep.                                         12.8
 2 Eritrea                                                           14.2
 3 Micronesia, Fed. Sts.                                             20.6
 4 Central African Republic                                          25.8
 5 South Sudan                                                       25.9
 6 Cuba                                                              29.4
 7 Djibouti                                                          31.2
 8 Marshall Islands                                                  31.4
 9 Kiribati                                                          35.1
10 Chad                                                              38.7
# ℹ 207 more rows</code></pre>
</div>
</div>
</details>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S08E01_wrangling_01/</guid>
  <pubDate>Mon, 26 Aug 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S08E01_wrangling_01/img/go-wrangling.png" medium="image" type="image/png" height="115" width="144"/>
</item>
<item>
  <title>Plotting 4: Faceting and multi-panel figures</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <dc:creator>Mike Sovic</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E14_ggplot_04/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this last session of the semester, we’ll cap off our series on ggplot2 basics with a focus on:</p>
<ul>
<li>Faceting plots: splitting plots into subplots based on one or more variables</li>
<li>Combining plots into multi-panel figures with the patchwork package</li>
</ul>
<p>And two useful side-notes:</p>
<ul>
<li>Setting a plotting theme for your entire R session</li>
<li>Saving plots to file with <code>ggsave()</code></li>
</ul>
<p>Like in previous sessions, we’ll start by loading the tidyverse and palmerpenguins packages:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="setting-a-theme-for-all-plots-in-the-session" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="setting-a-theme-for-all-plots-in-the-session"><span class="header-section-number">2</span> Setting a theme for all plots in the session</h2>
<p>We’ve seen that you can change the “theme” (overall look) of a ggplot plot by adding a layer like <code>theme_bw()</code>. If you’re making a bunch of plots, and want all them to have a specific theme, it can be more convenient to set the plotting theme upfront for <em>all plots in your current R session</em> — you can do so with the <code>theme_set()</code> function:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>())</span></code></pre></div>
</div>
<p>One other tidbit worth pointing out is that you can set the “base size” for a theme, which is the relative size of the text and lines. You may have noticed that the ggplot’s font size of e.g.&nbsp;axis labels and titles is relatively small. Instead of changing all of these individually with arguments to <code>theme()</code>, you can use the <code>base_size</code> argument when specifying the overall theme:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (The default base_size is 11)</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span></code></pre></div>
</div>
<p>Finally, you can set any <code>theme()</code> arguments for all plots in the R session with <code>theme_update()</code> — for example, we may want to turn off the minor grid lines:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_update</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.minor =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span></code></pre></div>
</div>
<p>After doing this, as you’ll see, all plots in this session will feature <code>theme_bw</code> without minor grid lines.</p>
<p><br></p>
</section>
<section id="faceting-intro-and-facet_wrap" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="faceting-intro-and-facet_wrap"><span class="header-section-number">3</span> Faceting: intro and <code>facet_wrap()</code></h2>
<section id="an-example-with-one-variable" class="level4">
<h4 class="anchored" data-anchor-id="an-example-with-one-variable">An example with one variable</h4>
<p>Let’s start by revisiting the following plot you made in the exercises a couple of weeks ago:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>We’ve used the color aesthetic to distinguish species, but because of the overlap between Adelie (red) and Chinstrap (green) penguins, it’s not that easy to see the relationship between body mass and flipper length for these two species.</p>
<p>An alternative to using aesthetics such as color or shape to distinguish between levels of categorical variables is to split the plot into subplots/panels. In ggplot, such subplots are called “facets”, and there are two functions to split a plot into facets: <code>facet_wrap()</code> and <code>facet_grid()</code>.</p>
<p>Let’s start with <code>facet_wrap()</code>. Facets are added as an additional layer to the plot, and in the faceting function, you specify one or more variables to split the plot into separate panels by. Here, we want to facet by species:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the facet_wrap layer:</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We still color by species to make the plot look nicer, but no longer need a legend:</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>facet_wrap()</code> syntax
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note how the variable to facet by is specified: with a tilde (<strong><code>~</code></strong>) in front, which is R’s way of specifying formulas. We’re basically saying to split the plot “as a function of” (by) <code>species</code>. An alternative way of specifying the variable is by wrapping the variable name in <code>vars()</code>, e.g.&nbsp;<code>facet_wrap(vars(species))</code>.</p>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="an-example-with-two-variables" class="level4">
<h4 class="anchored" data-anchor-id="an-example-with-two-variables">An example with two variables</h4>
<p>In the above example, you may reasonably prefer either of the two plots we made. For example, perhaps you aren’t convinced by the faceting solution because you thought the overlapping points in the first plot were useful to make clear how similar Adelie and Chinstrap penguins are in body mass and flipper length.</p>
<p>What may be a more straightforward example of the usefulness of faceting is a situation in which we want to show two or more categorical variables in a plot, like <code>species</code> <em>and</em> <code>island</code> below:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm,</span>
<span id="cb7-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> island)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>This plot isn’t clear at all! Let’s facet by <code>island</code> to get a much better plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>island) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="exercise-1" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-1"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 1</h4>
<p><strong>A)</strong> Create a scatter plot of bill length vs.&nbsp;bill depth with points colored by sex, and the plot faceted by species.</p>
<details>
<summary>
<em>(Click for the answer)</em>
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
<p><strong>B)</strong> Say that you didn’t want the species side-by-side (1 row, 3 columns), but stacked vertically (3 rows, 1 column). Take a look at the help page for <code>facet_wrap()</code> (type <code>?facet_wrap</code>) and try to figure out how you can do this.</p>
<details>
<summary>
<em>(Click for the answer)</em>
</summary>
<p>You can use the <code>ncol</code> and/or <code>nrow</code> arguments to force a specific number of rows and or columns. The easiest solution here is to merely set the number of columns to 1, which will make <code>facet_wrap()</code> use multiple columns instead:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<section id="exercise-2" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-2"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 2</h4>
<p>In our first example, we faceted because there was too much overlap between points. You may also want to facet for the opposite reason, when <strong>differences by some variable are so large that the plot suffers from it</strong>. Let’s artificially create such a situation by increasing the bill lengths for Chinstrap penguins by 100 mm each:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">penguins_ed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length_mm =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chinstrap"</span>,</span>
<span id="cb11-3">                                 bill_length_mm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb11-4">                                 bill_length_mm))</span></code></pre></div>
</div>
<p>And plot this modified data:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">penguins_ed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Above, the spread along the x axis (bill length) is so large that it <strong>has become hard to see the relationship between bill length and bill depth</strong>. Let’s facet:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">penguins_ed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>That didn’t solve anything yet! <strong>But</strong> when you facet, you can have the axis ranges (“scales”) vary independently between facets. This can be done with the <code>scales</code> argument to <code>facet_wrap()</code>. Take a look at the help page and try to get the x-axis range to be able to differ between the facets.</p>
<details>
<summary>
<em>(Click for the answer)</em>
</summary>
<p>You’ll want to set <code>scales</code> to <code>free_x</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length_mm =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chinstrap"</span>,</span>
<span id="cb14-3">                                 bill_length_mm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb14-4">                                 bill_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<section id="exercise-3" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-3"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 3</h4>
<p>In your <code>theme_set()</code> call, vary the value of <code>base_size</code> and take a look at its effect by recreating the plots you made above a few times.</p>
</section>
<p><br></p>
</section>
<section id="facet_grid" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="facet_grid"><span class="header-section-number">4</span> <code>facet_grid()</code></h2>
<p>If you would like to <strong>split your plot by two variables</strong>, use the <code>facet_grid()</code> function, which will create a grid with the levels of one variable across rows and of the other variable across columns.</p>
<p>The formula-style syntax now uses <code>row-variable ~ column-variable</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(island <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sex) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>facet_wrap()</code> vs.&nbsp;<code>facet_grid()</code> <em>(Click to expand)</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Note that you can also tell <code>facet_grid()</code> to facet only by one variable, either across rows or across columns. With that in mind, you may wonder why there even is a separate <code>facet_wrap()</code> function.</p>
<p>Well, one feature of <code>facet_wrap()</code> that we haven’t yet seen is that it can “wrap” a single variable across both rows and columns. Here is an example with the <code>mpg</code> data set, which has a categorical value <code>cyl</code> with 4 levels, enough to make <code>facet_wrap()</code> spread these across 2 rows and 2 columns:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>cyl)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
<section id="exercise-4" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-4"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 4</h4>
<p>Create a scatter plot of bill length vs.&nbsp;bill depth and facet in a grid with the variables <code>species</code> and <code>year</code>.</p>
<details>
<summary>
<em>(Click for the answer)</em>
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(species<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>year) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="multi-panel-figures-with-patchwork" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="multi-panel-figures-with-patchwork"><span class="header-section-number">5</span> Multi-panel figures with patchwork</h2>
<p>The <a href="https://patchwork.data-imaginist.com/">patchwork</a> package allows you to combine multiple plots into a single multi-panel figure.</p>
<p>This is something you might be used to doing with programs like Powerpoint or Illustrator. But certainly if all the individual plots that should make up a figure are made with R, it is highly beneficial to combine them in R as well. One of the advantages of using R is that you can easily rerun your code to recreate plots with some modifications, but if after any change, you have to put plots together in another program, you lose some of the advantages related to automation and reproducibility.</p>
<p>Let’s install and then load the package:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"patchwork"</span>)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(patchwork)</span></code></pre></div>
</div>
<p>Patchwork assumes that you have created and saved the individual plots as separate R objects. Then, you tell patchwork how to arrange these plots, and the syntax to define the layout is based on common mathematical operators. Some examples, where <code>plot1</code>, <code>plot2</code>, and <code>plot3</code> represent plots that have been saved as objects with those names:</p>
<ul>
<li><code>plot1 | plot2</code> puts two plots side-by-side</li>
<li><code>plot1 / plot2</code> stacks two plots vertically</li>
<li><code>plot1 / (plot2 | plot3)</code> gives plot1 on a top row, and plots 2 and 3 on a bottom row</li>
</ul>
<p>Below is an example from palmerpenguins. First we create the plots, saving each as a new object:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">p_scatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>)</span>
<span id="cb20-5">p_scatter</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">p_bar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> island) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> island, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>()</span>
<span id="cb21-5">p_bar</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">p_box <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span>
<span id="cb22-5">p_box</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Then we simply use the patchwork syntax to define how these 3 plots will be arranged. In this case, the first (faceted) plot on top, with the other two side-by-side below it:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">p_scatter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (p_bar <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> p_box)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Patchwork has quite a lot more functionality, and this is very well explained in various vignettes/tutorials on <a href="https://patchwork.data-imaginist.com/articles/patchwork.html">its website</a>. Here, we’ll just try one more feature, adding tags for the individual plots — where we tell patchwork about the type of numbering we would like (e.g.&nbsp;A-B-C vs.&nbsp;1-2-3) by specifying the first character:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">p_scatter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (p_bar <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> p_box) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_annotation</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag_levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="exercise-5" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-5"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 5</h4>
<p>Use the palmerpenguins data to try to create the plot below:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<details>
<summary>
<em>(Click for the answer)</em>
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">p_bill_flipper <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Length (mm)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>)</span>
<span id="cb25-7">  </span>
<span id="cb25-8">p_mass_yr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Body Mass (g)"</span>)</span>
<span id="cb25-12"></span>
<span id="cb25-13">p_bill_flipper <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p_mass_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_annotation</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag_levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/index_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
<section id="saving-plots" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="saving-plots"><span class="header-section-number">5.1</span> Saving plots</h3>
<p>If you hadn’t already, now that you’ve learned to create publication-ready multi-panel figures, you are probably wondering how you can save these plots.</p>
<p>Perhaps you’ve seen the “Export” button in the plotting pane, which can can do this. However, a better and more flexible way is to use the <code>ggsave()</code> function. By default, it will save the last plot you produced to the specified file:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_plot.png"</span>)</span></code></pre></div>
</div>
<p>If you do need to specify the plot object explicitly, you can pass it as the second argument:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_plot2.png"</span>, p_bill_flipper)</span></code></pre></div>
</div>
<p>Some notes:</p>
<ul>
<li>You can specify the file/image type (PNG, JPEG, SVG, PDF, etc.) simply by providing the appropriate file extension.</li>
<li>Use the <code>height</code> and <code>width</code> arguments to specify both the aspect ratio and the absolute size. Larger sizes will lead to relatively smaller text and points, which can be a convenient way to customize this!</li>
<li>For raster graphic formats like PNG, you can specify the resolution with the <code>dpi</code> argument.</li>
</ul>
<section id="exercise-6" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-6"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 6</h4>
<p>Save one or more of your previously produced plots as PNG images, and vary:</p>
<ul>
<li>The aspect ratio and asbolute size with <code>height</code> and <code>width</code></li>
<li>The resolution with <code>dpi</code></li>
</ul>
</section>
<p><br><br></p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>plotting</category>
  <category>ggplot2</category>
  <guid>https://osu-codeclub.github.io/posts/S07E14_ggplot_04/</guid>
  <pubDate>Fri, 19 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E14_ggplot_04/featured_plot.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Plotting 3: histogram, density, and bar plots</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E13_ggplot_03/</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-the-past-session" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-the-past-session">Recap of the past session</h4>
<p>In last week’s session, we delved into aesthetics and gained a deeper understanding of the topic. Additionally, we introduced the theme() function. We also acquired knowledge on the fundamentals of geom_boxplot(), geom_violin(), and stat_summary.</p>
</section>
<section id="session-goals" class="level4">
<h4 class="anchored" data-anchor-id="session-goals">Session Goals</h4>
<ul>
<li>Let’s explore our <strong>palmerpinguins</strong> dataset using histogram and density plots. We will learn about <strong>geom_histogram()</strong> and <strong>geom_density()</strong>.</li>
<li>Learn the basic of <strong>bar graph</strong> in <code>ggplot2</code>.</li>
</ul>
<p><br></p>
</section>
</section>
<section id="our-data-set" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="our-data-set"><span class="header-section-number">2</span> Our data set</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/img/dashboard.jpeg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%"></p>
<figcaption>Artwork by <a href="https://twitter.com/allison_horst">Allison Horst</a>.</figcaption>
</figure>
</div>
<p><br></p>
<p>We are going to continue using our 🐧 data set from the package <a href="https://allisonhorst.github.io/palmerpenguins/"><code>palmerpenguins</code></a>. If you haven’t done so, please install that package first:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"palmerpenguins"</span>)</span></code></pre></div>
</div>
<p><a href="https://allisonhorst.github.io/palmerpenguins/index.html"><code>palmerpenguins</code></a> is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.&nbsp;Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.</p>
<p>We’ll now load the package, along with the tidyverse (which includes ggplot2):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>Once you’ve loaded that package you will have a data frame called <code>penguins</code> at your disposal — let’s take a look:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or glimpse() for a sort of transposed view, so we can see all columns:</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>Rows: 344
Columns: 8
$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…
$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="histograms-geom_histogram" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="histograms-geom_histogram"><span class="header-section-number">3</span> Histograms: <code>geom_histogram()</code></h2>
<p>A histogram provides a precise graphical portrayal of the distribution of numerical data. It only needs one aesthetic, which is the <code>x</code> variable.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
It is crucial to have good <a href="https://ggplot2.tidyverse.org/reference/labs.html">labels</a> to ensure the accessibility of your plots to a broader audience. Always make sure that the axis (within <code>labs()</code>, use <code>x="x-title"</code>, <code>y="y-title"</code>) and legend (within <code>labs()</code>, use <code>fill/color="legend-title"</code>) labels display the complete variable name.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>The default computation of <code>geom_histogram</code> through <code>stat_bin</code> uses 30 bins, which is not always an optimal choice.</p>
<p>There are possible options to address this issue. One option is to set the number of bins using the <code>bins</code> argument. Another option is to adjust the width of each bin using the <code>binwidth</code> argument.</p>
<p>The number of bins or bars in the histogram can be customized using the <code>bins</code> argument in the <code>geom_histogram</code> function.</p>
<p>An alternative option involves utilizing the <code>binwidth</code> argument in the <code>geom_histogram</code> function, which dictates the width of each bin on the X-axis. <em>It is important to note that this argument takes priority over the bin argument</em>.</p>
<p><br></p>
<section id="exercise-1" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-1"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 1</h4>
<ul>
<li>Using the example from above, within <code>geom_histogram()</code> use the <code>bins</code> and <code>binwidth</code> arguments to change the size of each bar/bin.</li>
</ul>
<details>
<summary>
Hints (click here)
</summary>
<p>You can use the following argument <code>geom_histogram(bins = TRY DIFFERENT VALUES)</code> or <code>geom_histogram(binwidth = TRY DIFFERENT VALUES)</code>.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
<section id="is-the-distribution-bimodal" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="is-the-distribution-bimodal"><span class="header-section-number">3.1</span> Is the distribution bimodal?</h3>
<p>Histograms are effective in displaying the distributional characteristics of variables within a dataset. They provide visual cues regarding the location of distribution peaks, whether the distribution is skewed or symmetric, and the presence of any outliers. <strong>However, given that our dataset consists of three distinct species, can we utilize histograms to analyze all of them simultaneously?</strong></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>, </span>
<span id="cb10-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>, </span>
<span id="cb10-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<a href="https://ggplot2.tidyverse.org/reference/theme.html">Themes</a> are a powerful way for customizing the non-data elements of your plots, such as titles, labels, fonts, background, gridlines, and legends. They can be employed to provide plots with a consistently customized appearance.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p><br></p>
<section id="exercise-2" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-2"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 2</h4>
<ul>
<li>Instead of coloring only the outline of the <code>bins</code>, let’s color the <code>bins</code> themselves.</li>
</ul>
<details>
<summary>
Hints (click here)
</summary>
<p>You will have to use the argument <code>fill</code>. Please be sure that your legend title, adjusted using <code>labs()</code>, has been properly set.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of penguin flipper length"</span>, </span>
<span id="cb11-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>,</span>
<span id="cb11-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
</section>
<section id="density-plot-geom_density" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="density-plot-geom_density"><span class="header-section-number">4</span> Density plot: <code>geom_density()</code></h2>
<p>A density plot provides an alternative way to visualize the distributions of numerical variables. It is essentially a smoothed version of a histogram and serves as a practical option, especially when dealing with continuous data originating from a smooth underlying distribution.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density plot of penguin flipper length"</span>, </span>
<span id="cb12-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>,</span>
<span id="cb12-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<section id="exercise-3" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-3"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 3</h4>
<p>Let’s analyze the distribution of penguins’ body mass according to their species utilizing density plots. - Incorporate distinct colors for each species in the density plots, not just the lines. Employ a level of transparency to provide a clearer view. Please ensure that the density plot is accompanied by a title, subtitle, and <strong>caption</strong>.</p>
<details>
<summary>
Hints (click here)
</summary>
<p>You will have to use the argument <code>fill</code> to incorporate color, <code>alpha</code> for transparency, and <code>caption</code> within the <code>labs</code> argument.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density plot of penguin body mass"</span>, </span>
<span id="cb13-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>,</span>
<span id="cb13-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PalmerPinguins Dataset"</span>,</span>
<span id="cb13-9">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="geoms-from-ggplot-extension-packages" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="geoms-from-ggplot-extension-packages"><span class="header-section-number">5</span> Geoms from ggplot “extension” packages</h2>
<p>Transparency can help when density plots ovelap, but can I do better?</p>
<p>There are various <a href="https://exts.ggplot2.tidyverse.org/gallery/"><strong>ggplot extension packages</strong></a> available. Some of these packages provide extra geoms, such as the trendy “ridgeline” plots offered by the ggridges package.</p>
<p>Transparency can help when density plots ovelap, but can I do better?</p>
<p>There are various <a href="https://exts.ggplot2.tidyverse.org/gallery/"><strong>ggplot extension packages</strong></a> available. Some of these packages provide extra geoms, such as the trendy “ridgeline” plots offered by the ggridges package.</p>
<p>We’ll have to install the package:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggridges"</span>)</span></code></pre></div>
</div>
<p>After loading it, we can utilize the ridgeplot geom <code>geom_density_ridges()</code> in the same manner as any other geom.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggridges)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density_ridges</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density plot of penguin body mass"</span>, </span>
<span id="cb15-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"By species"</span>,</span>
<span id="cb15-9">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PalmerPinguins Dataset"</span>,</span>
<span id="cb15-10">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Penguin species"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Picking joint bandwidth of 153</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please note that when using <code>geom_density_ridges()</code>, we need to specify the <code>y</code>.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="bar-graphs-geom_bar" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="bar-graphs-geom_bar"><span class="header-section-number">6</span> Bar graphs: <code>geom_bar()</code></h2>
<p>In order to analyze the distribution of a categorical variable, a bar chart can be employed. The bar heights indicate the frequency of observations associated with each <code>x</code> value.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="stacked-bar-plots." class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="stacked-bar-plots."><span class="header-section-number">6.1</span> Stacked bar plots.</h3>
<p>Stacked bar plots can be utilized to visualize the association between two categorical variables. For instance, these two stacked bar plots demonstrate the relation between island and species, showcasing the distribution of species within each island.</p>
<p>Stacked bar plots can be utilized to visualize the association between two categorical variables. For instance, these two stacked bar plots demonstrate the relation between island and species, showcasing the distribution of species within each island.</p>
<p>The first plot displays the frequencies of penguin species on different islands. It reveals that there is an equal number of Adelies on each island. Nonetheless, we lack a clear understanding of the percentage distribution within each specific island.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> island, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>The second plot, which is a relative frequency plot created by setting <code>position = "fill"</code> in the <strong>geom</strong>, is more useful for comparing species distributions across islands because it is not influenced by the unequal numbers of penguins on the islands.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> island, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>By using this plot, we can see that Gentoo penguins exclusively live on Biscoe Island and represent approximately 75% of the penguins on that island. Chinstrap penguins exclusively inhabit Dream Island and make up approximately 50% of the penguins on that island. Whereas Adelie penguins inhabit all three islands and account for the entire penguin population on Torgersen Island.</p>
</section>
</section>
<section id="bar-chart-of-means-stat_summary" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="bar-chart-of-means-stat_summary"><span class="header-section-number">7</span> Bar chart of means: <code>stat_summary()</code></h2>
<p>To summarize the data using averages, we can use the <code>stat_summary()</code> function. Instead of invoking a geom_* function, we can employ <code>stat_summary()</code> to define the desired method for summarizing the data and presenting it in our visual representation.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>,</span>
<span id="cb20-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>,</span>
<span id="cb20-5">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb20-6">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb20-7">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb20-8">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.data =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_se"</span>,</span>
<span id="cb20-10">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"errorbar"</span>,</span>
<span id="cb20-11">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="exercise-4" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-4"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 4</h4>
<ol type="1">
<li>To keep only the Gentoo data, pipe your dataset into the <code>filter()</code> function.</li>
<li>Create a bar graph examining the mean bill_length_mm by sex by piping the filtered data into <code>ggplot()</code>.</li>
<li>Ensure that the points with unknown sex (NA) are removed.</li>
<li>Include error bars in the bar plots and add transparency.</li>
<li>Display all data points on top of the boxplot.</li>
<li>Finally, use color to fill every bar by using the “DarSet2” palette from the “RColorBrewer” package, which was installed last week.</li>
</ol>
<details>
<summary>
Hints (click here)
</summary>
<p>You will have to load <code>RColorBrewer</code> and use the argument <code>scale_fill_brewer(palette = "Dark2")</code>.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>,</span>
<span id="cb21-6">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>,</span>
<span id="cb21-7">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb21-8">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb21-9">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb21-10">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span>sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.data =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_se"</span>, </span>
<span id="cb21-12">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"errorbar"</span>, </span>
<span id="cb21-13">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dark2"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>plotting</category>
  <category>ggplot2</category>
  <guid>https://osu-codeclub.github.io/posts/S07E13_ggplot_03/</guid>
  <pubDate>Fri, 12 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E13_ggplot_03/img/ggplot2_exploratory.png" medium="image" type="image/png" height="133" width="144"/>
</item>
<item>
  <title>Plotting 2: aesthetics, violin, and boxplots</title>
  <dc:creator>Horacio Lopez-Nicora</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E12_ggplot_02/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/penguins.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%"></p>
<figcaption>Artwork by <a href="https://twitter.com/allison_horst">Allison Horst</a>.</figcaption>
</figure>
</div>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-the-past-session" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-the-past-session">Recap of the past session</h4>
<p>Last week’s session marked the beginning of our data visualization journey with <code>ggplot2</code>. We explored the philosophy of coding graphics, created a versatile ggplot template for various charts, and discovered how to add visual elements using aesthetics and layers. Exciting times ahead!</p>
</section>
<section id="session-goals" class="level4">
<h4 class="anchored" data-anchor-id="session-goals">Session Goals</h4>
<ul>
<li>Let’s pick up on <strong>aesthetics</strong> and learn some more about it. Furthermore, let’s introduce the <a href="https://ggplot2.tidyverse.org/reference/ggtheme.html"><code>theme()</code></a> function.</li>
<li>Learn the basic of other <strong>geom_boxplot()</strong>, <strong>geom_violin()</strong>, <strong>stat_summary</strong>.</li>
</ul>
<p><br></p>
</section>
</section>
<section id="our-data-set" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="our-data-set"><span class="header-section-number">2</span> Our data set</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/palmerpenguins_hex.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Illustration by <a href="https://allisonhorst.github.io/palmerpenguins/articles/art.html">Allison Horst</a></figcaption>
</figure>
</div>
<p>We are going to continue using our 🐧 data set from the package <a href="https://allisonhorst.github.io/palmerpenguins/"><code>palmerpenguins</code></a>. If you haven’t done so, please install that package first:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"palmerpenguins"</span>)</span></code></pre></div>
</div>
<p><a href="https://allisonhorst.github.io/palmerpenguins/index.html"><code>palmerpenguins</code></a> is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.&nbsp;Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.</p>
<p>We’ll now load the package, along with the tidyverse (which includes ggplot2):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>Once you’ve loaded that package you will have a data frame called <code>penguins</code> at your disposal — let’s take a look:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7               181        3750
 2 Adelie  Torgersen           39.5          17.4               186        3800
 3 Adelie  Torgersen           40.3          18                 195        3250
 4 Adelie  Torgersen           NA            NA                  NA          NA
 5 Adelie  Torgersen           36.7          19.3               193        3450
 6 Adelie  Torgersen           39.3          20.6               190        3650
 7 Adelie  Torgersen           38.9          17.8               181        3625
 8 Adelie  Torgersen           39.2          19.6               195        4675
 9 Adelie  Torgersen           34.1          18.1               193        3475
10 Adelie  Torgersen           42            20.2               190        4250
# ℹ 334 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or glimpse() for a sort of transposed view, so we can see all columns:</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>Rows: 344
Columns: 8
$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…
$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="the-absolute-power-of-aesthetics" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-absolute-power-of-aesthetics"><span class="header-section-number">3</span> The Absolute Power of Aesthetics</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://r.qcbs.ca/workshop03/book-en/aesthetics.html"><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/4plot_aesthetic.png" class="img-fluid figure-img" alt="Aesthetics enable us to showcase multiple dimensions of our dataset in a single plot by modifying elements such as color, shape, size, labels, and transparency."></a></p>
<figcaption>Aesthetics enable us to showcase multiple dimensions of our dataset in a single plot by modifying elements such as color, shape, size, labels, and transparency.</figcaption>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
<section id="last-weeks-example-on-the-power-of-aesthetics" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="last-weeks-example-on-the-power-of-aesthetics"><span class="header-section-number">3.1</span> Last week’s example on “The power of aesthetics”</h3>
<p>Last week we <strong>added a third aesthetic</strong> to our graph, <code>color</code>. Our current plot mapped <code>bill_length_mm</code> to the <code>x</code> aesthetic, and <code>bill_depth_mm</code> to the <code>y</code> aesthetic — , we then added a mapping of <code>species</code> to the <code>color</code> aesthetic:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb8-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb8-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span>
<span id="cb8-5">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please note that we begin by using our data set to create a <strong>plot object</strong> with the function <code>ggplot()</code>. We then assign this object to the variable <strong>p</strong>. From this point forward, we can add layers by using the <code>+</code> operator.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="what-if-we-want-to-customize-our-plot" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="what-if-we-want-to-customize-our-plot"><span class="header-section-number">3.2</span> What if we want to customize our plot?</h3>
<p>We can do this using <a href="https://ggplot2.tidyverse.org/reference/ggtheme.html"><code>theme()</code></a>. There are several options of themes which control all non-data display. Use <code>theme()</code> if you just need to tweak the display of an existing theme.</p>
<p>For this session, let’s utilize <code>theme_bw()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb9-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb9-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span>
<span id="cb9-5">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="what-if-we-want-to-change-colors" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="what-if-we-want-to-change-colors"><span class="header-section-number">3.3</span> What if we want to change colors?</h3>
<p>We can manually change colors.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Manual color change</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By using scale_colour_manual(),</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we can specify the exact colours we want to use</span></span>
<span id="cb10-4">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_manual</span>(</span>
<span id="cb10-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note that the color order will correspond to</span></span>
<span id="cb10-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the order of the species given in the legend</span></span>
<span id="cb10-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey55"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"skyblue"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>By using the <code>colors()</code> function, you can explore numerous color options that are available for selection.</p>
</section>
<section id="using-a-different-color-palette-rcolorbrewer" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="using-a-different-color-palette-rcolorbrewer"><span class="header-section-number">3.4</span> Using a different color palette: <code>RColorBrewer</code></h3>
<p>There is a wide variety of <code>R</code> color packages specifically designed to offer a range of color palette options, each evoking a distinct mood. For instance, the <code>RColorBrewer</code> package provides a choice of 35 palettes!</p>
<p><em>At this point, you have become an expert in the fundamentals of <code>R</code>. Installing packages and loading them with <code>library()</code> is now second nature to you.</em></p>
<p>Now, we can install <code>RColorBrewer</code> and choose one from the many palettes it offers.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">RColorBrewer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">display.brewer.all</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Above, you can observe the organization of the colors into distinct groups based on their sequential, diverging, or mixed characteristics. It is important to note that varied palettes are advantageous for varying data types.</p>
<p>Let’s use these palettes with our original penguin graph. Here is an example demonstrating how the <strong>Set1</strong> palette is utilized to group data points with the function <code>scale_color_brewer()</code> and the palette argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set1"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>In addition, the <code>ggplot2</code> package offers other functions. Two such functions are <code>scale_color_viridis()</code> and <code>scale_color_grey()</code>, which allows us to convert colors to <strong>grayscale</strong> without sacrificing information. This is especially important for individuals with colorblindness.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_d</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please note that when using <code>scale_color_viridis()</code> to color data points, we need to specify whether our variable is continuous [using <code>scale_color_viridis_c()</code>] or discrete [using <code>scale_color_viridis_d()</code>]. In this case, the variable <strong>species</strong> is discrete.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p><br></p>
<section id="exercise-1" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-1"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 1</h4>
<ul>
<li><p>Let us revisit the scatter plot depicting the correlation between bill length and depth, distinguished by different species using colored data points.</p></li>
<li><p>What if we want to use only a grayscale palette for publication purposes?</p></li>
</ul>
<details>
<summary>
Hints (click here)
</summary>
<p>We can use the <code>scale_color_grey()</code> function to color our grouped data points.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_grey</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="colorblind-friendly-palettes" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="colorblind-friendly-palettes"><span class="header-section-number">3.5</span> Colorblind-friendly palettes</h3>
<p>Have you ever contemplated how your figure might appear when viewed by individuals with different types of color blindness? We can utilize the <a href="https://cran.r-project.org/web/packages/colorBlindness/index.html"><code>colorBlindness</code></a> package to explore this aspect.</p>
<p>Let’s install the <code>colorBlindness</code> package and load it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's install the colorBlindness package</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colorBlindness"</span>)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(colorBlindness)</span></code></pre></div>
</div>
<p>To begin with, let’s test out various colors using the <code>cvdPlot()</code> function. This will demonstrate how our current plot appears to individuals with different types of color blindness.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">colorBlindness<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cvdPlot</span>(p)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Our current color palette is not accessible, as can be observed. However, by using <code>viridis</code> palettes, we can ensure that our plots consistently convey the same information, regardless of the audience.</p>
<p>Let’s use the same <code>viridis</code> palette we used above to make our plot more accessible.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">p_viridis <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_d</span>()</span></code></pre></div>
</div>
<p>Were we successful? Let’s use <code>cvdPlot()</code> to check again.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">colorBlindness<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cvdPlot</span>(p_viridis)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="providing-transparency-with-alpha" class="level3" data-number="3.6">
<h3 data-number="3.6" class="anchored" data-anchor-id="providing-transparency-with-alpha"><span class="header-section-number">3.6</span> Providing transparency with <code>alpha</code></h3>
<p>How can we incorporate transparency into the data points in our graph? One way to achieve this is by utilizing the <code>alpha</code> feature.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, </span>
<span id="cb19-3">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, </span>
<span id="cb19-4">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Here, we present an example of how to utilize the <code>alpha</code> function to incorporate transparency into our data points. By doing so, we are able to exhibit four variables within a single graph.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb20-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb20-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species,</span>
<span id="cb20-5">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> flipper_length_mm))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="exercise-2" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-2"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 2</h4>
<ul>
<li><p>We like the graph we produced above. We want, however, to also display <code>body_mass_g</code>.</p></li>
<li><p>How can we add this additional variable to our graph?</p></li>
</ul>
<details>
<summary>
Hints (click here)
</summary>
<p>We can use the <code>size</code> function within <code>aes()</code>.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb21-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb21-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species,</span>
<span id="cb21-5">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> flipper_length_mm,</span>
<span id="cb21-6">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> body_mass_g))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
</section>
<section id="boxplot-geom_boxplot" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="boxplot-geom_boxplot"><span class="header-section-number">4</span> Boxplot: <code>geom_boxplot()</code></h2>
<p>A boxplot gives a nice summary of one or more numeric variables. A boxplot is composed of several elements:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://leansigmacorporation.com/box-plot-with-minitab/"><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/Boxplot.png" class="img-fluid figure-img" alt="Anatomy of a boxplot."></a></p>
<figcaption>Anatomy of a boxplot.</figcaption>
</figure>
</div>
<p>Let’s use <code>geom_boxplot</code> to explore the <strong>bill_length_mm</strong> for the penguien species.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins, </span>
<span id="cb22-2">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, </span>
<span id="cb22-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb22-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify species as a grouping variable</span></span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please note that we add color to the boxplot by applying the <code>fill</code> option. You may want to experiment with using the <code>color</code> option to observe the differences.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="challenge---lets-work-together" class="level4 exercise">
<h4 class="anchored" data-anchor-id="challenge---lets-work-together"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Challenge - Let’s work together!</h4>
<p>Let’s consider using a different color palette for the boxplot. Additionally, we might prefer to show the mean value instead of the median value and add some transparency. Lastly, we would like to display our data points to provide information on the sample size for each species.</p>
<details>
<summary>
Hints (click here)
</summary>
<p>To change the color palette for the boxplot, we can utilize the <code>scale_fill_brewer()</code> function. To include the mean value, we can employ the <code>stat_summary()</code> function. If we want to add transparency, we can use the <code>alpha</code> parameter. Lastly, to overlay the data points, we can utilize the <code>geom_jitter()</code> function.</p>
</details>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins, </span>
<span id="cb23-2">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, </span>
<span id="cb23-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb23-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify species as a grouping variable</span></span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dark2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red3"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="violin-plot-geom_violin" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="violin-plot-geom_violin"><span class="header-section-number">5</span> Violin plot: <code>geom_violin()</code></h2>
<p>Similar to boxplots, violin plots visualize the distribution of a numerical variable for one or multiple groups. However, the shape of a violin graphically represents the distribution of data points that is not easily visible in a boxplot’s summary, leading to a more precise representation of the data (<a href="https://www.data-to-viz.com/graph/violin.html">Data-to-Viz</a>).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins, </span>
<span id="cb24-2">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> species, </span>
<span id="cb24-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb24-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify species as a grouping variable</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dark2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red3"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<section id="exercise-3" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-3"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 3</h4>
<ol type="1">
<li>To keep only the <code>Gentoo</code> data, pipe your dataset into the <code>filter()</code> function.</li>
<li>Create a boxplot examining <code>bill_length_mm</code> by <code>sex</code> by piping the filtered data into <code>ggplot()</code>.</li>
<li>Ensure that the points with unknown sex (<code>NA</code>) are removed.</li>
<li>Include the mean value of <code>bill_length_mm</code> in the boxplots.</li>
<li>Display all data points on top of the boxplot.</li>
<li>Lastly, display the distribution of each dataset.</li>
<li>To achieve the graph displaying all the above requirements, you will need to add transparency.</li>
</ol>
<details>
<summary>
Solutions (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dark2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_summary</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red3"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>plotting</category>
  <category>ggplot2</category>
  <guid>https://osu-codeclub.github.io/posts/S07E12_ggplot_02/</guid>
  <pubDate>Fri, 05 Apr 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E12_ggplot_02/img/penguins.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Plotting 1: Intro to ggplot2</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <dc:creator>Michael Broe</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E11_ggplot_01/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/img/featured.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%"></p>
</figure>
</div>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this Code Club semester, we started with 5 sessions on R basics, followed by 5 sessions on tidyverse data wrangling basics. This session will be the first several on data visualization: creating plots with the ggplot2 package.</p>
<section id="session-goals" class="level4">
<h4 class="anchored" data-anchor-id="session-goals">Session Goals</h4>
<ul>
<li>Learn the philosophy of <strong>coding</strong> a graphic.</li>
<li>Learn the basic <strong>template</strong> of a <strong>ggplot</strong> graphic, so you can reuse it for multiple chart types.</li>
<li>Learn how you can quickly add visual information to a graphic using <strong>aesthetics</strong> and <strong>layers</strong>.</li>
</ul>
<p><br></p>
</section>
</section>
<section id="the-ggplot-philosophy" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="the-ggplot-philosophy"><span class="header-section-number">2</span> The ggplot philosophy</h2>
<p>We have seen that in R, instead of manually manipulating data with a mouse as you do when editing Excel spreadsheets, we <strong>code</strong> the operations we want to perform, e.g.&nbsp;using dplyr verbs like <code>select()</code>. In a similar way, when performing visualization, instead of clicking on a chart type, we <strong>code the chart</strong> in R.</p>
<p>And just as <code>dplyr</code> gives us efficient ways to manipulate data frames, <strong><code>ggplot2</code></strong> (which is also part of the tidyverse) gives us efficient ways to manipulate charts/plots/graphics<sup>1</sup>. The <strong>gg</strong> in <strong>gg</strong>plot2 stands for <em>grammar of graphics</em>, a systematic approach for designing statistical plots. The idea is to ‘pull apart’ various plots into their component pieces, which leads to the idea of <strong>layers</strong>.</p>
<p>There’s a learning curve to such a systematic approach, but there are many advantages:</p>
<ul>
<li><p>First, <em>every</em> graphic shares a <strong>common template</strong>. Once you understand this structure you can “say” a lot of different things. The <a href="https://rstudio.github.io/cheatsheets/data-visualization.pdf">ggplot cheat sheet</a> lists over 40 plot-types, but because ggplot is somewhat of a language in its own right, users can create their own <a href="https://exts.ggplot2.tidyverse.org/gallery/">extensions</a> that you can also utilize, adding many more.</p></li>
<li><p>Second, because plots are built up using <strong>layers</strong>, you can gradually build up a graphic of increasing complexity; or on the other hand, take someone else’s code and simplify it by deleting layers. We add layers with <code>+</code> very similar to how we’ve been piping operations with <code>|&gt;</code>.</p></li>
<li><p>Third, and this is a more general point that applies to a lot of R code: because the graphic is now a piece of code, it is <strong>reusable</strong>. Once you have a little library of graphs you’ve made, you can tweak them in various ways to make more. You can also share your code with others, so they can apply the same approach to their data.</p></li>
</ul>
<p><br></p>
</section>
<section id="our-data-set" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="our-data-set"><span class="header-section-number">3</span> Our data set</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/img/palmerpenguins_hex.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Illustration by <a href="https://allisonhorst.github.io/palmerpenguins/articles/art.html">Allison Horst</a></figcaption>
</figure>
</div>
<p>We are going to use a fun 🐧 data set from the package <a href="https://allisonhorst.github.io/palmerpenguins/"><code>palmerpenguins</code></a>. We’ll have to install that package first:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"palmerpenguins"</span>)</span></code></pre></div>
</div>
<p><a href="https://allisonhorst.github.io/palmerpenguins/index.html"><code>palmerpenguins</code></a> is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.&nbsp;Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.</p>
<p>We’ll now load the package, along with the tidyverse (which includes ggplot2):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.0     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>Once you’ve loaded that package you will have a data frame called <code>penguins</code> at your disposal — let’s take a look:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7               181        3750
 2 Adelie  Torgersen           39.5          17.4               186        3800
 3 Adelie  Torgersen           40.3          18                 195        3250
 4 Adelie  Torgersen           NA            NA                  NA          NA
 5 Adelie  Torgersen           36.7          19.3               193        3450
 6 Adelie  Torgersen           39.3          20.6               190        3650
 7 Adelie  Torgersen           38.9          17.8               181        3625
 8 Adelie  Torgersen           39.2          19.6               195        4675
 9 Adelie  Torgersen           34.1          18.1               193        3475
10 Adelie  Torgersen           42            20.2               190        4250
# ℹ 334 more rows
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or glimpse() for a sort of transposed view, so we can see all columns:</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>Rows: 344
Columns: 8
$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…
$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="a-first-ggplot2-example" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="a-first-ggplot2-example"><span class="header-section-number">4</span> A first ggplot2 example</h2>
<p>What is the correlation between bill-length and bill-width in these penguin species? Are longer bills also deeper? We can explore this with a <strong>scatterplot</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/img/culmen_depth.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%"></p>
</figure>
</div>
<hr style="height:1pt; visibility:hidden;">
<section id="a-first-plot-attempt" class="level4">
<h4 class="anchored" data-anchor-id="a-first-plot-attempt">A first plot attempt</h4>
<p>The first thing that ggplot2 plot needs from you is a data frame — just like the rest of the tidyverse, ggplot2 is oriented towards data frames. Specifically, the first argument to the <code>ggplot()</code> function is a data frame:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>This is not very interesting! But it’s notable that it is <em>something</em>. <code>ggplot()</code> has created a base plot layer.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
While the name of the <em>package</em> is <strong>ggplot2</strong>, the name of the <em>function</em> is just <code>ggplot()</code>.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="our-first-complete-plot" class="level4">
<h4 class="anchored" data-anchor-id="our-first-complete-plot">Our first complete plot</h4>
<p>Our initial plotting code was correct but incomplete. Next, we need to specify:</p>
<ul>
<li><p>The <strong>plot type</strong> we want using one of many <strong>“geom”</strong> functions — e.g., the geom for a scatterplot is <code>geom_point()</code>.</p></li>
<li><p>Which columns in our data frame to plot in which ways, such along the x and y axes. In ggplot-speak, we are <strong>mapping variables to aesthetics</strong>, with the <em>aesthetics</em> being things like x and y coordinates as well shape and color.</p></li>
</ul>
<p>We can add both these pieces of information in a single additional layer. The operator to <strong>add a layer</strong> is <strong><code>+</code></strong>, which is the <code>ggplot</code> equivalent of the pipe symbol (<code>|&gt;</code>), and best practice is to place it at the end of the line, just like the pipe. Here then is our complete first plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 2 rows containing missing values or values outside the scale range
(`geom_point()`).</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>To recap, the three required ggplot elements that we used are:</p>
<ul>
<li>The <strong>data</strong>: here <code>penguins</code></li>
<li>One or more <strong>geoms</strong>: here <code>geom_point()</code></li>
<li>One or more <strong>aesthetic mappings</strong>: here <code>x = bill_length_mm, y = bill_depth_mm</code></li>
</ul>
<p>Also, note that we provided three pieces of information from our data — a data frame and two column names. After telling ggplot to use the <code>penguins</code> data frame, we can refer to columns in this data frame using their unquoted names.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The ggplot warning above
</div>
</div>
<div class="callout-body-container callout-body">
<p>ggplot warned us that 2 rows were removed because they “containing missing values or values outside the scale range”:</p>
<ul>
<li><p>“<em>Missing values</em>”: If this were the case, there must be <code>NA</code>s in the bill length and/or bill depth columns.</p></li>
<li><p>“<em>Outside the scale range</em>”: This could happen if we manually set a “scale range”, e.g.&nbsp;restricting axis limits so some of the data can’t be plotted. We didn’t do this and ggplot wouldn’t automatically do it, so this doesn’t apply.</p></li>
</ul>
<p>So, there are probably <code>NA</code>s — let’s look for those, starting with the bill length column:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(bill_length_mm))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 2 × 8
  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;
1 Adelie  Torgersen             NA            NA                NA          NA
2 Gentoo  Biscoe                NA            NA                NA          NA
# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;</code></pre>
</div>
</div>
<p>We indeed get two rows, with <code>NA</code>s for all measurement, so those must have been the two rows ggplot was complaining about.</p>
</div>
</div>
<p>As for the <strong>relationship between bill length and bill depth</strong> — this is not very clear, but I guess if you squint your eyes, you can see local positive correlations? We’ll explore this relationship in more detail below.</p>
<hr style="height:1pt; visibility:hidden;">
<details>
<summary>
Each point in the plot has a bill length and an associated bill depth. <strong>How does ggplot know which bill lengths to associate with which bill depths?</strong> <em>(Click for the answer)</em>
</summary>
<hr style="height:1pt; visibility:hidden;">
<p>Each point comes from one row in the data frame: so ggplot assumes that the the bill length and bill depth <em>given in one row derive from the same observation</em> (here: the same penguin).</p>
As such, to work with ggplot, your data frame needs to be in a “tidy” format (see our <a href="../../posts/S07E09_tidy_04/index.html">Code Club from a couple weeks ago</a>). If you find yourself struggling to appropriately assign aesthetic mappings, you may have to pivot your data first, most often with a <code>pivot_longer()</code>.
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="exercise-1" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-1"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 1</h4>
<p>Create a scatterplot comparing body mass and flipper length. Does it look like there is any correlation there?</p>
<details>
<summary>
Hints (click here)
</summary>
Take another look at the <code>penguins</code> data frame to see which columns contain body mass and flipper length. It’s up to you which you assign to the x axis and the y axis.
</details>
<details>
<summary>
Solution (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>
</section>
<section id="the-power-of-aesthetics" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="the-power-of-aesthetics"><span class="header-section-number">5</span> The power of aesthetics</h2>
<p>We saw above that the relationship between bill length and bill depth is not particularly clear, but that there <em>might</em> be some local patterns. Is it possible that these clusters correspond somehow to the three different penguin species: Adelie, Chinstrap, and Gentoo? That is, part of the problem with our original plot may be that we lumped the data from all three species together.</p>
<p>We can explore this by <strong>adding a third aesthetic</strong>, <code>color</code>. Our current plot maps <code>bill_length_mm</code> to the <code>x</code> aesthetic, and <code>bill_depth_mm</code> to the <code>y</code> aesthetic — now, we’ll add a mapping of <code>species</code> to the <code>color</code> aesthetic:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm,</span>
<span id="cb14-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm,</span>
<span id="cb14-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<p>Note that a legend is added automatically! It’s much clearer now that, within each species, there does seem to be a positive correlation between bill length and depth.</p>
<hr style="height:1pt; visibility:hidden;">
<section id="exercise-2" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-2"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 2</h4>
<ul>
<li><p>Go back to your body mass/flipper plot from Exercise 1 and color points by species.</p></li>
<li><p>There are various aesthetics you can use for a categorical variable like species (see the help for <code>geom_point()</code> — type <code>?geom_point</code> to open the help page). One of these aesthetics is <code>shape</code>: try this instead of <code>color</code> and see which you prefer.</p></li>
</ul>
<details>
<summary>
Solutions (click here)
</summary>
<ul>
<li><p>Color point by species:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g,</span>
<span id="cb15-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm,</span>
<span id="cb15-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div></li>
<li><p>Try the <code>shape</code> aesthetic instead of <code>color</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g,</span>
<span id="cb16-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm,</span>
<span id="cb16-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> species))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div></li>
</ul>
</details>
</section>
<p><br></p>
</section>
<section id="syntax-variants" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="syntax-variants"><span class="header-section-number">6</span> Syntax variants</h2>
<section id="omit-the-argument-names" class="level4">
<h4 class="anchored" data-anchor-id="omit-the-argument-names">Omit the argument names</h4>
<p>So far, we’ve been using verbose syntax for clarity, but we can shorten this a bit: instead of…</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm))</span></code></pre></div>
</div>
<p>…we can omit the names of the arguments:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm))</span></code></pre></div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="pipe-data-into-ggplot" class="level4">
<h4 class="anchored" data-anchor-id="pipe-data-into-ggplot">Pipe data into ggplot</h4>
<p>You might also prefer to pipe the data frame into ggplot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm))</span></code></pre></div>
</div>
<p>The above example <em>adds</em> a line of code to say the same thing, but you might prefer this as it makes abundantly clear what your input data is. This style especially makes sense when you edit a dataframe prior to plotting it:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a plot only for the Adelie Penguin:</span></span>
<span id="cb20-2">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
When you pipe data into ggplot, remember to switch between <code>|&gt;</code> and <code>+</code>!
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="local-vs.-global-aesthetics" class="level4">
<h4 class="anchored" data-anchor-id="local-vs.-global-aesthetics">Local vs.&nbsp;global aesthetics</h4>
<p>So far, we’ve provided our aesthetic mappings (<code>aes(...)</code>) inside the geom function. However, it is also possible to do this inside the initial <code>ggplot()</code> function call. Compare these two:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Provide the aesthetic mappings inside geom_point():</span></span>
<span id="cb21-2">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm))</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Provide the aesthetic mappings inside ggplot():</span></span>
<span id="cb21-7">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
</div>
<p>In the above example, those two variants are <em>functionally equivalent</em>. However, it is possible to add <strong>multiple geoms</strong> in ggplot — and once you do that, the following becomes important:</p>
<ul>
<li>Mappings provided to a specific geom are “<strong>local</strong>”: they do not carry over to other geoms.</li>
<li>Mappings provided to <code>ggplot()</code> are “<strong>global</strong>”: they apply to all geoms in the plot.</li>
</ul>
<p>Therefore, if you have multiple geoms, it most often makes sense to put the aesthetics inside <code>ggplot()</code>, but there are exceptions — and it is also possible to specify aesthetics in multiple places. More about this in the next section.</p>
<p><br></p>
</section>
</section>
<section id="adding-geoms-and-geom_smooth" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="adding-geoms-and-geom_smooth"><span class="header-section-number">7</span> Adding geoms, and <code>geom_smooth()</code></h2>
<p>In the scatterplot for bill length vs.&nbsp;depth, there wasn’t a clear <em>overall</em> (across-species) relationship. We can make this even more visually apparent by fitting a line to the data — <strong>overlaying another geom</strong> in the same plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in `geom_smooth()`:
! Problem while computing stat.
ℹ Error occurred in the 2nd layer.
Caused by error in `compute_layer()`:
! `stat_smooth()` requires the following missing aesthetics: x and y.</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<details>
<summary>
Uh oh! What went wrong here? Can you think of two different ways to solve this? <em>(Click for the answer)</em>
</summary>
<p>Because we provided <strong>local</strong> aesthetics to <code>geom_point()</code> only, <code>geom_smooth()</code> has not been informed about any aesthetics, as the error message suggests. We can resolve this either by:</p>
<ul>
<li>Providing the same local aesthetics to both geom functions.</li>
<li>Providing global aesthetics (i.e.&nbsp;to the <code>ggplot()</code> function). This is the better option.</li>
</ul>
</details>
<hr style="height:1pt; visibility:hidden;">
<p>In our next attempt, we’ll provide the aesthetics globally, that is, we specify them inside the <code>ggplot()</code> function:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Fitted lines
</div>
</div>
<div class="callout-body-container callout-body">
<p>By default, the <code>geom_smooth()</code> function doesn’t use classical linear regression to fit the data. Instead it uses <strong>lo</strong>cally <strong>e</strong>stimated <strong>s</strong>catterplot <strong>s</strong>moothing: <a href="https://en.m.wikipedia.org/wiki/Local_regression">loess</a>. The resulting lines snake around and trying to find local best fits to the data. You can request different fit algorithms with the <code>geom_smooth()</code>’s <code>method</code> argument. See <code>?geom_smooth</code> for details.</p>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<section id="exercise-3" class="level4 exercise">
<h4 class="anchored" data-anchor-id="exercise-3"><i class="fa-solid fa-user-edit" aria-label="user-edit"></i> Exercise 3</h4>
<p><strong>A)</strong> Revisit your flipper/body_mass plot once again, and fit lines to each species.</p>
<details>
<summary>
Solution (click here)
</summary>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
<hr>
<p><strong>B)</strong> Perhaps you think there is too much going on in this plot, with the scatterplot data making the fitted line less clear. Modify your plot so it just shows the fitted line and not the points.</p>
<details>
<summary>
Solution (click here)
</summary>
<p>This is as easy a removing the <code>geom_point()</code> line:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
<hr>
<p><strong>C) (Bonus)</strong></p>
<ol type="1">
<li>Pipe your dataset into <code>filter()</code> to keep only the <code>Gentoo</code> data.</li>
<li>Pipe that data into <code>ggplot()</code> to create a scatterplot with a smoothed-line overlay for just that one species, colored by <code>sex</code>.</li>
<li>In a next attempt, can you get rid of the points for which the sex is unknown (<code>NA</code>)?</li>
</ol>
<details>
<summary>
Solution (click here)
</summary>
<ol type="1">
<li>and 2.:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb31-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
<ol start="3" type="1">
<li>— we add <code>!is.na(sex)</code> to the <code>filter()</code> call to remove penguins with unknown sex:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
<hr>
<p><strong>D) (Bonus)</strong> Modify your previous Gentoo penguin plot such that:</p>
<ul>
<li>You have a single fitted line for penguins of both sexes</li>
<li>Points are still colored by sex</li>
</ul>
<details>
<summary>
Solution (click here)
</summary>
<p>This will require you to some aesthetics <em>globally</em> (<code>x</code> and <code>y</code>) and the <code>color</code> aesthetic <em>locally</em>, just for <code>geom_point()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb35-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<p><br></p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>We use these terms interchangeably.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>plotting</category>
  <category>ggplot2</category>
  <guid>https://osu-codeclub.github.io/posts/S07E11_ggplot_01/</guid>
  <pubDate>Fri, 29 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E11_ggplot_01/img/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tidyverse 5: Reading in data</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E10_tidy_05/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readr.png" height="250"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readxl.png" height="250"></p>
</div>
</div>
</div>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>So far in code club this semester, all of the data we have used has been either made up by us or able to be loading from data embedded within base R or a package.</p>
<p>Today we are going to go over reading in external data into R. The tidyverse core package that contains functions for reading in (and writing out) data is <a href="https://readr.tidyverse.org/index.html"><code>readr</code></a> and <a href="https://readxl.tidyverse.org/"><code>readxl</code></a> allows reading in Excel data. This package allows us to read in rectangular data. Some of the material from today is adapted from a past <a href="https://biodash.github.io/codeclub/s05e05/#">code club</a> by Jelmer Poelstra.</p>
<p>Useful references for today:</p>
<ul>
<li><a href="https://readr.tidyverse.org/index.html"><code>readr</code> documentation</a> (for reading in delimited files)</li>
<li><a href="https://readxl.tidyverse.org/"><code>readxl</code> docuemtation</a> (for reading in Excel files)</li>
<li><a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf">Data import with the tidyverse cheatsheet</a></li>
<li><a href="https://r4ds.hadley.nz/data-import">Data import chapter 7</a> in R for Data Science</li>
</ul>
<p>There are other non-core tidyverse packages for reading in data (including directly from Google Drive), you can find them <a href="https://www.tidyverse.org/packages/#import">here</a> though I will not go through them today.</p>
<p>We are going to use a new package today.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readxl"</span>)</span></code></pre></div>
</div>
<p>And then will start by loading the libraries we need for today.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readxl)</span></code></pre></div>
</div>
<p>But before we actually read in data, let’s talk a little bit about the different ways in which input data can be formatted.</p>
</section>
<section id="what-are-some-common-data-formatting-styles" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="what-are-some-common-data-formatting-styles"><span class="header-section-number">2</span> What are some common data formatting styles?</h2>
<section id="csv" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="csv"><span class="header-section-number">2.1</span> <code>.csv</code></h3>
<p>The most common formatting style for data is comma separated values, which often has the file extension <code>.csv</code>. This means that the data is delimited (i.e., separated) by commas. Often we open these files in a program like Excel, Numbers, or similar, which puts each value into its own cell, but the data actually looks like this:</p>
<pre><code>Student ID,Full Name,favourite.food,mealPlan,AGE
1,Sunil Huffmann,Strawberry yoghurt,Lunch only,4
2,Barclay Lynn,French fries,Lunch only,5
3,Jayendra Lyne,N/A,Breakfast and lunch,7
4,Leon Rossini,Anchovies,Lunch only,
5,Chidiegwu Dunkel,Pizza,Breakfast and lunch,five
6,Güvenç Attila,Ice cream,Lunch only,6</code></pre>
<p>Here, the first row are our column headers, and each subsequent row contains information about one student, including their student ID, full name, favorite food, meal plan, and age.</p>
<p>If we look at this data as a table, it looks like this:</p>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 15%">
<col style="width: 23%">
<col style="width: 26%">
<col style="width: 27%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: right;">Student ID</th>
<th style="text-align: left;">Full Name</th>
<th style="text-align: left;">favourite.food</th>
<th style="text-align: left;">mealPlan</th>
<th style="text-align: left;">AGE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">Sunil Huffmann</td>
<td style="text-align: left;">Strawberry yoghurt</td>
<td style="text-align: left;">Lunch only</td>
<td style="text-align: left;">4</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: left;">Barclay Lynn</td>
<td style="text-align: left;">French fries</td>
<td style="text-align: left;">Lunch only</td>
<td style="text-align: left;">5</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: left;">Jayendra Lyne</td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;">Breakfast and lunch</td>
<td style="text-align: left;">7</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: left;">Leon Rossini</td>
<td style="text-align: left;">Anchovies</td>
<td style="text-align: left;">Lunch only</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: left;">Chidiegwu Dunkel</td>
<td style="text-align: left;">Pizza</td>
<td style="text-align: left;">Breakfast and lunch</td>
<td style="text-align: left;">five</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: left;">Güvenç Attila</td>
<td style="text-align: left;">Ice cream</td>
<td style="text-align: left;">Lunch only</td>
<td style="text-align: left;">6</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="tsv" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="tsv"><span class="header-section-number">2.2</span> <code>.tsv</code></h3>
<p>Another common data format is as tab separated values, or <code>.tsv</code>. Here, instead of being separated by commas like in a <code>.csv</code>, the values are separated by tabs. Looking at the same students data in a <code>.tsv</code> format would look like this:</p>
<pre><code>Student ID        Full Name        favourite.food        mealPlan        AGE
1        Sunil Huffmann        Strawberry yoghurt        Lunch only        4
2        Barclay Lynn        French fries        Lunch only        5
3        Jayendra Lyne        N/A        Breakfast and lunch        7
4        Leon Rossini        Anchovies        Lunch only        
5        Chidiegwu Dunkel        Pizza        Breakfast and lunch        five
6        Güvenç Attila        Ice cream        Lunch only        6</code></pre>
<blockquote class="blockquote">
<p>Both comma-separated nad tab-separated values can also be stored with other file extensions like <code>.txt</code>.</p>
</blockquote>
</section>
<section id="xlsx-and-.xls" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="xlsx-and-.xls"><span class="header-section-number">2.3</span> <code>.xlsx</code> and <code>.xls</code></h3>
<p>These are Microsoft-specific file formats created using the program Excel. Since using Excel spreadsheets so so common, there are special packages that allow the reading in of these file types. If you open up a file in Excel, you can save it in a variety of different file formats, just please do this with care, as Excel has reputation of <a href="https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates">turning gene names in to dates</a>.</p>
</section>
<section id="which-file-format-to-use" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="which-file-format-to-use"><span class="header-section-number">2.4</span> Which file format to use?</h3>
<p>The truth is all file formats can be read into R, and some might be better for certain instances. You might read on the internet that its better to use <code>.csv</code> files over <code>.xlsx.</code> and <code>.xls</code> for compatibility sake, but there are also benefits to Excel formats where lots of data can be stored in one file in different sheets.</p>
<blockquote class="blockquote">
<p>Pick the data format that works best for your application.</p>
</blockquote>
</section>
</section>
<section id="download-data-to-import" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="download-data-to-import"><span class="header-section-number">3</span> Download data to import</h2>
<p>The code below will let you download some (5) files to your computer for the exercise today, which you can then import. These files were created by Jelmer from R for Data Science for a <a href="https://biodash.github.io/codeclub/s05e05/#basics-of-reading-rectangular-files">code club</a> many code clubs ago.</p>
<p>The code below allows you to download five files in different formats and with different data structure. We will practice data import with these files. Remember when you execute this code, your files will be downloaded to your working directory.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># saves the url where the file is located</span></span>
<span id="cb5-2">url_csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.csv"</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># downloads the file and saves in your working directory as students.csv</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_csv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.csv"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">url_csv_noheader <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_noheader.csv"</span></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_csv_noheader, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_noheader.csv"</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9">url_csv_meta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_with_meta.csv"</span></span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_csv_meta, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_with_meta.csv"</span>)</span>
<span id="cb5-11"></span>
<span id="cb5-12">url_tsv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.tsv"</span></span>
<span id="cb5-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_tsv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.tsv"</span>)</span>
<span id="cb5-14"></span>
<span id="cb5-15">url_excel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/osu-codeclub/osu-codeclub.github.io/raw/main/posts/S07E10_tidy_05/students.xlsx"</span></span>
<span id="cb5-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> url_excel, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.xlsx"</span>)</span></code></pre></div>
</div>
<p>Once you’ve downloaded all these files, take a minute to open them all up on your computer (you can use Excel, Numbers, whatever) to see how they are different. Be sure not to make any changes to the filesa.</p>
</section>
<section id="reading-in-delimited-files" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="reading-in-delimited-files"><span class="header-section-number">4</span> Reading in delimited files</h2>
<p>There are a few functions that allow you to read in tabular data in <code>readr</code>, and they are part of the <code>read_*()</code> family.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readr-tabdata-cheatsheet.png" class="img-fluid figure-img"></p>
<figcaption>[From the <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf">readr cheatsheet</a>]</figcaption>
</figure>
</div>
<p>The following functions work similarly:</p>
<ul>
<li><a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_csv()</code></a>: reads in comma-separated values files</li>
<li><a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_csv2()</code></a>: reads in semi-colon-separated values files where commas are the decimal point (common in Europe) instead of the period (as in the US)</li>
<li><a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_tsv()</code></a>: reads in tab-separated values files</li>
<li><a href="https://readr.tidyverse.org/reference/read_delim.html"><code>read_delim()</code></a>: reads in delimited files, where the delimiter can be specified. If you were to specify the delimiter to be “,”, this could be the save as <code>read_csv()</code>.</li>
</ul>
<p>Let’s start by reading in our “students.csv” file and then work through how changing how we set the arguments alters how our data is imported.</p>
<p>The first (and only required) argument to <code>read_*()</code> is the file, which we will provide in quotes as it is a string. If we were to have our file in a folder called “data” within our working directory, we could provide “data/students.csv”. If our file we wanted to read in was in some other location on our computer, we could provide the full path.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">students_csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 6 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Full Name, favourite.food, mealPlan, AGE
dbl (1): Student ID

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>We can see a message after we’ve imported our data giving us information about how this process went. In this case, we’ve read in a file with 6 rows and 5 columns. The delimiter is <code>","</code> and we have information about what type our columns have been imported in. Here, the columns favourite.food, mealPlan, and AGE have been parsed as character type, and Student ID is numeric (i.e., dbl).</p>
<p>We can get a sense of our data by using the function <code>head()</code> to see the first 6 rows, all columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_csv)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
</section>
<section id="reading-in-excel-files" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="reading-in-excel-files"><span class="header-section-number">5</span> Reading in Excel files</h2>
<p>I expect many of you have data stored in <code>.xlsx</code> or <code>.xls</code> files that you’d like to read into R. The package <a href="https://readxl.tidyverse.org/"><code>readxl</code></a> makes easy work of this. This packages has functions including:</p>
<ul>
<li><a href="https://readxl.tidyverse.org/reference/read_excel.html"><code>read_xlsx()</code></a>: reads in <code>.xlsx</code> files</li>
<li><a href="https://readxl.tidyverse.org/reference/read_excel.html"><code>read_xls()</code></a>: reads in <code>.xls</code> files</li>
<li><a href="https://readxl.tidyverse.org/reference/read_excel.html"><code>read_excel()</code></a>: reads in both <code>.xlsx</code> and <code>.xls</code> files and tries to guess which one your file is. This usually but does not always works well.</li>
</ul>
<blockquote class="blockquote">
<p>There are <a href="https://blog.fileformat.com/spreadsheet/xls-vs-xlsx/">subtle differences</a> between <code>.xlsx</code> and <code>.xls</code> files but I don’t think they’re that important to get into here.</p>
</blockquote>
<p>Let’s read in our Excel file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">students_excel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xlsx</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.xlsx"</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_excel)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 G√ºven√ß Attila  Ice cream          Lunch only          6    </code></pre>
</div>
</div>
<p>By default the first sheet is read in. If we want to know what the names of the different sheets are, we can run the following code providing the name of our file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">excel_sheets</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.xlsx"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "students"   "students_2"</code></pre>
</div>
</div>
<p>We can set what sheet specifically we want to read in using the argument <code>sheet = ""</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">students_excel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xlsx</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.xlsx"</span>,</span>
<span id="cb14-2">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sheet =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students"</span>)</span></code></pre></div>
</div>
</section>
<section id="handling-file-reading-issues" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="handling-file-reading-issues"><span class="header-section-number">6</span> Handling file reading issues</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readr-arguments.png" class="img-fluid figure-img"></p>
<figcaption>From the <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf">readr cheatsheet</a></figcaption>
</figure>
</div>
<section id="specifying-column-types" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="specifying-column-types"><span class="header-section-number">6.1</span> Specifying column types</h3>
<p>Let’s say that the column favourite.food is actually a factor (i.e., categorical), and not a character. We can specify that column should be a factor using the argument <code>col_types =</code>. The short codes you can specify in can be found <a href="https://readr.tidyverse.org/reference/read_delim.html#arguments">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">students_csv_mealplan <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.csv"</span>,</span>
<span id="cb15-2">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nccfc"</span>)</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(students_csv_mealplan)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 6
Columns: 5
$ `Student ID`   &lt;dbl&gt; 1, 2, 3, 4, 5, 6
$ `Full Name`    &lt;chr&gt; "Sunil Huffmann", "Barclay Lynn", "Jayendra Lyne", "Leo…
$ favourite.food &lt;chr&gt; "Strawberry yoghurt", "French fries", "N/A", "Anchovies…
$ mealPlan       &lt;fct&gt; Lunch only, Lunch only, Breakfast and lunch, Lunch only…
$ AGE            &lt;chr&gt; "4", "5", "7", NA, "five", "6"</code></pre>
</div>
</div>
</section>
<section id="setting-column-names" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="setting-column-names"><span class="header-section-number">6.2</span> Setting column names</h3>
<p>You might have a datafile that doesn’t include headers, or column names. These functions by default use <code>col_names = TRUE</code> and assume that your file does have headers. If you don’t, you can set this argument to <code>FALSE</code> and provide column headers. Let’s just try reading in a file without headers just to see what the result is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">students_no_headers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_noheader.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 5 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Sunil Huffmann, Strawberry yoghurt, Lunch only, 4
dbl (1): 1

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_no_headers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 5
    `1` `Sunil Huffmann` `Strawberry yoghurt` `Lunch only`        `4`  
  &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;chr&gt;               &lt;chr&gt;
1     2 Barclay Lynn     French fries         Lunch only          5    
2     3 Jayendra Lyne    N/A                  Breakfast and lunch 7    
3     4 Leon Rossini     Anchovies            Lunch only          &lt;NA&gt; 
4     5 Chidiegwu Dunkel Pizza                Breakfast and lunch five 
5     6 Güvenç Attila    Ice cream            Lunch only          6    </code></pre>
</div>
</div>
<p>We can see that the first row has become the column names, and this is not what we want. We can indicate the column names using the argument <code>col_names =</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">students_no_headers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_noheader.csv"</span>,</span>
<span id="cb21-2">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Full Name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"favourite.food"</span>,</span>
<span id="cb21-3">                                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mealPlan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AGE"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 6 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Full Name, favourite.food, mealPlan, AGE
dbl (1): Student ID

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_no_headers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
<p>These column names are a bit sloppy, so we can also clean them up using <code>janitor::clean_names()</code>. If we apply <code>clean_names()</code>, we can see what happens.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">students_no_headers_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(students_no_headers)</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_no_headers_clean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  student_id full_name        favourite_food     meal_plan           age  
       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2          2 Barclay Lynn     French fries       Lunch only          5    
3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6          6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
</section>
<section id="handling-header-or-metadata-lines" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="handling-header-or-metadata-lines"><span class="header-section-number">6.3</span> Handling header or metadata lines</h3>
<p>Sometimes the headers of your data might not be in the first row. In the case that you want to read in data that has non-data rows, you can indicate those to skip in the reading in process.</p>
<p><img src="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/has-metadata.png" class="img-fluid"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">students_metadata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_delim</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students_with_meta.csv"</span>,</span>
<span id="cb27-2">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>,</span>
<span id="cb27-3">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skip =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since there are two lines we don't want to read in</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 6 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Full Name, favourite.food, mealPlan, AGE
dbl (1): Student ID

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_metadata)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
<p>This is particularly useful if you are reading in data that comes off an instrument or system that formats data in a specific way.</p>
</section>
<section id="what-to-do-with-nas" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="what-to-do-with-nas"><span class="header-section-number">6.4</span> What to do with NAs</h3>
<p>Often your dataset will have missing data, though different people will code NAs differently. They may be simply missing, N/A, 999, or in some other way. You can tell your data import function how NAs are coded so they can be parsed correctly.</p>
<p>In this data, we have NAs that are coded as “NA”, and “N/A”. The default NA values are R are <code>na = c("NA", "")</code>, so our data deviates from what would by default be considered missing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">students_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.csv"</span>,</span>
<span id="cb31-2">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N/A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adding N/A as a NA option</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 6 Columns: 5
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): Full Name, favourite.food, mealPlan, AGE
dbl (1): Student ID

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(students_missing)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  
         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;
1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    
2            2 Barclay Lynn     French fries       Lunch only          5    
3            3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    
4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; 
5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five 
6            6 Güvenç Attila    Ice cream          Lunch only          6    </code></pre>
</div>
</div>
</section>
</section>
<section id="practice" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="practice"><span class="header-section-number">7</span> Practice</h2>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Read in a file about dogs.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download and successfully read in the file below. I would recommend that after you download it, you open it to have some information to guide your import.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># where the file is located</span></span>
<span id="cb35-2">dogs_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/osu-codeclub/osu-codeclub.github.io/raw/main/posts/S07E10_tidy_05/dogs2.csv"</span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download it</span></span>
<span id="cb35-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> dogs_url,</span>
<span id="cb35-6">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dogs.csv"</span>)</span></code></pre></div>
</div>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<p>Look at your file and the documentation for <code>read_*()</code> to see what arguments you can set to aid in the import of your data. Take a look at <code>comment =</code> and <code>skip =</code></p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">dogs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dogs2.csv"</span>,</span>
<span id="cb36-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>,</span>
<span id="cb36-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skip =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 195 Columns: 9
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): Breed
dbl (8): 2013 Rank, 2014 Rank, 2015 Rank, 2016 Rank, 2017 Rank, 2018 Rank, 2...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dogs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 9
  Breed  `2013 Rank` `2014 Rank` `2015 Rank` `2016 Rank` `2017 Rank` `2018 Rank`
  &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;
1 Retri…           1           1           1           1           1           1
2 Frenc…          11           9           6           6           4           4
3 Germa…           2           2           2           2           2           2
4 Retri…           3           3           3           3           3           3
5 Bulld…           5           4           4           4           5           5
6 Poodl…           8           7           8           7           7           7
# ℹ 2 more variables: `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;</code></pre>
</div>
</div>
</details>
</div>
</div>
<section id="take-some-data-that-you-have-and-try-and-read-it-into-r" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="take-some-data-that-you-have-and-try-and-read-it-into-r"><span class="header-section-number">7.1</span> Take some data that you have and try and read it into R</h3>
<p>This you should do on your own! Find a file that you have and try and read it in and calculate some summary information.</p>
</section>
</section>
<section id="bonus-writing-out-data" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="bonus-writing-out-data"><span class="header-section-number">8</span> Bonus, writing out data</h2>
<p>Often you will generate data in R that you want to write out to a spredsheet form. You can do this using the <code>write_*()</code> functions.</p>
<ul>
<li><a href="https://readr.tidyverse.org/reference/write_delim.html"><code>write_delim()</code></a> writes out a delimited file, where you specify the delimiter</li>
<li><a href="https://readr.tidyverse.org/reference/write_delim.html"><code>write_csv()</code></a> writes out a csv file</li>
</ul>
<p>Here, we provide the name of the R object we want to write out, and it will be written to your working directory.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(students_csv)</span></code></pre></div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E10_tidy_05/</guid>
  <pubDate>Fri, 22 Mar 2024 04:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E10_tidy_05/img/readr.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Tidyverse 4: Tidy Data and Pivoting</title>
  <dc:creator>Aaron Max Wiedemer</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E09_tidy_04/</link>
  <description><![CDATA[ 




<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E09_tidy_04/img/tidy_data_img.jpeg" title="Tidy Data By Julia Lowndes and Allison Horst" class="img-fluid figure-img"></p>
<figcaption>Tidy Data By Julia Lowndes and Allison Horst</figcaption>
</figure>
</div>
<section id="overview" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Overview</h1>
<div class="callout callout-style-default callout-tip callout-titled" title="Document Summary">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Document Summary
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><strong>tidy data</strong> : a way of organizing data where <em>columns contain variables</em> and <em>rows contain observations</em></p>
<p><strong>Terms</strong></p>
<ul>
<li><p><strong>variable</strong> : contains values of an attribute that is measured (i.e., length, sex, pH, color)</p></li>
<li><p><strong>observation</strong> : contains all the values measured on the same unit (i.e., person, sample, day)</p></li>
</ul>
<p><strong>Functions</strong></p>
<ul>
<li><p><strong>pivot_longer()</strong> : a function that “lengthens” data by transforming a set of columns containing values into two columns - one containing the previous column names, and the other contain all of the values. This is the inverse of <code>pivot_wider()</code></p></li>
<li><p><strong>pivot_wider()</strong> : a function that “widens” data by transforming a set of two columns (though can be more) containing names and values into a larger set of columns. This is the inverse of <code>pivot_longer()</code></p></li>
</ul>
</div>
</div>
</div>
<section id="starting-note" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="starting-note"><span class="header-section-number">1.1</span> Starting note</h2>
<p>Much of this page is inspired from and has examples from - <a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html">Hadley Wickam’s Tidy Data</a> - <a href="https://r4ds.had.co.nz/tidy-data.html#wider">R for Data Science</a></p>
</section>
</section>
<section id="introduction" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Introduction</h1>
<p>So far, we’ve been learning a lot of functions within the <code>tidyverse</code> to manipulate datasets</p>
<ul>
<li><code>filter()</code> to choose rows</li>
<li><code>select()</code> to choose columns</li>
<li><code>arrange()</code> to sort data</li>
<li><code>rename()</code> to change data names</li>
<li><code>mutate()</code> to add and change data</li>
<li><code>summarise()</code> to produce data summaries</li>
</ul>
<p>Today we will be learning more about the structure of datasets, specifically <strong>tidy data</strong> .</p>
<p>Most of what we have been working in code club this semester has actually been using tidy data, as most functions in the <strong>tidyverse</strong> are used to create or manipulate tidy data.</p>
<p>While we have been focusing on how to manipulate tidy data, today we will be learning two functions that can be used to manipulate and more powerfully create tidy data - <code>pivot_longer()</code> and <code>pivot_wider()</code></p>
<section id="set-up" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="set-up"><span class="header-section-number">2.1</span> Set up</h2>
<p>Lets get our favorite library loaded up</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("tidyverse") # delete first hash and run to install if you havent already</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.0     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
</section>
</section>
<section id="tidy-data" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Tidy data</h1>
<section id="data-structure" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="data-structure"><span class="header-section-number">3.1</span> Data Structure</h2>
<p>Most datasets we work with in R are organized in a roughly rectangular grid-like format made up of <strong>rows</strong> and <strong>columns</strong> that contain some values.</p>
<p>Each value in a dataset belongs to some <strong>variable</strong> and some <strong>observation</strong>.</p>
<ul>
<li>A <strong>variable</strong> contains values of an attribute that was measured (i.e., length, sex, pH, color)</li>
<li>An <strong>observation</strong> contains all the values measured on the same thing (unit) (i.e., person, sample, day)</li>
</ul>
<p>Examples:</p>
<blockquote class="blockquote">
<p>If I’m measuring the height of a population each person will be one <strong>observation</strong> and the variable I am measuring is <strong>height</strong></p>
</blockquote>
<blockquote class="blockquote">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_in =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb3-3"> )</span>
<span id="cb3-4"></span>
<span id="cb3-5">height</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 43 × 1
   height_in
       &lt;dbl&gt;
 1      67.7
 2      53.2
 3      66.6
 4      69.8
 5      69.1
 6      76.0
 7      55.7
 8      66.9
 9      69.6
10      65.8
# ℹ 33 more rows</code></pre>
</div>
</div>
</blockquote>
<blockquote class="blockquote">
<p>If I’m counting the number of geese I see on campus throughout the year every day, the variables will be <strong>number of geese I see, and the day I count them on</strong>. The observation will be <strong>one instance of me counting geese on a specific day</strong></p>
</blockquote>
<blockquote class="blockquote">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">geese <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>),</span>
<span id="cb5-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geese_number =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb5-4"> )</span>
<span id="cb5-5"></span>
<span id="cb5-6">geese</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 365 × 2
     day geese_number
   &lt;int&gt;        &lt;dbl&gt;
 1     1           44
 2     2           16
 3     3           27
 4     4           22
 5     5            9
 6     6           15
 7     7            3
 8     8           16
 9     9           20
10    10           47
# ℹ 355 more rows</code></pre>
</div>
</div>
</blockquote>
<p>This may sound like review, but in practice can be somewhat tricky</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>Looking at the <code>diamonds</code> dataset, what is the observation and variable of the the value <code>diamonds[5,7]</code> ?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">diamonds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 1
  price
  &lt;int&gt;
1   335</code></pre>
</div>
</div>
<p>The observation here is the <strong>5th diamond</strong> and the variable we are measuring is <strong>price</strong></p>
</details>
</div>
</div>
</section>
<section id="pre-tidy-date" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="pre-tidy-date"><span class="header-section-number">3.2</span> Pre-Tidy Date</h2>
<blockquote class="blockquote">
<p>“All tidy data sets are alike. Each messy dataset is messy in its own way” - Hadley Wickham.</p>
</blockquote>
<p>At risk of stating the obvious, organizing values in datasets can be accomplished in many ways</p>
<p>Here with an example of table of student grades on several assignments adapted from <a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html">Hadley Wickam’s Tidy Data</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb9-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>name,    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz1, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz2, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>test1,</span>
<span id="cb9-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>,  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>,</span>
<span id="cb9-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb9-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>,</span>
<span id="cb9-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span></span>
<span id="cb9-7">  )</span>
<span id="cb9-8"></span>
<span id="cb9-9">classroom</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 4 × 4
  name   quiz1 quiz2 test1
  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;
1 Billy  &lt;NA&gt;  67    75   
2 Suzy   44    &lt;NA&gt;  &lt;NA&gt; 
3 Lionel 86    74    84   
4 Jenny  94    98    88   </code></pre>
</div>
</div>
<p>There is more than one way to organize this information in a table - for instance here we can flip (transpose) the table to have student names in columns and assessments in rows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb11-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>assessment, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Billy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Suzy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Lionel, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Jenny,</span>
<span id="cb11-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>,</span>
<span id="cb11-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>,</span>
<span id="cb11-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span></span>
<span id="cb11-6">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 5
  assessment Billy Suzy  Lionel Jenny
  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;
1 quiz1      &lt;NA&gt;  44    86     94   
2 quiz2      67    &lt;NA&gt;  74     98   
3 test1      75    &lt;NA&gt;  84     88   </code></pre>
</div>
</div>
<p>This data isn’t <strong>tidy data</strong> yet though.</p>
<div class="callout callout-style-default callout-note callout-titled" title="SIde Note: Different Organizations Serve Different Purposes">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
SIde Note: Different Organizations Serve Different Purposes
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Different ways of organizing data can serve different purposes - some ways of organizing data are great for collecting data, some good for analyzing data, some both, and some neither.</p>
</div>
</div>
</div>
<section id="the-look-of-tidy-data" class="level3" data-number="3.2.1">
<h3 data-number="3.2.1" class="anchored" data-anchor-id="the-look-of-tidy-data"><span class="header-section-number">3.2.1</span> The look of tidy data</h3>
<p>Roughly speaking, in tidy data <strong>columns contain variables</strong> and <strong>rows contain observations</strong></p>
<p>Here’s the dataset manually remade in a tidy format</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">tidy_classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>( <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb13-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assessment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)),</span>
<span id="cb13-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb13-4"></span>
<span id="cb13-5"></span>
<span id="cb13-6">tidy_classroom</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 3
   name   assessment grade
   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;
 1 Billy  quiz1      &lt;NA&gt; 
 2 Billy  quiz2      67   
 3 Billy  test1      75   
 4 Jenny  quiz1      94   
 5 Jenny  quiz2      98   
 6 Jenny  test1      88   
 7 Lionel quiz1      86   
 8 Lionel quiz2      74   
 9 Lionel test1      84   
10 Suzy   quiz1      44   
11 Suzy   quiz2      &lt;NA&gt; 
12 Suzy   test1      &lt;NA&gt; </code></pre>
</div>
</div>
<p>Here, the values, variables, and observations are more clear</p>
<p>The variables are</p>
<ol type="1">
<li>the <strong>names</strong> of the students (in the <code>name</code> column)</li>
<li>the <strong>assessments</strong> (in the <code>assessment</code> column)</li>
<li>the <strong>grades</strong> (in the <code>grade</code> column)</li>
</ol>
<p>Each observation here is <strong>a particular grade, on each assessmnet, for each student</strong>.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Note">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Look at the <strong>dimensions</strong> of this table. From this, we can immediatly tell the number of variables, and the number of observations in this dataset</p>
</div>
</div>
</div>
</section>
</section>
<section id="tidy-data-definition" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="tidy-data-definition"><span class="header-section-number">3.3</span> Tidy data definition</h2>
<p>Tidy data is a standard way of organizing data, and is defined by 3 things</p>
<p><strong>In tidy data</strong></p>
<ol type="1">
<li><strong>Each variable is one column</strong>; columns are single variables</li>
<li><strong>Each observation is one row</strong>; rows are single observations</li>
<li><strong>Each value is a cell</strong>; cells are values</li>
</ol>
<p><strong>Messy data</strong> is defined as any data organization that is not tidy data</p>
<section id="why-use-tidy-data" class="level4">
<h4 class="anchored" data-anchor-id="why-use-tidy-data">Why use tidy data?</h4>
<ul>
<li><p>Having data structured as tidy data makes it easier to manipulate and analyze data in <strong>tidy R</strong> - in fact, <em>most of the functions we have been learning up to now have been preformed on tidy data</em> - this is the <strong>tidyverse</strong> after all</p></li>
<li><p>Some functions require tidy data, and most operations on data in the <strong>tidyverse</strong> are made significantly easier by having your data as tidy data (i.e., data visualization, statistics)</p></li>
<li><p>Having data in a standardized format makes it easier to collaborate on</p></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="Order of Columns">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Order of Columns
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><em>A note on ordering of columns</em> : While order of columns doesn’t really matter for data to be considered tidy, it is standard and common practice to put meta data (aka fixed or random variables) first, followed by the columns for measured data (i.e., sample name columns go first)</p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="making-data-tidy---pivot_longer-and-pivot_wider" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Making data tidy - <code>pivot_longer()</code> and <code>pivot_wider()</code></h1>
<p>Not all data is tidy, which creates the need for us to know how to clean it.</p>
<section id="pivoting-longer" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="pivoting-longer"><span class="header-section-number">4.1</span> Pivoting Longer</h2>
<p>One common problem mentioned in R for data science and by Hadley Wickham is when you <strong>have column names that are actually variable values</strong> (when a single variable is spread across multiple columns)</p>
<div class="callout callout-style-default callout-note callout-titled" title="Sidenote">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Sidenote
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Having a set of columns with variable values for names is actually very common in metabomolics or genomics data, where column titles are metabolites, genes, taxa, etc.</p>
</div>
</div>
</div>
<p>Here is a dataset with this issue - This data denotes the population of Afghanistan, Brazil, and China for the years 1999 and 2000</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">table4b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 3
  country         `1999`     `2000`
  &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;
1 Afghanistan   19987071   20595360
2 Brazil       172006362  174504898
3 China       1272915272 1280428583</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question
</div>
</div>
<div class="callout-body-container callout-body">
<p>What are the variables in the <code>table4b</code> data?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The variables are</p>
<ul>
<li><strong>country</strong></li>
<li><strong>year</strong></li>
<li><strong>population</strong></li>
</ul>
</details>
</div>
</div>
<p>This format of data is sometimes called <strong>wide</strong> data, where the row of column names (the very first row) actually contains variable values.</p>
<p>In this data it doesn’t look very wide, but imagine how much wider if data was taken every year up to or past this year. Wide data tends to get wide very quickly.</p>
<blockquote class="blockquote">
<p>For an example of very wide data, look at the <code>who</code> dataset</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(who)</span>
<span id="cb17-2"> who</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 7,240 × 60
   country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544
   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;
 1 Afghani… AF    AFG    1980          NA           NA           NA           NA
 2 Afghani… AF    AFG    1981          NA           NA           NA           NA
 3 Afghani… AF    AFG    1982          NA           NA           NA           NA
 4 Afghani… AF    AFG    1983          NA           NA           NA           NA
 5 Afghani… AF    AFG    1984          NA           NA           NA           NA
 6 Afghani… AF    AFG    1985          NA           NA           NA           NA
 7 Afghani… AF    AFG    1986          NA           NA           NA           NA
 8 Afghani… AF    AFG    1987          NA           NA           NA           NA
 9 Afghani… AF    AFG    1988          NA           NA           NA           NA
10 Afghani… AF    AFG    1989          NA           NA           NA           NA
# ℹ 7,230 more rows
# ℹ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,
#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,
#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,
#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,
#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,
#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;, …</code></pre>
</div>
</div>
</blockquote>
<p>To make this data tidy, we need to the the column names (the year variable) and turn it into its own column (called <code>year</code>), and take all of the population data and put that into a second variable column (called <code>population</code>)</p>
<p>Previously with the <code>classroom</code> data we did this manually, but there is a much better way to pivot from wide messy data, to longer tidy data with the function <code>pivot_longer</code></p>
<p>Lets look at the help file for it</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">?pivot_longer</span></code></pre></div>
</div>
<p>From this, we see that the <code>pivot_longer</code> function can take a lot of aruguments, but there are only a few important ones</p>
<ol type="1">
<li><code>cols</code>, in which we select the columns to pivot (i.e., the columns whos names contain a variable)</li>
<li><code>names_to</code>, in which we create a new column for where our old column names are to be put into</li>
<li><code>values_to</code>, in which we create a second new column for the values to be put into</li>
</ol>
<p>Here’s what that looks like in our example</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">tidy_table4b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> table4b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">1999</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">2000</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, </span>
<span id="cb20-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"population"</span>) </span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note here the numbers are in backticks. This is because R treats column names as characters, and calling a name as number data won't work here. </span></span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the new column names also need to be in quotes here</span></span>
<span id="cb20-9"></span>
<span id="cb20-10">tidy_table4b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 3
  country     year  population
  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;
1 Afghanistan 1999    19987071
2 Afghanistan 2000    20595360
3 Brazil      1999   172006362
4 Brazil      2000   174504898
5 China       1999  1272915272
6 China       2000  1280428583</code></pre>
</div>
</div>
<p>using <code>pivot_longer</code> we turned a 3x3 table where the column names stored variable values into a 6x3 table where each column contains a single variable, and each row a single observation - and presto, tidy data!</p>
<p>One other thing to note here is that we are not pivoting every column. In some datasets you may only have a few columns that you would like to be longer</p>
<section id="more-examples-and-uses-of-pivot" class="level3" data-number="4.1.1">
<h3 data-number="4.1.1" class="anchored" data-anchor-id="more-examples-and-uses-of-pivot"><span class="header-section-number">4.1.1</span> More examples and uses of pivot</h3>
<p>Pivoting isn’t just for cleaning up! When combined with other functions, pivoting can also be a very useful way to manipulate data to make it easier to analyze</p>
<p>Last week, we used the summary function to find the mean height, width and depth of diamonds in the <code>diamonds</code> dataset</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(diamonds)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x),</span>
<span id="cb23-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y),</span>
<span id="cb23-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(z))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 3
  mean_x mean_y mean_z
   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
1   5.73   5.73   3.54</code></pre>
</div>
</div>
<p>For this we had to create a new column for every dimensional mean, which a.) takes a while to type, especially if we wanted to find the mean of further values and b.) comes out to not be tidy data</p>
<p>Another way to find the means for these columns is to use the <code>pivot_longer</code> function to make another column which we can group the values by</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), </span>
<span id="cb25-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dimension"</span>, </span>
<span id="cb25-4">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value),</span>
<span id="cb25-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> dimension)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 2
  dimension mean_value
  &lt;chr&gt;          &lt;dbl&gt;
1 x               5.73
2 y               5.73
3 z               3.54</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note in cols, I'm not specifying x, y, and z individually. In the dataset they are all next to each other, so I can use the : operator to signify that I want columns x through z. This can be really helpful on wider datasets. </span></span></code></pre></div>
</div>
<p>Here we only have three values, but for wider datasets this can be a very powerful tool</p>
</section>
<section id="pivot-longer-problems" class="level3" data-number="4.1.2">
<h3 data-number="4.1.2" class="anchored" data-anchor-id="pivot-longer-problems"><span class="header-section-number">4.1.2</span> Pivot longer problems</h3>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make the classroom data from earlier into a tidy format using <code>pivot_longer</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb28-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>name,    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz1, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quiz2, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>test1,</span>
<span id="cb28-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>,  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>,</span>
<span id="cb28-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb28-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>,</span>
<span id="cb28-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>,    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span></span>
<span id="cb28-7">  )</span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">classroom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(quiz1,quiz2, test1), </span>
<span id="cb29-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assesment"</span>, </span>
<span id="cb29-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grade"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 3
   name   assesment grade
   &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;
 1 Billy  quiz1     &lt;NA&gt; 
 2 Billy  quiz2     D    
 3 Billy  test1     C    
 4 Suzy   quiz1     F    
 5 Suzy   quiz2     &lt;NA&gt; 
 6 Suzy   test1     &lt;NA&gt; 
 7 Lionel quiz1     B    
 8 Lionel quiz2     C    
 9 Lionel test1     B    
10 Jenny  quiz1     A    
11 Jenny  quiz2     A    
12 Jenny  test1     B    </code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>Find the means, minimum values, maximum values, and standard deviations of all of the numeric columns in the <code>diamonds</code> dataset using <code>pivot_longer</code> followed by <code>summarise</code></p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<p>Which are the numeric columns?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>tibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)
 $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
 $ cut    : Ord.factor w/ 5 levels "Fair"&lt;"Good"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...
 $ color  : Ord.factor w/ 7 levels "D"&lt;"E"&lt;"F"&lt;"G"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...
 $ clarity: Ord.factor w/ 8 levels "I1"&lt;"SI2"&lt;"SI1"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...
 $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
 $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...
 $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...
 $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
 $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
 $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...</code></pre>
</div>
</div>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(carat,depth<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), </span>
<span id="cb33-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>, </span>
<span id="cb33-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value),</span>
<span id="cb33-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(value),</span>
<span id="cb33-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(value),</span>
<span id="cb33-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(value),</span>
<span id="cb33-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> parameter)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 7 × 5
  parameter     mean   min      max       sd
  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 carat        0.798   0.2     5.01    0.474
2 depth       61.7    43      79       1.43 
3 table       57.5    43      95       2.23 
4 price     3933.    326   18823    3989.   
5 x            5.73    0      10.7     1.12 
6 y            5.73    0      58.9     1.14 
7 z            3.54    0      31.8     0.706</code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 3 - Challange
</div>
</div>
<div class="callout-body-container callout-body">
<p>Take a look at the very wide dataset <code>who</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(who)</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(who)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 60
  country   iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544
  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;
1 Afghanis… AF    AFG    1980          NA           NA           NA           NA
2 Afghanis… AF    AFG    1981          NA           NA           NA           NA
3 Afghanis… AF    AFG    1982          NA           NA           NA           NA
4 Afghanis… AF    AFG    1983          NA           NA           NA           NA
5 Afghanis… AF    AFG    1984          NA           NA           NA           NA
6 Afghanis… AF    AFG    1985          NA           NA           NA           NA
# ℹ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,
#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,
#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,
#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,
#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,
#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;,
#   new_sn_f014 &lt;dbl&gt;, new_sn_f1524 &lt;dbl&gt;, new_sn_f2534 &lt;dbl&gt;, …</code></pre>
</div>
</div>
<p>This data contains records of the counts of confirmed tuberculosis cases by country, year, and demographic group. The demographic groups are broken down by sex (m, f) and age (0-14, 15-25, 25-34, 35-44, 45-54, 55-64, unknown).</p>
<p>After using <code>pivot_longer</code>, find the country with the most cases of tb in 2011.</p>
<p><strong>Note</strong>: The first four columns (<code>country</code>, <code>iso2</code>, <code>iso3</code>, and <code>year</code>) are already properly formatted and do not need to be pivoted here.</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<p><code>NA</code> values are liekly to mess up your analysis here - check the <code>pivot_longer()</code> help file to see what arguments are available to remove <code>NA</code> values</p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">who <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(country<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>year), </span>
<span id="cb37-3">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demographic"</span>, </span>
<span id="cb37-4">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tb_counts"</span>, </span>
<span id="cb37-5">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_drop_na =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(tb_counts),</span>
<span id="cb37-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(country,year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(count))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 210 × 3
   country                                year  count
   &lt;chr&gt;                                 &lt;dbl&gt;  &lt;dbl&gt;
 1 China                                  2011 865059
 2 India                                  2011 642311
 3 Indonesia                              2011 313601
 4 South Africa                           2011 289111
 5 Bangladesh                             2011 148198
 6 Pakistan                               2011 127571
 7 Russian Federation                     2011 104320
 8 Philippines                            2011  93580
 9 Democratic People's Republic of Korea  2011  85564
10 Kenya                                  2011  84548
# ℹ 200 more rows</code></pre>
</div>
</div>
<p>China is our winner with a sum of 865059 cases in 2011</p>
</details>
</div>
</div>
</section>
</section>
<section id="pivoting-wider" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="pivoting-wider"><span class="header-section-number">4.2</span> Pivoting Wider</h2>
<p>The other function of the day here is <code>pivot_wider</code></p>
<p><code>pivot_wider</code> , as the name might imply, is the inverse of <code>pivot_longer</code> and creates columns from from values stored in another column</p>
<section id="uses-of-pivot_wider" class="level3" data-number="4.2.1">
<h3 data-number="4.2.1" class="anchored" data-anchor-id="uses-of-pivot_wider"><span class="header-section-number">4.2.1</span> Uses of <code>pivot_wider()</code></h3>
<p>You may be thinking, “why would I ever need this? I thought the whole point was to avoid having columns of variable values”</p>
<p><code>pivot_wider</code> is an especially useful function in many situations. Here are only a few:</p>
<ol type="1">
<li><code>pivot_wider</code> is useful where we have the opposite problem as we saw when learning <code>pivot_longer</code> - when a multiple variables are stored in a single column (single observation is scattered across more than one row)</li>
<li><code>pivot_wider</code> can be useful when we want to make calculations across columns</li>
<li>Not every function in R accepts tidy data, sometimes we do need wide data! (e.g., anything that requires a matrix, PCA)</li>
</ol>
</section>
<section id="using-pivot_wider" class="level3" data-number="4.2.2">
<h3 data-number="4.2.2" class="anchored" data-anchor-id="using-pivot_wider"><span class="header-section-number">4.2.2</span> Using <code>pivot_wider()</code></h3>
<p>Lets see how <code>pivot_wider()</code> is used</p>
<p>This is a dataset containing population data and the number of cases of some disease in Afghanistan, Brazil, and China for the years 1999 and 2000</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">table2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 12 × 4
   country      year type            count
   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;
 1 Afghanistan  1999 cases             745
 2 Afghanistan  1999 population   19987071
 3 Afghanistan  2000 cases            2666
 4 Afghanistan  2000 population   20595360
 5 Brazil       1999 cases           37737
 6 Brazil       1999 population  172006362
 7 Brazil       2000 cases           80488
 8 Brazil       2000 population  174504898
 9 China        1999 cases          212258
10 China        1999 population 1272915272
11 China        2000 cases          213766
12 China        2000 population 1280428583</code></pre>
</div>
</div>
<p>Here, we have columns containing <strong>more</strong> than one variable this time (<code>type</code> has both cases and population).</p>
<p>Lets check out <code>pivot_wider</code> to see how we can undo this and make our data tidy again</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">?pivot_wider</span></code></pre></div>
</div>
<p>Again, <code>pivot_wider</code> has a bunch of arguments, but this time there are really only two essential ones</p>
<ol type="1">
<li><code>names_from</code> which denotes the column in which our new column names are stored</li>
<li><code>values_from</code> which denotes the column in which the values we will be filling our new columns with are stored</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled" title="Note:">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>There are fewer important arguments in <code>pivot_wider</code> - which one is missing its inverse from <code>pivot_longer</code>?</p>
</div>
</div>
</div>
<p>Lets see it in action</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">table2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> count)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 4
  country      year  cases population
  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;
1 Afghanistan  1999    745   19987071
2 Afghanistan  2000   2666   20595360
3 Brazil       1999  37737  172006362
4 Brazil       2000  80488  174504898
5 China        1999 212258 1272915272
6 China        2000 213766 1280428583</code></pre>
</div>
</div>
<p>We have now seperated our variables into seperate columns, and now our rows each contain only one observation. Tidy data!</p>
</section>
<section id="pivot-wider-problems" class="level3" data-number="4.2.3">
<h3 data-number="4.2.3" class="anchored" data-anchor-id="pivot-wider-problems"><span class="header-section-number">4.2.3</span> Pivot Wider Problems</h3>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 1
</div>
</div>
<div class="callout-body-container callout-body">
<p>Undo the <code>tidy_classroom</code> and make it look like one of its untidy form using <code>pivot_wider</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">tidy_classroom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>( <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Billy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jenny"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lionel"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suzy"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb44-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assessment =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quiz2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test1"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)),</span>
<span id="cb44-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"67"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"75"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"94"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"98"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"88"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"74"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"84"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"44"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span></code></pre></div>
</div>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">tidy_classroom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> assessment, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> grade)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 4 × 4
  name   quiz1 quiz2 test1
  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;
1 Billy  &lt;NA&gt;  67    75   
2 Jenny  94    98    88   
3 Lionel 86    74    84   
4 Suzy   44    &lt;NA&gt;  &lt;NA&gt; </code></pre>
</div>
</div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Question 2
</div>
</div>
<div class="callout-body-container callout-body">
<p>In one of the questions from using pivot_longer, we put all of the numeric variables into two columns, here named <code>parameter</code> and <code>value</code>. Can you return the data <code>tampered_diamonds</code> to its original state?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">tampered_diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(carat, depth<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>z), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div>
</div>
<p><strong>note</strong> : if you encounter an error, be sure to check the hint</p>
<details>
<summary>
<b>Hint</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> parameter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> value)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Values from `value` are not uniquely identified; output will contain list-cols.
• Use `values_fn = list` to suppress this warning.
• Use `values_fn = {summary_fun}` to summarise duplicates.
• Use the following dplyr code to identify duplicates.
  {data} |&gt;
  dplyr::summarise(n = dplyr::n(), .by = c(cut, color, clarity, parameter)) |&gt;
  dplyr::filter(n &gt; 1L)</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 276 × 10
   cut       color clarity carat       depth       table price x     y     z    
   &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;list&gt;      &lt;list&gt;      &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;
 1 Ideal     E     SI2     &lt;dbl [469]&gt; &lt;dbl [469]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 2 Premium   E     SI1     &lt;dbl [614]&gt; &lt;dbl [614]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 3 Good      E     VS1     &lt;dbl [89]&gt;  &lt;dbl [89]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 4 Premium   I     VS2     &lt;dbl [315]&gt; &lt;dbl [315]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 5 Good      J     SI2     &lt;dbl [53]&gt;  &lt;dbl [53]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 6 Very Good J     VVS2    &lt;dbl [29]&gt;  &lt;dbl [29]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 7 Very Good I     VVS1    &lt;dbl [69]&gt;  &lt;dbl [69]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 8 Very Good H     SI1     &lt;dbl [547]&gt; &lt;dbl [547]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 9 Fair      E     VS2     &lt;dbl [42]&gt;  &lt;dbl [42]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
10 Very Good H     VS1     &lt;dbl [257]&gt; &lt;dbl [257]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
# ℹ 266 more rows</code></pre>
</div>
</div>
<p>Uh-oh! Uh-oh! With what we have learned so far, we cant undo <code>pivot_longer</code> with <code>pivot_wider</code> here! Can you figure out why?</p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code from the error read out</span></span>
<span id="cb51-2">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cut, color, clarity, parameter) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb51-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1,897 × 5
   cut   color clarity parameter     n
   &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;     &lt;int&gt;
 1 Fair  D     I1      carat         4
 2 Fair  D     I1      depth         4
 3 Fair  D     I1      price         4
 4 Fair  D     I1      table         4
 5 Fair  D     I1      x             4
 6 Fair  D     I1      y             4
 7 Fair  D     I1      z             4
 8 Fair  D     SI2     carat        56
 9 Fair  D     SI2     depth        56
10 Fair  D     SI2     price        56
# ℹ 1,887 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># example of multiple replicates</span></span>
<span id="cb53-2">tampered_diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(cut<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>, color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, clarity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VS2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 2,373 × 5
   cut     color clarity parameter  value
   &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;      &lt;dbl&gt;
 1 Premium D     VS2     carat       0.22
 2 Premium D     VS2     depth      59.3 
 3 Premium D     VS2     table      62   
 4 Premium D     VS2     price     404   
 5 Premium D     VS2     x           3.91
 6 Premium D     VS2     y           3.88
 7 Premium D     VS2     z           2.31
 8 Premium D     VS2     carat       0.71
 9 Premium D     VS2     depth      62.5 
10 Premium D     VS2     table      60   
# ℹ 2,363 more rows</code></pre>
</div>
</div>
<p>multiple values for each “type” of diamond - not uniquely identifiable, thus we can’t get to the original dataset</p>
</details>
</div>
</div>
</section>
</section>
</section>
<section id="citations" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Citations</h1>
<p><a href="https://allisonhorst.com/other-r-fun">Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst</a></p>
<p>https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html</p>
<p>https://r4ds.had.co.nz/tidy-data.html#wider</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E09_tidy_04/</guid>
  <pubDate>Fri, 08 Mar 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E09_tidy_04/img/tidy_data_img.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tidyverse 3: Grouping and Summarizing Data</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E08_tidy_03/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-the-past-two-weeks" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-the-past-two-weeks">Recap of the past two weeks</h4>
<p>In the past two weeks, we’ve been learning about 5 functions from the <em>dplyr</em> package, a central workhorse of the tidyverse ecosystem, to manipulate data in data frames:</p>
<ul>
<li><code>filter()</code> to pick rows (which typically represent observations/samples/individuals)</li>
<li><code>select()</code> to pick columns (which typically represent variables/properties)</li>
<li><code>arrange()</code> to sort data frame rows</li>
<li><code>rename()</code> to change data frame column names</li>
<li><code>mutate()</code> to add and manipulate data frame columns</li>
</ul>
</section>
<section id="learning-objectives-for-today" class="level4">
<h4 class="anchored" data-anchor-id="learning-objectives-for-today">Learning objectives for today</h4>
<p>Today, we will focus on a slightly more complicated and very powerful <em>dplyr</em> function: <code>summarize()</code> to compute summaries across rows, typically across <strong>groups of rows</strong>.</p>
<p>We will also learn about a couple other handy functions to work with groups of rows: the <code>slice_()</code> family of functions and <code>count()</code>.</p>
</section>
<section id="setting-up" class="level4">
<h4 class="anchored" data-anchor-id="setting-up">Setting up</h4>
<p>Load the tidyverse:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Still need to install the tidyverse? <em>Click here for instructions</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<p>We’ll continue working with the <code>diamonds</code> dataframe (automatically loaded with the tidyverse), so let’s take another look at that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48</code></pre>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="summarize" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="summarize"><span class="header-section-number">2</span> <code>summarize()</code></h2>
<section id="a-first-example" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="a-first-example"><span class="header-section-number">2.1</span> A first example</h3>
<p>The <a href="https://dplyr.tidyverse.org/reference/summarise.html"><code>summarize()</code> function from the <em>dplyr</em> package</a> can compute across-row data summaries. As a first example, here’s how you can compute the overall mean of the <code>carat</code> column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1 × 1
  carat_mean
       &lt;dbl&gt;
1      0.798</code></pre>
</div>
</div>
<p>As you can see, this function has quite a different output from the <em>dplyr</em> functions we’d seen so far. All of those returned a manipulated version of our original dataframe, whereas <code>summarize()</code> returns a “completely new” dataframe with a summary of the original data.</p>
<p>However, summarizing across all rows at once with <code>summarize()</code> is much more verbose than the simple, base R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>carat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] 0.7979397</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="summarizing-by-group" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="summarizing-by-group"><span class="header-section-number">2.2</span> Summarizing by group</h3>
<p>The real power of <code>summarize()</code> comes with its ability to compute <strong>group-wise summaries</strong>. For example, simply by adding <code>.by = cut</code>, it will calculate the mean <code>carat</code> separately for each value of <code>cut</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 2
  cut       carat_mean
  &lt;ord&gt;          &lt;dbl&gt;
1 Ideal          0.703
2 Premium        0.892
3 Good           0.849
4 Very Good      0.806
5 Fair           1.05 </code></pre>
</div>
</div>
<p>Nice! We can also compute multiple summarized variables — and use summarizing functions other than <code>mean()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat),</span>
<span id="cb12-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(carat),</span>
<span id="cb12-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 3
  cut       carat_mean carat_max
  &lt;ord&gt;          &lt;dbl&gt;     &lt;dbl&gt;
1 Ideal          0.703      3.5 
2 Premium        0.892      4.01
3 Good           0.849      3.01
4 Very Good      0.806      4   
5 Fair           1.05       5.01</code></pre>
</div>
</div>
<p>A handy helper function is <strong><code>n()</code></strong>, which will compute the <strong>number of rows for each group</strong> (i.e.&nbsp;the group sizes, which can be good to know, for example so you don’t make unfounded conclusions based on really small sample sizes):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat),</span>
<span id="cb14-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_diamonds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb14-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 3
  cut       carat_mean n_diamonds
  &lt;ord&gt;          &lt;dbl&gt;      &lt;int&gt;
1 Ideal          0.703      21551
2 Premium        0.892      13791
3 Good           0.849       4906
4 Very Good      0.806      12082
5 Fair           1.05        1610</code></pre>
</div>
</div>
<p>Here is an overview of the most commonly used functions to compute summaries:</p>
<ul>
<li><code>mean()</code> &amp; <code>median()</code></li>
<li><code>min()</code> &amp; <code>max()</code></li>
<li><code>sum()</code></li>
<li><code>sd()</code>: standard deviation</li>
<li><code>IQR()</code>: interquartile range</li>
<li><code>n()</code>: counts the number of rows (observations)</li>
<li><code>n_distinct()</code>: counts the number of distinct (unique) values</li>
</ul>
<p>Two other comments:</p>
<ul>
<li><p>You can also ask <code>summarize()</code> to compute summaries by <strong>multiple columns</strong>, which will return separate summaries for each <em>combination</em> of the involved variables — we’ll see this in the exercises.</p></li>
<li><p>This may be obvious, but whatever column you are computing summaries by (using <code>.by</code>) should be a <strong>categorical variable</strong>. In our <code>diamond</code> examples, we’re only using columns that are <code>factor</code>s, but “regular” <code>character</code> columns will work just fine as well.</p></li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Side note: <code>group_by()</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p>The “classic” way of using <code>summarize()</code> with multiple groups is by preceding it with a <code>group_by()</code> call — e.g., the code below is equivalent to our last example above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cut) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carat),</span>
<span id="cb16-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_diamonds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 3
  cut       carat_mean n_diamonds
  &lt;ord&gt;          &lt;dbl&gt;      &lt;int&gt;
1 Fair           1.05        1610
2 Good           0.849       4906
3 Very Good      0.806      12082
4 Premium        0.892      13791
5 Ideal          0.703      21551</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>The <code>.by</code> argument to <code>summarize()</code> (and other functions!) is a rather recent addition, but I prefer it over <code>group_by()</code>:</p>
<ul>
<li>It is simpler, a bit less typing, and makes the <code>summarize()</code> call self-contained</li>
<li>When grouping by multiple columns, <code>group_by()</code> has some odd, unhelpful behavior where it keeps some of the groupings, such that you likely need an <code>ungroup()</code> call as well.</li>
</ul>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="exercises-i" class="level2 exercise" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="exercises-i"><span class="header-section-number">3</span> Exercises I</h2>
<section id="diamond-sizes-in-relation-to-clarity" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="diamond-sizes-in-relation-to-clarity"><span class="header-section-number">3.1</span> Diamond sizes in relation to <code>clarity</code></h3>
<p><strong>A)</strong> Compute the mean length (<code>x</code>), width (<code>y</code>), and depth (<code>z</code>) for each diamond <code>clarity</code>. Also include a column with group sizes. Do you see any clear differences?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x),</span>
<span id="cb18-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y),</span>
<span id="cb18-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(z),</span>
<span id="cb18-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_diamonds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb18-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> clarity)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 5
  clarity x_mean y_mean z_mean n_diamonds
  &lt;ord&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;      &lt;int&gt;
1 SI2       6.40   6.40   3.95       9194
2 SI1       5.89   5.89   3.64      13065
3 VS1       5.57   5.58   3.44       8171
4 VS2       5.66   5.66   3.49      12258
5 VVS2      5.22   5.23   3.22       5066
6 VVS1      4.96   4.98   3.06       3655
7 I1        6.76   6.71   4.21        741
8 IF        4.97   4.99   3.06       1790</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<p><strong>B)</strong> Diamond size differences between clarities may become more apparent if we use the overall volume:</p>
<ul>
<li>Dig up your <code>mutate()</code> skills to create a volume column <code>vol</code> (length * width * depth)</li>
<li>Compute the mean volume for each diamond <code>clarity</code></li>
</ul>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vol =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vol_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(vol), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> clarity)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 2
  clarity vol_mean
  &lt;ord&gt;      &lt;dbl&gt;
1 SI2        175. 
2 SI1        138. 
3 VS1        119. 
4 VS2        124. 
5 VVS2        97.6
6 VVS1        82.5
7 I1         205. 
8 IF          83.3</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="diamond-prices" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="diamond-prices"><span class="header-section-number">3.2</span> Diamond prices</h3>
<p><strong>A)</strong> For each diamond <code>cut</code>, compute the <code>price</code>’s mean, median, minimum, maximum, and standard deviation.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(price),</span>
<span id="cb22-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_median =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(price),</span>
<span id="cb22-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_min =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(price),</span>
<span id="cb22-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(price),</span>
<span id="cb22-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(price),</span>
<span id="cb22-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 6
  cut       price_mean price_median price_min price_max price_sd
  &lt;ord&gt;          &lt;dbl&gt;        &lt;dbl&gt;     &lt;int&gt;     &lt;int&gt;    &lt;dbl&gt;
1 Ideal          3458.        1810        326     18806    3808.
2 Premium        4584.        3185        326     18823    4349.
3 Good           3929.        3050.       327     18788    3682.
4 Very Good      3982.        2648        336     18818    3936.
5 Fair           4359.        3282        337     18574    3560.</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<p><strong>B)</strong> Find the combination of <code>cut</code>, <code>color</code>, and <code>clarity</code> that on average yields the most expensive diamonds.</p>
<p>For this, you’ll have to group by all these 3 columns. Try this for yourself first, but check out the first solution if you can’t get that part to work.</p>
<details>
<summary>
<b>Grouping solution</b> (click here)
</summary>
<p><code>.by = c(cut, color, clarity)</code> will group by these 3 columns at once.</p>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>After summarizing, it makes sense to arrange in descending order by price, so you can see the cut-color-clarity combinations with the most expensive diamonds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(price),</span>
<span id="cb24-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(cut, color, clarity)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(price))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 276 × 4
   cut       color clarity  price
   &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;    &lt;dbl&gt;
 1 Very Good D     IF      10298.
 2 Good      D     IF      10030.
 3 Ideal     J     I1       9454 
 4 Premium   D     IF       9056.
 5 Premium   J     SI2      7550.
 6 Fair      D     I1       7383 
 7 Premium   J     VVS1     7244.
 8 Ideal     I     SI2      7192.
 9 Premium   I     VS2      7156.
10 Premium   I     SI2      7148.
# ℹ 266 more rows</code></pre>
</div>
</div>
</details>
</section>
</section>
<p><br></p>
<section id="the-slice_-functions" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="the-slice_-functions"><span class="header-section-number">4</span> The <code>slice_</code> functions</h2>
<p>Like the <code>filter()</code> function, <a href="https://dplyr.tidyverse.org/reference/slice.html">functions in the <code>slice_</code> family</a> select specific rows, but have some different functionality that’s quite handy — especially in combination with grouping.</p>
<p>Let’s say we wanted to only get, <strong>for each <code>cut</code>, the diamond with the highest value of <code>carat</code></strong>. We can do this pretty easily with the <code>slice_max()</code> function, which will return the row(s) with the highest value for a specified variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03
2  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17
3  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24
4  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77
5  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77
6  3.01 Good      H     SI2      57.6    64 18593  9.44  9.38  5.42
7  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31
8  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98</code></pre>
</div>
</div>
<details>
<summary>
Why are we getting more than one diamond per <code>cut</code> in some cases? <em>(Click to see the answer)</em>
</summary>
Because of ties in the <code>cut</code> value. (We’ll get back to this in the next set of exercises.)
</details>
<hr style="height:1pt; visibility:hidden;">
<p>You can get more than just the single highest (<code>slice_max()</code>) / lowest (<code>slice_min()</code>) value per group with the <code>n=</code> argument, and can get a specific proportion of rows with <code>prop=</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the 3 highest-depth diamonds for each value of cut</span></span>
<span id="cb28-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(depth, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 280 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  2.01 Ideal   I     VS2      66.7    56 15729  7.75  7.65  5.14
 2  0.71 Ideal   E     SI2      65.5    55  2511  5.62  5.56  3.66
 3  3.01 Ideal   J     I1       65.4    60 16538  8.99  8.93  5.86
 4  0.8  Premium G     SI1      63      59  2760  5.9   5.81  3.69
 5  0.9  Premium I     VS2      63      58  2761  6.16  6.12  3.87
 6  0.72 Premium I     IF       63      57  2795  5.72  5.7   3.6 
 7  0.72 Premium E     VS2      63      55  2802  5.79  5.61  3.59
 8  0.7  Premium E     VS2      63      60  2818  5.64  5.6   3.54
 9  0.81 Premium G     SI1      63      60  2832  5.87  5.81  3.68
10  0.7  Premium G     VS1      63      60  2838  5.64  5.57  3.53
# ℹ 270 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the 1% lowest-carat diamonds for each value of color</span></span>
<span id="cb30-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_min</span>(carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> color, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 926 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.2  Premium   E     SI2      60.2    62   345  3.79  3.75  2.27
 2  0.2  Premium   E     VS2      59.8    62   367  3.79  3.77  2.26
 3  0.2  Premium   E     VS2      59      60   367  3.81  3.78  2.24
 4  0.2  Premium   E     VS2      61.1    59   367  3.81  3.78  2.32
 5  0.2  Premium   E     VS2      59.7    62   367  3.84  3.8   2.28
 6  0.2  Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 
 7  0.2  Very Good E     VS2      63.4    59   367  3.74  3.71  2.36
 8  0.2  Ideal     E     VS2      62.2    57   367  3.76  3.73  2.33
 9  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
10  0.21 Very Good E     VS2      63.2    54   386  3.82  3.78  2.4 
# ℹ 916 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The full set of <code>slice_</code> functions
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>slice_head(n = 1)</code> takes the first row.</li>
<li><code>slice_tail(n = 1)</code> takes the last row</li>
<li><code>slice_min(x, n = 1)</code> takes the row with the smallest value in column <code>x</code>.</li>
<li><code>slice_max(x, n = 1)</code> takes the row with the largest value in column <code>x</code>.</li>
<li><code>slice_sample(n = 1)</code> takes one random row.</li>
<li><code>slice(15)</code> takes the 15th row.</li>
</ul>
</div>
</div>
<p><br></p>
</section>
<section id="the-count-function" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="the-count-function"><span class="header-section-number">5</span> The <code>count()</code> function</h2>
<p>Above, we used the <code>n()</code> helper with <code>summarize()</code> to get the number of rows with each value of <code>cut</code> (i.e.&nbsp;the group sizes) along with other computed summaries.</p>
<p>Getting a “count table” like that is such a common part of Exploratory Data Analysis (EDA) that there’s another <em>dplyr</em> function available for it, <a href="https://dplyr.tidyverse.org/reference/count.html"><code>count()</code></a>. And unless you’re already <code>summarize</code>-ing, this one is simpler to use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 2
  cut           n
  &lt;ord&gt;     &lt;int&gt;
1 Fair       1610
2 Good       4906
3 Very Good 12082
4 Premium   13791
5 Ideal     21551</code></pre>
</div>
</div>
<p>We may also want to sort the output by frequency, which can be useful especially when there are many different values for the focal variable (not really the case here, but you get the point):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 2
  cut           n
  &lt;ord&gt;     &lt;int&gt;
1 Ideal     21551
2 Premium   13791
3 Very Good 12082
4 Good       4906
5 Fair       1610</code></pre>
</div>
</div>
<p>And you can also create counts for value combinations across multiple columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(cut, color)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 35 × 3
   cut   color     n
   &lt;ord&gt; &lt;ord&gt; &lt;int&gt;
 1 Fair  D       163
 2 Fair  E       224
 3 Fair  F       312
 4 Fair  G       314
 5 Fair  H       303
 6 Fair  I       175
 7 Fair  J       119
 8 Good  D       662
 9 Good  E       933
10 Good  F       909
# ℹ 25 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Base R’s <code>table()</code> function
</div>
</div>
<div class="callout-body-container callout-body">
<p>Also worth mentioning is the base R <code>table()</code> function, which is similar to <code>count()</code>. While its output format is unwieldy for follow-up analyses<sup>1</sup>, you may prefer its formatting especially when wanting to glance at a 2-way count table to see patterns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cut, diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>color)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>           
               D    E    F    G    H    I    J
  Fair       163  224  312  314  303  175  119
  Good       662  933  909  871  702  522  307
  Very Good 1513 2400 2164 2299 1824 1204  678
  Premium   1603 2337 2331 2924 2360 1428  808
  Ideal     2834 3903 3826 4884 3115 2093  896</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>Additionally, as a <em>dplyr</em> function, <code>count()</code> only works with data frames. Occasionally, you may also need to create a count table for a <strong>vector</strong>, and <code>table()</code> can do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">cut_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cut</span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(cut_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>cut_vec
     Fair      Good Very Good   Premium     Ideal 
     1610      4906     12082     13791     21551 </code></pre>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="exercises-ii" class="level2 exercise" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="exercises-ii"><span class="header-section-number">6</span> Exercises II</h2>
<section id="no-ties-please" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="no-ties-please"><span class="header-section-number">6.1</span> No ties, please</h3>
<p>Above, when we first used <code>slice_max()</code>, we got multiple rows for some groups. Check out the help for this function (<code>?slice_max</code>) and get it to print only one row per group, even in the case of ties.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>The <code>with_ties</code> argument controls this. The default is <code>TRUE</code> (do include ties), so we want to set it to <code>FALSE</code> (don’t include ties):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">with_ties =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 5 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03
2  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17
3  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77
4  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31
5  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="random-diamonds" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="random-diamonds"><span class="header-section-number">6.2</span> Random diamonds</h3>
<p>Use <code>slice_sample()</code> to get 5 random diamonds for each combination of <code>cut</code>, <code>color</code> and <code>clarity</code>.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(cut, color, clarity))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 1,342 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  1.2  Ideal   E     SI2      61.3  56    6006  6.85  6.88  4.21
 2  1.02 Ideal   E     SI2      62.6  54.6  4983  6.4   6.44  4.02
 3  0.78 Ideal   E     SI2      61    56    3053  5.92  5.98  3.63
 4  1.11 Ideal   E     SI2      61.2  57    4969  6.7   6.74  4.11
 5  1    Ideal   E     SI2      60.7  55    4077  6.39  6.33  3.86
 6  0.71 Premium E     SI1      60.3  60    2674  5.77  5.74  3.47
 7  0.82 Premium E     SI1      61.2  61    3211  5.98  5.95  3.65
 8  0.51 Premium E     SI1      61.3  54    1546  5.18  5.13  3.16
 9  0.57 Premium E     SI1      62.2  55    1590  5.36  5.31  3.32
10  0.41 Premium E     SI1      62.4  58     755  4.75  4.77  2.97
# ℹ 1,332 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="count" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="count"><span class="header-section-number">6.3</span> <code>count()</code></h3>
<p><strong>A)</strong> Create a sorted count table of diamond <code>clarity</code>s</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(clarity, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 8 × 2
  clarity     n
  &lt;ord&gt;   &lt;int&gt;
1 SI1     13065
2 VS2     12258
3 SI2      9194
4 VS1      8171
5 VVS2     5066
6 VVS1     3655
7 IF       1790
8 I1        741</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<p><strong>B)</strong> What are the least common combinations of <code>clarity</code> and <code>depth</code> for diamonds costing less than $5,000?</p>
<details>
<summary>
<b>Hints</b> (click here)
</summary>
<ul>
<li>You’ll have to <code>filter()</code> first.</li>
<li>Can you sort in reverse order with <code>count()</code>? If not, you’ll have to use a separate <code>arrange()</code></li>
</ul>
</details>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(clarity, color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(n)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 56 × 3
   clarity color     n
   &lt;ord&gt;   &lt;ord&gt; &lt;int&gt;
 1 I1      J        26
 2 I1      D        32
 3 IF      D        39
 4 IF      J        40
 5 VVS1    J        51
 6 I1      I        65
 7 VVS2    J        67
 8 I1      E        84
 9 I1      H       108
10 I1      G       114
# ℹ 46 more rows</code></pre>
</div>
</div>
</details>
<hr>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="bonus-sort-then-slice" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="bonus-sort-then-slice"><span class="header-section-number">6.4</span> Bonus: sort then slice</h3>
<p><code>slice_head()</code> will print the <em>first-occurring</em> row(s), and its twin <code>slice_tail()</code> prints the <em>last</em> row(s). In combination with sorting, these can give more flexibility than the min-max functions.</p>
<p>For each <code>color</code>, use <code>arrange()</code> and <code>slice_head()</code> to get the 3 diamonds with the highest carat, with ties in carat broken by price (highest first).</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(carat), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_head</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> color)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 21 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98
 2  4.5  Fair      J     I1       65.8    58 18531 10.2  10.2   6.72
 3  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24
 4  4.13 Fair      H     I1       64.8    61 17329 10     9.85  6.43
 5  3.65 Fair      H     I1       67.1    53 11668  9.53  9.48  6.38
 6  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03
 7  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17
 8  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31
 9  3.67 Premium   I     I1       62.4    56 16193  9.86  9.81  6.13
10  3.4  Fair      D     I1       66.8    52 15964  9.42  9.34  6.27
# ℹ 11 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
</section>




<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It’s not actually a data frame…↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E08_tidy_03/</guid>
  <pubDate>Fri, 01 Mar 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E08_tidy_03/img/dplyr.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tidyverse 2: More dplyr Data Wrangling</title>
  <dc:creator>Jelmer Poelstra</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E07_tidy_02/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E07_tidy_02/img/run.jpeg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:75.0%"></p>
</figure>
</div>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<section id="recap-of-last-week" class="level4">
<h4 class="anchored" data-anchor-id="recap-of-last-week">Recap of last week</h4>
<p>Last week, Jess introduced us to to the <em>tidyverse</em>, a collection of packages to facilitate doing data science with R, including data manipulation and visualization.</p>
<p>We saw two general properties of the tidyverse: that it has a strong focus on <strong>data frames</strong> and that operations are usually connected using the <strong>“pipe” (<code>|&gt;</code>) operator</strong>.</p>
<p>We also learned about two key functions from the tidyverse’s <em>dplyr</em> package:</p>
<ul>
<li><strong><code>filter()</code></strong> to pick rows (which typically represent observations/samples/individuals)</li>
<li><strong><code>select()</code></strong> to pick columns (which typically represent variables/properties)</li>
</ul>
</section>
<section id="learning-objectives-for-today" class="level4">
<h4 class="anchored" data-anchor-id="learning-objectives-for-today">Learning objectives for today</h4>
<p>We will continue learning about <em>dplyr</em>:</p>
<ul>
<li>An overview of key <em>dplyr</em> functionality</li>
<li>Sorting data frame rows with <code>arrange()</code></li>
<li>Renaming data frame columns with <code>rename()</code></li>
<li>Adding and manipulating data frame columns with <code>mutate()</code></li>
</ul>
<p>Like last week, we will practice with the <code>diamonds</code> dataframe that is automatically loaded along with the tidyverse.</p>
</section>
<section id="setting-up" class="level4">
<h4 class="anchored" data-anchor-id="setting-up">Setting up</h4>
<p>Load the tidyverse:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Still need to install the tidyverse? <em>Click here for instructions</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="overview-of-key-dplyr-functionality" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="overview-of-key-dplyr-functionality"><span class="header-section-number">2</span> Overview of key <em>dplyr</em> functionality</h2>
<p>Functions from the <a href="https://dplyr.tidyverse.org/index.html"><em>dplyr</em> package</a> have the following <strong>commonalities</strong>:</p>
<ul>
<li>The first argument is always a data frame (this makes them pipe-friendly)</li>
<li>Subsequent arguments typically describe which columns to operate on</li>
<li>The output is always a data frame</li>
</ul>
<hr style="height:1pt; visibility:hidden;">
<p>Key functions for <strong>row-wise</strong> operations include:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/reference/filter.html"><code>filter()</code></a> — picks rows based on values in one or more columns <em>(last week)</em></li>
<li><a href="https://dplyr.tidyverse.org/reference/arrange.html"><code>arrange()</code></a> — orders rows based on values in selected columns <em>(this week)</em></li>
</ul>
<p>Key functions for <strong>column-wise</strong> operations include:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/reference/select.html"><code>select()</code></a> — picks columns <em>(last week)</em></li>
<li><a href="https://dplyr.tidyverse.org/reference/rename.html"><code>rename</code>()</a> — changes column names <em>(this week)</em></li>
<li><a href="https://dplyr.tidyverse.org/reference/mutate.html"><code>mutate()</code></a> — creates new columns and changes the values of columns <em>(this week)</em></li>
</ul>
<p>Key functions for <strong>groups of rows</strong> include:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/reference/summarise.html"><code>summarise()</code></a> — collapses a group into a single row with the purpose of summarizing data</li>
</ul>
<p>Finally, there are functions to <strong>combine multiple data frames</strong> (joins, with for example <code>inner_join()</code>).</p>
<hr style="height:1pt; visibility:hidden;">
<p>This week, we will cover the remaining functions listed above for row- and column-wise operations. In subsequent sessions, we will cover the more complex summarizing and joining functions.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The <em>tidyr</em> package contains additional data wrangling functions
</div>
</div>
<div class="callout-body-container callout-body">
<p>There is a separate core tidyverse package (<em>tidyr</em>) with closely related functions that can “reshape” (“pivot”) data frames between wider and longer formats — we will also cover those in a later dedicated Code Club session.</p>
</div>
</div>
<p><br></p>
</section>
<section id="sorting-with-arrange" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="sorting-with-arrange"><span class="header-section-number">3</span> Sorting with <code>arrange()</code></h2>
<p>The <code>arrange()</code> function is like the sort function in Excel: it changes the order of the rows based on the values in one or more columns. For example, you might want to sort entries by their cost or size, or by their names in alphabetical order.</p>
<p>We’ll see a first example using the <code>diamonds</code> data frame. Keep in mind that in this data frame, each row represents a single diamond, and the columns provide different pieces of information about a diamond:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note the initial order in the 'carat' column:</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 6 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48</code></pre>
</div>
</div>
<p>Therefore, sorting this data frame means rearranging the order of the diamonds based on their properties — in the example below, based on the carat of the diamond:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now, we'll sort by the values in the 'carat' column:</span></span>
<span id="cb6-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(carat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27
 2   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26
 3   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24
 4   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32
 5   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28
 6   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 
 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33
 8   0.2 Ideal     D     VS2      61.5    57   367  3.81  3.77  2.33
 9   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36
10   0.2 Ideal     E     VS2      62.2    57   367  3.76  3.73  2.33
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<p>As you can see, there are many rows with the same, smallest value of <code>carat</code>, so we may be interested in <strong>sorting by an additional column</strong>, which will break the ties in our first sorting column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort first by carat, then by cut:</span></span>
<span id="cb8-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(carat, cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36
 2   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27
 3   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26
 4   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24
 5   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32
 6   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28
 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33
 8   0.2 Premium   D     VS2      62.3    60   367  3.73  3.68  2.31
 9   0.2 Premium   D     VS2      61.7    60   367  3.77  3.72  2.31
10   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<details>
<summary>
<strong>Question:</strong> Does the resulting order of entries in the <code>cut</code> column make sense to you? If not, what might be going on? <em>(Click to see the solution)</em>
</summary>
<p>Clearly, the order is not alphabetical, but it could be so in <em>descending</em> order — though this is not in fact the case.</p>
<p>As we briefly saw last week, the <code>cut</code> column (as well as the <code>color</code> and <code>clarity</code> columns) are of the “ordered factor” type: therefore, when we sort by this column, the order as initially defined by whoever created this data frame will be respected:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code>[1] Ideal     Premium   Good      Premium   Good      Very Good
Levels: Fair &lt; Good &lt; Very Good &lt; Premium &lt; Ideal</code></pre>
</div>
</div>
<p>This also implies that there are no 0.2-carat (the lowest value) diamonds with <code>Fair</code> or <code>Good</code> cuts, because the first-listed and therefore lowest cut was <code>Very Good</code>.</p>
</details>
<hr style="height:1pt; visibility:hidden;">
<p>By default, the sorting is done in <em>ascending order</em> (small-to-big), as you probably expected. But of course we may sometimes want to sort in <strong>descending</strong> (big-to-small) order, which we can do with the <code>desc()</code> helper function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort first by carat, then by price:</span></span>
<span id="cb12-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(carat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98
 2  4.5  Fair      J     I1       65.8    58 18531 10.2  10.2   6.72
 3  4.13 Fair      H     I1       64.8    61 17329 10     9.85  6.43
 4  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17
 5  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24
 6  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31
 7  3.67 Premium   I     I1       62.4    56 16193  9.86  9.81  6.13
 8  3.65 Fair      H     I1       67.1    53 11668  9.53  9.48  6.38
 9  3.51 Premium   J     VS2      62.5    59 18701  9.66  9.63  6.03
10  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Saving the output?
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the examples above, and in all of today’s examples and exercises, we are simply <em>printing</em> the output data frame. This means that we are leaving the original data frame <code>diamonds</code> <strong>unchanged</strong> and that we are not storing our results elsewhere either.</p>
<p>Recall that you can assign to a new dataframe as one way to store your results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">diamonds_sorted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(carat)</span></code></pre></div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="renaming-columns-with-rename-and-select" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="renaming-columns-with-rename-and-select"><span class="header-section-number">4</span> Renaming columns with <code>rename()</code> (and <code>select()</code>)</h2>
<p>It is pretty common that you are not happy with the names of columns in your data frame and want to rename one or more. This can be done with the <code>rename()</code> function, which uses the syntax <code>&lt;new-name&gt; = &lt;old-name&gt;</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Below, we rename the 'x' column to 'length', and the 'y' column to 'width':</span></span>
<span id="cb15-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price length width     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326   3.95  3.98  2.43
 2  0.21 Premium   E     SI1      59.8    61   326   3.89  3.84  2.31
 3  0.23 Good      E     VS1      56.9    65   327   4.05  4.07  2.31
 4  0.29 Premium   I     VS2      62.4    58   334   4.2   4.23  2.63
 5  0.31 Good      J     SI2      63.3    58   335   4.34  4.35  2.75
 6  0.24 Very Good J     VVS2     62.8    57   336   3.94  3.96  2.48
 7  0.24 Very Good I     VVS1     62.3    57   336   3.95  3.98  2.47
 8  0.26 Very Good H     SI1      61.9    55   337   4.07  4.11  2.53
 9  0.22 Fair      E     VS2      65.1    61   337   3.87  3.78  2.49
10  0.23 Very Good H     VS1      59.4    61   338   4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>As an aside, it is also possible rename the columns that you pick with the <code>select()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> y, z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 3
   length width     z
    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1   3.95  3.98  2.43
 2   3.89  3.84  2.31
 3   4.05  4.07  2.31
 4   4.2   4.23  2.63
 5   4.34  4.35  2.75
 6   3.94  3.96  2.48
 7   3.95  3.98  2.47
 8   4.07  4.11  2.53
 9   3.87  3.78  2.49
10   4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<hr style="height:1pt; visibility:hidden;">
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Need to rename many columns?
</div>
</div>
<div class="callout-body-container callout-body">
<p>If your data frame has many columns that need to be renamed, the <a href="https://sfirke.github.io/janitor/reference/clean_names.html"><strong><code>janitor::clean_names()</code></strong></a> function provides automated column name cleaning that can be extremely handy.</p>
<p>For example, you might read in an Excel sheet with 20 columms, many of which have spaces in their names, and some of which have other special characters like <code>%</code> or <code>&amp;</code>. Those kinds of column names don’t play well with R, and <code>clean_names()</code> would automatically replace such characters with (by default) underscores (<code>_</code>).</p>
<p>You can try this function in the last Bonus exercise.</p>
</div>
</div>
<p><br></p>
</section>
<section id="exercises-i" class="level2 exercise" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="exercises-i"><span class="header-section-number">5</span> Exercises I</h2>
<section id="renaming" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="renaming"><span class="header-section-number">5.1</span> Renaming</h3>
<p>Above, we renamed the cryptically named <code>x</code> and <code>y</code> columns, but there’s a third single-letter column name: <strong><code>z</code></strong>.</p>
<ol type="1">
<li><p>Check the help for this data frame by typing <code>?diamonds</code>, and figure out what the <code>z</code> column represents.</p></li>
<li><p>Rename the <code>z</code> column to give it a more descriptive name like we did above for <code>x</code> and <code>y</code>. <em>(You may run into a problem here! If so, try to understand and resolve it.)</em></p></li>
</ol>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<ol type="1">
<li><strong>The <code>z</code> column represents the depth of the diamond in mm:</strong></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">?diamonds</span></code></pre></div>
</div>
<pre class="bash-out"><code># The output will include:

z
    depth in mm (0–31.8)

depth
    total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79)</code></pre>
<hr style="height:1pt; visibility:hidden;">
<ol start="2" type="1">
<li><strong>So let’s try to rename it to <code>depth</code>:</strong></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth =</span> z)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `rename()`:
! Names must be unique.
✖ These names are duplicated:
  * "depth" at locations 5 and 10.</code></pre>
</div>
</div>
<p>Ouch! That didn’t work, because a column named <code>depth</code> already exists, and <strong>column names must be unique</strong>. That other depth column is the diamond’s “total depth percentage” rather than the raw depth.</p>
<p>There’s no one right way to resolve this (and of course one option would be to refrain from renaming <code>z</code> altogether), but we could for example use <code>depth_mm</code> etc. notations for these columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_mm =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_mm =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_mm =</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price length_mm width_mm depth_mm
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43
 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31
 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31
 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63
 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75
 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48
 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47
 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53
 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49
10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="arranging" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="arranging"><span class="header-section-number">5.2</span> Arranging</h3>
<p>See the prices (and other properties) of the <em>most expensive diamonds</em> in the data frame by using the <code>arrange()</code> function like we did above.</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>To see the most expensive (highest-priced) diamond first, we’ll have to arrange by the <code>price</code> column in descending order:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(price))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16
 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04
 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56
 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11
 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01
 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24
 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84
 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91
 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 
10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21
# ℹ 53,930 more rows</code></pre>
</div>
</div>
</details>
</section>
</section>
<p><br></p>
<section id="manipulating-with-mutate" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="manipulating-with-mutate"><span class="header-section-number">6</span> Manipulating with <code>mutate()</code></h2>
<p>Let’s take a look at the official <code>mutate()</code> documentation figure (😛):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E07_tidy_02/img/arrange.png" class="img-fluid figure-img" style="width:75.0%"></p>
<figcaption>Illustration by Allison Horst</figcaption>
</figure>
</div>
<p>It says “<em>add column(s), keep existing</em>” and shows that a third column, <code>C</code>, is being added to a data frame.</p>
<details>
<summary>
What do the values in column <code>C</code> appear to represent (compare with <code>A</code> and <code>B</code>)? <em>(Click for the solution)</em>
</summary>
<p>Column <code>C</code> appears to be columns <code>A</code> + <code>B</code>, e.g in the first row, <code>1</code> + <code>2</code> = <code>3</code>.</p>
</details>
<p>Let’s try to do something similar –creating a new column that is based on the values of other columns– with diamond dimensions. We’ll add a column named <code>volume</code> that is generated by multiplying the length, width, and depth columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (I'm first using select just to limit the output that is printed)</span></span>
<span id="cb27-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(x, y, z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">volume =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 4
       x     y     z volume
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1  3.95  3.98  2.43   38.2
 2  3.89  3.84  2.31   34.5
 3  4.05  4.07  2.31   38.1
 4  4.2   4.23  2.63   46.7
 5  4.34  4.35  2.75   51.9
 6  3.94  3.96  2.48   38.7
 7  3.95  3.98  2.47   38.8
 8  4.07  4.11  2.53   42.3
 9  3.87  3.78  2.49   36.4
10  4     4.05  2.39   38.7
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>As you could see in above examples, the operation is executed in a (vectorized) <strong>row-wise fashion</strong>: the <code>volume</code> that we see in the first row was created by multiplying <code>x</code>, <code>y</code> and <code>z</code> in the first row, and so on.</p>
<p>Also note that the new column created by <code>mutate()</code> is (by default) added as the <em>last</em> column.</p>
<hr style="height:1pt; visibility:hidden;">
<hr>
<p>Instead of creating a new column with <code>mutate()</code>, it is also possible to simply <strong>change the values in a column</strong> (without creating a new column) by assigning back to the same column name. For example, say that we wanted diamond length to be in cm <em>instead of</em> in mm:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(x, y, z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 3
       x     y     z
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 0.395  3.98  2.43
 2 0.389  3.84  2.31
 3 0.405  4.07  2.31
 4 0.42   4.23  2.63
 5 0.434  4.35  2.75
 6 0.394  3.96  2.48
 7 0.395  3.98  2.47
 8 0.407  4.11  2.53
 9 0.387  3.78  2.49
10 0.4    4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="exercises-ii" class="level2 exercise" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="exercises-ii"><span class="header-section-number">7</span> Exercises II</h2>
<section id="more-unit-conversion" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="more-unit-conversion"><span class="header-section-number">7.1</span> More unit conversion</h3>
<p>Above, we converted the diamond lengths (column <code>x</code>) from mm to cm.</p>
<ul>
<li>Expand on that code to convert all three dimension columns (<code>x</code>, <code>y</code>, and, <code>z</code>).</li>
<li>Also give the converted columns names that indicate the measurements are in cm.</li>
</ul>
<details>
<summary>
<b>Solution so far</b> (click here)
</summary>
<p>Several naming schemes are reasonable, but I will use <code>length_cm</code> etc:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_cm =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb31-3">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_cm =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb31-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_cm =</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 13
   carat cut       color clarity depth table price     x     y     z length_cm
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43     0.395
 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31     0.389
 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31     0.405
 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63     0.42 
 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75     0.434
 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48     0.394
 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47     0.395
 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53     0.407
 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49     0.387
10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39     0.4  
# ℹ 53,930 more rows
# ℹ 2 more variables: width_cm &lt;dbl&gt;, depth_cm &lt;dbl&gt;</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
<ul>
<li>Next, expand your “pipeline” to either remove the columns with mm measurements, or rename the original <code>x</code>, <code>y</code>, and <code>z</code> columns to clarify that those are in mm.</li>
</ul>
<details>
<summary>
<b>Hint: how to remove specific columns with <code>select()</code></b> (click here)
</summary>
<p>If you just want to remove one or a few columns from a data frame with many columns, you’d want to be able to directly mark them for removal (rather than listing all columns you want to keep), which you can do as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will remove the carat and cut columns:</span></span>
<span id="cb33-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>carat, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 8
   color clarity depth table price     x     y     z
   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 E     SI2      61.5    55   326  3.95  3.98  2.43
 2 E     SI1      59.8    61   326  3.89  3.84  2.31
 3 E     VS1      56.9    65   327  4.05  4.07  2.31
 4 I     VS2      62.4    58   334  4.2   4.23  2.63
 5 J     SI2      63.3    58   335  4.34  4.35  2.75
 6 J     VVS2     62.8    57   336  3.94  3.96  2.48
 7 I     VVS1     62.3    57   336  3.95  3.98  2.47
 8 H     SI1      61.9    55   337  4.07  4.11  2.53
 9 E     VS2      65.1    61   337  3.87  3.78  2.49
10 H     VS1      59.4    61   338  4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
</details>
<details>
<summary>
<b>Full solution</b> (click here)
</summary>
<ul>
<li>Option 1 — remove the columns with mm measurements:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Note that the final 2 added columns are hidden in the output!)</span></span>
<span id="cb35-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_cm =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb35-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_cm =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb35-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_cm =</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb35-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price length_cm width_cm depth_cm
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326     0.395    0.398    0.243
 2  0.21 Premium   E     SI1      59.8    61   326     0.389    0.384    0.231
 3  0.23 Good      E     VS1      56.9    65   327     0.405    0.407    0.231
 4  0.29 Premium   I     VS2      62.4    58   334     0.42     0.423    0.263
 5  0.31 Good      J     SI2      63.3    58   335     0.434    0.435    0.275
 6  0.24 Very Good J     VVS2     62.8    57   336     0.394    0.396    0.248
 7  0.24 Very Good I     VVS1     62.3    57   336     0.395    0.398    0.247
 8  0.26 Very Good H     SI1      61.9    55   337     0.407    0.411    0.253
 9  0.22 Fair      E     VS2      65.1    61   337     0.387    0.378    0.249
10  0.23 Very Good H     VS1      59.4    61   338     0.4      0.405    0.239
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<ul>
<li>Option 2 — also keep the cm columns, but rename them:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_cm =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb37-3">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_cm =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb37-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_cm =</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_mm =</span> x,</span>
<span id="cb37-6">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_mm =</span> y,</span>
<span id="cb37-7">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">depth_mm =</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 53,940 × 13
   carat cut       color clarity depth table price length_mm width_mm depth_mm
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43
 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31
 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31
 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63
 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75
 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48
 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47
 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53
 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49
10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39
# ℹ 53,930 more rows
# ℹ 3 more variables: length_cm &lt;dbl&gt;, width_cm &lt;dbl&gt;, depth_cm &lt;dbl&gt;</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="price-per-carat" class="level3" data-number="7.2">
<h3 data-number="7.2" class="anchored" data-anchor-id="price-per-carat"><span class="header-section-number">7.2</span> Price per carat</h3>
<p>Include the following steps in a single “pipeline”:</p>
<ol type="1">
<li>Add a new column with the price per carat, rounded to whole dollars.</li>
<li>Sort by price per carat in descending order</li>
<li>Only keep diamonds with a price per carat above $5,000.</li>
</ol>
<p>What is the highest price per carat, and how many diamonds are you left with?</p>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<p>We are left with 13,115 rows and the highest price per carat is $17,829:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price_per_carat =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(price_per_carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price_per_carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 13,115 × 11
   carat cut   color clarity depth table price     x     y     z price_per_carat
   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;
 1  1.04 Very… D     IF       61.3    56 18542  6.53  6.55  4.01           17829
 2  1.07 Prem… D     IF       60.9    58 18279  6.67  6.57  4.03           17083
 3  1.03 Ideal D     IF       62      56 17590  6.55  6.44  4.03           17078
 4  1.07 Very… D     IF       60.9    58 18114  6.57  6.67  4.03           16929
 5  1.02 Very… D     IF       61.7    59 17100  6.42  6.52  3.99           16765
 6  1.07 Very… D     IF       59      59 17909  6.63  6.72  3.94           16737
 7  1.09 Very… D     IF       61.7    58 18231  6.55  6.65  4.07           16726
 8  1    Ideal D     IF       60.7    57 16469  6.44  6.48  3.92           16469
 9  1    Very… D     IF       63.3    59 16073  6.37  6.33  4.02           16073
10  1.01 Prem… D     IF       61.6    56 16234  6.46  6.43  3.97           16073
# ℹ 13,105 more rows</code></pre>
</div>
</div>
</details>
<hr style="height:1pt; visibility:hidden;">
</section>
<section id="bonus-renaming-columns-with-janitorclean_names" class="level3" data-number="7.3">
<h3 data-number="7.3" class="anchored" data-anchor-id="bonus-renaming-columns-with-janitorclean_names"><span class="header-section-number">7.3</span> Bonus: Renaming columns with <code>janitor::clean_names()</code></h3>
<ol type="1">
<li>Install and then load the package <em>janitor</em>.</li>
</ol>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<ul>
<li>Install:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"janitor"</span>)</span></code></pre></div>
</div>
<ul>
<li>Load:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'janitor'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    chisq.test, fisher.test</code></pre>
</div>
</div>
</details>
<ol start="2" type="1">
<li>Run the following code to create a “tibble” (tidyverse-style dataframe) with poor column names:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (The backticks ` around the column names are necessary to assign such unwieldy names)</span></span>
<span id="cb45-2">sale_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb45-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Abbreviated ID</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DZ"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GA"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PT"</span>),</span>
<span id="cb45-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">% Sold</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">62</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>),</span>
<span id="cb45-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Nr Stored</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">372</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">175</span>),</span>
<span id="cb45-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Lost&amp;Found</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb45-7">)</span></code></pre></div>
</div>
<ol start="3" type="1">
<li>Print the <code>sale_stats</code> data frame and take a look at how the column names are shown.</li>
</ol>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">sale_stats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 4
  `Abbreviated ID` `% Sold` `Nr Stored` `Lost&amp;Found`
  &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;
1 DZ                     62         372            0
2 GA                     98          13            0
3 PT                     18         175            2</code></pre>
</div>
</div>
</details>
<ol start="4" type="1">
<li>Run the <code>clean_names()</code> function on the <code>sale_stats</code> data frame. (It will take a data frame as its first argument and return a dataframe, much like the dplyr functions we’ve seen). Take a close look at the output — can you spot at least 3 types of changes that it made?</li>
</ol>
<details>
<summary>
<b>Solution</b> (click here)
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">sale_stats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="styled-output"><code># A tibble: 3 × 4
  abbreviated_id percent_sold nr_stored lost_found
  &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;
1 DZ                       62       372          0
2 GA                       98        13          0
3 PT                       18       175          2</code></pre>
</div>
</div>
<p>Or equivalently (output not shown):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(sale_stats)</span></code></pre></div>
</div>
<p>The <code>clean_names()</code> function made the following changes to the column names:</p>
<ul>
<li>Spaces were converted to underscores</li>
<li>The <code>&amp;</code> was converted to an underscore</li>
<li>The <code>%</code> was converted to <code>percent</code> (!)</li>
<li>Uppercase (capital) letters were converted to lowercase</li>
</ul>
</details>
</section>
</section>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E07_tidy_02/</guid>
  <pubDate>Fri, 23 Feb 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E07_tidy_02/img/run.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tidyverse 1: Introduction to the tidyverse</title>
  <dc:creator>Jessica Cooperstone</dc:creator>
  <link>https://osu-codeclub.github.io/posts/S07E06_tidy_01/</link>
  <description><![CDATA[ 




<hr>
<p><br></p>
<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>We are going to introduce a new package and series of functions today that are designed for data science.</p>
</section>
<section id="what-is-the-tidyverse" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="what-is-the-tidyverse"><span class="header-section-number">2</span> What is the <code>tidyverse</code>?</h2>
<p><a href="https://www.tidyverse.org/">“The tidyverse”</a> is a collection of packages called that are designed for data science. You can certainly use R without using the tidyverse, but it has many packages that I think will make your life a lot easier. We will be using mostly tidyverse functions in this class, with some base R syntax scattered throughout.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/tidyverse-package-workflow.png" class="img-fluid figure-img"></p>
<figcaption>Figure from <a href="https://teachdatascience.com/tidyverse/">teachdatascience.com</a></figcaption>
</figure>
</div>
<p>The “core tidyverse” contains the 8 packages below:</p>
<ul>
<li><a href="https://dplyr.tidyverse.org/"><code>dplyr</code></a>: for data manipulation</li>
<li><a href="https://ggplot2.tidyverse.org/"><code>ggplot2</code></a>: a “grammar of graphics” for creating beautiful plots</li>
<li><a href="https://readr.tidyverse.org/"><code>readr</code></a>: for reading in rectangular data (i.e., Excel-style formatting)</li>
<li><a href="https://tibble.tidyverse.org/"><code>tibble</code></a>: using tibbles as modern/better dataframes</li>
<li><a href="https://stringr.tidyverse.org/"><code>stringr</code></a>: handling strings (i.e., text or stuff in quotes)</li>
<li><a href="https://forcats.tidyverse.org/"><code>forcats</code></a>: for handling categorical variables (i.e., factors) (meow!)</li>
<li><a href="https://tidyr.tidyverse.org/"><code>tidyr</code></a>: to make “tidy data”</li>
<li><a href="https://purrr.tidyverse.org/"><code>purrr</code></a>: for enhancing functional programming (also meow!)</li>
</ul>
<p>We will be using many of these other packages in Code Club and we will talk about them as we go. There are more tidyverse packages outside of these core eight, and we will talk about some of them another time.</p>
<blockquote class="blockquote">
<p><strong>tl;dr</strong> Tidyverse has a lot of packages that make data analysis easier. None of them are required, but I think you’ll find many tidyverse approaches easier and more intuitive than using base R.</p>
</blockquote>
</section>
<section id="installing-new-packages" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="installing-new-packages"><span class="header-section-number">3</span> Installing new packages</h2>
<p>So far, we have used only functions and data that exist within “base R” - or the portion of R that comes with the default install. R is an open source language, meaning people all around the world can develop tools that can be used within R. These tools are always evolving, and there are way too many of them for them to all come pre-downloaded.</p>
<p>These tools mostly live within something called a “package”. You can think about a package as a unit of code that can be shared and reused. These packages can include both functions and data. A person (or team) can create a package, make that available for download, and then anyone can use it.</p>
<p>To install packages in R that are on the <a href="https://cran.r-project.org/">Comprehensive R Archive Network (CRAN)</a>, you can use the function <code>install.packages()</code>. There are packages that are not on CRAN but we are not going to talk about them today. Be sure that you provide the name of your packages as a string, and put it in quotes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
</section>
<section id="loading-packages" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="loading-packages"><span class="header-section-number">4</span> Loading packages</h2>
<p>Once you have downloaded a package, you now have it, you can think about it as a book that you now own. When you want to read the book, you don’t need to go buy it again, you need to simply take it off your shelf and open it. Using the function <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/library"><code>library()</code></a> takes your package from where it is stored on the “shelf” in your computer, and opens it. I hope this is an ok metaphor.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
</div>
<p>It’s a good habit to not ignore warnings/messages that R gives you.</p>
<div class="callout callout-style-default callout-warning callout-titled" title="What does this warning mean?">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What does this warning mean?
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<blockquote class="blockquote">
<p>We only need to install packages once. But, every time we want to use them, we need to “load” them, and can do this using the function <code>library()</code>.</p>
</blockquote>
</section>
<section id="practice" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="practice"><span class="header-section-number">5</span> Practice</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Please install the tidyverse and then load it.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Please install the tidyverse and then load it.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it doesn't matter here if you put tidyverse in quotes or not</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without quotes will work since you can think about it as an object</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># that already exists (and not just a string of characters)</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># works</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also works</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="data-for-today" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="data-for-today"><span class="header-section-number">6</span> Data for today</h2>
<p>In addition to having functions, packages also can contain data. Within the <code>tidyverse</code> package, there is a bunch of embedded data we can use to play around with.</p>
<p>If you type the function <code>data()</code> and then place your cursor between the parentheses and hit tab, you will see what pre-loaded data in R you have access to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()</span></code></pre></div>
</div>
<p><img src="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/data.png" class="img-fluid"></p>
<p>Today we are going to use a dataset called <code>diamonds</code> that is embedded within the package <code>ggplot</code> (which we have since it gets automatically installed when we load the <code>tidyverse</code>).</p>
<p>Let’s learn about <code>diamonds</code> using some of the functions <a href="https://osu-codeclub.github.io/posts/basics_04/#what-is-a-data-frame">we learned already</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)
 $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
 $ cut    : Ord.factor w/ 5 levels "Fair"&lt;"Good"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...
 $ color  : Ord.factor w/ 7 levels "D"&lt;"E"&lt;"F"&lt;"G"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...
 $ clarity: Ord.factor w/ 8 levels "I1"&lt;"SI2"&lt;"SI1"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...
 $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
 $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...
 $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...
 $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
 $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
 $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...</code></pre>
</div>
</div>
<p>Tidyverse has a version of <code>str()</code> called <a href="https://dplyr.tidyverse.org/reference/glimpse.html"><code>glimpse()</code></a> which does a similar thing but tries to show you more data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 53,940
Columns: 10
$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…
$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…
$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…
$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …
$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…
$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…
$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…
$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…
$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…
$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Note that we do <strong>not</strong> see diamonds as an object in our enrivonrment, even though clearly it’s there.</p>
</blockquote>
</section>
<section id="the-pipe-or" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="the-pipe-or"><span class="header-section-number">7</span> The pipe <code>|&gt;</code> or <code>%&gt;%</code></h2>
<p><a href="https://r4ds.had.co.nz/pipes.html">The pipe</a> <code>|&gt;</code> or <code>%&gt;%</code> is a tool that allows you to take the output of one function, and send it to the next function.</p>
<p>You can read the pipe as “and then” - here is a theoretical example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">take_this_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then_this_function</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then_another_function</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">finally_a_last_function</span>()</span></code></pre></div>
</div>
<p>The easiest way to see how the pipe works is with an example. We are going to go over some examples in a minute.</p>
<p>Some reasons I like the pipe:</p>
<ul>
<li>its easier to read (and doesn’t have a lot of nested parentheses)</li>
<li>it doesn’t require you to create lots of interim objects which you won’t use again</li>
<li>its easy to troubleshoot</li>
</ul>
<blockquote class="blockquote">
<p>The keyboard shortcut for <code>|&gt;</code> is <code>Ctrl/Cmd</code> + <code>Shift</code> + <code>M</code></p>
</blockquote>
<p>We can change our R options so that the newer version of the pipe <code>|&gt;</code> is used over the older one <code>%&gt;%</code> when we use the keyboard shortcut. I try and remember to use the new one but it doesn’t always happen, so do be familiar with both.</p>
<p>You can go to <code>Tools</code> &gt; <code>Global Options</code> &gt; <code>Code</code> and make sure the tick mark is checked next to “Use the native pipe operator, |&gt; (requires R 4.1+).</p>
<p><img src="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/pipe-options.png" class="img-fluid"></p>
<p>Of course you can assign the output of a pipe to something using the assignment operator <code>&lt;-</code> and then use it for other things.</p>
<p>Ssome functions are not “pipe friendly” meaning they will not work using pipes. This is often because the data is not the first argument passed to the function. All tidyverse functions work with piping.</p>
</section>
<section id="selecting-columns-with-select" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="selecting-columns-with-select"><span class="header-section-number">8</span> Selecting columns with <code>select()</code></h2>
<p>Often you will want to pick only certain columns in your dataframe, and you can do this with the function <a href="https://dplyr.tidyverse.org/reference/select.html"><code>select()</code></a>. You can pick columns by:</p>
<ul>
<li>their names</li>
<li>their position (i.e., index)</li>
<li>characteristics of that column</li>
</ul>
<p>If we want to know how the arguments to <code>select()</code> work, we can access the documentation material about the function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">?<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>()</span></code></pre></div>
</div>
<p>The arguments to <code>select()</code> are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(.data, ...)</span></code></pre></div>
</div>
<p>This tells us that <code>select()</code> accepts a data frame (that’s good, <code>diamonds</code> is one), and we can pass many other expressions.</p>
<p>Let’s select first by name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> diamonds, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our df</span></span>
<span id="cb14-2">       carat, cut, price) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the columns we want to pull</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 3
   carat cut       price
   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;
 1  0.23 Ideal       326
 2  0.21 Premium     326
 3  0.23 Good        327
 4  0.29 Premium     334
 5  0.31 Good        335
 6  0.24 Very Good   336
 7  0.24 Very Good   336
 8  0.26 Very Good   337
 9  0.22 Fair        337
10  0.23 Very Good   338
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>Or, we could more simply use the pipe <code>|&gt;</code> or <code>%&gt;%</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(carat, cut, price)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 3
   carat cut       price
   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;
 1  0.23 Ideal       326
 2  0.21 Premium     326
 3  0.23 Good        327
 4  0.29 Premium     334
 5  0.31 Good        335
 6  0.24 Very Good   336
 7  0.24 Very Good   336
 8  0.26 Very Good   337
 9  0.22 Fair        337
10  0.23 Very Good   338
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>We can read this as, take the dataset diamonds, then select the columns carat, cut, and price. That was pretty easy to read!</p>
<p>Note that when you use the pipe, the potential column names will auto-fill for you after you type 3 letters. You should use this option as it will help prevent misspellings. You can also hit <code>tab</code> to scroll through all the potential objects to select.</p>
<p>We can also select by index. In general I would recommend against this because its really hard to remember which column indices are which variables today, nevermind returning back to old code 1 year from now. Still I will show you how.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you could also use the colon syntax if your columns are sequential</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 3
   carat cut       price
   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;
 1  0.23 Ideal       326
 2  0.21 Premium     326
 3  0.23 Good        327
 4  0.29 Premium     334
 5  0.31 Good        335
 6  0.24 Very Good   336
 7  0.24 Very Good   336
 8  0.26 Very Good   337
 9  0.22 Fair        337
10  0.23 Very Good   338
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>You can also select using selection helpers like:</p>
<ul>
<li><a href="https://tidyselect.r-lib.org/reference/everything.html"><code>everything()</code></a>: picks all variables</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>starts_with()</code></a>: starts with some prefix</li>
<li><a href="https://tidyselect.r-lib.org/reference/starts_with.html"><code>contains()</code></a>: contains a specific string</li>
<li><a href="https://tidyselect.r-lib.org/reference/where.html"><code>where()</code></a>: selects columns where the statement given in the argument is TRUE</li>
</ul>
<p>Here is an example of using <code>where()</code> to select only the columns that are numeric. The function <code>where()</code> asks whether the following function is TRUE or FALSE, and keeps only the occurences that evaluate to TRUE.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 7
   carat depth table price     x     y     z
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.23  61.5    55   326  3.95  3.98  2.43
 2  0.21  59.8    61   326  3.89  3.84  2.31
 3  0.23  56.9    65   327  4.05  4.07  2.31
 4  0.29  62.4    58   334  4.2   4.23  2.63
 5  0.31  63.3    58   335  4.34  4.35  2.75
 6  0.24  62.8    57   336  3.94  3.96  2.48
 7  0.24  62.3    57   336  3.95  3.98  2.47
 8  0.26  61.9    55   337  4.07  4.11  2.53
 9  0.22  65.1    61   337  3.87  3.78  2.49
10  0.23  59.4    61   338  4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>You can find more helpers <a href="https://dplyr.tidyverse.org/reference/select.html">here</a>.</p>
<p>Using <code>select()</code> will also set the order of your columns. More about this in practice.</p>
</section>
<section id="choosing-observations-with-filter" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="choosing-observations-with-filter"><span class="header-section-number">9</span> Choosing observations with <code>filter()</code></h2>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/filter.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%" alt="Cartoon showing three fuzzy monsters either selecting or crossing out rows of a data table. If the type of animal in the table is “otter” and the site is “bay”, a monster is drawing a purple rectangle around the row. If those conditions are not met, another monster is putting a line through the column indicating it will be excluded. Stylized text reads “dplyr::filter() - keep rows that satisfy your conditions.” Learn more about dplyr::filter."></p>
<figcaption>Figure from <a href="https://github.com/allisonhorst/stats-illustrations">Allison Horst</a></figcaption>
</figure>
</div>
</div>
</div>
<p>Sometimes you want to select observations (rows) based on values. To do this you use <a href="https://dplyr.tidyverse.org/reference/filter.html"><code>filter()</code></a>. Try not to confuse this with <code>select()</code>.</p>
<div class="callout callout-style-default callout-note callout-titled" title="`select()` picks columns, while `filter()` picks rows.">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>select()</code> picks columns, while <code>filter()</code> picks rows.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>The function <code>filter()</code> will keep only observations that meet your filtering criteria.</p>
<p>Let’s say we want to only keep the diamonds that are bigger than 3 carats.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without the pipe</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i find this harder to read</span></span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> diamonds, </span>
<span id="cb22-4">       carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67
 2  3.11 Fair    J     I1       65.9    57  9823  9.15  9.02  5.98
 3  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73
 4  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66
 5  3.02 Fair    I     I1       65.2    56 10577  9.11  9.02  5.91
 6  3.01 Fair    H     I1       56.1    62 10761  9.54  9.38  5.31
 7  3.65 Fair    H     I1       67.1    53 11668  9.53  9.48  6.38
 8  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85
 9  3.22 Ideal   I     I1       62.6    55 12545  9.49  9.42  5.92
10  3.5  Ideal   H     I1       62.8    57 12587  9.65  9.59  6.03
# ℹ 22 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the pipe/my preferred way</span></span>
<span id="cb24-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67
 2  3.11 Fair    J     I1       65.9    57  9823  9.15  9.02  5.98
 3  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73
 4  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66
 5  3.02 Fair    I     I1       65.2    56 10577  9.11  9.02  5.91
 6  3.01 Fair    H     I1       56.1    62 10761  9.54  9.38  5.31
 7  3.65 Fair    H     I1       67.1    53 11668  9.53  9.48  6.38
 8  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85
 9  3.22 Ideal   I     I1       62.6    55 12545  9.49  9.42  5.92
10  3.5  Ideal   H     I1       62.8    57 12587  9.65  9.59  6.03
# ℹ 22 more rows</code></pre>
</div>
</div>
<p>Here I made use of the greater than <code>&gt;</code> sign, and there are other operators you could also use to help you filter.</p>
<ul>
<li><code>==</code>: equal to (I usually read this as exactly equal to, and is different than using an equal sign in an equation)</li>
<li><code>&lt;</code>, <code>&gt;</code>: less than or greater than</li>
<li><code>&lt;=</code>, <code>&gt;=</code>: less than or equal to, great than or equal to</li>
<li><code>&amp;</code>: and</li>
<li><code>|</code>: or</li>
<li><code>!</code>: not equal</li>
<li><code>is.na</code>: is NA</li>
</ul>
<p>You can also layer your filtering. This can include in both an AND or OR fashion.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># include diamonds that are bigger than 3 carats and a Premium cut</span></span>
<span id="cb26-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 13 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67
 2  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73
 3  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66
 4  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85
 5  3.01 Premium G     SI2      59.8    58 14220  9.44  9.37  5.62
 6  4.01 Premium I     I1       61      61 15223 10.1  10.1   6.17
 7  4.01 Premium J     I1       62.5    62 15223 10.0   9.94  6.24
 8  3.67 Premium I     I1       62.4    56 16193  9.86  9.81  6.13
 9  3.01 Premium I     SI2      60.2    59 18242  9.36  9.31  5.62
10  3.04 Premium I     SI2      59.3    60 18559  9.51  9.46  5.62
11  3.51 Premium J     VS2      62.5    59 18701  9.66  9.63  6.03
12  3.01 Premium J     SI2      60.7    59 18710  9.35  9.22  5.64
13  3.01 Premium J     SI2      59.7    58 18710  9.41  9.32  5.59</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># include diamonds that are bigger than 3 carats OR a Premium cut</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "|" (above the return key) is the symbol for "or"</span></span>
<span id="cb28-3">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Premium"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 13,810 × 10
   carat cut     color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31
 2  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63
 3  0.22 Premium F     SI1      60.4    61   342  3.88  3.84  2.33
 4  0.2  Premium E     SI2      60.2    62   345  3.79  3.75  2.27
 5  0.32 Premium E     I1       60.9    58   345  4.38  4.42  2.68
 6  0.24 Premium I     VS1      62.5    57   355  3.97  3.94  2.47
 7  0.29 Premium F     SI1      62.4    58   403  4.24  4.26  2.65
 8  0.22 Premium E     VS2      61.6    58   404  3.93  3.89  2.41
 9  0.22 Premium D     VS2      59.3    62   404  3.91  3.88  2.31
10  0.3  Premium J     SI2      59.3    61   405  4.43  4.38  2.61
# ℹ 13,800 more rows</code></pre>
</div>
</div>
<p>You can play around with combining these different operators to see what happens.</p>
</section>
<section id="practice-1" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="practice-1"><span class="header-section-number">10</span> Practice</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Create a new dataframe called `small_diamonds` that includes only the diamonds that are less than 0.5 carats. How many diamonds does this include?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Create a new dataframe called <code>small_diamonds</code> that includes only the diamonds that are less than 0.5 carats. How many diamonds does this include?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">small_diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(small_diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 17674</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Subset diamonds into a new df (`diamonds_subset`) so that it only includes diamonds less than $10,000, and only information for carat, cut, price, and color, in that specific order.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Subset diamonds into a new df (<code>diamonds_subset</code>) so that it only includes diamonds less than $10,000, and only information for carat, cut, price, and color, in that specific order.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">diamonds_subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(carat, cut, price, color) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select both picks and orders!</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="What is the mean and standard deviation of carat of the diamonds that passed your critieria in `diamonds_subset`?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What is the mean and standard deviation of carat of the diamonds that passed your critieria in <code>diamonds_subset</code>?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Using the <code>$</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(diamonds_subset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>carat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6968262</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sd</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(diamonds_subset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>carat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3574645</code></pre>
</div>
</div>
<p>Using the pipe</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean another way</span></span>
<span id="cb37-2">diamonds_subset <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(carat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is necessary because mean requires a vector!</span></span>
<span id="cb37-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6968262</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or you could go full pipe!</span></span>
<span id="cb39-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(carat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6968262</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sd another way</span></span>
<span id="cb41-2">diamonds_subset <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(carat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is necessary because mean requires a vector!</span></span>
<span id="cb41-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3574645</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or you could go full pipe!</span></span>
<span id="cb43-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(carat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3574645</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="How many diamonds in this dataset are both Ideal cut, less than $10,000, and bigger than 1.5 carats??">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How many diamonds in this dataset are both Ideal cut, less than $10,000, and bigger than 1.5 carats??
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>When you are trying to filter using “and” and have more than 2 items, use a comma in between them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, cut <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ideal"</span>, carat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb45-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 327</code></pre>
</div>
</div>
</div>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>r-basics</category>
  <category>tidyverse</category>
  <guid>https://osu-codeclub.github.io/posts/S07E06_tidy_01/</guid>
  <pubDate>Fri, 16 Feb 2024 05:00:00 GMT</pubDate>
  <media:content url="https://osu-codeclub.github.io/posts/S07E06_tidy_01/img/tidyverse-package-workflow.png" medium="image" type="image/png" height="78" width="144"/>
</item>
</channel>
</rss>

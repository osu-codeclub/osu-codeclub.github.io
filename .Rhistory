updateNumericInput(session, "plot", value = 101)
updateNumericInput(session, "stand_count", value = 0)
updateNumericInput(session, "plant_height", value = 0)
updateNumericInput(session, "severity", value = 0)
})
observeEvent(input$delete, {
# Get the selected row(s) and remove them from the collected data
selected_rows(input$dataTable_rows_selected)
if (length(selected_rows()) > 0) {
collected_data <- collected_data_reactive()
collected_data <- collected_data[-selected_rows(), ]
collected_data_reactive(collected_data)
}
})
output$dataTable <- renderDT({
datatable(collected_data_reactive(), options = list(select = "multi"))
})
# Download data as a CSV file
output$downloadData <- downloadHandler(
filename = function() {
"collected_data.csv"
},
content = function(file) {
write.csv(collected_data_reactive(), file)
}
)
}
# Run the app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
useShinyjs(),
titlePanel("Summary Statistics and Plots"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
selectInput("plotType", "Select Plot Type",
c("Box-violin Plot", "Box Plot", "Violin Plot")),
# Add options to modify axis label and tick label size
sliderInput("axisLabelSize", "Axis Label Size", min = 8, max = 20, value = 12),
sliderInput("axisTickLabelSize", "Axis Tick Label Size", min = 8, max = 20, value = 10)
),
mainPanel(
tabsetPanel(
tabPanel("Summary Statistics", tableOutput("summaryTable")),
tabPanel("Plots", plotOutput("plot"))
)
)
)
)
# Define server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
# Define plot_type in the global scope
plot_type <- reactive({
if (!is.null(data())) {
switch(input$plotType,
"Box-violin Plot" = {
ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)
},
"Box Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
,
"Violin Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_violin() +
geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +
stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = "crossbar", width = 0.5) +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
)
}
})
output$summaryTable <- renderTable({
if (is.null(data())) return(NULL)
summary_stats <- data() %>%
group_by(AEZ) %>%
summarize(
Mean = mean(RF),
Standard_Deviation = sd(RF),
Standard_Error = sd(RF) / sqrt(n())
)
as.data.frame(summary_stats)
})
output$plot <- renderPlot({
plot_type()
})
}
# Run the application
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
useShinyjs(),
titlePanel("Summary Statistics and Plots"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
selectInput("plotType", "Select Plot Type",
c("Box-violin Plot", "Box Plot", "Violin Plot")),
# Add options to modify axis label and tick label size
sliderInput("axisLabelSize", "Axis Label Size", min = 8, max = 20, value = 12),
sliderInput("axisTickLabelSize", "Axis Tick Label Size", min = 8, max = 20, value = 10)
),
mainPanel(
tabsetPanel(
tabPanel("Summary Statistics", tableOutput("summaryTable")),
tabPanel("Plots", plotOutput("plot"),
actionButton("downloadPlot", "Download as PDF")
)
)
)
)
)
# Define server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
# Define plot_type in the global scope
plot_type <- reactive({
if (!is.null(data())) {
switch(input$plotType,
"Box-violin Plot" = {
ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)
},
"Box Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
,
"Violin Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_violin() +
geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +
stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = "crossbar", width = 0.5) +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
)
}
})
output$summaryTable <- renderTable({
if (is.null(data())) return(NULL)
summary_stats <- data() %>%
group_by(AEZ) %>%
summarize(
Mean = mean(RF),
Standard_Deviation = sd(RF),
Standard_Error = sd(RF) / sqrt(n())
)
as.data.frame(summary_stats)
})
output$plot <- renderPlot({
plot_type()
})
observeEvent(input$downloadPlot, {
# Generate a temporary file path with the PDF extension
tmp_file <- paste0("plot1.pdf")
# Save the plot using ggsave
ggsave(tmp_file, output$plot, device = "pdf")
# Provide a download link
output$downloadLink <- downloadHandler(
filename = function() {
"plot.pdf"
},
content = function(file) {
file.copy(tmp_file, file)
}
)
})
}
# Run the application
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
useShinyjs(),
titlePanel("Summary Statistics and Plots"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
selectInput("plotType", "Select Plot Type",
c("Box-violin Plot", "Box Plot", "Violin Plot")),
# Add options to modify axis label and tick label size
sliderInput("axisLabelSize", "Axis Label Size", min = 8, max = 20, value = 12),
sliderInput("axisTickLabelSize", "Axis Tick Label Size", min = 8, max = 20, value = 10)
),
mainPanel(
tabsetPanel(
tabPanel("Summary Statistics", tableOutput("summaryTable")),
tabPanel("Plots", plotOutput("plot"),
actionButton("downloadPlot", "Download as PDF")
)
)
)
)
)
# Define server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
# Define plot_type in the global scope
plot_type <- reactive({
if (!is.null(data())) {
switch(input$plotType,
"Box-violin Plot" = {
ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)
},
"Box Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
,
"Violin Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_violin() +
geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +
stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = "crossbar", width = 0.5) +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
)
}
})
output$summaryTable <- renderTable({
if (is.null(data())) return(NULL)
summary_stats <- data() %>%
group_by(AEZ) %>%
summarize(
Mean = mean(RF),
Standard_Deviation = sd(RF),
Standard_Error = sd(RF) / sqrt(n())
)
as.data.frame(summary_stats)
})
output$plot <- renderPlot({
plot_type()
})
observeEvent(input$downloadPlot, {
# Generate a temporary file path with the PDF extension
tmp_file <- paste0("plot1.pdf")
# Save the plot using ggsave
ggsave(tmp_file, output$plot, device = "pdf")
# Provide a download link
output$downloadLink <- downloadHandler(
filename = function() {
"plot1.pdf"
},
content = function(file) {
file.copy(tmp_file, file)
}
)
})
}
# Run the application
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
useShinyjs(),
titlePanel("Summary Statistics and Plots"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
selectInput("plotType", "Select Plot Type",
c("Box-violin Plot", "Box Plot", "Violin Plot")),
# Add options to modify axis label and tick label size
sliderInput("axisLabelSize", "Axis Label Size", min = 8, max = 20, value = 12),
sliderInput("axisTickLabelSize", "Axis Tick Label Size", min = 8, max = 20, value = 10)
),
mainPanel(
tabsetPanel(
tabPanel("Summary Statistics", tableOutput("summaryTable")),
tabPanel("Plots", plotOutput("plot"),
actionButton("downloadPlot", "Download as PDF")
)
)
)
)
)
# Define server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
# Define plot_type in the global scope
plot_type <- reactive({
if (!is.null(data())) {
switch(input$plotType,
"Box-violin Plot" = {
ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)
},
"Box Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
,
"Violin Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_violin() +
geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +
stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = "crossbar", width = 0.5) +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
)
}
})
output$summaryTable <- renderTable({
if (is.null(data())) return(NULL)
summary_stats <- data() %>%
group_by(AEZ) %>%
summarize(
Mean = mean(RF),
Standard_Deviation = sd(RF),
Standard_Error = sd(RF) / sqrt(n())
)
as.data.frame(summary_stats)
})
output$plot <- renderPlot({
plot_type()
})
observeEvent(input$downloadPlot, {
# Generate a temporary file path with the PDF extension
tmp_file <- paste0("plot.pdf")
# Save the plot using ggsave
ggsave(tmp_file, output$plot, device = "pdf")
# Provide a download link
output$downloadLink <- downloadHandler(
filename = function() {
"plot.pdf"
},
content = function(file) {
file.copy(tmp_file, file)
}
)
})
}
# Run the application
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
useShinyjs(),
titlePanel("Summary Statistics and Plots"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
selectInput("plotType", "Select Plot Type",
c("Box-violin Plot", "Box Plot", "Violin Plot")),
# Add options to modify axis label and tick label size
sliderInput("axisLabelSize", "Axis Label Size", min = 8, max = 20, value = 12),
sliderInput("axisTickLabelSize", "Axis Tick Label Size", min = 8, max = 20, value = 10)
),
mainPanel(
tabsetPanel(
tabPanel("Summary Statistics", tableOutput("summaryTable")),
tabPanel("Plots", plotOutput("plot"),
actionButton("downloadPlot", "Download as PDF")
)
)
)
)
)
# Define server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
# Define plot_type in the global scope
plot_type <- reactive({
if (!is.null(data())) {
switch(input$plotType,
"Box-violin Plot" = {
ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)
},
"Box Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
,
"Violin Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_violin() +
geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +
stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = "crossbar", width = 0.5) +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
)
}
})
output$summaryTable <- renderTable({
if (is.null(data())) return(NULL)
summary_stats <- data() %>%
group_by(AEZ) %>%
summarize(
Mean = mean(RF),
Standard_Deviation = sd(RF),
Standard_Error = sd(RF) / sqrt(n())
)
as.data.frame(summary_stats)
})
output$plot <- renderPlot({
plot_type()
})
observeEvent(input$downloadPlot, {
# Generate a temporary file path with the PDF extension
tmp_file <- paste0("plot.pdf")
# Save the plot using ggsave
ggsave(tmp_file, plot_type(), device = "pdf")
# Provide a download link
output$downloadLink <- downloadHandler(
filename = function() {
"plot.pdf"
},
content = function(file) {
file.copy(tmp_file, file)
}
)
})
}
# Run the application
shinyApp(ui, server)
getwd()
#import libraries used in the APP
setwd("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")  ### Please make sure to use your own working directory
#import libraries used in the APP
urlfile="https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data"  ### Please make sure to use your own working directory
us <- st_read("OH_IN_PA.shp")
library(sf)
us <- st_read("OH_IN_PA.shp")
library(shiny)
library(sf)
library(leaflet)
library(dplyr)
library(RColorBrewer)
library(htmlwidgets)
library(htmltools)
library(ggplot2)
library(bslib)
us <- st_read("OH_IN_PA.shp")
library(rgdal)
install.packages("rgdal")
library(rgdal)
us <- st_read("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
us <- st_read("/vsicurl/https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
library(sf)
#import libraries used in the APP
urlfile="https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data"  ### Please make sure to use your own working directory
us <- st_read(urlfile="https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
us <- st_read("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
us <- st_read("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
us <- st_read(dsn, "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
us <- st_read(dsn = TRUE, "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
us <- st_read(dsn = "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
#import libraries used in the APP
data <- download.file("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
#import libraries used in the APP
data <- download.file("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data",
destfile = "Spatial_Data" , mode='wb')
#import libraries used in the APP
data <- setwd("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
#import libraries used in the APP
data <- ("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
data
#import libraries used in the APP
spatial_data <- ("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
us <- st_read("spatial_data")
#import libraries used in the APP
spatial_data <- ("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
us <- st_read("spatial_data")
urlfile = "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data"
us <- st_read(url(urlfile))
urlfile = "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp"
us <- st_read(url(urlfile))
urlfile = "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp"
us <- st_read(url(urlfile))
us <- st_read(urlfile)

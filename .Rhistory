output$downloadLink <- downloadHandler(
filename = function() {
"plot.pdf"
},
content = function(file) {
file.copy(tmp_file, file)
}
)
})
}
# Run the application
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
useShinyjs(),
titlePanel("Summary Statistics and Plots"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
selectInput("plotType", "Select Plot Type",
c("Box-violin Plot", "Box Plot", "Violin Plot")),
# Add options to modify axis label and tick label size
sliderInput("axisLabelSize", "Axis Label Size", min = 8, max = 20, value = 12),
sliderInput("axisTickLabelSize", "Axis Tick Label Size", min = 8, max = 20, value = 10)
),
mainPanel(
tabsetPanel(
tabPanel("Summary Statistics", tableOutput("summaryTable")),
tabPanel("Plots", plotOutput("plot"),
actionButton("downloadPlot", "Download as PDF")
)
)
)
)
)
# Define server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
# Define plot_type in the global scope
plot_type <- reactive({
if (!is.null(data())) {
switch(input$plotType,
"Box-violin Plot" = {
ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)
},
"Box Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
,
"Violin Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_violin() +
geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +
stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = "crossbar", width = 0.5) +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
)
}
})
output$summaryTable <- renderTable({
if (is.null(data())) return(NULL)
summary_stats <- data() %>%
group_by(AEZ) %>%
summarize(
Mean = mean(RF),
Standard_Deviation = sd(RF),
Standard_Error = sd(RF) / sqrt(n())
)
as.data.frame(summary_stats)
})
output$plot <- renderPlot({
plot_type()
})
observeEvent(input$downloadPlot, {
# Generate a temporary file path with the PDF extension
tmp_file <- paste0("plot1.pdf")
# Save the plot using ggsave
ggsave(tmp_file, output$plot, device = "pdf")
# Provide a download link
output$downloadLink <- downloadHandler(
filename = function() {
"plot1.pdf"
},
content = function(file) {
file.copy(tmp_file, file)
}
)
})
}
# Run the application
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
useShinyjs(),
titlePanel("Summary Statistics and Plots"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
selectInput("plotType", "Select Plot Type",
c("Box-violin Plot", "Box Plot", "Violin Plot")),
# Add options to modify axis label and tick label size
sliderInput("axisLabelSize", "Axis Label Size", min = 8, max = 20, value = 12),
sliderInput("axisTickLabelSize", "Axis Tick Label Size", min = 8, max = 20, value = 10)
),
mainPanel(
tabsetPanel(
tabPanel("Summary Statistics", tableOutput("summaryTable")),
tabPanel("Plots", plotOutput("plot"),
actionButton("downloadPlot", "Download as PDF")
)
)
)
)
)
# Define server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
# Define plot_type in the global scope
plot_type <- reactive({
if (!is.null(data())) {
switch(input$plotType,
"Box-violin Plot" = {
ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)
},
"Box Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
,
"Violin Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_violin() +
geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +
stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = "crossbar", width = 0.5) +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
)
}
})
output$summaryTable <- renderTable({
if (is.null(data())) return(NULL)
summary_stats <- data() %>%
group_by(AEZ) %>%
summarize(
Mean = mean(RF),
Standard_Deviation = sd(RF),
Standard_Error = sd(RF) / sqrt(n())
)
as.data.frame(summary_stats)
})
output$plot <- renderPlot({
plot_type()
})
observeEvent(input$downloadPlot, {
# Generate a temporary file path with the PDF extension
tmp_file <- paste0("plot.pdf")
# Save the plot using ggsave
ggsave(tmp_file, output$plot, device = "pdf")
# Provide a download link
output$downloadLink <- downloadHandler(
filename = function() {
"plot.pdf"
},
content = function(file) {
file.copy(tmp_file, file)
}
)
})
}
# Run the application
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
useShinyjs(),
titlePanel("Summary Statistics and Plots"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
selectInput("plotType", "Select Plot Type",
c("Box-violin Plot", "Box Plot", "Violin Plot")),
# Add options to modify axis label and tick label size
sliderInput("axisLabelSize", "Axis Label Size", min = 8, max = 20, value = 12),
sliderInput("axisTickLabelSize", "Axis Tick Label Size", min = 8, max = 20, value = 10)
),
mainPanel(
tabsetPanel(
tabPanel("Summary Statistics", tableOutput("summaryTable")),
tabPanel("Plots", plotOutput("plot"),
actionButton("downloadPlot", "Download as PDF")
)
)
)
)
)
# Define server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
# Define plot_type in the global scope
plot_type <- reactive({
if (!is.null(data())) {
switch(input$plotType,
"Box-violin Plot" = {
ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)
},
"Box Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
,
"Violin Plot" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +
geom_violin() +
geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +
stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = "crossbar", width = 0.5) +
scale_fill_brewer(palette = "Set2") +
theme(axis.text.x = element_text(size = input$axisTickLabelSize),
axis.text.y = element_text(size = input$axisTickLabelSize),
axis.title.x = element_text(size = input$axisLabelSize),
axis.title.y = element_text(size = input$axisLabelSize))
)
}
})
output$summaryTable <- renderTable({
if (is.null(data())) return(NULL)
summary_stats <- data() %>%
group_by(AEZ) %>%
summarize(
Mean = mean(RF),
Standard_Deviation = sd(RF),
Standard_Error = sd(RF) / sqrt(n())
)
as.data.frame(summary_stats)
})
output$plot <- renderPlot({
plot_type()
})
observeEvent(input$downloadPlot, {
# Generate a temporary file path with the PDF extension
tmp_file <- paste0("plot.pdf")
# Save the plot using ggsave
ggsave(tmp_file, plot_type(), device = "pdf")
# Provide a download link
output$downloadLink <- downloadHandler(
filename = function() {
"plot.pdf"
},
content = function(file) {
file.copy(tmp_file, file)
}
)
})
}
# Run the application
shinyApp(ui, server)
getwd()
#import libraries used in the APP
setwd("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")  ### Please make sure to use your own working directory
#import libraries used in the APP
urlfile="https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data"  ### Please make sure to use your own working directory
us <- st_read("OH_IN_PA.shp")
library(sf)
us <- st_read("OH_IN_PA.shp")
library(shiny)
library(sf)
library(leaflet)
library(dplyr)
library(RColorBrewer)
library(htmlwidgets)
library(htmltools)
library(ggplot2)
library(bslib)
us <- st_read("OH_IN_PA.shp")
library(rgdal)
install.packages("rgdal")
library(rgdal)
us <- st_read("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
us <- st_read("/vsicurl/https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
library(sf)
#import libraries used in the APP
urlfile="https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data"  ### Please make sure to use your own working directory
us <- st_read(urlfile="https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
us <- st_read("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
us <- st_read("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
us <- st_read(dsn, "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
us <- st_read(dsn = TRUE, "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
us <- st_read(dsn = "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
#import libraries used in the APP
data <- download.file("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
#import libraries used in the APP
data <- download.file("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data",
destfile = "Spatial_Data" , mode='wb')
#import libraries used in the APP
data <- setwd("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
#import libraries used in the APP
data <- ("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
data
#import libraries used in the APP
spatial_data <- ("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data")
us <- st_read("spatial_data")
#import libraries used in the APP
spatial_data <- ("https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp")
us <- st_read("spatial_data")
urlfile = "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data"
us <- st_read(url(urlfile))
urlfile = "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp"
us <- st_read(url(urlfile))
urlfile = "https://github.com/osu-codeclub/osu-codeclub.github.io/tree/main/posts/shiny_03/data/map_data/OH_IN_PA.shp"
us <- st_read(url(urlfile))
us <- st_read(urlfile)
#| eval: false
#import libraries used in the APP
#setwd("...map_data/")  ### Please make sure to use your own working directory
library(shiny)
library(sf)
library(dplyr)
library(RColorBrewer)
library(htmlwidgets)
library(htmltools)
library(ggplot2)
library(bslib)
us <- st_read("OH_IN_PA.shp")
us <- st_read("data/map_data/OH_IN_PA.shp")
us <- us %>% filter(STATE_A=='OH'| STATE_A=='IN'| STATE_A =='PA')  ### Ohio, Indiana, Pennsylvania
us <- st_transform(us, crs=4326)
class(us)
head(us)
plot(us[7])
plot(us[7])
head(us)
plot(us[7])
# fist graph on ggplot = Income (boxplot)
inc_p <- ggplot(us, aes(x=STATE_A, y=med_ncm, fill=STATE_A)) +
geom_boxplot()
# second graph on ggplot = Temperature (densityplot)
temp_p <- ggplot(us, aes(x=tempmn, ..density.., fill=STATE_A))+
geom_density(alpha=0.5)
# third graph on ggplot = Population vs Development (scatterplot)
pop_p <- ggplot(us, aes(x=POPULAT, y=per_dev, color= STATE_A, size= med_ncm))+
geom_point()
#color palette for Temperature, Income and Population
temp_pal <- colorBin(palette="YlOrRd", domain=us$tempmn, bin=5)
#| eval: false
#import libraries used in the APP
#setwd("...map_data/")  ### Please make sure to use your own working directory
library(shiny)
library(sf)
library(leaflet)
library(dplyr)
library(RColorBrewer)
library(htmlwidgets)
library(htmltools)
library(ggplot2)
library(bslib)
library(RColorBrewer)
#color palette for Temperature, Income and Population
temp_pal <- colorBin(palette="YlOrRd", domain=us$tempmn, bin=5)
pop_pal <- colorNumeric(palette= 'Purples', domain= us$POPULAT)
ncm_pal <- colorNumeric(palette= 'Greens', domain= us$med_ncm)
plot(us[7])
ui <- fluidPage(
theme = bs_theme(version = 4, bootswatch = "spacelab"), # theme from the library(bslib)
titlePanel(h1("Ohio, Indiana and Pennsylvania",align = "center", style = "color:#0d793e")), # Main title of the App use h1
br(),### break the line two times
br(),
tabsetPanel(#the tabset panel layout will include the three tab
# Tab 1: Data Exploration
tabPanel("Data explorer", # title of the first tab
br(),
fluidRow(
column(3,
selectInput(inputId = "countryInput1", #unique input ID
label= "Choose a State",
choices = unique(us$STATE_N),
selected = "Ohio"),
),
),
hr(),
DT::dataTableOutput("table") #output ID
),
#Tab 2: Visualization
tabPanel("Sum plots", #title of the second tab
br(),
sidebarLayout(#left section of the page used by the user to select input
sidebarPanel(
selectInput(inputId = 'inc_pop_temp',#unique input ID
label = 'Select a variable',
choices = c('',"Income", "Population vs Development", 'Median Temperature'), ),
),
mainPanel( # right section of the page
plotOutput("boxplot")#output ID
))),
#Tab 3: Interactive Map
tabPanel("Interactive Map", #title of the third tab
sidebarLayout(
sidebarPanel(#left section of the page used by the user to select input
selectInput(inputId = "countryInput", #unique input ID
label= "Choose a State",
choices = unique(us$STATE_N),
selected = "Ohio"),
selectInput(inputId = "varInput", #unique input ID
label= "Choose a variable",
choices = c("Temperature", 'Population', 'Income'))
,),
mainPanel(# right section of the page
leafletOutput("map", #output ID
width = "100%", height = "500px"))))
),)
server <- function(input, output) {
selectedCountry1 <- reactive({#reactive expression for the Data Explorer
us[us$STATE_N == input$countryInput1, ] #match input of the user with the state name
})
selectedCountry <- reactive({ #reactive expression for the Interactive Map
us[us$STATE_N == input$countryInput, ] #match input of the user with the state name
})
output$table <- DT::renderDataTable({ #Data Explorer tab output
data = selectedCountry1()
})
output$boxplot <- renderPlot({ #Visualization tab output
if (input$inc_pop_temp %in% "Income") # If input of the user is Income
{inc_p} #then print Income graph
else if (input$inc_pop_temp %in% "Median Temperature")# If input of the user is Median Temperature
{temp_p} #then print Temperature graph
else if (input$inc_pop_temp %in% "Population vs Development")# If input of the user is Pop vs Dev
{pop_p} #then print Pop vs Dev graph
})
output$map <- renderLeaflet({#Interactive Map tab output
leaflet('map', #base map
options = leafletOptions(zoomControl= FALSE)) %>%
htmlwidgets::onRender("function(el, x) {
L.control.zoom({ position: 'topright' }).addTo(this)
}") %>%
addTiles(group = "OSM") %>%
addProviderTiles("Esri.NatGeoWorldMap", group="ESRI") %>%
addProviderTiles("CartoDB.DarkMatter", group= "CartoDB") %>%
addLayersControl(baseGroups = c("CartoDB","OSM", "ESRI")) %>%
addLegend(position="bottomright", pal=temp_pal, values=us$tempmn, title="Temperature")%>%
addLegend(position="bottomright", pal=pop_pal, values=us$POPULAT, title="Population")%>%
addLegend(position="bottomleft", pal=ncm_pal, values=us$med_ncm, title="Income in $")%>%
setView(lat= 39, lng=-80, zoom=6)
})
observe({#observer
state_popup <- paste0("<strong>County: </strong>", #popup
selectedCountry()$NAME,
"<br><strong> Temperature: </strong>",
round(selectedCountry()$tempmn,1),"&#x2103",
"<br><strong> Median Income: </strong>",
selectedCountry()$med_ncm,'$',
"<br><strong> Population: </strong>",
selectedCountry()$POPULAT)
high_opt <- highlightOptions(weight = 3, color = "white", bringToFront = FALSE) #highlight when user select county
if (input$varInput %in% "Temperature") {
leafletProxy("map", data = selectedCountry()) %>%
#understand when to clearshapes
# clearShapes() %>%
addPolygons(fillColor =  temp_pal(selectedCountry()$tempmn),
popup = state_popup,
col="#302E2D",
fillOpacity = 1,
weight = 1,
highlight = high_opt )
}
else if (input$varInput %in% "Income") {
leafletProxy("map", data = selectedCountry()) %>%
#understand when to clearshapes
# clearShapes() %>%
addPolygons(fillColor =  ncm_pal(selectedCountry()$med_ncm),
popup = state_popup,
col="#302E2D",
fillOpacity = 1,
weight = 1,
highlight = high_opt )
}
else if (input$varInput %in% "Population") {
leafletProxy("map", data = selectedCountry()) %>%
#understand when to clearshapes
# clearShapes() %>%
addPolygons(fillColor =  pop_pal(selectedCountry()$POPULAT),
popup = state_popup,
col="#302E2D",
fillOpacity = 1,
weight = 1,
highlight = high_opt )
}
})
}
shinyApp(ui = ui, server = server)
plot(us[7])

[
  {
    "objectID": "pages/schedule.html",
    "href": "pages/schedule.html",
    "title": "Schedule for Code Club",
    "section": "",
    "text": "During the spring semester of 2024, we will be starting with R from the very beginning. We are meeting on Fridays from 12-1pm. Join us:\n\nIn person in Columbus (Howlett 340 with Jessica Cooperstone & Horacio Lopez-Nicora)\n\nIn Wooster (Gerlaugh 122 with Jelmer Poelstra)\n\nThrough Zoom (sign up to receive the Zoom link)\n\nFor an overview of all previous Code Club sessions, including from previous semesters, see the Previous sessions page.\n\n\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS07E01\nJan 12\nJess\nR Basics 1: R, RStudio, and Projects\n\n\nS07E02\nJan 19\nJelmer\nR Basics 2: Scripts and Objects\n\n\nS07E03\nJan 26\nHoracio\nR Basics 3: Built-in functions, Vectors, and Help\n\n\nS07E04\nFeb 02\nJess\nR Basics 4: Vectorized Operations and Data Frames\n\n\nS07E05\nFeb 09\nHoracio\nR Basics 5: Data manipulation in base R\n\n\nS07E06\nFeb 16\nJess\nTidyverse 1: An introduction to the tidyverse\n\n\nS07E07\nFeb 23\nJelmer\nTidyverse 2: More basic data wrangling\n\n\nS07E08\nMar 01\nJelmer\nTidyverse 3: Grouping and summarizing data\n\n\nS07E09\nMar 08\nAaron Wiedemer\nTBD\n\n\n-\nMar 15\n-\nSpring Break: no Code Club\n\n\nS07E10\nMar 22\nJess\nTBD\n\n\nS07E11\nMar 29\nJelmer\nTBD\n\n\nS07E12\nApr 05\nHoracio\nTBD\n\n\nS07E13\nApr 12\nHoracio\nTBD\n\n\nS07E14\nApr 19\nJelmer\nTBD\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/previous.html#current-semester-spring-24",
    "href": "pages/previous.html#current-semester-spring-24",
    "title": "Previous Code Club sessions",
    "section": "Current semester (Spring ’24)",
    "text": "Current semester (Spring ’24)\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS07E01\nJan 12\nJess\nR Basics 1: R, RStudio, and Projects\n\n\nS07E02\nJan 19\nJelmer\nR Basics 2: Scripts and Objects\n\n\nS07E03\nJan 26\nHoracio\nR Basics 3: Built-in functions, Vectors, and Help\n\n\nS07E04\nFeb 02\nJess\nR Basics 4: Vectorized Operations and Data Frames\n\n\nS07E05\nFeb 09\nHoracio\nR Basics 5: Data manipulation in base R\n\n\nS07E06\nFeb 16\nJess\nTidyverse 1: An introduction to the tidyverse\n\n\nS07E07\nFeb 23\nJelmer\nTidyverse 2: More basic data wrangling\n\n\n\n\n\n\n\n\n\nAsk us for access to the Zoom recordings of previous Code Club sessions!"
  },
  {
    "objectID": "pages/previous.html#previous-semesters",
    "href": "pages/previous.html#previous-semesters",
    "title": "Previous Code Club sessions",
    "section": "Previous semesters",
    "text": "Previous semesters\n\nFall ’23\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS06E01\nAug 28\nJess\nQuarto Website 1: Initiating a website\n\n\nS06E02\nSep 11\nJelmer\nQuarto Website 2: Adding a page & YAML formatting\n\n\nS06E03\nSep 18\nJess\nQuarto Website 3: Deploying to GitHub\n\n\nS06E04\nSep 25\nJelmer\nQuarto Website 4: Interacting with your repository\n\n\nS06E05\nOct 2\nJess\nQuarto Website 5: Modifying your site\n\n\nS06E06\nOct 9\nJelmer\nQuarto Website 6: Quarto features\n\n\nS06E07\nOct 16\nJess\nQuarto Website 7: Quarto presentations\n\n\nS06E08\nOct 30\nHoracio\nShiny Apps 01: Intro to Shiny\n\n\nS06E09\nNov 06\nHoracio\nShiny Apps 02: Intro to Shiny (cont.)\n\n\nS06E10\nNov 13\nHoracio & Sandip\nShiny Apps 03: Map viz. in Shiny\n\n\nS06E10\nDec 04\nHoracio\nShiny Apps 04: Deploying our Shiny App\n\n\n\n\n\n\nSpring ’23\n\nR4DS = The R for Data Science book (2nd edition)\n\n\n\n\nSession\nDate\nPresenter\nTopic + link to BioDASH page\n\n\n\n\nS05E01\nJan 26\nJelmer\nR4DS, Ch. 4: Pipes\n\n\nS05E02\nFeb 02\nStephen\nR4DS, Ch. 6: Tidy Data, I\n\n\nS05E03\nFeb 09\nJessica & Daniel\nR4DS, Ch. 6: Tidy Data, II\n\n\nS05E04\nFeb 16\nMichael\nR4DS, Ch. 7: Code Style\n\n\nS05E05\nFeb 23\nJelmer\nR4DS, Ch. 8: Data Import, I\n\n\nS05E06\nMar 02\nStephen\nR4DS, Ch. 8: Data Import, II\n\n\nS05E07\nMar 09\nJessica\nR4DS, Ch. 9: Scripts & Projects\n\n\nS05E08\nMar 23\nJessica\nR4DS, Ch. 10: ggplot layers, part 1\n\n\nS05E09\nMar 30\nJelmer\nR4DS, Ch. 10: ggplot layers, part 2\n\n\n\n\n\n\nSummer & Fall ’22\n\nR4DS = The R for Data Science book (1st edition)\n\n\n\n\nSession\nDate\nPresenter\nTopic\n\n\n\n\nS04E01\nJune 09\nJelmer\nR4DS, Ch. 1: Intro\n\n\nS04E02\nJune 23\nMichael B.\nR4DS, Ch. 3.1- 3.4: Data viz I\n\n\nS04E03\nJune 30\nJessica\nR4DS, Ch. 3.5: Data viz II\n\n\nS04E04\nJuly 07\nJessica\nR4DS, Ch. 3.6: Data viz III\n\n\nS04E05\nJuly 14\nMike S.\nR4DS, Ch. 3.7: Data viz IV\n\n\nS04E06\nJuly 21\nJelmer\nR4DS, Ch. 3.8-3.10: Data viz V\n\n\nS04E07\nJuly 28\nMichael B.\nR4DS, Ch. 27: R Markdown\n\n\nS04E08\nSept 15\nJessica\nR4DS, Ch. 4, 6 & 8: Workflow\n\n\nS04E09\nSept 22\nJelmer\nR4DS, Ch. 5.1-5.2: Data transformation I - intro and filter()\n\n\nS04E10\nOct 06\nMichael B.\nR4DS, Ch. 5.3: Data transformation II - arrange()\n\n\nS04E11\nOct 20\nMichael B.\nR4DS, Ch. 5.4: Data transformation III - select()\n\n\nS04E12\nOct 27\nStephen\nR4DS, Ch. 5.5: Data transformation IV - mutate()\n\n\nS04E13\nNov 03\nMike S.\nR4DS, Ch. 5.6: Data transformation V - summarize() part 1\n\n\nS04E14\nNov 10\nJessica\nR4DS, Ch. 5.6: Data transformation V - summarize() part 2\n\n\nS04E15\nNov 17\nJelmer\nR4DS, Ch. 7.1-7.3: Exploratory Data Analysis I\n\n\nS04E16\nDec 01\nJelmer\nR4DS, Ch. 7.1-7.3: Exploratory Data Analysis II\n\n\nS04E17\nDec 08\nMichael B.\nR4DS, Ch. 10: Tibbles\n\n\n\n\n\n\nSpring ’22\n\n\n\nSession\nDate\nPresenter\nTopic (+ link)\nTopic block\n\n\n\n\nS03E01\nJan 13\nMike S.\nT-tests\nBasic statistics in R\n\n\nS03E02\nJan 20\nJessica\nANOVA\nBasic statistics in R\n\n\nS03E03\nJan 27\nJelmer\nPrincipal Component Analysis\nBasic statistics in R\n\n\nS03E04\nFeb 03\nJessica\nANOVA part II\nBasic statistics in R\n\n\nS03E05\nFeb 10\nStephen\nCorrelation\nBasic statistics in R\n\n\nS03E06\nFeb 17\nMichael B.\nData structures and subsetting\nBasic statistics in R\n\n\nS03E07\nFeb 24\nJelmer\nIntro to “DRY” and iteration\n“Don’t repeat yourself”\n\n\nS03E08\nMar 03\nJelmer\nLoops\n“Don’t repeat yourself”\n\n\nS03E09\nMar 10\nMike S.\nApply functions\n“Don’t repeat yourself”\n\n\nS03E10\nMar 24\nMike S.\nPurrr map functions\n“Don’t repeat yourself”\n\n\nS03E11\nApr 14\nMichael B.\nWriting functions part I\n“Don’t repeat yourself”\n\n\nS03E12\nApr 21\nMichael B.\nIncorporating your own functions in loops\n“Don’t repeat yourself”\n\n\n\n\n\n\nFall ’21\n\n\n\nSession\nDate\nPresenter\nTopic (+ link)\nTopic block\n\n\n\n\nS02E01\nAug 26\nJelmer\nR basics – part I\nR basics\n\n\nS02E02\nSep 2\nMike S.\nR basics – part II\nR basics\n\n\nS02E03\nSep 9\nMichael B.\nR Markdown\nR basics\n\n\nS02E04\nSep 16\nJessica\nTidyverse intro – part I\nR basics\n\n\nS02E05\nSep 23\nStephen\nTidyverse intro – part II\nR basics\n\n\nS02E06\nSep 30\nMichael B.\nggplot intro – part I\nPlotting in R\n\n\nS02E07\nOct 07\nJelmer\nggplot intro – part II\nPlotting in R\n\n\nS02E08\nOct 21\nMike S.\nFaceting plots\nPlotting in R\n\n\nS02E09\nOct 28\nMike S.\nFaceting and combining plots\nPlotting in R\n\n\nS02E10\nNov 04\nDaniel Moreno\nStatistical results in plots with ggpubr\nPlotting in R\n\n\nS02E11\nNov 18\nJulia Vrtilek\nBat vocalizations with R at OSC\nPutting code to practice\n\n\nS02E12\nDec 02\nMatthew Teegarden\nInteractive applications with Shiny\nPutting code to practice\n\n\nS02E13\nDec 09\nJessica\nInteractive plots with Plotly\nPlotting in R\n\n\n\n\n\n\nFall ’20 & Spring ’21\n\n\n\nSession nr.\nDate\nPresenter\nTopic (+ link)\nOther\n\n\n\n\nS01E01\nNov 18, 2020\nJelmer\nRStudio Projects & getting started\nslides\n\n\nS01E02\nDec 2, 2020\nJessica\ndplyr core verbs\n\n\n\nS01E03\nDec 9, 2020\nMike S.\nJoining datasets\n\n\n\nS01E04\nDec 16, 2020\nMichael B.\nggplot2 – round 1\n\n\n\nS01E05\nJan 15, 2021\nJessica\nggplot2 – round 2\n\n\n\nS01E06\nJan 22, 2021\nStephen\nFactors\n\n\n\nS01E07\nJan 29, 2021\nJelmer\nR Markdown\n\n\n\nS01E08\nFeb 5, 2021\nMike S.\nPivoting data\n\n\n\nS01E09\nFeb 12, 2021\nMichael B.\nSubsetting data\n\n\n\nS01E10\nFeb 19, 2021\nJessica\nFaceting, animating, and combining plots\n\n\n\nS01E11\nFeb 26, 2021\nStephen\nMaking maps with ggmap\n\n\n\nS01E12\nMar 5, 2021\nJelmer\nVectorization and loops\n\n\n\nS01E13\nMar 12, 2021\nMike S.\nThe apply family of functions\n\n\n\nS01E14\nMar 19, 2021\nMichael B.\nWriting your own functions\n\n\n\nS01E15\nMar 26, 2021\nJessica\nInteractive plots with Plotly\n\n\n\nS01E16\nApr 02, 2021\nStephen\nWorking with dates with lubridate\n\n\n\nS01E17\nApr 09, 2021\nJelmer\nIntroduction to regular expressions\n\n\n\nS01E18\nApr 16, 2021\nMike S.\nRegular Expressions: Part II\n\n\n\nS01E19\nApr 23, 2021\nMichael B.\nWord Clouds via tidytext\n\n\n\nS01E20\nApr 30, 2021\nJessica\nCleaning up variables names"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About OSU Code Club",
    "section": "",
    "text": "The Code Club at Ohio State University is a regularly occurring, interactive, in-person and online gathering to improve coding skills. We aim for a supportive and fun culture of learning together, and hope to offer something to participants at any experience level.\nAnyone who studies or works at the Ohio State University is welcome to join: please fill out this short form if you want to do so.\nIn each session, one of the organizers will be presenting. Code Club sessions are meant to be interactive and involved, so be prepared to follow along yourself and to do exercises, sometimes in groups with other participants.\n\n\nTeaching materials for each Code Club session are added to this website and will continue to be available. Code Club has run since the fall of 2020, and materials for the 71 sessions in the semesters prior to autumn 2023 are currently available at https://biodash.github.io but will eventually be migrated to this website.\nBy popular demand, Code Club has so far focused entirely on the R language and its surrounding ecosystem (R Markdown, Shiny, etc).\nIf you have any suggestions or requests for Code Club, don’t hesitate to contact one of the organizers.\n\nSign up!\nTo sign up, please fill out this short form and you will be added to Code Club email list. Then, you’ll receive emails with updates about each session, links to the Zoom meeting and our folder with Zoom recordings of previous sessions.\n\n\nOrganizers\nThe current organizers of Code Club are:\n\nJelmer Poelstra, bioinformatician at the MCIC core facility in Wooster.\nJessica Cooperstone, associate professor in the departments of Horticulture and Crop Science and Food Science and Technology.\nHoracio Lopez-Nicora, assistant professor in the department of Plant Pathology.\n\nIn previous semesters, we also had co-organizers Michael Broe (EEOB), Mike Sovic (CAPS), and Stephen Opiyo (MCIC Columbus).\n\n\nLearn more about -and get ready for- Code Club\n\nSchedule with upcoming sessions\nComputer setup instructions\nResources and tips for R novices\nList of previous sessions by semester for AU20-SP23\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#introduction",
    "href": "posts/S07E06_tidy_01/index.html#introduction",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to introduce a new package and series of functions today that are designed for data science."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#what-is-the-tidyverse",
    "href": "posts/S07E06_tidy_01/index.html#what-is-the-tidyverse",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "2 What is the tidyverse?",
    "text": "2 What is the tidyverse?\n“The tidyverse” is a collection of packages called that are designed for data science. You can certainly use R without using the tidyverse, but it has many packages that I think will make your life a lot easier. We will be using mostly tidyverse functions in this class, with some base R syntax scattered throughout.\n\n\n\nFigure from teachdatascience.com\n\n\nThe “core tidyverse” contains the 8 packages below:\n\ndplyr: for data manipulation\nggplot2: a “grammar of graphics” for creating beautiful plots\nreadr: for reading in rectangular data (i.e., Excel-style formatting)\ntibble: using tibbles as modern/better dataframes\nstringr: handling strings (i.e., text or stuff in quotes)\nforcats: for handling categorical variables (i.e., factors) (meow!)\ntidyr: to make “tidy data”\npurrr: for enhancing functional programming (also meow!)\n\nWe will be using many of these other packages in Code Club and we will talk about them as we go. There are more tidyverse packages outside of these core eight, and we will talk about some of them another time.\n\ntl;dr Tidyverse has a lot of packages that make data analysis easier. None of them are required, but I think you’ll find many tidyverse approaches easier and more intuitive than using base R."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#installing-new-packages",
    "href": "posts/S07E06_tidy_01/index.html#installing-new-packages",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "3 Installing new packages",
    "text": "3 Installing new packages\nSo far, we have used only functions and data that exist within “base R” - or the portion of R that comes with the default install. R is an open source language, meaning people all around the world can develop tools that can be used within R. These tools are always evolving, and there are way too many of them for them to all come pre-downloaded.\nThese tools mostly live within something called a “package”. You can think about a package as a unit of code that can be shared and reused. These packages can include both functions and data. A person (or team) can create a package, make that available for download, and then anyone can use it.\nTo install packages in R that are on the Comprehensive R Archive Network (CRAN), you can use the function install.packages(). There are packages that are not on CRAN but we are not going to talk about them today. Be sure that you provide the name of your packages as a string, and put it in quotes.\n\ninstall.packages(\"tidyverse\")"
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#loading-packages",
    "href": "posts/S07E06_tidy_01/index.html#loading-packages",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "4 Loading packages",
    "text": "4 Loading packages\nOnce you have downloaded a package, you now have it, you can think about it as a book that you now own. When you want to read the book, you don’t need to go buy it again, you need to simply take it off your shelf and open it. Using the function library() takes your package from where it is stored on the “shelf” in your computer, and opens it. I hope this is an ok metaphor.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nIt’s a good habit to not ignore warnings/messages that R gives you.\n\n\n\n\n\n\nWhat does this warning mean?\n\n\n\n\n\n\n\nWe only need to install packages once. But, every time we want to use them, we need to “load” them, and can do this using the function library()."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#practice",
    "href": "posts/S07E06_tidy_01/index.html#practice",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "5 Practice",
    "text": "5 Practice\n\n\n\n\n\n\nPlease install the tidyverse and then load it.\n\n\n\n\n\n\ninstall.packages(\"tidyverse\")\n\n\n# it doesn't matter here if you put tidyverse in quotes or not\n# without quotes will work since you can think about it as an object\n# that already exists (and not just a string of characters)\nlibrary(tidyverse) # works\nlibrary(\"tidyverse\") # also works"
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#data-for-today",
    "href": "posts/S07E06_tidy_01/index.html#data-for-today",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "6 Data for today",
    "text": "6 Data for today\nIn addition to having functions, packages also can contain data. Within the tidyverse package, there is a bunch of embedded data we can use to play around with.\nIf you type the function data() and then place your cursor between the parentheses and hit tab, you will see what pre-loaded data in R you have access to.\n\ndata()\n\n\nToday we are going to use a dataset called diamonds that is embedded within the package ggplot (which we have since it gets automatically installed when we load the tidyverse).\nLet’s learn about diamonds using some of the functions we learned already.\n\nstr(diamonds)\n\ntibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)\n $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n $ cut    : Ord.factor w/ 5 levels \"Fair\"&lt;\"Good\"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...\n $ color  : Ord.factor w/ 7 levels \"D\"&lt;\"E\"&lt;\"F\"&lt;\"G\"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...\n $ clarity: Ord.factor w/ 8 levels \"I1\"&lt;\"SI2\"&lt;\"SI1\"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...\n $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n\n\nTidyverse has a version of str() called glimpse() which does a similar thing but tries to show you more data.\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\nNote that we do not see diamonds as an object in our enrivonrment, even though clearly it’s there."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#the-pipe-or",
    "href": "posts/S07E06_tidy_01/index.html#the-pipe-or",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "7 The pipe |> or %>%",
    "text": "7 The pipe |&gt; or %&gt;%\nThe pipe |&gt; or %&gt;% is a tool that allows you to take the output of one function, and send it to the next function.\nYou can read the pipe as “and then” - here is a theoretical example.\n\ntake_this_data |&gt;\n  then_this_function() |&gt;\n  then_another_function() |&gt; \n  finally_a_last_function()\n\nThe easiest way to see how the pipe works is with an example. We are going to go over some examples in a minute.\nSome reasons I like the pipe:\n\nits easier to read (and doesn’t have a lot of nested parentheses)\nit doesn’t require you to create lots of interim objects which you won’t use again\nits easy to troubleshoot\n\n\nThe keyboard shortcut for |&gt; is Ctrl/Cmd + Shift + M\n\nWe can change our R options so that the newer version of the pipe |&gt; is used over the older one %&gt;% when we use the keyboard shortcut. I try and remember to use the new one but it doesn’t always happen, so do be familiar with both.\nYou can go to Tools &gt; Global Options &gt; Code and make sure the tick mark is checked next to “Use the native pipe operator, |&gt; (requires R 4.1+).\n\nOf course you can assign the output of a pipe to something using the assignment operator &lt;- and then use it for other things.\nSsome functions are not “pipe friendly” meaning they will not work using pipes. This is often because the data is not the first argument passed to the function. All tidyverse functions work with piping."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#selecting-columns-with-select",
    "href": "posts/S07E06_tidy_01/index.html#selecting-columns-with-select",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "8 Selecting columns with select()",
    "text": "8 Selecting columns with select()\nOften you will want to pick only certain columns in your dataframe, and you can do this with the function select(). You can pick columns by:\n\ntheir names\ntheir position (i.e., index)\ncharacteristics of that column\n\nIf we want to know how the arguments to select() work, we can access the documentation material about the function.\n\n?select()\n\nThe arguments to select() are:\n\nselect(.data, ...)\n\nThis tells us that select() accepts a data frame (that’s good, diamonds is one), and we can pass many other expressions.\nLet’s select first by name.\n\nselect(.data = diamonds, # our df\n       carat, cut, price) # the columns we want to pull\n\n# A tibble: 53,940 × 3\n   carat cut       price\n   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;\n 1  0.23 Ideal       326\n 2  0.21 Premium     326\n 3  0.23 Good        327\n 4  0.29 Premium     334\n 5  0.31 Good        335\n 6  0.24 Very Good   336\n 7  0.24 Very Good   336\n 8  0.26 Very Good   337\n 9  0.22 Fair        337\n10  0.23 Very Good   338\n# ℹ 53,930 more rows\n\n\nOr, we could more simply use the pipe |&gt; or %&gt;%\n\ndiamonds |&gt; \n  select(carat, cut, price)\n\n# A tibble: 53,940 × 3\n   carat cut       price\n   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;\n 1  0.23 Ideal       326\n 2  0.21 Premium     326\n 3  0.23 Good        327\n 4  0.29 Premium     334\n 5  0.31 Good        335\n 6  0.24 Very Good   336\n 7  0.24 Very Good   336\n 8  0.26 Very Good   337\n 9  0.22 Fair        337\n10  0.23 Very Good   338\n# ℹ 53,930 more rows\n\n\nWe can read this as, take the dataset diamonds, then select the columns carat, cut, and price. That was pretty easy to read!\nNote that when you use the pipe, the potential column names will auto-fill for you after you type 3 letters. You should use this option as it will help prevent misspellings. You can also hit tab to scroll through all the potential objects to select.\nWe can also select by index. In general I would recommend against this because its really hard to remember which column indices are which variables today, nevermind returning back to old code 1 year from now. Still I will show you how.\n\ndiamonds |&gt; \n  select(c(1, 2, 7)) # you could also use the colon syntax if your columns are sequential\n\n# A tibble: 53,940 × 3\n   carat cut       price\n   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;\n 1  0.23 Ideal       326\n 2  0.21 Premium     326\n 3  0.23 Good        327\n 4  0.29 Premium     334\n 5  0.31 Good        335\n 6  0.24 Very Good   336\n 7  0.24 Very Good   336\n 8  0.26 Very Good   337\n 9  0.22 Fair        337\n10  0.23 Very Good   338\n# ℹ 53,930 more rows\n\n\nYou can also select using selection helpers like:\n\neverything(): picks all variables\nstarts_with(): starts with some prefix\ncontains(): contains a specific string\nwhere(): selects columns where the statement given in the argument is TRUE\n\nHere is an example of using where() to select only the columns that are numeric. The function where() asks whether the following function is TRUE or FALSE, and keeps only the occurences that evaluate to TRUE.\n\ndiamonds |&gt;\n  select(where(is.numeric))\n\n# A tibble: 53,940 × 7\n   carat depth table price     x     y     z\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23  61.5    55   326  3.95  3.98  2.43\n 2  0.21  59.8    61   326  3.89  3.84  2.31\n 3  0.23  56.9    65   327  4.05  4.07  2.31\n 4  0.29  62.4    58   334  4.2   4.23  2.63\n 5  0.31  63.3    58   335  4.34  4.35  2.75\n 6  0.24  62.8    57   336  3.94  3.96  2.48\n 7  0.24  62.3    57   336  3.95  3.98  2.47\n 8  0.26  61.9    55   337  4.07  4.11  2.53\n 9  0.22  65.1    61   337  3.87  3.78  2.49\n10  0.23  59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\nYou can find more helpers here.\nUsing select() will also set the order of your columns. More about this in practice."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#choosing-observations-with-filter",
    "href": "posts/S07E06_tidy_01/index.html#choosing-observations-with-filter",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "9 Choosing observations with filter()",
    "text": "9 Choosing observations with filter()\n\n\n\n\n\nFigure from Allison Horst\n\n\n\n\nSometimes you want to select observations (rows) based on values. To do this you use filter(). Try not to confuse this with select().\n\n\n\n\n\n\nselect() picks columns, while filter() picks rows.\n\n\n\n\n\n\nThe function filter() will keep only observations that meet your filtering criteria.\nLet’s say we want to only keep the diamonds that are bigger than 3 carats.\n\n# without the pipe\n# i find this harder to read\nfilter(.data = diamonds, \n       carat &gt; 3)\n\n# A tibble: 32 × 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67\n 2  3.11 Fair    J     I1       65.9    57  9823  9.15  9.02  5.98\n 3  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73\n 4  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66\n 5  3.02 Fair    I     I1       65.2    56 10577  9.11  9.02  5.91\n 6  3.01 Fair    H     I1       56.1    62 10761  9.54  9.38  5.31\n 7  3.65 Fair    H     I1       67.1    53 11668  9.53  9.48  6.38\n 8  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85\n 9  3.22 Ideal   I     I1       62.6    55 12545  9.49  9.42  5.92\n10  3.5  Ideal   H     I1       62.8    57 12587  9.65  9.59  6.03\n# ℹ 22 more rows\n\n# the pipe/my preferred way\ndiamonds |&gt; \n  filter(carat &gt; 3)\n\n# A tibble: 32 × 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67\n 2  3.11 Fair    J     I1       65.9    57  9823  9.15  9.02  5.98\n 3  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73\n 4  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66\n 5  3.02 Fair    I     I1       65.2    56 10577  9.11  9.02  5.91\n 6  3.01 Fair    H     I1       56.1    62 10761  9.54  9.38  5.31\n 7  3.65 Fair    H     I1       67.1    53 11668  9.53  9.48  6.38\n 8  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85\n 9  3.22 Ideal   I     I1       62.6    55 12545  9.49  9.42  5.92\n10  3.5  Ideal   H     I1       62.8    57 12587  9.65  9.59  6.03\n# ℹ 22 more rows\n\n\nHere I made use of the greater than &gt; sign, and there are other operators you could also use to help you filter.\n\n==: equal to (I usually read this as exactly equal to, and is different than using an equal sign in an equation)\n&lt;, &gt;: less than or greater than\n&lt;=, &gt;=: less than or equal to, great than or equal to\n&: and\n|: or\n!: not equal\nis.na: is NA\n\nYou can also layer your filtering. This can include in both an AND or OR fashion.\n\n# include diamonds that are bigger than 3 carats and a Premium cut\ndiamonds |&gt; \n  filter(carat &gt; 3 & cut == \"Premium\")\n\n# A tibble: 13 × 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67\n 2  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73\n 3  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66\n 4  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85\n 5  3.01 Premium G     SI2      59.8    58 14220  9.44  9.37  5.62\n 6  4.01 Premium I     I1       61      61 15223 10.1  10.1   6.17\n 7  4.01 Premium J     I1       62.5    62 15223 10.0   9.94  6.24\n 8  3.67 Premium I     I1       62.4    56 16193  9.86  9.81  6.13\n 9  3.01 Premium I     SI2      60.2    59 18242  9.36  9.31  5.62\n10  3.04 Premium I     SI2      59.3    60 18559  9.51  9.46  5.62\n11  3.51 Premium J     VS2      62.5    59 18701  9.66  9.63  6.03\n12  3.01 Premium J     SI2      60.7    59 18710  9.35  9.22  5.64\n13  3.01 Premium J     SI2      59.7    58 18710  9.41  9.32  5.59\n\n\n\n# include diamonds that are bigger than 3 carats OR a Premium cut\n# \"|\" (above the return key) is the symbol for \"or\"\ndiamonds |&gt; \n  filter(carat &gt; 3 | cut == \"Premium\")\n\n# A tibble: 13,810 × 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31\n 2  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63\n 3  0.22 Premium F     SI1      60.4    61   342  3.88  3.84  2.33\n 4  0.2  Premium E     SI2      60.2    62   345  3.79  3.75  2.27\n 5  0.32 Premium E     I1       60.9    58   345  4.38  4.42  2.68\n 6  0.24 Premium I     VS1      62.5    57   355  3.97  3.94  2.47\n 7  0.29 Premium F     SI1      62.4    58   403  4.24  4.26  2.65\n 8  0.22 Premium E     VS2      61.6    58   404  3.93  3.89  2.41\n 9  0.22 Premium D     VS2      59.3    62   404  3.91  3.88  2.31\n10  0.3  Premium J     SI2      59.3    61   405  4.43  4.38  2.61\n# ℹ 13,800 more rows\n\n\nYou can play around with combining these different operators to see what happens."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#practice-1",
    "href": "posts/S07E06_tidy_01/index.html#practice-1",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "10 Practice",
    "text": "10 Practice\n\n\n\n\n\n\nCreate a new dataframe called small_diamonds that includes only the diamonds that are less than 0.5 carats. How many diamonds does this include?\n\n\n\n\n\n\nsmall_diamonds &lt;- diamonds |&gt;\n  filter(carat &lt; 0.5)\n\nnrow(small_diamonds)\n\n[1] 17674\n\n\n\n\n\n\n\n\n\n\n\nSubset diamonds into a new df (diamonds_subset) so that it only includes diamonds less than $10,000, and only information for carat, cut, price, and color, in that specific order.\n\n\n\n\n\n\ndiamonds_subset &lt;- diamonds |&gt;\n  filter(price &lt; 10000) |&gt;\n  select(carat, cut, price, color) # select both picks and orders!\n\n\n\n\n\n\n\n\n\n\nWhat is the mean and standard deviation of carat of the diamonds that passed your critieria in diamonds_subset?\n\n\n\n\n\nUsing the $\n\n# mean\nmean(diamonds_subset$carat)\n\n[1] 0.6968262\n\n# sd\nsd(diamonds_subset$carat)\n\n[1] 0.3574645\n\n\nUsing the pipe\n\n# mean another way\ndiamonds_subset |&gt;\n  pull(carat) |&gt; # this is necessary because mean requires a vector!\n  mean()\n\n[1] 0.6968262\n\n# or you could go full pipe!\ndiamonds |&gt;\n  filter(price &lt; 10000) |&gt;\n  pull(carat) |&gt;\n  mean()\n\n[1] 0.6968262\n\n# sd another way\ndiamonds_subset |&gt;\n  pull(carat) |&gt; # this is necessary because mean requires a vector!\n  sd()\n\n[1] 0.3574645\n\n# or you could go full pipe!\ndiamonds |&gt;\n  filter(price &lt; 10000) |&gt;\n  pull(carat) |&gt;\n  sd()\n\n[1] 0.3574645\n\n\n\n\n\n\n\n\n\n\n\nHow many diamonds in this dataset are both Ideal cut, less than $10,000, and bigger than 1.5 carats??\n\n\n\n\n\nWhen you are trying to filter using “and” and have more than 2 items, use a comma in between them.\n\ndiamonds |&gt;\n  filter(price &lt; 10000, cut == \"Ideal\", carat &gt; 1.5) |&gt;\n  nrow()\n\n[1] 327"
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html",
    "href": "posts/S06E10_shiny_03/index.html",
    "title": "Shiny 03: Map viz. in Shiny",
    "section": "",
    "text": "Welcome to our shiny app development class! Throughout this session, Dr. Sandip Mondal will walk us through a case study to generate interactive maps using shiny app."
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html#shiny-app-to-visualize-maps.",
    "href": "posts/S06E10_shiny_03/index.html#shiny-app-to-visualize-maps.",
    "title": "Shiny 03: Map viz. in Shiny",
    "section": "1 Shiny App to visualize maps.",
    "text": "1 Shiny App to visualize maps.\nTo follow step-by-step what we will cover today in class, please refer to this Shiny App.\nDataset description: This dataset was created by Prof. Maxwell for use in his courses. A variety of attributes have been summarized at the county-level. A total of 3,104 records are provided representing the majority of the counties in the contiguous United States. A few counties were excluded due to their small size."
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html#types-of-spatial-data.",
    "href": "posts/S06E10_shiny_03/index.html#types-of-spatial-data.",
    "title": "Shiny 03: Map viz. in Shiny",
    "section": "2 Types of Spatial Data.",
    "text": "2 Types of Spatial Data.\nThere are two types of spatial data: vector and raster. Below is a graphical explanation of these data.\n\n\n\nType of Spatial Data (Ahmed, 2023)"
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html#what-do-we-expect-to-achieve-by-the-end-of-this-tutorial.",
    "href": "posts/S06E10_shiny_03/index.html#what-do-we-expect-to-achieve-by-the-end-of-this-tutorial.",
    "title": "Shiny 03: Map viz. in Shiny",
    "section": "3 What do we expect to achieve by the end of this tutorial.",
    "text": "3 What do we expect to achieve by the end of this tutorial.\nToday we will start with the output, understand the components of the shiny app and what we want achieve.\n\n\n\nDifferent parameters from Ohio, Pennsylvania, and Indiana in an interactive map."
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html#building-our-shiny-app.",
    "href": "posts/S06E10_shiny_03/index.html#building-our-shiny-app.",
    "title": "Shiny 03: Map viz. in Shiny",
    "section": "4 Building our Shiny App.",
    "text": "4 Building our Shiny App.\nLet’s make a shiny app and see how this works!\nFirst download the following files and set it to a working directory.\n\n#import libraries used in the APP\n#setwd(\"...map_data/\")  ### Please make sure to use your own working directory\nlibrary(shiny)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(htmlwidgets)\nlibrary(htmltools)\nlibrary(ggplot2)\nlibrary(bslib)\nus &lt;- st_read(\"data/map_data/OH_IN_PA.shp\") \nus &lt;- us %&gt;% filter(STATE_A=='OH'| STATE_A=='IN'| STATE_A =='PA')  ### Ohio, Indiana, Pennsylvania\nus &lt;- st_transform(us, crs=4326)\nclass(us)\nhead(us)\nplot(us[7])\n# fist graph on ggplot = Income (boxplot)\ninc_p &lt;- ggplot(us, aes(x=STATE_A, y=med_ncm, fill=STATE_A)) +\n  geom_boxplot() \n# second graph on ggplot = Temperature (densityplot)\ntemp_p &lt;- ggplot(us, aes(x=tempmn, ..density.., fill=STATE_A))+\n  geom_density(alpha=0.5)\n# third graph on ggplot = Population vs Development (scatterplot)\npop_p &lt;- ggplot(us, aes(x=POPULAT, y=per_dev, color= STATE_A, size= med_ncm))+\n  geom_point()\n#color palette for Temperature, Income and Population\ntemp_pal &lt;- colorBin(palette=\"YlOrRd\", domain=us$tempmn, bin=5)\npop_pal &lt;- colorNumeric(palette= 'Purples', domain= us$POPULAT)\nncm_pal &lt;- colorNumeric(palette= 'Greens', domain= us$med_ncm)\n\n\n# Define UI for the APP\n\nui &lt;- fluidPage(\n  theme = bs_theme(version = 4, bootswatch = \"spacelab\"), # theme from the library(bslib)\n  \n  titlePanel(h1(\"Ohio, Indiana and Pennsylvania\",align = \"center\", style = \"color:#0d793e\")), # Main title of the App use h1\n  br(),### break the line two times\n  br(),\n  tabsetPanel(#the tabset panel layout will include the three tab\n    \n    \n    # Tab 1: Data Exploration\n    \n    tabPanel(\"Data explorer\", # title of the first tab\n             br(), \n             fluidRow(\n               column(3,\n                      selectInput(inputId = \"countryInput1\", #unique input ID\n                                  label= \"Choose a State\",\n                                  choices = unique(us$STATE_N),\n                                  selected = \"Ohio\"), \n               ), \n             ),\n             hr(),\n             DT::dataTableOutput(\"table\") #output ID\n    ),\n    \n    #Tab 2: Visualization \n    \n    tabPanel(\"Sum plots\", #title of the second tab\n             br(), \n             sidebarLayout(#left section of the page used by the user to select input    \n               sidebarPanel(\n                 \n                 selectInput(inputId = 'inc_pop_temp',#unique input ID\n                             label = 'Select a variable',\n                             choices = c('',\"Income\", \"Population vs Development\", 'Median Temperature'), ),\n              \n               ),\n               mainPanel( # right section of the page \n                 plotOutput(\"boxplot\")#output ID\n               ))),\n    \n    #Tab 3: Interactive Map\n    \n    tabPanel(\"Interactive Map\", #title of the third tab  \n             sidebarLayout(    \n               sidebarPanel(#left section of the page used by the user to select input\n                 selectInput(inputId = \"countryInput\", #unique input ID\n                             label= \"Choose a State\",\n                             choices = unique(us$STATE_N),\n                             selected = \"Ohio\"),\n                 selectInput(inputId = \"varInput\", #unique input ID\n                             label= \"Choose a variable\",\n                             choices = c(\"Temperature\", 'Population', 'Income'))\n                 ,),\n               mainPanel(# right section of the page \n                 leafletOutput(\"map\", #output ID  \n                               width = \"100%\", height = \"500px\"))))  \n  ),)\n\n# Define server logic \n\nserver &lt;- function(input, output) {\n  \n  selectedCountry1 &lt;- reactive({#reactive expression for the Data Explorer\n    us[us$STATE_N == input$countryInput1, ] #match input of the user with the state name\n  })\n  \n  selectedCountry &lt;- reactive({ #reactive expression for the Interactive Map\n    us[us$STATE_N == input$countryInput, ] #match input of the user with the state name\n  })\n  \n  output$table &lt;- DT::renderDataTable({ #Data Explorer tab output\n    \n    data = selectedCountry1()\n    \n  })\n  \n  output$boxplot &lt;- renderPlot({ #Visualization tab output\n    if (input$inc_pop_temp %in% \"Income\") # If input of the user is Income\n    {inc_p} #then print Income graph\n    else if (input$inc_pop_temp %in% \"Median Temperature\")# If input of the user is Median Temperature\n    {temp_p} #then print Temperature graph\n    \n    else if (input$inc_pop_temp %in% \"Population vs Development\")# If input of the user is Pop vs Dev\n    {pop_p} #then print Pop vs Dev graph\n    \n  })\n  \n  output$map &lt;- renderLeaflet({#Interactive Map tab output\n    leaflet('map', #base map\n            options = leafletOptions(zoomControl= FALSE)) %&gt;%\n      \n      htmlwidgets::onRender(\"function(el, x) {\n      L.control.zoom({ position: 'topright' }).addTo(this)\n  }\") %&gt;%\n      addTiles(group = \"OSM\") %&gt;%\n      \n      addProviderTiles(\"Esri.NatGeoWorldMap\", group=\"ESRI\") %&gt;%\n      \n      addProviderTiles(\"CartoDB.DarkMatter\", group= \"CartoDB\") %&gt;%\n      addLayersControl(baseGroups = c(\"CartoDB\",\"OSM\", \"ESRI\")) %&gt;%\n      \n      addLegend(position=\"bottomright\", pal=temp_pal, values=us$tempmn, title=\"Temperature\")%&gt;%\n      addLegend(position=\"bottomright\", pal=pop_pal, values=us$POPULAT, title=\"Population\")%&gt;%\n      addLegend(position=\"bottomleft\", pal=ncm_pal, values=us$med_ncm, title=\"Income in $\")%&gt;%\n      setView(lat= 39, lng=-80, zoom=6)\n  })\n  \n  observe({#observer\n    \n    state_popup &lt;- paste0(\"&lt;strong&gt;County: &lt;/strong&gt;\", #popup \n                          selectedCountry()$NAME,\n                          \"&lt;br&gt;&lt;strong&gt; Temperature: &lt;/strong&gt;\",\n                          round(selectedCountry()$tempmn,1),\"&#x2103\",\n                          \"&lt;br&gt;&lt;strong&gt; Median Income: &lt;/strong&gt;\",\n                          selectedCountry()$med_ncm,'$',\n                          \"&lt;br&gt;&lt;strong&gt; Population: &lt;/strong&gt;\",\n                          selectedCountry()$POPULAT)\n    \n    high_opt &lt;- highlightOptions(weight = 3, color = \"white\", bringToFront = FALSE) #highlight when user select county\n    \n    if (input$varInput %in% \"Temperature\") {\n      leafletProxy(\"map\", data = selectedCountry()) %&gt;%\n        #understand when to clearshapes\n        # clearShapes() %&gt;%\n        addPolygons(fillColor =  temp_pal(selectedCountry()$tempmn),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n    }\n    else if (input$varInput %in% \"Income\") {\n      leafletProxy(\"map\", data = selectedCountry()) %&gt;%\n        #understand when to clearshapes\n        # clearShapes() %&gt;%\n        \n        addPolygons(fillColor =  ncm_pal(selectedCountry()$med_ncm),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n      \n    }\n    else if (input$varInput %in% \"Population\") {\n      leafletProxy(\"map\", data = selectedCountry()) %&gt;%\n        #understand when to clearshapes\n        # clearShapes() %&gt;%\n        addPolygons(fillColor =  pop_pal(selectedCountry()$POPULAT),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n    }\n    \n    \n  })\n  \n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html",
    "href": "posts/S06E08_shiny_01/index.html",
    "title": "Shiny 01: Intro to Shiny",
    "section": "",
    "text": "Welcome to our shiny app development class! Throughout this session, we will dive into the world of Shiny and explore its incredible potential for creating interactive web applications.\nBy the end of this session, you will have a solid understanding of what Shiny is and how it can be utilized to build dynamic apps. We will also focus on mastering the basic structure of a Shiny app, equipping you with the necessary skills to create your own customized applications."
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#the-user-interface-section-structure",
    "href": "posts/S06E08_shiny_01/index.html#the-user-interface-section-structure",
    "title": "Shiny 01: Intro to Shiny",
    "section": "2.1 The User Interface Section Structure",
    "text": "2.1 The User Interface Section Structure\nThe user interface, commonly referred to as the “front end” of an application, is the visual and interactive aspect that users encounter. It is typically organized into several sections: titlePanel(), sidebarPanel(), and mainPanel(). In order to establish this structure, the code must be organized into sections that are constructed with functions, as demonstrated below.\n\n\n\nBasic ui (User Interface) code structure (Higgins 2023)\n\n\nThe code required to achieve this follows a similar hierarchy, as depicted in the figure below.\n\n\n\nUser Interface (ui) hierarchy code structure (Higgins 2023)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#the-server-section-structure",
    "href": "posts/S06E08_shiny_01/index.html#the-server-section-structure",
    "title": "Shiny 01: Intro to Shiny",
    "section": "2.2 The Server Section Structure",
    "text": "2.2 The Server Section Structure\nThe server section of an app, also known as the “back end”, is where data processing takes place. Users don’t see this part but it handles inputs from the user and generates outputs such as model predictions or tables. These results are rendered to HTML and assigned to unique output values.\n\n\n\nBasic server code structure (Higgins 2023)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#how-to-run-a-shiny-app",
    "href": "posts/S06E08_shiny_01/index.html#how-to-run-a-shiny-app",
    "title": "Shiny 01: Intro to Shiny",
    "section": "2.3 How to Run a Shiny App",
    "text": "2.3 How to Run a Shiny App\nThe code required to run a Shiny app is always the same and quite straightforward. The shinyApp() function takes two arguments: the user interface (ui) and the server code (server) that are being used.\n\n\n\nExecuting and running a Shiny App (Higgins 2023)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#how-to-stop-a-shiny-app",
    "href": "posts/S06E08_shiny_01/index.html#how-to-stop-a-shiny-app",
    "title": "Shiny 01: Intro to Shiny",
    "section": "2.4 How to Stop a Shiny App",
    "text": "2.4 How to Stop a Shiny App\nTo stop your app, you have several options:\n\nClick the stop sign icon located on the toolbar of the R Console pane.\nClose the Shiny app window.\nClick within the Console pane and then press Esc (or Ctrl-C if using the command line) to halt it."
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#lets-complete-each-section.",
    "href": "posts/S06E08_shiny_01/index.html#lets-complete-each-section.",
    "title": "Shiny 01: Intro to Shiny",
    "section": "3.1 Let’s Complete Each Section.",
    "text": "3.1 Let’s Complete Each Section.\n\nCall shiny into R environment\n\n\nlibrary(shiny)\n\n\nLet’s complete some of the sections:\n\n\nui &lt;- fluidPage( \n  titlePanel(title = \"This is my First Shiny App\"), \n  sidebarLayout( \n    sidebarPanel(\"This is the sidebar panel.\"), \n    mainPanel(\"This is the main panel, where output is displayed.\") \n    ) \n  )\n\n\nWe have no input, so, we just need the basic server function.\n\n\nserver &lt;- shinyServer(\n  function(input,output){ \n    } \n  )\n\n\nLet’s run our Shiny App!\n\n\nshinyApp(ui=ui, server=server)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#lets-make-some-modifications.",
    "href": "posts/S06E08_shiny_01/index.html#lets-make-some-modifications.",
    "title": "Shiny 01: Intro to Shiny",
    "section": "3.2 Let’s Make Some Modifications.",
    "text": "3.2 Let’s Make Some Modifications.\n\n#1. Load your library, always.\nlibrary(shiny)\n\n#2. Let’s fill some of the sections\nui&lt;-fluidPage(\n  titlePanel(title = \"This is my First Shiny App\"), \n  sidebarLayout(position = \"right\",\n                sidebarPanel(h3(\"This is sidebar panel.\"), h4(\"Notice the sidebar is displayed on the right.\"), h5(\"But looked better on the left side.\")),\n                mainPanel(h4(\"This is the main panel, where output is displayed.\"),\n                          h5(\"This is additional explanation about the output.\"))\n  )\n)\n\n#3. We have no input, so, we just need the basic server function\nserver&lt;-shinyServer(\n  function(input,output){\n  }\n)\n\n#4. Let’s run the app\nshinyApp(ui=ui, server=server)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#lets-include-text-input",
    "href": "posts/S06E08_shiny_01/index.html#lets-include-text-input",
    "title": "Shiny 01: Intro to Shiny",
    "section": "3.3 Let’s Include Text Input",
    "text": "3.3 Let’s Include Text Input\n\nlibrary(shiny)\n\nui&lt;- fluidPage(\n  titlePanel(\"Our First Shiny App\"), \n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"name\", \"Enter your first and last name\"),\n      textInput(\"email\", \"Enter your email\"),\n      selectInput(\"country\", \"Select the country you live in\", choices = c(\"\", \"Australia\", \"Germany\", \"India\", \"Paraguay\", \"UK\", \"USA\"))\n    ),\n    mainPanel(\n      paste(\"Your contact information\"),\n      textOutput(\"name\"),\n      textOutput(\"email\"),\n      textOutput(\"country\")\n    ) \n  )  \n)\n\nserver&lt;- shinyServer(function(input, output){\n  output$name&lt;- renderText({\n    paste(input$name)\n  })\n  output$email&lt;-renderText({\n    paste(input$email)\n  })\n  output$country&lt;-renderText({\n    paste(input$country)\n  })\n})\n\nshinyApp(ui=ui, server = server)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to the new Code Club website!",
    "section": "",
    "text": "Code Club has a new website, made with Quarto!\nWe were previously on the “BioDASH” website, which also contained some educational bioinformatics material unrelated to Code Club.\nThat website was created using R Markdown and “Hugo”. A lot has happened in the realm of R Markdown websites in the meantime, and even R Markdown itself now has a successor: Quarto.\nIn the AU23 semester, we will teach making a website with Quarto, and we therefore think it is fitting that the Code Club website itself is also made with Quarto. Additionally, we think it will be nice to have a website just for Code Club content.\nIn the SP24 semester, we will be teaching the basics of R from the beginning, no previous experience required.\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/S06E06_website_07/index.html",
    "href": "posts/S06E06_website_07/index.html",
    "title": "Quarto website 7: making a presentation",
    "section": "",
    "text": "1 Introduction\nToday we are going to learn how to make a presentation using Quarto. We will go over how to:\n\nCreate a Quarto presentation document\nAlter the YAMl to change your theming\nCreate slides\n\nHere you can find a demo presentation that will show you some of the options of things you can do in a Quarto presentation.\n\n\n2 Create a Quarto presentation\nOpen the project that contains your website. Then go to File &gt; New File &gt; Quarto Presentation. We are going to render our prsentation into a Reveal JS format (kind of like the presentation equivalent of .html). This is an open source .html format for presentations. Since we’ve been using the visual markdown editor, check the box to use it now.\n\nSave this file in your website directory.\n\n\n3 The YAML\nWe will first look at the YAML.\ntitle: \"My practice presentation\"\nauthor: \"Jessica Cooperstone\"\nformat: revealjs\neditor: visual\nLet’s render the .qmd file to see what it looks like.\n\nIn your viewer, if you click on the hamburger in the bottom left corner, we can see:\n\nSlides: here we have our first slide, and an empty second slide\nTools: which let’s us view the slides in different way, and export them as a pdf\nClose: which just gets us out of this view\n\nWe can adjust our YAML to change the themeing of our slides by setting key:value pairs under format. Here are some that I’ve set which renders like this:\ntitle: \"My practice presentation\"\nauthor: \"Jessica Cooperstone\"\nformat: \n  revealjs:\n    slide-number: true\n    logo: \"img/my-image.png\"\n    footer: \"I ❤️ [Code Club](https://osu-codeclub.github.io/)\"\n    theme: moon\n    echo: true\n\nJust like there are\n\nslide-number can be true or false, and there are different formats of numbering to pick from.\nlogo allows you to specify a logo which will appear on the bottom right of your slide, I’ve selected an image of the code slash\nfooter sets a footer which appears in the middle of your slides\ntheme can be set a preset themes for a presentation. Click here to see the full list. You can also set a theme by providing a .scss. file.\necho: true means by default all code will be shown, this is the default\n\nYou can find the full list of all the options for revealjs here.\nThe settings of your YAML will inherit for your whole presentation, unless you override any options for an individual slide.\n\n\n\n\n\n\nLet’s all try playing around with our YAML.\n\n\n\n\n\n\n\n\n4 Creating slides\nYou can add a slide by creating a level 2 header (by using two hashtags), or if you’re in the visual editor, you can click on Normal &gt; Header 2. This will insert a slide.\n\nIf we toggle back to Source you can see that just two ## have been added. You might find typing this easier than setting a Header 2.\nWhat we type here in Heading 2 will be the title of our slide.\n\nIf you wanted to make a bulleted list, you can use the visual editor to insert bullets, and add some content.\n\nTry rendering this to see what happens.\n\nIf you click back and forth in your viewer, you will see that both items in the bulleted list appear together. If you want bullets to populate one at a time, you can set incremental: true in your YAML, or if you just want the bullets to increment in this slide only, you can set it by clicking on the three dots on the right of your slide, and setting Classes to be .incremental. You can learn more about incremental lists here. If you toggle between the visual and source editor, you can see what code you’d need to type to get your bullets to be incremental.\n\nThis is what your incremented slide would look like in the source editor.\n## The title of my second slide\n\n::: incremental\n-   The first item in my list\n-   A second item in my list\n:::\nOne of the main reasons you might want to create a Quarto presentation is because you want to show code. Just like we talked about last week, you can add a code chunk by clicking Insert &gt; Executable cell &gt; R to add an R code chunk.\nYou can type whatever code you want, here I am putting in some code that makes a plot. I am setting at the top of the chunk that I want the output to be on the next slide, since the code is a little long and the plot is a little big.\nA the top of a code chunk, you can set the options for that chunk after #| at the top of that chunk.\n#| output-location: slide\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins %&gt;%\n  ggplot(aes(x = species, y = flipper_length_mm, color = species)) +\n  geom_boxplot() +\n  geom_jitter() + \n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = \"Penguin species\",\n       y = \"Flipper length, in mm\",\n       title = \"Penguin flipper length by species\")\nWhen this renders, it looks like this:\n\n\nWe can also make it so that the code is collapsable, like this:\n#| code-fold: true\n#| code-summary: \"Click for the full code\"\n\npenguins %&gt;%\n  ggplot(aes(x = species, y = flipper_length_mm, color = species)) +\n  geom_boxplot() +\n  geom_jitter() + \n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = \"Penguin species\",\n       y = \"Flipper length, in mm\",\n       title = \"Penguin flipper length by species\")\nWhen rendered, it looks like this:\n\n\n\n\n\n\n\nLet’s all try playing around with creating slides and modifying them. Is there anything specific anyone wants to know how to do?\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#introduction",
    "href": "posts/S07E07_tidy_02/index.html#introduction",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of last week\nLast week, Jess introduced us to to the tidyverse, a collection of packages to facilitate doing data science with R, including data manipulation and visualization.\nWe saw two general properties of the tidyverse: that it has a strong focus on data frames and that operations are usually connected using the “pipe” (|&gt;) operator.\nWe also learned about two key functions from the tidyverse’s dplyr package:\n\nfilter() to pick rows (which typically represent observations/samples/individuals)\nselect() to pick columns (which typically represent variables/properties)\n\n\n\nLearning objectives for today\nWe will continue learning about dplyr:\n\nAn overview of key dplyr functionality\nSorting data frame rows with arrange()\nRenaming data frame columns with rename()\nAdding and manipulating data frame columns with mutate()\n\nLike last week, we will practice with the diamonds dataframe that is automatically loaded along with the tidyverse.\n\n\nSetting up\nLoad the tidyverse:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\nStill need to install the tidyverse? Click here for instructions\n\n\n\n\n\n\ninstall.packages(\"tidyverse\")"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#overview-of-key-dplyr-functionality",
    "href": "posts/S07E07_tidy_02/index.html#overview-of-key-dplyr-functionality",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "2 Overview of key dplyr functionality",
    "text": "2 Overview of key dplyr functionality\nFunctions from the dplyr package have the following commonalities:\n\nThe first argument is always a data frame (this makes them pipe-friendly)\nSubsequent arguments typically describe which columns to operate on\nThe output is always a data frame\n\n\nKey functions for row-wise operations include:\n\nfilter() — picks rows based on values in one or more columns (last week)\narrange() — orders rows based on values in selected columns (this week)\n\nKey functions for column-wise operations include:\n\nselect() — picks columns (last week)\nrename() — changes column names (this week)\nmutate() — creates new columns and changes the values of columns (this week)\n\nKey functions for groups of rows include:\n\nsummarise() — collapses a group into a single row with the purpose of summarizing data\n\nFinally, there are functions to combine multiple data frames (joins, with for example inner_join()).\n\nThis week, we will cover the remaining functions listed above for row- and column-wise operations. In subsequent sessions, we will cover the more complex summarizing and joining functions.\n\n\n\n\n\n\nThe tidyr package contains additional data wrangling functions\n\n\n\nThere is a separate core tidyverse package (tidyr) with closely related functions that can “reshape” (“pivot”) data frames between wider and longer formats — we will also cover those in a later dedicated Code Club session."
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#sorting-with-arrange",
    "href": "posts/S07E07_tidy_02/index.html#sorting-with-arrange",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "3 Sorting with arrange()",
    "text": "3 Sorting with arrange()\nThe arrange() function is like the sort function in Excel: it changes the order of the rows based on the values in one or more columns. For example, you might want to sort entries by their cost or size, or by their names in alphabetical order.\nWe’ll see a first example using the diamonds data frame. Keep in mind that in this data frame, each row represents a single diamond, and the columns provide different pieces of information about a diamond:\n\n# Note the initial order in the 'carat' column:\nhead(diamonds)\n\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n\n\nTherefore, sorting this data frame means rearranging the order of the diamonds based on their properties — in the example below, based on the carat of the diamond:\n\n# Now, we'll sort by the values in the 'carat' column:\ndiamonds |&gt;\n  arrange(carat)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n 2   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26\n 3   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24\n 4   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32\n 5   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28\n 6   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 \n 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33\n 8   0.2 Ideal     D     VS2      61.5    57   367  3.81  3.77  2.33\n 9   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36\n10   0.2 Ideal     E     VS2      62.2    57   367  3.76  3.73  2.33\n# ℹ 53,930 more rows\n\n\n\nAs you can see, there are many rows with the same, smallest value of carat, so we may be interested in sorting by an additional column, which will break the ties in our first sorting column:\n\n# Sort first by carat, then by cut:\ndiamonds |&gt;\n  arrange(carat, cut)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36\n 2   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n 3   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26\n 4   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24\n 5   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32\n 6   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28\n 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33\n 8   0.2 Premium   D     VS2      62.3    60   367  3.73  3.68  2.31\n 9   0.2 Premium   D     VS2      61.7    60   367  3.77  3.72  2.31\n10   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 \n# ℹ 53,930 more rows\n\n\n\n\n\nQuestion: Does the resulting order of entries in the cut column make sense to you? If not, what might be going on? (Click to see the solution)\n\nClearly, the order is not alphabetical, but it could be so in descending order — though this is not in fact the case.\nAs we briefly saw last week, the cut column (as well as the color and clarity columns) are of the “ordered factor” type: therefore, when we sort by this column, the order as initially defined by whoever created this data frame will be respected:\n\nhead(diamonds$cut)\n\n[1] Ideal     Premium   Good      Premium   Good      Very Good\nLevels: Fair &lt; Good &lt; Very Good &lt; Premium &lt; Ideal\n\n\nThis also implies that there are no 0.2-carat (the lowest value) diamonds with Fair or Good cuts, because the first-listed and therefore lowest cut was Very Good.\n\n\nBy default, the sorting is done in ascending order (small-to-big), as you probably expected. But of course we may sometimes want to sort in descending (big-to-small) order, which we can do with the desc() helper function:\n\n# Sort first by carat, then by price:\ndiamonds |&gt;\n  arrange(desc(carat))\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98\n 2  4.5  Fair      J     I1       65.8    58 18531 10.2  10.2   6.72\n 3  4.13 Fair      H     I1       64.8    61 17329 10     9.85  6.43\n 4  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17\n 5  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24\n 6  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31\n 7  3.67 Premium   I     I1       62.4    56 16193  9.86  9.81  6.13\n 8  3.65 Fair      H     I1       67.1    53 11668  9.53  9.48  6.38\n 9  3.51 Premium   J     VS2      62.5    59 18701  9.66  9.63  6.03\n10  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03\n# ℹ 53,930 more rows\n\n\n\n\n\n\n\n\nSaving the output?\n\n\n\nIn the examples above, and in all of today’s examples and exercises, we are simply printing the output data frame. This means that we are leaving the original data frame diamonds unchanged and that we are not storing our results elsewhere either.\nRecall that you can assign to a new dataframe as one way to store your results:\n\ndiamonds_sorted &lt;- diamonds |&gt;\n  arrange(carat)"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#renaming-columns-with-rename-and-select",
    "href": "posts/S07E07_tidy_02/index.html#renaming-columns-with-rename-and-select",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "4 Renaming columns with rename() (and select())",
    "text": "4 Renaming columns with rename() (and select())\nIt is pretty common that you are not happy with the names of columns in your data frame and want to rename one or more. This can be done with the rename() function, which uses the syntax &lt;new-name&gt; = &lt;old-name&gt;:\n\n# Below, we rename the 'x' column to 'length', and the 'y' column to 'width':\ndiamonds |&gt;\n  rename(length = x, width = y)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price length width     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326   3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326   3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327   4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334   4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335   4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336   3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336   3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337   4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337   3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338   4     4.05  2.39\n# ℹ 53,930 more rows\n\n\nAs an aside, it is also possible rename the columns that you pick with the select() function:\n\ndiamonds |&gt;\n  select(length = x, width = y, z)\n\n# A tibble: 53,940 × 3\n   length width     z\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1   3.95  3.98  2.43\n 2   3.89  3.84  2.31\n 3   4.05  4.07  2.31\n 4   4.2   4.23  2.63\n 5   4.34  4.35  2.75\n 6   3.94  3.96  2.48\n 7   3.95  3.98  2.47\n 8   4.07  4.11  2.53\n 9   3.87  3.78  2.49\n10   4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n\n\n\n\n\n\n\nNeed to rename many columns?\n\n\n\nIf your data frame has many columns that need to be renamed, the janitor::clean_names() function provides automated column name cleaning that can be extremely handy.\nFor example, you might read in an Excel sheet with 20 columms, many of which have spaces in their names, and some of which have other special characters like % or &. Those kinds of column names don’t play well with R, and clean_names() would automatically replace such characters with (by default) underscores (_).\nYou can try this function in the last Bonus exercise."
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#exercises-i",
    "href": "posts/S07E07_tidy_02/index.html#exercises-i",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "5 Exercises I",
    "text": "5 Exercises I\n\n5.1 Renaming\nAbove, we renamed the cryptically named x and y columns, but there’s a third single-letter column name: z.\n\nCheck the help for this data frame by typing ?diamonds, and figure out what the z column represents.\nRename the z column to give it a more descriptive name like we did above for x and y. (You may run into a problem here! If so, try to understand and resolve it.)\n\n\n\nSolution (click here)\n\n\nThe z column represents the depth of the diamond in mm:\n\n\n?diamonds\n\n# The output will include:\n\nz\n    depth in mm (0–31.8)\n\ndepth\n    total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79)\n\n\nSo let’s try to rename it to depth:\n\n\ndiamonds |&gt;\n  rename(depth = z)\n\nError in `rename()`:\n! Names must be unique.\n✖ These names are duplicated:\n  * \"depth\" at locations 5 and 10.\n\n\nOuch! That didn’t work, because a column named depth already exists, and column names must be unique. That other depth column is the diamond’s “total depth percentage” rather than the raw depth.\nThere’s no one right way to resolve this (and of course one option would be to refrain from renaming z altogether), but we could for example use depth_mm etc. notations for these columns:\n\ndiamonds |&gt;\n  rename(length_mm = x, width_mm = y, depth_mm = z)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price length_mm width_mm depth_mm\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43\n 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31\n 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31\n 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63\n 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47\n 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53\n 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49\n10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39\n# ℹ 53,930 more rows\n\n\n\n\n\n\n5.2 Arranging\nSee the prices (and other properties) of the most expensive diamonds in the data frame by using the arrange() function like we did above.\n\n\nSolution (click here)\n\nTo see the most expensive (highest-priced) diamond first, we’ll have to arrange by the price column in descending order:\n\ndiamonds |&gt;\n  arrange(desc(price))\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16\n 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04\n 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56\n 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11\n 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01\n 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24\n 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84\n 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91\n 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 \n10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#manipulating-with-mutate",
    "href": "posts/S07E07_tidy_02/index.html#manipulating-with-mutate",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "6 Manipulating with mutate()",
    "text": "6 Manipulating with mutate()\nLet’s take a look at the official mutate() documentation figure (😛):\n\n\n\nIllustration by Allison Horst\n\n\nIt says “add column(s), keep existing” and shows that a third column, C, is being added to a data frame.\n\n\nWhat do the values in column C appear to represent (compare with A and B)? (Click for the solution)\n\nColumn C appears to be columns A + B, e.g in the first row, 1 + 2 = 3.\n\nLet’s try to do something similar –creating a new column that is based on the values of other columns– with diamond dimensions. We’ll add a column named volume that is generated by multiplying the length, width, and depth columns:\n\n# (I'm first using select just to limit the output that is printed)\ndiamonds |&gt;\n  select(x, y, z) |&gt;\n  mutate(volume = x * y * z)\n\n# A tibble: 53,940 × 4\n       x     y     z volume\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1  3.95  3.98  2.43   38.2\n 2  3.89  3.84  2.31   34.5\n 3  4.05  4.07  2.31   38.1\n 4  4.2   4.23  2.63   46.7\n 5  4.34  4.35  2.75   51.9\n 6  3.94  3.96  2.48   38.7\n 7  3.95  3.98  2.47   38.8\n 8  4.07  4.11  2.53   42.3\n 9  3.87  3.78  2.49   36.4\n10  4     4.05  2.39   38.7\n# ℹ 53,930 more rows\n\n\nAs you could see in above examples, the operation is executed in a (vectorized) row-wise fashion: the volume that we see in the first row was created by multiplying x, y and z in the first row, and so on.\nAlso note that the new column created by mutate() is (by default) added as the last column.\n\n\nInstead of creating a new column with mutate(), it is also possible to simply change the values in a column (without creating a new column) by assigning back to the same column name. For example, say that we wanted diamond length to be in cm instead of in mm:\n\ndiamonds |&gt;\n  select(x, y, z) |&gt;\n  mutate(x = x / 10)\n\n# A tibble: 53,940 × 3\n       x     y     z\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 0.395  3.98  2.43\n 2 0.389  3.84  2.31\n 3 0.405  4.07  2.31\n 4 0.42   4.23  2.63\n 5 0.434  4.35  2.75\n 6 0.394  3.96  2.48\n 7 0.395  3.98  2.47\n 8 0.407  4.11  2.53\n 9 0.387  3.78  2.49\n10 0.4    4.05  2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#exercises-ii",
    "href": "posts/S07E07_tidy_02/index.html#exercises-ii",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "7 Exercises II",
    "text": "7 Exercises II\n\n7.1 More unit conversion\nAbove, we converted the diamond lengths (column x) from mm to cm.\n\nExpand on that code to convert all three dimension columns (x, y, and, z).\nAlso give the converted columns names that indicate the measurements are in cm.\n\n\n\nSolution so far (click here)\n\nSeveral naming schemes are reasonable, but I will use length_cm etc:\n\ndiamonds |&gt;\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10)\n\n# A tibble: 53,940 × 13\n   carat cut       color clarity depth table price     x     y     z length_cm\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43     0.395\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31     0.389\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31     0.405\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63     0.42 \n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75     0.434\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48     0.394\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47     0.395\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53     0.407\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49     0.387\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39     0.4  \n# ℹ 53,930 more rows\n# ℹ 2 more variables: width_cm &lt;dbl&gt;, depth_cm &lt;dbl&gt;\n\n\n\n\n\nNext, expand your “pipeline” to either remove the columns with mm measurements, or rename the original x, y, and z columns to clarify that those are in mm.\n\n\n\nHint: how to remove specific columns with select() (click here)\n\nIf you just want to remove one or a few columns from a data frame with many columns, you’d want to be able to directly mark them for removal (rather than listing all columns you want to keep), which you can do as follows:\n\n# This will remove the carat and cut columns:\ndiamonds |&gt;\n  select(-carat, -cut)\n\n# A tibble: 53,940 × 8\n   color clarity depth table price     x     y     z\n   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 E     SI2      61.5    55   326  3.95  3.98  2.43\n 2 E     SI1      59.8    61   326  3.89  3.84  2.31\n 3 E     VS1      56.9    65   327  4.05  4.07  2.31\n 4 I     VS2      62.4    58   334  4.2   4.23  2.63\n 5 J     SI2      63.3    58   335  4.34  4.35  2.75\n 6 J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7 I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8 H     SI1      61.9    55   337  4.07  4.11  2.53\n 9 E     VS2      65.1    61   337  3.87  3.78  2.49\n10 H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n\n\n\nFull solution (click here)\n\n\nOption 1 — remove the columns with mm measurements:\n\n\n# (Note that the final 2 added columns are hidden in the output!)\ndiamonds |&gt;\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10) |&gt;\n  select(-x, -y, -z)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price length_cm width_cm depth_cm\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326     0.395    0.398    0.243\n 2  0.21 Premium   E     SI1      59.8    61   326     0.389    0.384    0.231\n 3  0.23 Good      E     VS1      56.9    65   327     0.405    0.407    0.231\n 4  0.29 Premium   I     VS2      62.4    58   334     0.42     0.423    0.263\n 5  0.31 Good      J     SI2      63.3    58   335     0.434    0.435    0.275\n 6  0.24 Very Good J     VVS2     62.8    57   336     0.394    0.396    0.248\n 7  0.24 Very Good I     VVS1     62.3    57   336     0.395    0.398    0.247\n 8  0.26 Very Good H     SI1      61.9    55   337     0.407    0.411    0.253\n 9  0.22 Fair      E     VS2      65.1    61   337     0.387    0.378    0.249\n10  0.23 Very Good H     VS1      59.4    61   338     0.4      0.405    0.239\n# ℹ 53,930 more rows\n\n\n\nOption 2 — also keep the cm columns, but rename them:\n\n\ndiamonds |&gt;\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10) |&gt;\n  rename(length_mm = x,\n         width_mm = y,\n         depth_mm = z)\n\n# A tibble: 53,940 × 13\n   carat cut       color clarity depth table price length_mm width_mm depth_mm\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43\n 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31\n 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31\n 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63\n 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47\n 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53\n 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49\n10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39\n# ℹ 53,930 more rows\n# ℹ 3 more variables: length_cm &lt;dbl&gt;, width_cm &lt;dbl&gt;, depth_cm &lt;dbl&gt;\n\n\n\n\n\n\n7.2 Price per carat\nInclude the following steps in a single “pipeline”:\n\nAdd a new column with the price per carat, rounded to whole dollars.\nSort by price per carat in descending order\nOnly keep diamonds with a price per carat above $5,000.\n\nWhat is the highest price per carat, and how many diamonds are you left with?\n\n\nSolution (click here)\n\nWe are left with 13,115 rows and the highest price per carat is $17,829:\n\ndiamonds |&gt;\n  mutate(price_per_carat = round(price / carat)) |&gt;\n  arrange(desc(price_per_carat)) |&gt; \n  filter(price_per_carat &gt; 5000)\n\n# A tibble: 13,115 × 11\n   carat cut   color clarity depth table price     x     y     z price_per_carat\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;\n 1  1.04 Very… D     IF       61.3    56 18542  6.53  6.55  4.01           17829\n 2  1.07 Prem… D     IF       60.9    58 18279  6.67  6.57  4.03           17083\n 3  1.03 Ideal D     IF       62      56 17590  6.55  6.44  4.03           17078\n 4  1.07 Very… D     IF       60.9    58 18114  6.57  6.67  4.03           16929\n 5  1.02 Very… D     IF       61.7    59 17100  6.42  6.52  3.99           16765\n 6  1.07 Very… D     IF       59      59 17909  6.63  6.72  3.94           16737\n 7  1.09 Very… D     IF       61.7    58 18231  6.55  6.65  4.07           16726\n 8  1    Ideal D     IF       60.7    57 16469  6.44  6.48  3.92           16469\n 9  1    Very… D     IF       63.3    59 16073  6.37  6.33  4.02           16073\n10  1.01 Prem… D     IF       61.6    56 16234  6.46  6.43  3.97           16073\n# ℹ 13,105 more rows\n\n\n\n\n\n\n7.3 Bonus: Renaming columns with janitor::clean_names()\n\nInstall and then load the package janitor.\n\n\n\nSolution (click here)\n\n\nInstall:\n\n\ninstall.packages(\"janitor\")\n\n\nLoad:\n\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\n\nRun the following code to create a “tibble” (tidyverse-style dataframe) with poor column names:\n\n\n# (The backticks ` around the column names are necessary to assign such unwieldy names)\nsale_stats &lt;- tibble(\n  `Abbreviated ID` = c(\"DZ\", \"GA\", \"PT\"),\n  `% Sold` = c(62, 98, 18),\n  `Nr Stored` = c(372, 13, 175),\n  `Lost&Found` = c(0, 0, 2)\n)\n\n\nPrint the sale_stats data frame and take a look at how the column names are shown.\n\n\n\nSolution (click here)\n\n\nsale_stats\n\n# A tibble: 3 × 4\n  `Abbreviated ID` `% Sold` `Nr Stored` `Lost&Found`\n  &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n1 DZ                     62         372            0\n2 GA                     98          13            0\n3 PT                     18         175            2\n\n\n\n\nRun the clean_names() function on the sale_stats data frame. (It will take a data frame as its first argument and return a dataframe, much like the dplyr functions we’ve seen). Take a close look at the output — can you spot at least 3 types of changes that it made?\n\n\n\nSolution (click here)\n\n\nsale_stats |&gt; clean_names()\n\n# A tibble: 3 × 4\n  abbreviated_id percent_sold nr_stored lost_found\n  &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 DZ                       62       372          0\n2 GA                       98        13          0\n3 PT                       18       175          2\n\n\nOr equivalently (output not shown):\n\nclean_names(sale_stats)\n\nThe clean_names() function made the following changes to the column names:\n\nSpaces were converted to underscores\nThe & was converted to an underscore\nThe % was converted to percent (!)\nUppercase (capital) letters were converted to lowercase"
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#introduction",
    "href": "posts/S06E06_website_06/index.html#introduction",
    "title": "Quarto website 6: Quarto features",
    "section": "1 Introduction",
    "text": "1 Introduction\nThe source documents for your website’s pages are in the Quarto (.qmd) format. Today, we will learn more about options to format Quarto documents, and to include code and its output.\nAs we have mentioned before, Quarto is a type of Markdown format (and essentially the successor to “R Markdown”) with extensions such as:\n\nMaking it possible to include executable code and its results. This code will typically be R code, but Quarto also supports Python, for instance.\nA more extensive set of built-in formatting options, like “callout boxes” and “tabsets”, which we’ll see today.\n\nYour website’s Quarto documents will all produce HTML output, and this is also the default (and generally preferred) output format for stand-alone Quarto documents, but it is also possible to output to Word and PDF formats.\nA common use case for stand-alone Quarto documents is a digital notebook or report that includes results produced by R code. If you use R to produce some results and/or figures that you need to share or compile with accompanying notes, then using Quarto to do so is a lot easier, more robust, and reproducible than copying and pasting figures into (e.g.) a Powerpoint document.\nBecause it’s straightforward to make the output look polished, and because you can include citations too, it is also a good option for more formal reports and even manuscripts. As mentioned last week, you can also output a slide deck, and it is even possible to include these directly on your website since the output format for slides can be HTML.\nWe will continue to use RStudio’s Visual Editor, and will basically make our way through the options in the bar that is right above your main editor window (but only when you’re in “Visual” mode):\n\n\n\n\n\n\n1.1 Creating a document for practice\nI will start by creating a new Quarto document to practice using these features. If you want to follow along:\n\nIn RStudio, click “File” =&gt; “New File” =&gt; “Quarto Document”.\nCheck the box “Use visual markdown editor”, and optionally add a Title and an Author."
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#sec-introduction",
    "href": "posts/S06E06_website_06/index.html#sec-introduction",
    "title": "Quarto website 6: Quarto features",
    "section": "2 Basic formatting",
    "text": "2 Basic formatting\n\n2.1 Options from the “Format” dropdown menu\nThe following options are available under the “Format” dropdown:\n\n“Code” formatting looks like this and can be used for e.g. code snippets, file names, and software names.\nBold, italic, underlined, Strikeout, superscript, subscript , small caps (some of these are under the “Text” subheading)\nBullet lists and numbered lists, which can optionally be in a “tight” layout: press the … at the top-right.\n\nWithin a list, you can have an “Item Checkbox” to make a checklist…\n…and these boxes can be checked.\n\n“Blockquotes”, which can be used to provide a quote or even to highlight a bit of text in a different format:\n\n\n“Blockquotes are great” — J. Doe\n\nSeveral of these items are also present as separate buttons directly in the top bar.\n\n\n\n2.2 Headers\nThe dropdown menu to the left of the bullet list icon (it will say “Normal” unless you’re cursor is on a header line) allows you to pick a header level as opposed to the default, “Normal” formatting for your focal paragraph. Recall that headers will:\n\nBe numbered if you use the YAML option number-sections: true either site-wide (in _quarto.yml) or at the top of your focal document\nShow up in a Table of Contents if you use the YAML option toc: true.\nBy default have “anchors” that you can see when you hover over or near them in the output. Clicking on an anchor will give you a direct link to this section in your document.\n\n\n\n\n\n\n\nCross-references\n\n\n\nYou can use regular hyperlinks (see below) to refer to different pages and specific headers on your website. Additionally, it is possible to insert clickable cross-references to e.g. figures and tables — see these Quarto docs.\n\n\n\n\n\n2.3 Options from the “Insert” dropdown\n\n“Link” to include a clickable link with custom text.\nFootnote1, which shows up as a superscripted number in the main text, with the full footnote printed at the bottom of the page. Best of all, you can also hover over the superscripted number to see the footnote text.\n“Special characters” =&gt; “Insert Emoji” =&gt; 🤓.\n“Horizontal rule”, which can be nice to break up your content:"
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#citations",
    "href": "posts/S06E06_website_06/index.html#citations",
    "title": "Quarto website 6: Quarto features",
    "section": "3 Citations",
    "text": "3 Citations\nAddings citations is also possible via the “Insert” drop-down menu. Any citation you add will be automatically included in a reference list at the bottom of the document! In the text, the citation will show up as a link to the reference list and you can also hover over the link to see the full reference: (M. Horst, Presmanes Hill, and B. Gorman 2022).\n\n\n\nA reference list is automatically added to the end of the document\n\n\nThis is a really nice feature that benefits a lot from the RStudio Visual Editor. Without the Visual Editor, you’ll have to make a text file yourself with all the information for each reference (a bibliography in BibTex (.bib) format) — this can be exported from your reference manager, but that’s still a hassle because you often add citations one-by-one to a piece of text. With the Visual Editor, you can search for references online and when you include a reference:\n\nIt will be automatically saved in a bibliography file.\nWhen adding your first citation, the following line will be automatically added to the YAML header of your Quarto document: bibliography: references.bib. This line will make sure a reference list is added to the end of the document.\n\nIf you have Zotero installed on your computer, then your Zotero library will be automatically available. Otherwise, you can search for references in several ways, as shown by the following screenshots:\n\nCrossRef searchDOI searchZotero library\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo format your citations, both in terms of how they appear in the text and in your reference list, see this Quarto documentation page.\n\n\nYour turn: Try to use some of the features discussed above\n\nIf you didn’t already do so, it probably makes sense to create a new Quarto document for this experimentation.\nAfter you’ve used a couple of features, switch from “Visual” to “Source” editor mode, and check what the syntax is for these features!"
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#sec-chunks",
    "href": "posts/S06E06_website_06/index.html#sec-chunks",
    "title": "Quarto website 6: Quarto features",
    "section": "4 Code blocks and chunks",
    "text": "4 Code blocks and chunks\nBoth under the “Format” and “Insert” drop-down menus, you can find the “Code block” item, which will insert a block (one or more lines) of code-formatted text — but code in this type of block will not be executed. When the pop-up window asks you to type the name of a language, you can type “R”, but this information is only used for code formatting purposes. These kind of blocks can be useful if you just want to demonstrate/explain some code:\nx &lt;- 5\nx * 6\nBy contrast, the “Executable Cell” item (again, choose “R” as the language) will produce blocks also known as “Code Chunks”, which contain code that can be executed. By default, the code will in fact be executed and its results (if any) will be printed below the code chunk:\n\nx &lt;- 5\nx * 6\n\n[1] 30\n\n\nBecause code output consisting of just a number is a little boring, let’s insert a chunk with the following code, which will produce a plot — and that plot will similarly be shown below the code as follows:\n\nlibrary(ggplot2)\nggplot(data = iris,\n       mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_point()\n\n\n\n\n…Or a chunk that produces a simple table: in this case, simply the first lines of the iris dataframe. This dataframe output will display as shown below (which is a little nicer than the default formatting) when you include a line df-print: kable in the YAML header of your document:\n\nhead(iris)\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguring code chunk behavior\n\n\n\nDefault behaviors for code chunks are to print the code (echo: true), to execute the code (eval: true), and to show the output produced by the code (output: true), including any warnings produced by the code (warning: true).\nAny of these can be changed both at a website-wide or document-wide level, as well as at the level of individual code chunks (the latter would override the former).\nTo change settings at the site or document-level, use the execute key in your YAML file or header (see these Quarto docs) — in the example below, we turn off printing of the code itself as well of any warnings that the code might produce:\nexecute:\n  echo: false\n  warning: false\nTo change settings for an individual chunk, the same YAML keys like echo can be used, but in special comment lines (with #| prefixes) at the start of a code chunk:\n\n\n\n\n\nA really useful option is to “fold” the code by using code-fold: true in the YAML header. That way, code will not be shown by default, but can be shown for each individual code chunk by unfolding it. This is great when you want to emphasize your results, but do want make the underlying code available to anyone who might be interested.\nFor example, for the plot we produced above, if we set code-folding to true, it would produce a box like this above the plot — and clicking on that box would then show the code:"
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#figures-and-tables",
    "href": "posts/S06E06_website_06/index.html#figures-and-tables",
    "title": "Quarto website 6: Quarto features",
    "section": "5 Figures and Tables",
    "text": "5 Figures and Tables\n\n5.1 Figures / images\nAbove, we saw that we can create plots and include them in the document. Of course, we can also include figures made elsewhere, or photos, etc — and you have probably already done this for your website. When inserting a figure (e.g. by clicking the picture icon in the top bar), you can for example include a caption and specify how you want it aligned:\n\n\n\n\n\nSomewhat oddly, the options for the figure size only show up once you’ve clicked OK to insert the figure — you’ll see this box below the figure:\n\n\n\n\n\nThere are different ways/units to size the figure: I prefer “%”, which will allow you to specify the width in percentage of the total page (or focal box) width, as shown above.\n\n\n5.2 Tables\nWhen Clicking “Insert Table” in the “Table” dropdown menu in the top bar, you’ll get a pop-up to create a table, similar to how this works in Word:\n\n\n\n\n\nThis will produce a table skeleton like the one shown below, which you can then fill out:\n\n\n\n\n\nHere is an example of what a rendered table will look like, with previous Code Club sessions this semester:\n\nTable 1: Previous Code Club sessions\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS06E01\nAug 28\nJess\nQuarto website 1: Initiating a website\n\n\nS06E02\nSep 11\nJelmer\nQuarto website 2: Adding a page & YAML formatting\n\n\nS06E03\nSept 18\nJess\nQuarto website 3: Deploying to GitHub\n\n\nS06E04\nSept 25\nJelmer\nQuarto website 4: Interacting with your repository\n\n\nS06E05\nOct 2\nJess\nQuarto website 5: Modifying your site\n\n\n\nThese tables are fairly basic in their appearance and there aren’t many simple formatting options. If you’d like fancy or even interactive tables, you are better off creating them in R with packages like gt, and then including them like we included part of the iris dataframe above."
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#other-options",
    "href": "posts/S06E06_website_06/index.html#other-options",
    "title": "Quarto website 6: Quarto features",
    "section": "6 Other options",
    "text": "6 Other options\n\n6.1 Tabsets\n“Tabsets” create a section with content spread across different “tabs”, kind of like tabs in your browser; you saw an example above, in the Citations section. Tabsets can help keep your document clear when you have many outputs, especially when there are alternative or mutually exclusive ways of showing something, like results from alternative statistical models you ran on your data, alternative ways of visualizing the same data, or installation instructions for different operating systems.\nWhen you click “Insert” =&gt; “Tabset…”, you can first enter names for two or more tabs, and doing this will also determine how many tabs you’ll get (up to 6):\n\n\n\n\n\nThen, inside the gray box, below each header that was created for each tab name, you can enter any content that will show up in each tab:\n\n\n\n\n\nAnd here is what the output for the above setup would look like:\n\nSepal length vs sepal widthSepal length vs petal length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.2 Callouts\nSo-called “Callouts blocks” are boxes that we regularly use on the Code Club website, like the ones shown below:\n\n\n\n\n\n\nExample of a “tip” callout box\n\n\n\nThis tip will help you make the most of your life\n\n\n\n\n\n\n\n\nExample of a “warning” callout box\n\n\n\nThis warning will help you avoid blowing up your computer\n\n\nWhen you click “Insert” =&gt; “Callout..”, you can select one of the five types of available Callouts, which only differ in their colors and the symbol in the header (see these Quarto docs).\n\n\n\n6.3 Miscellaneous\n\nIn your Quarto document, rather than finding a formatting feature in the top bar, you can press / to see a list of features you can insert, which you can subset by typing some text:\n\n\n\n\n\n\n\nAs is true for any Markdown format, you can directly include any HTML code/tags, like &lt;br&gt; to insert an empty line (i.e., to add vertical white space — see the box below) or &lt;kbd&gt;Enter&lt;/kbd&gt; to make text appear formatted as keyboard keys.\n\n\n\n\n\n\n\nWhitespace in Markdown\n\n\n\nIn all Markdown flavors, including Quarto, whitespace is dealt with differently than you may be used to:\n\nIf you leave multiple spaces between words, those will be collapsed to a single space.\nIf you type on a new line without creating a new paragraph (in the Visual Editor, that would actually require you to use Shift+Enter, since Enter will start a new paragraph), the output would still be on the same line.\nIf you leave multiple blank lines between paragraphs, these will be collapsed to a single blank (half-)line. Therefore, if you want to add additional vertical whitespace, use the HTML tag &lt;br&gt;.\n\n\n\n\n\nYour turn: Again, try to use some of the features discussed above\n\nIf you have time after trying some of the features we discussed, then read about ways of manipulating code chunk behavior in the box at the end of Section 4, and try some of them."
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#footnotes",
    "href": "posts/S06E06_website_06/index.html#footnotes",
    "title": "Quarto website 6: Quarto features",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAfter reading this footnote, you’ll be exceptionally well-informed↩︎"
  },
  {
    "objectID": "posts/S06E05_website_05/index.html",
    "href": "posts/S06E05_website_05/index.html",
    "title": "Quarto website 5: modifying your site",
    "section": "",
    "text": "Artwork from “Hello, Quarto” keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.”\n\n1 Introduction\nToday we are going to continue customizing our website by:\n\nMaking a fancy about page\nLearning how to make multi-level drop down menu headers\nChanging our website themeing in _quarto.yml\nDoing some light (S)CSS styling to change the visuals of our site\n\nThen, we will push our changes to GitHub using GitHub Desktop. But first:\n\n\n\n\n\n\n\nAre there other things you want to learn how to do with your website?\n\n\nPlease share!\n\n\n\n\nA good way to see what is possible to do with your website is to browse through some other people’s sites. There is a Quarto website gallery here. Just like people can access the source code on your website, you can often do the same for others. This means if you see a feature you like, you can go into their website code and try and figure out how its done.\n\n\n2 Updating our About page\nBecause many people who have a Quarto website will have an About page, there are some special, nicely formatted templates which you can use. You can learn more about fancy about pages here, inclduing seeing what the different templates look like.\nWe are going to practie with our Code Club practice-website.\nFirst, let’s set one of the about templates in the YAML of our about.qmd file. I am going to start with jolla.\ntitle: \"About me\"\nabout:\n  template: jolla\n  image: name_of_image.jpg\nBefore we render this page, we need to make sure the image we want to appear in this about page is in the home directory of your website. If you want to keep all your images in a subfolder so they’re not just floating around loose, you can. And then your YAML will look like this:\ntitle: \"About me\"\nabout:\n  template: jolla # could also use trestles, solana, marquee, broadside\n  image: img/name_of_image.jpg\nIf you want to use some of the other templates, like trestles, solana, marquee, and broadside, you will want to have other information in your about.qmd, perhaps sections on Education and Experience.\nCheck out using these different templates and pick the one you like the most if you want to customize your about page.\n\n\n3 Creating multi-level drop down menu headers\nEarlier I mentioned we can go into other websites to see how different features are coded. We are going to do this on the OSU Code Club website to see how it has achieved having multi-level headers. We can also visit the source repository on GitHub to see how this website is formatted.\nIf you look at the Code Club website homepage, you can see that the header “New here?” has a drop down, and allows you to choose from a few different options.\n\nHow was that done? If you remember back a few sessions ago, we set what our headers were going to be in the _quarto.yml file. Let’s see what that file looks like from the Code Club source repo.\nThe _quarto.yml looks like this:\nproject:\n  type: website\n  preview: \n    navigate: false\n\nwebsite:\n  title: \"OSU Code Club\"\n  site-url: https://osu-codeclub.github.io/\n  repo-url: https://github.com/osu-codeclub/osu-codeclub.github.io\n  repo-actions: [edit, issue]\n  page-navigation: true\n  back-to-top-navigation: true\n  navbar:\n    left:\n      - href: pages/schedule.qmd\n        text: Schedule\n      - href: pages/previous.qmd\n        text: Previous sessions\n      - text: New here?\n        menu:\n        - text: Computer setup for Code Club\n          href: pages/setup.qmd\n        - text: R resources for beginners\n          href: pages/r_resources.qmd\n        - text: Sign up!\n          href: https://forms.gle/eYkMvmJShrcANUrt5\nLooking at this we can see what code is used for make drop down headers. You can copy this code into your _quarto.yml and then modify the text and href to be appropriate for your site.\nRemember that when you link to new pages, you will need to have material for that page to populate. If we look at the example above, the “Computer setup for Code Club” material is in a file called setup.qmd in a folder called pages in the home directory of the website.\n\n\n4 Altering website styling in _quarto.yml\nMaking simpler changes, like setting your background colors and fonts, you can do by altering your _quarto.yml file under the format header. For example, we could make the following changes to our practice-website.\nwebsite:\n  navbar:\n    background: \"#06280C\" # foresty green\n\nformat:\n  html:\n    theme: flatly\n    toc: true\n    number-sections: true\n    mainfont: Proxima Nova\n    backgroundcolor: \"#CFDAD3\" # light grey\n    monobackgroundcolor: \"#CFDAD3\" # light grey\n    title-block-banner: \"#06280C\" # foresty green\n    title-block-banner-color: \"#CFDAD3\" # light grey\n    fontcolor: \"#06280C\" # foresty green\n    linkcolor: \"#0E11E2\" # hyperlink blue\nYou don’t need to comment on what your colors are, I just like to do this since I have no connection between hexadecimal codes and actual colors, and this helps me to remember what is what. You can see all of the html options you can change within your YAML here\nOnce you made changes, render your website to see what they look like.\n\n\n5 Altering (S)CSS code to change website styling\nSometimes you might want to make more changes that what you can do using the avaiable keys in your YAML. When that is the case, you can make additional alterations by creating a .scss theme file.\nCSS stands for Cascading Style Sheets and it is used to format the layout of a webpage. By learning how to modify existing CSS files, it is relatively simple to change how your website looks. SCSS is Sassy CSS and the difference is not really important right now, but I think the .scss files are a little easier to modify, and are the default in Quarto, so we are going to work from those.\nThe Quarto website built in themes use Bootswatch and both the Code Club and practice-website use flatly so let’s start there. You can find .scss. files for each theme in the Quarto GitHub source repo here. I am going to go to the flatly theme and download it using the “Download raw file” button in the top right of the page. Save this file in the home directory of your website.\n\nLet’s open it in RStudio. We will play around with making some changes.\nOne thing you might want to change first are the colors. Quarto accepts color information as hexadecimal codes. If you want to know the hexadecimal 6 digit code for any color you can go to www.htmlcolorcodes.com to find the color/code pair that you want.\nIn the Quarto documentation, you can find information about the Sass variables that can be specified within your .scss. file what what they mean.\n\n\n6 Commit and push to GitHub\nOnce you are happy with your changes, the last step is to commit and push them to GitHub so the changes can be reflected on your website. You can do this in GitHub desktop by entering a comment in the bottom left, committing to main (or master), and then push to origin.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/S06E09_shiny_02/index.html",
    "href": "posts/S06E09_shiny_02/index.html",
    "title": "Shiny 02: Intro to Shiny (cont.)",
    "section": "",
    "text": "Welcome to our shiny app development class! Throughout this session, we will continue diving into the world of Shiny and explore its incredible potential for creating interactive web applications. Today we will use the function reactiveVal."
  },
  {
    "objectID": "posts/S06E09_shiny_02/index.html#shiny-app-to-collect-data.",
    "href": "posts/S06E09_shiny_02/index.html#shiny-app-to-collect-data.",
    "title": "Shiny 02: Intro to Shiny (cont.)",
    "section": "1 Shiny App to collect data.",
    "text": "1 Shiny App to collect data.\nThe reactiveVal function is utilized to create a “reactive value” object which has special capabilities for reactive programming. It serves as a variable that allows both reading and writing of values. Whenever the value is read from a reactiveVal object, the calling reactive expression becomes dependent on it. Similarly, when the value is altered, any reactives that were previously dependent on it are notified.\nLet’s make a shiny app and see how this works!\n\n# Install and call the following packages.\nlibrary(shiny)\nlibrary(DT)\n\n# Initialize an empty data frame to store the collected data\ncollected_data &lt;- data.frame(\n  Treatment = character(0),\n  PlotNumber = numeric(0),\n  StandCount = numeric(0),\n  PlantHeight = numeric(0),\n  Severity = numeric(0)\n)\n\n# Create a variable to store the selected rows\nselected_rows &lt;- reactiveVal()\n\n# Define the UI\nui &lt;- fluidPage(\n  titlePanel(\"Soybean Field Data Collection\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"treatment\", \"Select Treatment:\", c(\"T1\", \"T2\", \"T3\")),\n      numericInput(\"plot\", \"Enter Plot Number:\", value = 101, min = 101, max = 304),\n      numericInput(\"stand_count\", \"Enter Stand Count:\", value = 0),\n      numericInput(\"plant_height\", \"Enter Plant Height (in cm):\", value = 0),\n      numericInput(\"severity\", \"Enter Severity Rating:\", value = 0),\n      actionButton(\"submit\", \"Submit Data\"),\n      actionButton(\"delete\", \"Delete Selected Row\"),\n      downloadButton(\"downloadData\", \"Download Data\")\n    ),\n    \n    mainPanel(\n      DTOutput(\"dataTable\")\n    )\n  )\n)\n\n# Define the server\nserver &lt;- function(input, output, session) {\n  collected_data_reactive &lt;- reactiveVal(NULL)\n  \n  observeEvent(input$submit, {\n    new_entry &lt;- data.frame(\n      Treatment = input$treatment,\n      PlotNumber = input$plot,\n      StandCount = input$stand_count,\n      PlantHeight = input$plant_height,\n      Severity = input$severity\n    )\n    # Append the new entry to the collected data\n    collected_data &lt;- rbind(collected_data_reactive(), new_entry)\n    collected_data_reactive(collected_data)\n    \n    # Reset input fields\n    updateSelectInput(session, \"treatment\", selected = \"T1\")\n    updateNumericInput(session, \"plot\", value = 101)\n    updateNumericInput(session, \"stand_count\", value = 0)\n    updateNumericInput(session, \"plant_height\", value = 0)\n    updateNumericInput(session, \"severity\", value = 0)\n  })\n  \n  observeEvent(input$delete, {\n    # Get the selected row(s) and remove them from the collected data\n    selected_rows(input$dataTable_rows_selected)\n    if (length(selected_rows()) &gt; 0) {\n      collected_data &lt;- collected_data_reactive()\n      collected_data &lt;- collected_data[-selected_rows(), ]\n      collected_data_reactive(collected_data)\n    }\n  })\n  \n  output$dataTable &lt;- renderDT({\n    datatable(collected_data_reactive(), options = list(select = \"multi\"))\n  })\n  \n  # Download data as a CSV file\n  output$downloadData &lt;- downloadHandler(\n    filename = function() {\n      \"collected_data.csv\"\n    },\n    content = function(file) {\n      write.csv(collected_data_reactive(), file)\n    }\n  )\n}\n\n# Run the app\nshinyApp(ui, server)\n\nNow that we have successfully developed a shiny app for data collection, we can now proceed to working on another app designed for processing the collected data."
  },
  {
    "objectID": "posts/S06E09_shiny_02/index.html#shiny-app-to-process-collected-data.",
    "href": "posts/S06E09_shiny_02/index.html#shiny-app-to-process-collected-data.",
    "title": "Shiny 02: Intro to Shiny (cont.)",
    "section": "2 Shiny App to process collected data.",
    "text": "2 Shiny App to process collected data.\nWe will use shinyjs and ggstatsplot to generate a shiny app that will use collected data to process and generate some preliminary data viz and descriptive stats. For this you will need to use .csv file Aggressiveness_Zone.csv that was sent to your email.\n\n# Load required libraries\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggstatsplot)\nlibrary(shinyjs)\n\n# Define UI\nui &lt;- fluidPage(\n  useShinyjs(),\n  titlePanel(\"Summary Statistics and Plots\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Choose CSV File\"),\n      selectInput(\"plotType\", \"Select Plot Type\",\n                  c(\"Box-violin Plot\", \"Box Plot\", \"Violin Plot\")),\n      \n      # Add options to modify axis label and tick label size\n      sliderInput(\"axisLabelSize\", \"Axis Label Size\", min = 8, max = 20, value = 12),\n      sliderInput(\"axisTickLabelSize\", \"Axis Tick Label Size\", min = 8, max = 20, value = 10)\n    ),\n    \n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Summary Statistics\", tableOutput(\"summaryTable\")),\n        tabPanel(\"Plots\", plotOutput(\"plot\"))\n      )\n    )\n  )\n)\n\n# Define server\nserver &lt;- function(input, output) {\n  data &lt;- reactive({\n    inFile &lt;- input$file\n    if (is.null(inFile)) return(NULL)\n    read.csv(inFile$datapath)\n  })\n  \n  # Define plot_type in the global scope\n  plot_type &lt;- reactive({\n    if (!is.null(data())) {\n      switch(input$plotType,\n             \"Box-violin Plot\" = {\n               ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)\n             },\n             \"Box Plot\" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +\n               geom_boxplot() +\n               scale_fill_brewer(palette = \"Set1\") +\n               theme(axis.text.x = element_text(size = input$axisTickLabelSize),\n                     axis.text.y = element_text(size = input$axisTickLabelSize),\n                     axis.title.x = element_text(size = input$axisLabelSize),\n                     axis.title.y = element_text(size = input$axisLabelSize))\n             ,\n             \"Violin Plot\" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +\n               geom_violin() +\n               geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +\n               stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = \"crossbar\", width = 0.5) +\n               scale_fill_brewer(palette = \"Set2\") +\n               theme(axis.text.x = element_text(size = input$axisTickLabelSize),\n                     axis.text.y = element_text(size = input$axisTickLabelSize),\n                     axis.title.x = element_text(size = input$axisLabelSize),\n                     axis.title.y = element_text(size = input$axisLabelSize))\n      )\n    }\n  })\n  \n  output$summaryTable &lt;- renderTable({\n    if (is.null(data())) return(NULL)\n    summary_stats &lt;- data() %&gt;%\n      group_by(AEZ) %&gt;%\n      summarize(\n        Mean = mean(RF),\n        Standard_Deviation = sd(RF),\n        Standard_Error = sd(RF) / sqrt(n())\n      )\n    as.data.frame(summary_stats)\n  })\n  \n  output$plot &lt;- renderPlot({\n    plot_type()\n  })\n}\n\n# Run the application\nshinyApp(ui, server)"
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#introduction",
    "href": "posts/S07E01_basics_01/index.html#introduction",
    "title": "R Basics 1: Getting Started",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to begin this semester’s Code Club right from the beginning working in R. This session does not assume any prior knowledge of R or other programming languages.\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#why-use-r",
    "href": "posts/S07E01_basics_01/index.html#why-use-r",
    "title": "R Basics 1: Getting Started",
    "section": "2 Why use R?",
    "text": "2 Why use R?\nSince you’re here, I can assume you don’t need to be convinced that learning R is useful. R is a programming language that is used widely by data and other scientists. Most people get into R to conduct statistics, though its a top way to make data visualizations and do lots of other things. Since R is open source, there are endlessly available free resource to learn how to do practically whatever you want on the internet."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#installing-r-and-rstudio",
    "href": "posts/S07E01_basics_01/index.html#installing-r-and-rstudio",
    "title": "R Basics 1: Getting Started",
    "section": "3 Installing R and RStudio",
    "text": "3 Installing R and RStudio\nBut first, what is the difference between R and RStudio? R is a programming language while RStudio has a graphical user interface (GUI) that allows you to more easily use R. RStudio is an Integrated Development Environment (IDE), meaning its a separate program that has an interface designed for running R. You can run R just using the R console (i.e., standalone R) but it is really easier and you will find additional functionality if you use RStudio. We need to download both R and RStudio.\n\n3.1 Downloading/installing R\n\n\n\n\n\n\nIf you are using an Ohio State computer where you don’t have administrative access, R and RStudio are available to download through the Software Center (Windows) and Self Service (Mac).\n\n\n\n\n\n\nWe will download R first. At the time of me writing this (January 2024) the most updated version of R is R-4.3.2.\n\nYou can download R for Windows, Mac, or UNIX. https://www.r-project.org/\nPick your preferred CRAN mirror, I like to use the one from Case Western Reserve University since it’s the closest to us in Ohio I think it’s probably the fastest, though any mirror will work.\nDownload R for Linux, Windows, or Mac, depending on what type of operating system you are running. You can use these direct links to download 4.3.2.\n\nWindows\nM1/M2 Mac, requires Xquartz\nOlder Macs, requires Xquartz\n\n\nNavigate to where you’ve downloaded your executable R file, and install it.\nYou can also use R and RStudio through the Ohio Supercomputing Center. If you want to do this, connect with Jelmer and he can add you to our Code Club project.\nAs of January 2024, the most recent version of R is 4.3.2. If you already have R and it is version &gt;4.2, no need to do anything.\n\nIf you’ve already installed R and just need to update, and want to make sure you keep all your downloaded packages, follow these instructions. Updating only RStudio doesn’t do anything to your packages.\n\n\n\n3.2 Downloading/installing RStudio\nOnce you have R, you can download RStudio. Here you can download the version of RStudio\nNavigate to where you’ve downloaded your executable RStudio file, and install it.\nOnce you’ve downloaded both R and RStudio, you can open RStudio."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#orienting-to-rstudio",
    "href": "posts/S07E01_basics_01/index.html#orienting-to-rstudio",
    "title": "R Basics 1: Getting Started",
    "section": "4 Orienting to RStudio",
    "text": "4 Orienting to RStudio\nThe RStudio integrated development environment (IDE) has four quadrants.\n\n\n\nA screenshot of the RStudio IDE\n\n\n\nTop left: your source editor. Here you can open, edit, and send code to be executed from files like .R, .Rmd, .qmd or others.\nBottom left: by default this is your console. If you’ve used standalone R, this is the same thing. It is here where your code will be actually executed. You can also type here directly to execute code. There are also two additional tabs, terminal and background jobs which we won’t talk about now.\nTop right: by default this is your environment. It will show you all the objects that are active in your R environment. Here, you can also see history, connections, build a website, use git, or open tutorials but we won’t talk about those now.\nBottom right: by default this shows the files in your working directory (more about that next). There are also additional tabs which show plots, packages, help, viewers, presentations but we won’t talk about those now.\n\nThere is an RStudio cheatsheet for the IDE which is very useful, and you can find it here."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#working-directories",
    "href": "posts/S07E01_basics_01/index.html#working-directories",
    "title": "R Basics 1: Getting Started",
    "section": "5 Working directories",
    "text": "5 Working directories\n\n5.1 What is a directory and a working directory?\nThe concept of a directories and your working directory is an important one when coding. You can think of a directory as a synonym for a folder. Each file is contained within a directory, these folders have physical locations on your computer, or a defined path. Directories are hierarchical, and slightly different on different operating systems (e.g., Mac, Windows, Linux). If you open up your Finder (Mac) or File Explorer (Windows), you can navigate around the different locations on your computer.\nYour working directory is just as it sounds - it’s the location/path on your computer where you are currently working. This is important as your files will be by default read in, stored, and saved to this location. This means you need to know where this is.\n\n\n5.2 Find your working directory\nWe can figure out where our working directory is by typing into the console the function:\n\ngetwd()\n\n[1] \"/Users/poelstra.1/Library/CloudStorage/Dropbox/mcic/teach/codeclub/codeclub-site/posts/S07E01_basics_01\"\n\n\nYou can see that the output path is MY working directory - yours will be different as the set up of your computer organization structure is different from mine. I am also using a Mac so you can see my path as forward slashes / while Windows machines will have backslashes\\.\nYou can also use the RStudio GUI to navigate to your working directory by going to the Files quadrant (bottom right), click the gear, and select Go To Working Directory.\n\n\n\nGo to your working directory by clicking\n\n\n\n\n5.3 Set your working directory\nIf your working directory is not where you want to store your files for code club, you can change it. We can do that using the function setwd().\n\nsetwd(\"/this/should/be/your/working-directory/path\")\n\nAlternatively, you can set your working directory by navigating in the Files (bottom right) quadrant to the location you want your working directory to be, then clicking the gear, and clicking Set As Working Directory.\n\n\n\nSet your working directory by clicking\n\n\n\n\n5.4 Avoid all working directory nonsense with a .RProj\n\n\n\nArtwork by @allison_horst\n\n\nUsing an Rproject (.RProj) will help you with working directory management. An Rproject allows you to keep all of the files associated with a particular project together - from input data, output data, code, resulting figures etc. What it does is set the location of the working directory to be the same place as where your Rproject is located.\nWe will make a new Rproject for all your code club files. You can create a project by navigating to File &gt; New Project. You can put your file in a New Directory (i.e., make a new folder where your code club files will live), or you can indicate an Existing Directory (i.e., the folder you already have where your code club files are located). I’m going to assume you don’t have already a code club folder, so we will pick: New Directory &gt; New Project. You can navigate to where you want the directory to be on your computer (best to put it somewhere static and not in your downloads or on your desktop), and give it a meaningful name, like code-club.\nNow, as long as I have the code-club Rproject open in RStudio, R knows to set the working directory to be the location you picked. This means if you want to load data, you should put it in that same folder, and when you write out results, they will also be by default in that same place."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#practice-1",
    "href": "posts/S07E01_basics_01/index.html#practice-1",
    "title": "R Basics 1: Getting Started",
    "section": "6 Practice #1",
    "text": "6 Practice #1\n\n\n\n\n\n\nCheck where the working directory is for your computer\n\n\n\n\n\nType the code below into your console (bottom left quadrant).\n\ngetwd()\n\n\n\n\n\n\n\n\n\n\nTry changing the working directory to your desktop\n\n\n\n\n\nIt’s important you know the path for your desktop. You can open your Finder or File Explorer, right click on Desktop and find the path.\n\nMac: Right click on Desktop in your Finder, click Get Info, and in General, copy the path listed next to Where. On my Mac, my Desktop path is \"/Users/jessicacooperstone/Desktop\".\nWindows: Right click on Desktop in your File Explorer, click Properties, and in Location you will see your path. On one of our lab computers, my Desktop path is \"C:Users\\cooperstone.1\\Desktop\".\n\n\nsetwd(\"path-to-your-desktop\")\n\n\n\n\n\n\n\n\n\n\nCreate yourself a new Rproject in a static location where your code club files will reside.\n\n\n\n\n\nUse the instructions here to create a Rproject."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#using-r-like-a-calculator",
    "href": "posts/S07E01_basics_01/index.html#using-r-like-a-calculator",
    "title": "R Basics 1: Getting Started",
    "section": "7 Using R like a calculator",
    "text": "7 Using R like a calculator\nNow that we are a bit oriented to RStudio, we can begin actually using it. We aren’t going to be using any scripts today, simply working in the console (bottom left quadrant).\nIn the bottom left part of the console you should see a greater than sign (&gt;). This is where you will start typing. If you don’t see this &gt; it means your console is not ready to receive commands. You can press Esc once or a couple times to get back to your &gt;.\nLet’s start by typing the following code into your console:\n\n2 + 5\n\n[1] 7\n\n\nWhen we ask R to calculate this sum we get the answer, 7. Note that this number is simply printed into our console. You’ll also note that there is also a [1] next to the answer of 7 since R is telling us that 7 is the first value in our vector. More about this another time.\nWhat if now, instead of asking R to calculate what 2 + 5 is and print the result we want to save this output as a variable stored within R? We can do that by assigning it to a variable. Here, I am going to assign the output to x and do this using the assignment operator &lt;- which looks like an arrow pointing to the left.\n\nx &lt;- 2 + 5\n\nYou will see when you do this in your console, you no longer see the answer 7. You only see the code you typed in, and your &gt; indicating R is ready for more.\nThis is because we have asked R to store this output as the variable x and we have not asked R to show us what x is. We can do that by simply typing:\n\nx\n\n[1] 7\n\n\nNow we see the answer 7.\nWe can also now see that the variable x is stored in our Environment (top right quadrant). This is where all of the objects that are active in your environment will live.\n\n\n\nA screenshot of our Environment tab (top right quadrant) now that we have assigned the sum of 2 and 5 to x\n\n\n\n\n\n\n\n\nThere is a R shorthand to both assign an object and print it at the same time.\n\n\n\n\n\nIf you surround your code that is doing some assigning with parentheses, you will both assign the object and print it at the same time. Here’s an example:\n\n(j &lt;- 8 - 5)\n\n[1] 3\n\n\n\n\n\nIf we ask R for something that is not in our environment, like y we will get an error.\n\ny\n\n\nBut, now that we have x in our environment, we can use it to create new objects. If we wanted to create a new object y that was the result of x * 3, we could simply do:\n\ny &lt;- x * 3\n\nAnd if we want to see the answer, we type y.\n\ny\n\n[1] 21\n\n\n\nRemember that R uses classic mathematical order of operations, so do mind your parentheses."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#practice-2",
    "href": "posts/S07E01_basics_01/index.html#practice-2",
    "title": "R Basics 1: Getting Started",
    "section": "8 Practice #2",
    "text": "8 Practice #2\n\n\n\n\n\n\nCreate a new variable z which has the result of 10 divided by 5. Print your answer.\n\n\n\n\n\nType the code below into your console (bottom left quadrant).\n\nz &lt;- 10 / 5\n\nz\n\n[1] 2\n\n\n\n\n\n\n\n\n\n\n\nMultiple the sum of 3 and 4 by the subtraction of 4 from 10. Don’t save it to a variable, just print it to your console.\n\n\n\n\n\nType the code below into your console (bottom left quadrant).\n\n(3 + 4) * (10 - 4)\n\n[1] 42\n\n\n\n\n\n\n\n\n\n\n\nTry setting the sum of 1 and 2 to x. What does this do to the value of x stored in your environment?.\n\n\n\n\n\nType the code below into your console (bottom left quadrant).\n\nx &lt;- 1 + 2\n\nx\n\n[1] 3\n\n\nBe careful about writing over variables!"
  },
  {
    "objectID": "posts/S07E03_basics_03/index.html#introduction",
    "href": "posts/S07E03_basics_03/index.html#introduction",
    "title": "R Basics 3: Built-in functions, Vectors, and Help",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of last week\nLast week, we did a little more basic interaction with R (missing prompts and data types), we wrote code in R scripts (and added comments to our code), and used and named R objects.\nHere are some additional tips from our previous session: Go to Tools and then Keyboard Shortcuts Help. Identify useful keyboard shortcuts and use them during today’s session.\n\n\nLearning objectives for today\n\nBuilt-in Functions\nVectors in R\nGetting Help with R"
  },
  {
    "objectID": "posts/S07E03_basics_03/index.html#types-of-functions-in-r",
    "href": "posts/S07E03_basics_03/index.html#types-of-functions-in-r",
    "title": "R Basics 3: Built-in functions, Vectors, and Help",
    "section": "2 Types of Functions in R",
    "text": "2 Types of Functions in R\nFunctions are the foundation of almost everything in R. In programming, they are sets of organized instructions designed to perform specific tasks. The purpose of functions is to create self-contained programs that can be called upon as needed.\n\n\n\nFig. 1. Types of Functions in R\n\n\n\n2.1 What’s in a function?\nWhat exactly is a function? Let’s recall from our math knowledge:\n\n\n\nFig. 2. Function Rules\n\n\nA function in R is a collection of statements that can be reused in a program. This is the syntax of defining a function in R:\n\n\n\nFig. 3. R Function Syntax\n\n\n\n\nWhich function was covered during our first session of Code Club? (Click for the answer)\n\nDuring our first session of Code Club, we examined the setwd function.\n\n\n\n2.2 Types of built-in functions in R?\nBuilt-in functions, which are already created or defined in the programming framework, are referred to as built-in functions. R offers a comprehensive collection of functions that can effectively handle almost any task for the user. These built-in functions are categorized based on their functionality as follows.\n\n\n\nFig. 4. Types of built-in functions in R\n\n\n\n\n\n\n\n\nBefore we begin examining various functions\n\n\n\nPlease refer to:\n\nThe R Base Package\nBase R Cheat Sheet\n\n\n\n\n\nMath functions\nA numeric function in R is defined as a function that can accept either a set of numeric values or a numeric vector (see below) as an input argument to carry out specific tasks. Here are several frequently used numeric functions in R programming.\n\n\n\n\n\n\n\nFunction\nDescription\n\n\nabs(x)\nabsolute value\n\n\nsqrt(x)\nsquare root\n\n\nceiling(x)\nceiling(3.475) is 4\n\n\nfloor(x)\nfloor(3.475) is 3\n\n\ntrunc(x)\ntrunc(5.99) is 5\n\n\nround(x , digits= n)\nround(3.475, digits=2) is 3.48\n\n\nsignif(x , digits= n)\nsignif(3.475, digits=2) is 3.5\n\n\ncos(x), sin(x), tan(x)\nalso asin(x), acos(x), cosh(x), acosh(x), etc.\n\n\nlog(x)\nnatural logarithm\n\n\nlog10(x)\ncommon logarithm\n\n\nexp(x)\ne^x\n\n\n\n\n\nExercises 1\nA) Let’s explore one function in particular: sum\nLast week we used R as a calculator. Add 5 and 7 the way we did last week and then try using the built-in function sum.\nUsing R as a calculator to add 5 and 7:\n\n\nSolution (click here)\n\n\n5 + 7\n\n[1] 12\n\n\n\nUsing the sum built-in function in R, add 5 and 7:\n\n\nSolution (click here)\n\n\nsum(5, 7)\n\n[1] 12\n\n\n\nB) Now, let’s combine functions by adding 3, 7, 9, and 11. After that, we will multiply the sum by 3. Lastly, we will calculate the square root of this result and round it to the nearest whole number.\n\n\nSolution (click here)\n\n\nround(sqrt(sum(3, 7, 9, 11)*3))\n\n[1] 9\n\n\n\nC) Below is a very common example in my data analysis.\n\n\nIn the field of Plant Pathology, data such as disease incidence or severity is typically collected as a percentage or proportion. To prepare the data for analysis, it is common to apply a data transformation known as the arc-sine square root. You have gathered disease severity data from three plots: 0.75 (control), 0.70 (Trt 1), and 0.30 (Trt 2). Apply the transformation mentioned above to your data for analysis.  (Click for the answer)\n\n\nControl &lt;- 0.75\nTrt1 &lt;- 0.70\nTrt2 &lt;- 0.30\n\nasin(sqrt(Control))\n\n[1] 1.047198\n\nasin(sqrt(Trt1))\n\n[1] 0.9911566\n\nasin(sqrt(Trt2))\n\n[1] 0.5796397\n\n\n\n\n\nStatistical probability functions\nThe table below provides descriptions of functions pertaining to probability distributions.\n\n\n\n\n\n\n\nFunction\nDescription\n\n\ndnorm(x)\nnormal density function (by default m=0 sd=1)\n\n\npnorm(q)\ncumulative normal probability for q\n(area under the normal curve to the left of q)\npnorm(1.96) is 0.975\n\n\nqnorm(p)\nnormal quantile. \nvalue at the p percentile of normal distribution\nqnorm(.9) is 1.28 # 90th percentile\n\n\nrnorm(n, m=0, sd=1)\nn random normal deviates with mean m\nand standard deviation sd.\n\n\n\nLet’s generate 10 random normal variates with mean=50, sd=10.\n\nx &lt;- rnorm(10, m=50, sd=10)\nround(x) # Rounding to the nearest whole number. \n\n [1] 50 62 78 58 51 38 47 56 66 57\n\n\nNow let’s do the same thing, but call it y .\n\n\n\n\n\n\nDid you get the same result?\n\n\n\nTo ensure reproducibility of pseudo-random numbers for the random number generators listed, you can utilize set.seed(1234) or any other integer.\n\n\n\n\nExample (click here)\n\n\nset.seed(1234)\nx &lt;- round(rnorm(10, m=50, sd=10))\nx\n\n [1] 38 53 61 27 54 55 44 45 44 41\n\n\n\n\n\nOther statistical and useful functions\nOther useful statistical functions are provided in the following table.\n\n\n\n\n\n\n\nFunction\nDescription\n\n\nseq(from , to , by)\ngenerate a sequence\nindices &lt;- seq(1,10,2)\n#indices is c(1, 3, 5, 7, 9)\n\n\nrep(x , ntimes)\nrepeat x n times\ny &lt;- rep(1:3, 2)\n# y is c(1, 2, 3, 1, 2, 3)\n\n\n\nEach has the option na.rm to strip missing values before calculations. Otherwise the presence of missing values will lead to a missing result.\n\n\n\n\n\n\n\nmean(x , trim=0,\nna.rm= FALSE )\nmean of object x\n\n\nsd(x)\nstandard deviation of object(x).\n\n\nmedian(x)\nmedian\n\n\nrange(x)\nrange\n\n\nsum(x)\nsum\n\n\nmin(x)\nminimum\n\n\nmax(x)\nmaximum\n\n\n\n\n\n\n\n\n\nNota bene\n\n\n\nObject can be a numeric vector or data frame.\n\n\n\n\nExercises 2\nA) Let’s explore the following functions together using the group of numbers: 5, 7, 3, and 9 (in this order). These functions include: sum, min, max, and range\n\n\nSolution (click here)\n\n\nsum(5, 7, 3, 9)\n\n[1] 24\n\nmin(5, 7, 3, 9)\n\n[1] 3\n\nmax(5, 7, 3, 9)\n\n[1] 9\n\nrange(5, 7, 3, 9)\n\n[1] 3 9\n\n\n\nB) Let’s now get the average, standard deviation, and sort these numbers using mean, sd, and sort.\n\n\nSolution (click here)\n\n\nmean(5, 7, 3, 9)\n\n[1] 5\n\nsd(5, 7, 3, 9)\n\nError in sd(5, 7, 3, 9): unused arguments (3, 9)\n\nsort(5, 7, 3, 9)\n\nError in sort(5, 7, 3, 9): 'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?"
  },
  {
    "objectID": "posts/S07E03_basics_03/index.html#vectors-in-r",
    "href": "posts/S07E03_basics_03/index.html#vectors-in-r",
    "title": "R Basics 3: Built-in functions, Vectors, and Help",
    "section": "3 Vectors in R",
    "text": "3 Vectors in R\nDepending on the type of data that one needs to store in R, different data structures can be used. The four most commonly used data structures in R are vectors, lists, matrices, and data frames. In this session, we will only be working with vectors.\nThe fundamental data structure in R is vectors, which are 1-dimensional data structures that can only contain one type of data (e.g., all entries must have the same mode). To create a vector in R, the function c() (concatenate or combine) is used, as shown below.\nLet’s create a vector named “my_vector” with 5 entries.\n\nmy_vector &lt;- c(10, 30, 50, 20, 40)\nmy_vector\n\n[1] 10 30 50 20 40\n\n\nThe output generated on the previous code chunk displays the entries in your vector, with the 1 in squared brackets indicating the position of the entry to its right in the vector. In this case, 10 is the first entry of the vector.\nIf, for any reason, we only wish to extract the value 50 from this vector, we can utilize our knowledge of it being in the third position to do so.\n\nmy_vector[3]\n\n[1] 50\n\n\nSince a vector can only contain one data type, all its members need to be of the same type. If you attempt to combine data of different types into a vector, R will not provide a warning, but rather coerce it to the most flexible type. (The order of flexibility, from least to most, is: logical, integer, double, character). Therefore, if you add a number to a logical vector, the entire vector will be converted to a numeric vector.\nTo check what data type an object is, run the R built-in function class(), with the object as the only parameter.\n\nclass(my_vector)\n\n[1] \"numeric\"\n\n\nIf you for any reason want to have more information about any object you have stored in your R session the command str() is very helpful.\n\nstr(my_vector)\n\n num [1:5] 10 30 50 20 40\n\n\n\nExercises 3\nA) Let’s revisit mean, sd, sort, and other basic R operators.\n\nmean(my_vector)\n\n[1] 30\n\nsd(my_vector)\n\n[1] 15.81139\n\nsort(my_vector)\n\n[1] 10 20 30 40 50\n\n\nB) Add 7 to the my_vector, multiply 3 by my_vector, and check which values are greater than 25.\n\n\nSolution (click here)\n\n\n7 + my_vector\n\n[1] 17 37 57 27 47\n\n3 * my_vector\n\n[1]  30  90 150  60 120\n\n25 &gt;= my_vector\n\n[1]  TRUE FALSE FALSE  TRUE FALSE\n\n\n\nC) Please create another_vector and add it to my_vector. Next, use the sum function to combine these vectors."
  },
  {
    "objectID": "posts/S07E03_basics_03/index.html#getting-help-with-r",
    "href": "posts/S07E03_basics_03/index.html#getting-help-with-r",
    "title": "R Basics 3: Built-in functions, Vectors, and Help",
    "section": "4 Getting Help with R",
    "text": "4 Getting Help with R\nBefore seeking assistance from others, it is generally advisable for you to attempt to resolve the problem on your own. R provides comprehensive tools for accessing documentation and searching for help.\n\n4.1 R Help: help() and ?\nThe help() function and ? help operator in R offer access to documentation pages for R functions, data sets, and other objects. They provide access to both packages in the standard R distribution and contributed packages.\n\nExercises 4\nA) Can you obtain information about the type of R object that mean() and sum() functions take by using the help() or ? functions?"
  },
  {
    "objectID": "posts/S07E05_basics_05/index.html#introduction",
    "href": "posts/S07E05_basics_05/index.html#introduction",
    "title": "R Basics 5: Data Manipulation With Base R",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of last week\nLast week, we discussed vectorized operations and introduced the concept of a data frame. Furthermore, you successfully created a data frame containing multiple columns and rows.\nToday, we will explore data manipulation using base R syntax. It is important to note that there are countless ways to achieve the same objective, particularly in base R. Whenever possible, let us consider simpler syntax."
  },
  {
    "objectID": "posts/S07E05_basics_05/index.html#data-manipulation-with-base-r",
    "href": "posts/S07E05_basics_05/index.html#data-manipulation-with-base-r",
    "title": "R Basics 5: Data Manipulation With Base R",
    "section": "2 Data manipulation with (base) R",
    "text": "2 Data manipulation with (base) R\n\n2.1 Create a new dataset\n###\n\n\nPlease create a new data frame and name it df. This data frame should consist of three columns (Control, Trt1, and Trt2) with 50 observations each. The Control column should contain 50 data points that follow a normal distribution with a mean of 35 and a standard deviation of 10. Likewise, the Trt1 column should have a mean of 37 and a standard deviation of 10, and the Trt2 column should have a mean of 75 and a standard deviation of 10. Additionally, add five blocks (a, b, c, d, e), each repeating 10 times. Let’s use the function set.seed(1234) to work with the same values. (Click for the answer)\n\n\nset.seed(1234)\ndf &lt;- data.frame(Control = rnorm(50, 35, 10),\n                 Trt1 = rnorm(50, 37, 10),\n                 Trt2 = rnorm(50, 75, 10),\n                 Block = rep(c(\"a\", \"b\", \"c\", \"d\", \"e\"), 10))\n\n\n\n\nData mostly come in two shapes – “long” format and “wide” format.\nWhat type of data do you think is df? (Click for the answer)\n\nOur data frame df is in wide format.\n\n\n\n2.2 Extract variables (columns)\nThere are multiple ways to extract/select variables/columns. Here are two methods that we have previously used:\n\ndf[, c(\"Control\", \"Trt2\")] # by name\n\ndf[, c(1, 2)]  # by column index\n\n\n\n2.3 Make new variables (columns)\nLet’s create two new variables from existing ones:\n\ndf$Trt1.log &lt;- log(df$Trt1)\ndf$Trt2.log &lt;- log(df$Trt2)\n\n\n\n2.4 Extract observations (rows)\nThere are multiple ways to extract/filter observations/rows. Here are two ways we can do this:\n\n# Using [,]\ndf[df$Trt1.log &lt; 3.5, ]\n\ndf[df$Trt2.log &gt; 4.2 & df$Block == \"a\", ]\n\n# Using subset\nsubset(df, df$Trt2.log &gt; 4.2 & df$Block == \"a\")\n\n\n\n2.5 Arrange observations (rows)\nSorting is an operation that we typically perform when manipulating our dataset.\n\n# ascending order of Block (alphabetic) followed by ascending order of Trt2.log\ndf[order(df$Block, df$Trt2.log) , ]\n\n# descending order of Block (alphabetic) followed by ascending order of Trt2.log\ndf[order(rev(df$Block), df$Trt2.log) , ]\n\n\n\n2.6 Summarize observations (rows)\nThere are numerous ways to accomplish this task, and we will discover additional methods as we progress to the tidyverse package.\n\n# Manually create a data.frame\ndata.frame(Trt1.mean = mean(df$Trt1),\n           Trt1.sd = sd(df$Trt1),\n           Trt2.mean = mean(df$Trt2),\n           Trt2.sd = sd(df$Trt2))\n\n\n\n2.7 Summarize rows within groups\nTypically, our goal is to summarize data according to specific variables. Below is how we can achieve this:\n\n# First operate in the data.frame by group\ndf_by &lt;- by(df, \n   INDICES = list(df$Block),\n   FUN = function(x){\n     data.frame(Block = unique(x$Block),\n                Control.mean = mean(x$Control),\n                Control.sd = sd(x$Control),\n                Trt1.mean = mean(x$Trt1),\n                Trt1.sd = sd(x$Trt1),\n                Trt2.mean = mean(x$Trt2),\n                Trt2.sd = sd(x$Trt2))\n   })\n\n# Then combine the results into a data.frame\ndo.call(rbind, df_by)\n\nAlternatively, we can use the aggregate() function:\n\ndf.by &lt;- do.call(data.frame, aggregate(cbind(Control, Trt1, Trt2) ~ Block, data = df, FUN = function(x) c(mean = mean(x), sd = sd(x) ) ))\ndf.by\n\nLet’s take a look at each treatment graphically (we will do more data viz soon!):\n\nbarplot(df.by$Control.mean, names.arg =  paste(df.by$Block)) \n\nbarplot(df.by$Trt1.mean, names.arg =  paste(df.by$Block))\n\nbarplot(df.by$Trt2.mean, names.arg =  paste(df.by$Block))\n\n\n\n2.8 Reshape our data frame\nWide to long format:\nIn data analysis, the need to reshape the data frequently arises in order to enhance manageability and usefulness. Reshaping the data entails converting it from one format, such as wide, to another, like long, or vice versa. Such transformations aid in facilitating data accessibility, simplifying analysis, and providing more information.\n\nl &lt;- reshape(df, \n             varying = c(\"Control\", \"Trt1\", \"Trt2\", \"Trt1.log\", \"Trt2.log\"), \n             v.names = \"Yield\", \n             timevar = \"Treatment\", \n             times = c(\"Control\", \"Trt1\", \"Trt2\", \"Trt1.log\", \"Trt2.log\"), \n             new.row.names = 1:1000, \n             direction = \"long\")\n\nl"
  },
  {
    "objectID": "posts/S07E05_basics_05/index.html#practice",
    "href": "posts/S07E05_basics_05/index.html#practice",
    "title": "R Basics 5: Data Manipulation With Base R",
    "section": "3 Practice",
    "text": "3 Practice\nBefore seeking assistance from others, it is generally advisable for you to attempt to resolve the problem on your own. R provides comprehensive tools for accessing documentation and searching for help.\n\n3.1 Exercise 1\n\n\nLet’s use the same data frame df we created at the beginning of this session (Click for the answer)\n\nPlease go to the beginning of this session and re-run the code.\n\n\n\n3.2 Exercise 2\n\n\nA more informative variable could be one showing the difference between the treatment and the control. Create two new variables: Trt1.Delta and Trt2.Delta. (Click for the answer)\n\n\ndf$Trt1.Delta &lt;- df$Trt1 - df$Control\ndf$Trt2.Delta &lt;- df$Trt2 - df$Control\n\n\n\n\n3.3 Exercise 3\n\n\nCreate a new data frame df_delta containing the following variables (columns): Block, Trt1.Delta, and Trt2.Delta. (Click for the answer)\n\n\ndf_delta &lt;- df[, c(\"Block\", \"Trt1.Delta\", \"Trt2.Delta\")]\n\n\n\n\n3.4 Exercise 4\n\n\nSummarize Trt1.Delta and Trt2.Delta by Block. Produce the mean and standard deviation for each variable. (Click for the answer)\n\n\ndf.by &lt;- do.call(data.frame, aggregate(cbind(Trt1.Delta, Trt2.Delta) ~ Block, data = df, FUN = function(x) c(mean = mean(x), sd = sd(x) ) ))\ndf.by\n\n\n\n\n3.5 Exercise 5\n\n\nIn the end, our goal is to conduct statistical analysis to assess the impact of the treatment. However, the current data format does not allow us to proceed with our analysis. To fix this, please transform the data frame df_delta from a wide format to a long format. Please name this new data frame as long_delta. (Click for the answer)\n\n\nl &lt;- reshape(df_delta, \n             varying = c(\"Trt1.Delta\", \"Trt2.Delta\"), \n             v.names = \"Yield\", \n             timevar = \"Treatment\", \n             times = c(\"Trt1.Delta\", \"Trt2.Delta\"), \n             new.row.names = 1:1000, \n             direction = \"long\")"
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#introduction",
    "href": "posts/S06E01_website_01/index.html#introduction",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to begin this semester’s Code Club with a series on making yourself a website. There are lots of reasons why you might want a website, including to:\n\nhave a web presence about yourself (so when people google you, they can find your relevant info)\nhave a blog where you post about whatever it is you want to post about\nshare your research or data\n\nSome of you may already have a simple free or paid website for yourself, that you made through www.u.osu.edu, Squarespace, or Google Sites. These tools don’t require you to be able to code, and allow you to create a website with different levels of customization and interactivity.\nFor the next few sessions, we are going to go over making a website using Quarto. Quarto can be used as an open-source publishing system and you can integrate content from Jupyter notebooks, plain text markdown, Python, R, Julia and others. We are going to use Quarto integrated with R.\n\nTake a look at a gallery of Quarto website examples.\n\nWe picked this particular platform to go over in Code Club since its lightweight, customizable, free, and integrates with R which you’re probably learning anyway. I am going to start going through an example that will be my personal website. I picked this example because I thought this might be of interest to most of you."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#installation",
    "href": "posts/S06E01_website_01/index.html#installation",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "2 Installation",
    "text": "2 Installation\nTo render your website in RStudio, you will need to have the rmarkdown R package installed. You can do so by typing (or copying) the following into your R Console inside RStudio:\n\ninstall.packages(\"rmarkdown\")\n\nWhile not necessary for basic website building inside RStudio, it will also be a good idea to have Quarto installed moving forward. This is not an R package, but is a separate piece of software. To install it, go to https://quarto.org/docs/get-started/ and the correct installer for your operating system should be highlighted in a blue box. Click on that box to download and once downloaded, click on the installer to install Quarto.\n\n\n\nThe blue box should highlight the installer for your operating system."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#initiating-your-website-project",
    "href": "posts/S06E01_website_01/index.html#initiating-your-website-project",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "3 Initiating your website project",
    "text": "3 Initiating your website project\nThe first step to getting a website is to open up a new project in RStudio.\nStart by going to File &gt; New Project &gt; New Directory. When asked which Project Type you want, pick Quarto Website. Note that you can also initiate a Quarto Blog which is a type of Quarto Website - since the website template is simpler we are going to start there, and can change back in the future if you want. If you want to read ahead, here is a nice website about making your Quarto website into a blog.\n\n\n\na screen shot of the new project wizard - we are picking Quarto Website, or the third from the bottom choice\n\n\nYou will then be asked where you want this website to live in your computer. Under Directory Name pick the name of the folder you want your content to be in, and Create project as subdirectory of as where you want the location on your computer. I have used the Knitr engine for website building.\n\n\n\na screen shot of the new project wizard where we indicate our directory name and where that directory will reside. we use knitr engine to run, and are not creating a git repo, using renv, or using visual markdown editor. we are opening in a new session\n\n\nI am not creating a git repository (since we haven’t gone over that yet, we will add it later after we finish our site), am not using renv with this project (which automatically saves your environment), and I am not default using the visual editor (which let’s you look at your markdown files how they will look when executed) since I want you to get used to looking at markdown. You can always toggle the visual editor later.\nOnce you do this basically you have all the bones of a website! Congratulations 🥳"
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#orienting-to-your-website",
    "href": "posts/S06E01_website_01/index.html#orienting-to-your-website",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "4 Orienting to your website",
    "text": "4 Orienting to your website\nA new RStudio window should have opened (since we checked the box in the previous step Open in new session) that has your new R project opened.\nWe now see the four quadrants of RStudio:\n\n\n\na screenshot of four quadrants of rstudio\n\n\n\nthe top left where the two website files index.qmd and _quarto.yml are open\nthe bottom left where we see the console\nthe top right where we see the tabs: Environment (which is currently empty), History (which we won’t use), Connections (which we won’t use), Tutorial (which we won’t use), and a new one Build (which is how we render our site)\nthe bottom right where we see Files (which houses the new files that populate our website), Plots (which you’ve seen before and where plots can be rendered if you don’t like them inline), Packages (which shows all the packages loaded in your R), Help (which you’ve seen before, and where you can get help), Viewer (a new one where we can see a preview rendering of our website), and Presentation (where we can see a preview rendering a presentation but we aren’t doing that right now)."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#building-your-site",
    "href": "posts/S06E01_website_01/index.html#building-your-site",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "5 Building your site",
    "text": "5 Building your site\nLet’s see what our website looks like before we’ve done anything. If you go to the Build tab in the top right quadrant and click Render Website your site will render and show up in the Viewer in the bottom right."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#looking-around",
    "href": "posts/S06E01_website_01/index.html#looking-around",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "6 Looking around",
    "text": "6 Looking around\nYou can now click around in your new and very unexciting website. Let’s look around and then we will go through the file structure to see how the two are related.\nAlong the top, or if you click the three lines in the top right (depending on the size of your browser page) you can see by default we get a Home and About page. If we click ‘website’ at the top, we go back to Home. We also have a search bar that allows us to search on our site.\nNow that we know what information we see on our site, we can look at the files that are used to build the site and try and interpret them.\n\n\n\na screenshot of the files generated by creating our skeleton website in the bottom right quadrant\n\n\nBefore we open the files, let’s talk about the file extensions and what they mean:\n\n.yml is a YAML or the file that indicates how the website will be configured\n.qmd is a Quarto markdown document, and if you’re familiar with RMarkdown .Rmd documents its very similar. It contains both text written in markdown and executable code.\n.css is a Cascading Style Sheets file that indicates the way to style an HTML document (i.e., your website)\n.Rproj is a R Project file that designates your working directory\n\nWe also have a folder _site which houses the knitted website files. More about this later."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#index.qmd",
    "href": "posts/S06E01_website_01/index.html#index.qmd",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "7 index.qmd",
    "text": "7 index.qmd\nThis index.qmd file indicates what the home page of the site will look like.\n\n\n\na screenshot of the index.qmd file\n\n\nIntuitively we can compare this file to what the homepage of the website looks like. You can try editing this website, saving, and then click Render and see how this changes what the site looks like in the Viewer (bottom right quadrant). You can check Render on Save so that whenever you save, the file automatically renders.\nPlay around with adding text, code, headers, images, whatever you might want on your website homepage."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#about.qmd",
    "href": "posts/S06E01_website_01/index.html#about.qmd",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "8 about.qmd",
    "text": "8 about.qmd\nThis about.qmd file indicates what the about page of the site will look like.\n\n\n\na screenshot of the about.qmd file\n\n\nJust like with the index.qmd file, you can play around with this page."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#quarto.yml",
    "href": "posts/S06E01_website_01/index.html#quarto.yml",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "9 _quarto.yml",
    "text": "9 _quarto.yml\nThe YAML file indicates how the site should be configured.\n\n\n\na screenshot of the _quarto.yml file\n\n\nYou’re probably not familiar with these .yml files but still its not horribly difficult to figure out what the different bits do.\nAt the top, project type is indicated as website. We don’t want to change that now.\nIn the next section beginning at line 4, we can have some specific information for how the website populates. The title is listed as “website” - we can change that to what we want at the top of our website. There is also a specification for what are the items in your navitation bar - here we have that the Home text will link to the index.qmd, and the next link is about.qmd. You can make more .qmd files that have other information and refer to them here and they will also populate in your navigation bar.\nIn the third section at line 12, we can see some information on the setting of the website format. We have a html site, the theme is something called “cosmo” (see here for some other options), we are using the styles.css file for css theming (actually that file is currently blank but thats ok), and we are indicating toc (or table of contents) as true, therefore we have a table of contents.\nHere you can find some documentation about all the different stuff you can put in your YAML for a website."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#playing-around",
    "href": "posts/S06E01_website_01/index.html#playing-around",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "10 Playing around",
    "text": "10 Playing around\nNow that we have a general understanding of whats in our site, try playing around to begin customization to be how you want. We will do this for the rest of the session and please ask any questions on problems you come across, or share cool things you find!"
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#introduction",
    "href": "posts/S07E02_basics_02/index.html#introduction",
    "title": "R Basics 2: Scripts and Objects",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of last week\nLast week, we installed R and RStudio, learned about the distinction between the two, familiarized ourselves with RStudio, learned about “working directories” and RStudio Projects, and had our first interactions with R by using it as a calculator.\n\n\nLearning objectives for today\n\nA little more basic interaction with R: missing prompts and data types\nWriting code in R scripts instead of the console, and commenting your code\nUsing and naming R objects, and (not) saving your environment\n\n\n\nSetting up\nIf you created an RStudio Project for Code Club last week, then be sure to have that Project open before we get started. When you start RStudio, it may well have already opened that project for you (check the top-right corner, and see the screenshots below) — if not, click File (top menu bar) &gt; Recent Projects, and select your Project for Code Club from the list.\n\n\n\n\n\nYou have an open project “codeclub”\n\n\n\n\n\n\nYou have no Project open\n\n\n\n\nIf you don’t have an RStudio Project, no worries. We’ll be saving a file today, but you can always save it in an appropriate directory on the fly."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#a-little-more-basic-interaction-with-r",
    "href": "posts/S07E02_basics_02/index.html#a-little-more-basic-interaction-with-r",
    "title": "R Basics 2: Scripts and Objects",
    "section": "2 A little more basic interaction with R",
    "text": "2 A little more basic interaction with R\n\n2.1 The R prompt, revisited\nThe &gt; sign in your console is the R “prompt”. It indicates that R is ready for you to type something.\nWhen you are not seeing the &gt; prompt, R is either busy (because you asked it to do a longer-running computation) or waiting for you to complete an incomplete command.\nType the following into your console, and press Enter (called Return on a Mac, but you get the idea):\n\n203 /\n\nYou should notice that your prompt turned into a +.\n\n\nWhat is going on here? (Click for the answer)\n\nR is waiting for you to finish the command, since you typed an incomplete command: something has to follow the division sign /.\n\nTo get out of this situation, one option is to try and finish the command (in this case, by typing another number) — but here, let’s practice another option: aborting the command by pressing Esc.\nWhile it was obvious here that our command was incomplete, you will often type incomplete commands without realizing you did so (typical cases include forgetting a closing parenthesis )). Aborting and fixing the command in full is often the way to go, especially if you’re writing code in a script (as we’ll do below).\n\n\n\n2.2 R data types\nIf we just type a number and press Enter…\n\n203\n\n[1] 203\n\n\n… then R will simply print the number back to us.\nUnder the hood, R is calling a function called print()1, and we saw an example of this last week, too — typing the name of an object will print it’s value:\n\nx &lt;- 5\nx\n\n[1] 5\n\n\nRather than a number, what if we want R to print back to us some text, which in programming lingo is called a “character string”?\n\nFantastic\n\nError in eval(expr, envir, enclos): object 'Fantastic' not found\n\n\n\n\nWhat seems to be going wrong? (Click for the answer)\n\nWhenever you type a character string, R expects to find an object with that name (we saw our first object x last week, and will talk more about them today).\nWhen no object exists with that name, R will throw an error.\n\nWe can get R to print character strings back to us, and use them in other ways, as long as they are quoted:\n\n\"Fantastic\"\n\n[1] \"Fantastic\"\n\n\"Code Club\"\n\n[1] \"Code Club\"\n\n\nSo, R treats numbers and character strings differently: unlike numbers, character strings need to be quoted. This avoids confusion with objects because unquoted character strings are assumed to be objects, and also allows for “special characters” like spaces.\n\n\n\n\n\n\nQuote types\n\n\n\nDouble quotes (\"Fantastic\") and single quotes ('Fantastic') can be used interchangeably in R. Double quotes are preferred by most “style guides”.\n\n\nA little more on R’s main “data types”:\n\nNumbers are by default of the data type numeric (and can also be integer - whole numbers only)\nCharacter strings are by default of the data type character (and can also be factor for categorical data)\nThe final main data type is logical, which can be either TRUE or FALSE."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#exercises-1",
    "href": "posts/S07E02_basics_02/index.html#exercises-1",
    "title": "R Basics 2: Scripts and Objects",
    "section": "3 Exercises 1",
    "text": "3 Exercises 1\nA) Which of the following do you think would work and which would return an error:\n\nsession_topic &lt;- \"introduction\"\n\n\nsession_topic &lt;- introduction\n\nTry both to see which works and what error you get for the other one. Also, try to describe in words what the correct line of code is doing.\n\n\nSolution (click here)\n\nThe first of the two options was correct R code, while the second returns an error.\nIn general, keep in mind that unquoted character strings represent objects whereas quoted character strings are “literals”. Here, we wanted to assign the literal string \"introduction\" to the object session_topic — so the former should be quoted and the latter not.\nAn error is produced when you run the second option, because the object introduction does not exist (unless, of course, you had created an object of that name!):\n\nsession_topic &lt;- introduction\n\nError in eval(expr, envir, enclos): object 'introduction' not found\n\n\n\nB) Having run the code above, which of the following would make R print \"introduction\"?\n\n\"session_topic\"\n\n\nsession_topic\n\n\n\nSolution (click here)\n\nThe second option is the correct one: here, we want to have R print the value of the object session_topic (which we had just created in exercise A), so we shouldn’t use quotes.\n\nsession_topic\n\n[1] \"introduction\"\n\n\n\nC) Do you think the following code would successfully add 5 and 7? If not, what might happen instead?\n\n\"5\" + \"7\"\n\n\n\nSolution (click here)\n\nIn the code above, the “numbers” are saved not as numbers (in R lingo: as a numeric) but as character strings (character).\nR can’t add character strings, so it will return an error:\n\n\"5\" + \"7\"\n\nError in \"5\" + \"7\": non-numeric argument to binary operator\n\n\n(Perhaps you expected it to combine/“concatenate” the two strings in some way — this is in fact what Python would do. Or to automatically convert the characters to numbers, since you’re clearly wanting them to be numbers — but it doesn’t do that either.)\n\nD) (Bonus) Execute the following code and check its output:\n\nTRUE + FALSE\n\nHad you expected this result? If not, can you make sense of it: the fact that it works, the specific results, and the fact that we are not using quotes in the code.\nAnd based on your deliberations, what do you expect the following code to return?\n\nTRUE + TRUE\n\n\n\nSolution (click here)\n\n\nLogicals (TRUE and FALSE) can be used as numbers, in which case TRUE is equivalent to 1, and FALSE is equivalent to 0.\nTherefore, TRUE + FALSE will return 1, and TRUE + TRUE will therefore return 2.\nLogicals (TRUE and FALSE) are made up of letters but are not character strings, so they shouldn’t be quoted."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#r-scripts",
    "href": "posts/S07E02_basics_02/index.html#r-scripts",
    "title": "R Basics 2: Scripts and Objects",
    "section": "4 R scripts",
    "text": "4 R scripts\n\n4.1 The editor pane\nJess showed us the four quadrants of RStudio last week:\n\n\n\n\n\nOne of those contains a “Source Editor” pane, as in a Text Editor. Here, we can open and edit all sorts of text files — including R scripts. This quadrant will disappear if you have no files open:\n\nCreate and open a new R script by clicking File (top menu bar) &gt; New File &gt; R Script.\n\n\n\n\n4.2 Why use a script?\nAn R script is a text file that contains R code.\nSo far, we have been typing commands directly into the R console. But it’s a good idea to write and save most of our code in scripts.\nThis helps us keep track of what we’ve been doing, especially in the longer run, and to re-run our code after modifying input data or one of the lines of code.\n\n\n\n\n\n\nInteractive scripts\n\n\n\nFor those of you who are familiar with the notion of a script from other contexts or programming languages — saving our code as a script does not mean that we necessarily need to run the entire script all at once.\nIn R, it is instead most common to write and run code interactively, often line by line.\n\n\n\n\n\n4.3 Saving the script\nLet’s save this new script right away…\n\nClick File &gt; Save As\n\n… and give it a descriptive name like codeclub_02.R:\n\nYou may want to put the script in a folder for Code Club — which should be automatically selected if you are using your Code Club RStudio Project.\nMake sure it has the file extension .R — which should also have been automatically suggested by the pop-up window.\n\n\n\n\n\n\n\nFile extensions\n\n\n\nAn R script is just a plain-text file and you could also save it with, for example, a .txt extension — this will not break the file, but does have drawbacks.\nWhen you use a .R extension, your computer and RStudio alike will recognize it as an R script. In RStudio, this means you’ll get some formatting that helps when writing your R code, and it can even recognize and warn you about certain errors in your code.\n\n\n\n\n\n4.4 Sending code to the console\nIf you write most of your code in a script in the Editor, as we recommended above, wouldn’t it be a hassle to execute it? Do you need to copy-and-paste the code into the console? Luckily not.\nStart by by typing another simple calculation, this time in your R script:\n\n203 / 2.54\n\nWith the cursor still on this line of code in the script, press Ctrl + Enter (or, on a Mac: Cmd + Enter).\nThe code will be copied to the R console and executed (so you should see the result printed as shown below), and additionally, the cursor will move to the next line in the script.\n\n\n[1] 79.92126\n\n\n\n\n\n\n\n\nMore on sending code to the console\n\n\n\nNote that it doesn’t matter where on the line your cursor is: Ctrl + Enter will always execute the entire line unless you have selected only part of it. (And when you have selected multiple lines of code, it will execute them all.)\nTo execute a line of code, an alternative to the keyboard shortcut is to click the Run button in the bar right above your script, but we recommend using the keyboard shortcut — it is much faster, at least once you get used to it.\n\n\nFor the rest of this Code Club session, try to write your code in your script, and send it to the console using the keyboard shortcut.\n\n\n\n4.5 Commenting\nYou can use # signs to comment your code:\n\n# Divide by 2.54 to get the wingspan in inches:\n203 / 2.54    # Original measurement was in cm\n\n\nAnything to the right of a # is ignored by R, meaning it won’t be executed\nYou can use # both at the start of a line (entire line is a comment) or anywhere in a line following code (rest of the line is a comment)\nIn your R script, comments are formatted differently so you can clearly distinguish them from code\n\nWe recommend that you use lots of comments in your R scripts! They are useful not only for others that you may share your code with, but also for yourself when you look back at your code a day, a month, or a year later."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#r-objects",
    "href": "posts/S07E02_basics_02/index.html#r-objects",
    "title": "R Basics 2: Scripts and Objects",
    "section": "5 R Objects",
    "text": "5 R Objects\n\n5.1 Assigning stuff to R objects\nAs we’ve seen a couple of times now, we can assign a value to an object with the assignment operator &lt;-. A few more examples:\n\nwingspan_cm &lt;- 203\nconversion &lt;- 2.54\n\nType that into your script, and use Ctrl/Cmd + Enter twice to send it to the console.\n\n\n\n\n\n\nThe Environment tab\n\n\n\nRecall also that the objects you create get added to your “environment”, which RStudio shows in the Environment tab in the top-right panel — check that wingspan_cm and conversion are indeed there.\n\n\nAfter you’ve assigned a number to an object, you can use it in calculations like so:\n\nwingspan_cm / conversion\n\n[1] 79.92126\n\n\nOr, similarly:\n\nwingspan_inch &lt;- wingspan_cm / conversion\nwingspan_inch\n\n[1] 79.92126\n\n\nThis illustrates that when you execute code with objects, R substitutes the object name that you provide by its contents under the hood. In other words, the object is just a reference to the underlying value(s).\n“Object” is a general term that encompasses R items of any size or complexity:\n\nObjects can also contain character strings, collections of numbers or character strings (including in table or matrix format), and functions.\nThe above does not mean that “anything goes” — R distinguishes between a limited number of “data structures”, each with their own defined structure. We’ll learn about the most important ones next week.\nThe objects we created so far are called vectors, which are more commonly thought of as containing a series of values, but in R, can have a length of one2.\n\n\n\n\n\n\n\nMore on assignment operators\n\n\n\nThe keyboard shortcut for the assignment operator is Alt/Option + -.\nNote that you can also use = as an assignment operator, as is common in other programming languages. But because = can have other meanings, we recommend sticking with the &lt;- combination.\n\n# This also works to assign the value 5 to x (but we recommend using &lt;- instead)\nx = 5\n\n\n\n\n\n\n5.2 Object names\nObjects can be given almost any name such as x, current_temperature, or subject_id. Some pointers on object names:\n\nBecause R is case sensitive, wingspan_inch is different from Wingspan_inch!\nAn object name cannot contain spaces — so for readability, you should separate words using:\n\nUnderscores: wingspan_inch (this is called “snake case”, which we often use in Code Club)\nPeriods: wingspan.inch\nCapitalization: wingspanInch or WingspanInch (“camel case”)\n\nYou will make things easier for yourself by naming objects in a consistent way, for instance by always sticking to your favorite case style like “snake case.”3\nObject names can contain but cannot start with a number: x2 is valid but 2x is not. (There are also some other restrictions that are beyond the scope of this introduction4.)\nMake object names descriptive yet not too long — this is not always easy!\n\n\n\nThere are only two hard things in Computer Science: cache invalidation and naming things.\n– Phil Karlton\n\n\n\n\n5.3 Saving the environment\nRecall that your environment contains all the R objects that you created. When you close R, it will probably ask you whether you want to save your environment (AKA workspace) — something like:\n\n\n\n\n\nWhen you do save this, the next time you start R, R will reload your environment so you can pick up right where you left off. While this may seem convenient, we recommend that you don’t do this.\n\n\nCan you think of a reason why automatically saving and reloading your workspace may not be a good idea? (Click for the answer)\n\nThe main reason why this is generally not considered good practice relates to the idea that you should be able to reproduce your environment (and more broadly speaking, your analysis) from the code in your script.\nRemember that you can modify your environment either by entering commands in the console directly, or by running them from a script — or even from multiple different scripts. Additionally, it is common to run lines in a script out of order, or write lines in the script that you don’t execute.\nTherefore, if you “carry around” the same environment across multiple different sessions, you run a greater risk of not having a reproducible set of steps in your script.\n\nGenerally, a better way of working in R than saving your entire environment is to use and save scripts (as we’ve seen today) and to save specific outputs such as tables and plots (as we’ll see soon).\nTo make RStudio stop asking you about saving your workspace, click Tools &gt; Global Options &gt; General and (un)check the boxes as follows:\n\n\n\n\n\n\n\n\n\n\n\nRestarting R\n\n\n\nTaking the ideas about reproducibility a step further, it can be a good idea to occasionally restart R in the middle of working on some code.\nThat way, you can check whether the code in your script is correct and complete, that you are not relying on code that is not in the script, and so on.\nTo do so, you don’t need to close and reopen RStudio itself: under Session in the top menu bar, you can click Restart R (and you should also see the keyboard shortcut for it in the menu bar: Ctrl + Shift + F10 (Windows) / Cmd + Shift + 0 (Mac)."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#exercises-2",
    "href": "posts/S07E02_basics_02/index.html#exercises-2",
    "title": "R Basics 2: Scripts and Objects",
    "section": "6 Exercises 2",
    "text": "6 Exercises 2\nA) Why do the following bits of code fail with an error?\n\nsession number &lt;- 2\n\n\nExpert_Level &lt;- 3\nExpert_level\n\n\n\nSolution (click here)\n\nThe first fails because an object name cannot contain a space.\nThe second fails because of a difference in capitalization (Level vs level): recall that R is case sensitive.\n\nB) What will be the value of distance_miles after executing the following lines in R: 31 or 62?\n\ndistance_km &lt;- 50\ndistance_miles &lt;- distance_km * 0.62    # distance_miles is now 31 \ndistance_km &lt;- 100\n\ndistance_miles                          # What is the value of distance_miles now?\n\nCome up with an expectation, then run the code above and see if you were right. What does this tell you about “linkage” between objects in R?\n\n\nSolution (click here)\n\nObjects don’t get “linked” to each other at all in R.\nIn other words, distance_miles was really assigned the outcome of distance_km * 2, which is 31, rather than its “formula”.\nTherefore, distance_miles wasn’t (and couldn’t be!) “updated” after we changed the value of distance_km, and continued to be 31:\n\ndistance_km &lt;- 50\ndistance_miles &lt;- distance_km * 0.62    # distance_miles is now 31.07 \ndistance_km &lt;- 100\n\ndistance_miles                          # What is the value of distance_miles now?\n\n[1] 31\n\n\n\n\n\n\nAttribution\nThis was modified after material from The Carpentries, especially from this Data Carpentry workshop and this “R for Ecology” workshop."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#footnotes",
    "href": "posts/S07E02_basics_02/index.html#footnotes",
    "title": "R Basics 2: Scripts and Objects",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWe’ll talk about functions soon, likely next week.↩︎\nObjects that contain a single value are a distinct data structure called “scalars” in some languages, and are more informally also called “variables”.↩︎\nIt is also recommended to use nouns for variable names, and verbs for function names. For more, two popular R style guides are Hadley Wickham’s and Google’s.↩︎\nFor example, there are some names that cannot be used because they are the names of fundamental keywords in R (e.g., if, else, for, see here for a complete list). In general, it’s also best not to use the names of existing functions, even though this is possible.↩︎"
  },
  {
    "objectID": "posts/S06E02_website_02/index.html",
    "href": "posts/S06E02_website_02/index.html",
    "title": "Quarto website 2",
    "section": "",
    "text": "In today’s session, you will add a new page to the website that you created in the first session.\nThen, we will talk about the “YAML” markup mini-language that is used to configure your website, and will make some changes to the YAML header for your new page and the YAML in the _quarto.yml file with site-wide settings."
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#adding-a-new-page-to-your-site",
    "href": "posts/S06E02_website_02/index.html#adding-a-new-page-to-your-site",
    "title": "Quarto website 2",
    "section": "1 Adding a new page to your site",
    "text": "1 Adding a new page to your site\nLet’s create a new page for your site. If you already have an idea for a page that you would like to add to your site, you can go with that. Otherwise, you can follow along with my example, which will be a page about research projects on a personal website.\nEach page on your website has a corresponding .qmd source document. Currently, we just have two pages:\n\nA home page, for which index.qmd is the source.\nAn “about page”, for which about.qmd is the source.\n\nSo, to create a new page, we will create a new Quarto document — in RStudio, click File =&gt; New File =&gt; Quarto Document:\n\n\n\nThe window to create a new Quarto document\n\n\nUnlike last week, make sure the “Use visual markdown editor” box is checked, and then click the “Create Empty Document” button in the bottom left.\nOnce the file has been created, let’s save it straight away: press Ctrl/Cmd+S. Save it in the top-level folder for your website, i.e. the same folder that contains index.qmd and about.qmd. If you’re making a page for which you have your own ideas, you can name it accordingly — otherwise, save it as research.qmd.\n\n\n\nYour near-empty document should look something like this\n\n\nThe newly created document will only contain a few lines, as shown in the screenshot above. This is the so-called “YAML header”.\nWe talked a bit about the YAML “markup language” last week, mostly in the context of the _quarto.yml file, which consists only of YAML content, unlike this .qmd file. Let’s dive a little deeper into YAML, because it’s one of the key components of your website’s source."
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#a-little-more-about-yaml",
    "href": "posts/S06E02_website_02/index.html#a-little-more-about-yaml",
    "title": "Quarto website 2",
    "section": "2 A little more about YAML",
    "text": "2 A little more about YAML\nYAML (“YAML Ain’t Markup Language”, a silly joke of a name) is a simple format commonly used for configuration. In the source files for your website, there is a lot of YAML content straight away.\nFirst, you have the _quarto.yml file that configures your website, including its navigation elements that are visible on every page of the site, like the “navbar” at the top. But there is also YAML in the headers of all .qmd files. For example, the top of our newly created research.qmd should read:\n---\ntitle: \"Untitled\"\n---\nAs opposed to the _quarto.yml file, this YAML header:\n\nIs surrounded by lines that only contain three dashes ---, that mark the beginning and the end of this YAML header.\nConfigures just this individual page, whereas the YAML in _quarto.yml specifies site-wide configurations.\n\n\nYAML consists of entries of key-value pairs: in the example above, title is the key that determines what the document’s title will be, and \"Untitled\" is the current value.\nValid YAML keys are limited to what has been pre-defined by others (i.e., in this case, the developers of Quarto), and the list of possible keys depends on the document type. The Quarto website has a full list of valid YAML keys for the _quarto.yml file as well as a a list for HTML pages, which is the kind of output that your .qmd files will produce when rendered.\nDepending on the key, the value can be:\n\nA “free-form string” of text, like for a title\nConstrained to a series of possible values, like for the theme key, which can set the overall look of a page to one of a few dozen available “themes”\nAn on/off switch using true/false, like whether to show a Table of Contents using the toc key.\n\n\n\n2.1 YAML’s structure\nYAML’s structure is quite simple, but it does have a few rules. Each entry is generally on its own line. It has a hierarchical structure in that many values can itself be given key-value pairs to specify additional options. For example, see this section from your _quarto.yml file:\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\nNote how the values for keys that simply take a value (above: theme, css, and toc) and have no “child keys” are on the same line as the key.\nIn contrast, keys whose values are really “child keys” (above: format and html):\n\nAre followed by a colon :\nAre on a line by themselves\nHave their child keys on the next line(s), indented one more level.\n\nIndentation in YAML has to use either two or four spaces (no tabs!) per indentation level, and YAML is sensitive to indentation errors. (Note that RStudio will by default insert multiple spaces instead of a true tab when you press the Tab key, so you can still use that just fine.)\n\n\n\n\n\n\n\nSite-wide vs. page-specific configuration\n\n\n\nThis format =&gt; html section in the _quarto.yml file will set defaults for the formatting of individual pages on your website. You can use the same keys (e.g. theme, css, and toc shown above) in the YAML header of your qmd files, which would override these site-wide settings.\n\n\n\nA final component of YAML syntax, with lists of entries, is used in the website section of _quarto.yml:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nHere, each entry (= each page on your website) is preceded by a dash -, and:\n\nThe top entry, for the homepage, has an href key pointing to the relevant file, as well as a text key (note: same indentation level, no additional dash) that will set what text is being displayed for this link.\nThe bottom entry uses an alternative specification method, with just a pointer to the file. When you do this, the displayed test on the website would be the same as the file name without the .qmd extension, namely “About”.\n\n\n\n\n\n\n\nYAML errors (Click to expand)\n\n\n\n\n\nIf you made a mistake in the YAML, you will see an ominous-looking box like this pop up:\n\n\n\nYou’ll see this error if you specified an invalid key in your YAML. Don’t panic! If you don’t already know what’s wrong, carefully read the error which is quite informative."
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#modifying-the-yaml-header-of-our-new-page",
    "href": "posts/S06E02_website_02/index.html#modifying-the-yaml-header-of-our-new-page",
    "title": "Quarto website 2",
    "section": "3 Modifying the YAML header of our new page",
    "text": "3 Modifying the YAML header of our new page\nLet’s start by changing the page’s title to title: \"My Research\".\nThen, we can add a few new YAML entries to further populate the “title block” (top part) of your page:\n\nsubtitle: \"These are my ongoing and past research projects\"\ndate: 2023-09-11\nauthor: \"Lucy T. Hedgehog\", or for multiple authors, use the following syntax:\nauthor:\n  - Lucy T. Hedgehog\n  - Lucy T. Hedgehog's advisor \n\n\n\n\n\n\n\nYAML auto-complete and quoting (Click to expand)\n\n\n\n\n\n\nNote that when you type a new entry in the YAML header, RStudio will have an auto-completion feature with information boxes:\n\n\n\n\n\n\n\nIn the examples above, we have double-quoted (“…”) free-form YAML values like title. This is optional: as long as your title doesn’t contain any special characters, it would also work without quotes.\n\n\n\n\n\nHere are a few of the many other possible HTML page YAML keys that are particularly useful:\n\ndate-modified: If you wrote a page originally on a certain date, but made some modifications afterwards, you can get a separate date entry for the modifications. Useful for e.g. blog posts and reports.\ntitle-block-banner: true: Put the title block (title and subtitle) in a “banner” by adding a background color.\nnumber-sections: true: Number sections (as determined using headers and their levels) hierarchically.\ntoc-location: Where the Table of Contents should show up — one of left, right (default), or body"
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#exercises-i",
    "href": "posts/S06E02_website_02/index.html#exercises-i",
    "title": "Quarto website 2",
    "section": "4 Exercises I",
    "text": "4 Exercises I\n\nExperiment with YAML header options\n\nOn your new page:\n\nTry adding the title-block-banner and see if you like that kind of format.\nAdd a few headers of different levels (start with “Header 2”, the title is basically the one level 1 header) — you can do so by clicking the dropdown menu that will say Normal:\n\n\n\n\n\nTry turning on number-sections and play around with the toc-location (Your _quarto.yml has an entry toc: true, so a table of contents will by default be shown on very page)."
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#modifying-the-_quarto.yml-file",
    "href": "posts/S06E02_website_02/index.html#modifying-the-_quarto.yml-file",
    "title": "Quarto website 2",
    "section": "5 Modifying the _quarto.yml file",
    "text": "5 Modifying the _quarto.yml file\nAs mentioned above, the _quarto.yml file solely consists of YAML configurations, and these settings apply to the entire website.\nThe two most important “sections” in this file are:\n\nwebsite, where we can control things like the site’s navigation elements that will show up on every page\nformat =&gt; html, where we can specify page-level formatting settings. Here, we can use the same YAML keys that we could use in the YAML header of our new page (and any other page), except that the settings will be applied across all pages on the site.\n\n\n\n5.1 The website section\nIn my example, this section currently reads as follows – yours should be the same except for the title unless you did some customization yourself already:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nThe navbar key represents a navigation bar that is always shown across the top of the site, which should be a good default for most websites. But if you want a website navigation bar on the side, or combined top and side navigation (the latter is useful for sites with a lot of contents, and is used for example on Quarto’s own documentation website), this is possible: see Quarto’s Website Navigation docs.\nAny entries under the left key will be left-aligned on the navbar, i.e. consecutive entries start on the left-hand side of the navbar, moving rightward with every added entry. We could also add right-aligned entries with a right key (see the exercise below).\n\n\n\n\n\n\nNavbar auto-collapse (Click to expand)\n\n\n\n\n\nIf the width of your viewing window is narrow (like it often is in RStudio’s “Viewer”, as well as on phones), the navbar will be automatically collapsed into a “Hamburger menu:”\n\n\n\n\n\n\n\n\n\nIf we want our new page to show up in the navbar, we’ll have to add it as a new entry:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n      - href: research.qmd\n        text: My Research\n\nSome other useful keys for the website section include (see this Quarto docs page for a full list):\n\nback-to-top-navigation (a child key of website): When set to true, this will show a “Back to top” button once you reach the bottom of a page.\nfavicon (a child key of website): A favicon is an icon or small image that shows up in your browser next to the name of the website, see the icons shown in screenshot:\n\n\n\n\n\n\n\nicon (a navbar entry like href and text): This will allow you to show an icon instead of (default for external links) or in addition to text (default for internal links) for a link in your navbar. See here for a list of available icons. For example:\n\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n        icon: house\n\n\n\n\n\n\n\n\n5.2 The html format section\nHere is what the format section of your _quarto.yaml should look like:\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nAs mentioned before, the configuration done in this section can use the same keys as those in the YAML header for individual pages, but the settings done in _quarto.yaml will apply across the entire website.\nFor now, we’ll only talk about one key: theme. This will change the overall look of your website to a number of preset themes, each with different fonts and colors. While you can also completely customize your website’s look yourself, using one of these themes should work well for most of us.\nYou can see a visual list of available themes at https://bootswatch.com/. The default theme is cosmo, as you can see above. As an example, if we change Lucie’s website theme to lux:"
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#exercises-ii",
    "href": "posts/S06E02_website_02/index.html#exercises-ii",
    "title": "Quarto website 2",
    "section": "6 Exercises II",
    "text": "6 Exercises II\n\nSite-wide configuration\n\nModify your _quarto.yml to configure your website. You can play around with whatever you prefer, but here are some suggestions:\n\nTry several different themes and pick one for your website.\nMove the navbar entry for the about.qmd page to the right-hand side.\nAdd one more icons to the Navbar, for example:\n\nAdd a link to your Twitter account and use the twitter icon\nIf you have one, add a link to your GitHub account and use the github icon\nAdd e.g. a question mark icon to your About page link (search for one here).\nTake a look at the visual list of possible icons and see if there are some that you’d like to use.\n\nAdd a favicon for your website."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#introduction",
    "href": "posts/S07E04_basics_04/index.html#introduction",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to continue our discussion about vectors that Horacio started last week and talk about vectorized operations. It’s fine if you don’t know what this means, you will by the end of today’s session. We are also going to introduce the idea of a data frame."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#what-are-vectorized-operations",
    "href": "posts/S07E04_basics_04/index.html#what-are-vectorized-operations",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "2 What are vectorized operations?",
    "text": "2 What are vectorized operations?\nI think its easier to see 👀 an example of a vectorized operation, and then we can explain what is happening under the hood.\nLet’s create a vector of high temperatures for the weather in Columbus OH in Fahrenheit from the last 7 days. I took this data from January 19 to 25, 2024.\n\ntemps_F &lt;- c(26, 21, 24, 32, 33, 41, 51)\n\nWe can call our vector to see what it contains.\n\ntemps_F\n\n[1] 26 21 24 32 33 41 51\n\n\nA reminder that:\n\\[\n°F = 1.8 * °C + 32\n\\]\nWith some light rearrangement, we can write the code below so we can plug in a temp in Fahrenheit, and get out one in Celsius.\n\ntemps_C &lt;- (temps_F - 32)/1.8\n\ntemps_C\n\n[1] -3.3333333 -6.1111111 -4.4444444  0.0000000  0.5555556  5.0000000 10.5555556\n\n\nHere, we simply use the vector temps_F as we would any single number in a smple mathematical operation, and we convert each element or number in our our entire vector using the formula we provide. As a result, we can convert every element of our vector from Fahrenheit to Celsius.\n\nIt is worth mentioning that this is unique in R - many other programming languages would require a for loop or similar to do this operation, but because R is a vectorized language, this works easily and simply.\n\nHere is another example. Imagine you have a vector of values and you want to calculate the log base 2 value for each element.\n\nraw &lt;- c(20, 36, 42, 53)\n\nlog2 &lt;- log2(raw)\n\nlog2\n\n[1] 4.321928 5.169925 5.392317 5.727920\n\n\nThis is an example where we apply a formula transformation to a vector, but we can also use vectorized operations with two vectors."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#vector-by-vector-operations",
    "href": "posts/S07E04_basics_04/index.html#vector-by-vector-operations",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "3 Vector by vector operations",
    "text": "3 Vector by vector operations\nLet’s create some vectors. Note I am not using the c() function to create the vector - since I am using the : to indicate a string of integers from number 1 to number 2, under the hood, R automatically makes this a vector. If you were to use the c() function though you would get the same result.\n\n# create a vector with the values from 1 to 10, incrementing by 1\n# vector_1to10 &lt;- c(1:10) would also work\nvector_1to10 &lt;- 1:10\n\nvector_1to5 &lt;- 1:5\n\nvector_1to3 &lt;- 1:3\n\nvector_0to4 &lt;- 0:4\n\n\n\n\n\n\n\nWhat do you think will happen if we try and add vector_1to10 and vector_1to5?\n\n\n\n\n\n\n# a vector reminder\nvector_1to10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nvector_1to5\n\n[1] 1 2 3 4 5\n\n# adding\nvector_1to10 + vector_1to5\n\n [1]  2  4  6  8 10  7  9 11 13 15\n\n\nWe see that vector_1to5 gets recycled, meaning once the 5 elements in the vector have been used, the addition starts back from the beginning again. If we want to be explicit:\n\nElement 1 of vector_1to10 gets added to element 1 of vector_1to5\nElement 2 of vector_1to10 gets added to element 2 of vector_1to5\nElement 3 of vector_1to10 gets added to element 3 of vector_1to5\nElement 4 of vector_1to10 gets added to element 4 of vector_1to5\nElement 5 of vector_1to10 gets added to element 5 of vector_1to5.\nElement 6 of vector_1to10 gets added to element 1 of vector_1to5\n\nand so on…\n⚠️ This happens without R explicitly telling you this is happening. We do not get a warning.\n\n\n\n\n\n\n\n\n\nWhat do you think will happen if we try and add vector_1to10 and vector_1to3?\n\n\n\n\n\n\n# a vector reminder\nvector_1to10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nvector_1to3\n\n[1] 1 2 3\n\n# adding\nvector_1to10 + vector_1to3\n\nWarning in vector_1to10 + vector_1to3: longer object length is not a multiple\nof shorter object length\n\n\n [1]  2  4  6  5  7  9  8 10 12 11\n\n\n⚠️ We see that vector_1to3 gets recycled, but now we have a warning. We get this because the vector lengths are not divisible by each other to produce an integer. R still will perform our operation, but it tells us hey this might not be exactly what you want.\n\n\n\n\n\n\n\n\n\nWhat do you think will happen if we try and divide vector_1to10 by vector_0to4?\n\n\n\n\n\n\nvector_1to10 / vector_0to4\n\n [1]      Inf 2.000000 1.500000 1.333333 1.250000      Inf 7.000000 4.000000\n [9] 3.000000 2.500000\n\n\nWe see that vector_0to4 gets recycled, but now we have a new output we haven’t seen before, Inf which stands for infinity/infinite.\nIf we are then to try and sum this vector:\n\nsum(vector_1to10 / vector_0to4)\n\n[1] Inf\n\n\nWe get an answer of infinite. This is because we have at least one infinite value, so including it as part of a sum makes that sum infinite too.\n⚠️ Think about how this might work if you have NAs in your vector"
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#filtering-vectors",
    "href": "posts/S07E04_basics_04/index.html#filtering-vectors",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "4 Filtering vectors",
    "text": "4 Filtering vectors\nWe can also write code that allows us to filter our vector based on certain conditions. What if we wanted to know which observations had data where the temperature was above freezing? We could use a mathematical operator (in this case, &gt;) to find instances when the statement we provide is true.\n\ntemps_C &gt; 0\n\n[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\n\nWhen we run this code, we get a series of values corresponding to each element of the vector, and whether or not the statement we have prompted with (temps_C &gt; 0) is true or false.\nIf we wanted to see how many observations meet these criteria, we can take advantage of the fact that TRUE is coded as 1, and FALSE and 0.\n\nsum(temps_C &gt; 0)\n\n[1] 3\n\n\nWe know then that there are 3 observations where the temperature is above freezing.\nIf we want to know which observations are above freezing, we can use the function which() which shows us the indices of the elements in our vector for which our code evaluates to TRUE.\n\nwhich(temps_C &gt; 0)\n\n[1] 5 6 7\n\n\nThis tells us that the 5th, 6th, and 7th elements in our data have temperatures higher than freezing. In our vector we don’t have the specific days associated with each temperature embedded. We can assign meta-data to our values by using the function names() for our vector. I’ll show you how to do that below.\n\n# create a new vector that has the dates we want to assign\ndates &lt;- c(\"1/19\", \"1/20\", \"1/21\", \"1/22\", \"1/23\", \"1/24\", \"1/25\")\n\n# we can assign these dates as the \"names\" of our vector temps_C\nnames(temps_C) &lt;- dates\n\n# now our temps have dates associated with them\ntemps_C\n\n      1/19       1/20       1/21       1/22       1/23       1/24       1/25 \n-3.3333333 -6.1111111 -4.4444444  0.0000000  0.5555556  5.0000000 10.5555556 \n\n\nIf you knew you wanted to do this at the outset, you could create the vector along with its names all at once using the handy function structure().\n\n(temps_F_names &lt;- structure(temps_F,\n                           names = dates))\n\n1/19 1/20 1/21 1/22 1/23 1/24 1/25 \n  26   21   24   32   33   41   51 \n\n\n\nYou can also set other attributes using the function structure().\n\nYou might use the sometimes, but more likely you would want to work using a data frame."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#practice",
    "href": "posts/S07E04_basics_04/index.html#practice",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "5 Practice",
    "text": "5 Practice\n\n\n\n\n\n\nCreate a vector of 10 numbers, beginning at 2, incrementing by 11. Remember, if you call help() or put a ? before a function, you can learn more about its arguments and use. You might want to look back to last week’s Code Club if you don’t remember the simplified function for doing this.\n\n\n\n\n\n\na_vector &lt;- seq(from = 2, by = 11, length.out = 10)\n\na_vector\n\n [1]   2  13  24  35  46  57  68  79  90 101\n\n\n\n\n\n\n\n\n\n\n\nHow many of these values are even? Yes I know that I haven’t showed you how to do this but I am confident you can figure out how to :)\n\n\n\n\n\nA zero remainder means the number is even.\n\n# use modulo operator %% to see if a number is even\n# if the remainer is 0, it is even\na_vector %% 2\n\n [1] 0 1 0 1 0 1 0 1 0 1\n\n# how many are even?\n10 - sum(a_vector %% 2)\n\n[1] 5"
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#what-is-a-data-frame",
    "href": "posts/S07E04_basics_04/index.html#what-is-a-data-frame",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "6 What is a data frame?",
    "text": "6 What is a data frame?\n\n\n\n\n\nBelow I am creating a simple data frame, this is a rectangular data object with rows and columns. In reality, you will probably be reading your data in from a .csv or .xlsx file, but you can also construct a data frame directly in R. We are doing this with the function data.frame() which is a part of base R.\n\n# create a simple 3 by 4 data frame called small_df\n# columns are a, b, and c\n# values are numbers from 1 to 4, 5 to 8, and 9 to 12\nsmall_df &lt;- data.frame(a = 1:4, \n                       b = 5:8, \n                       c = 9:12)\n\nLet’s look at small_df.\n\nsmall_df\n\n  a b  c\n1 1 5  9\n2 2 6 10\n3 3 7 11\n4 4 8 12\n\n\nWe can think about a data frame as being composed of a series of vectors (as columns) squished together. In the case above, each column is of the same type, integer or numeric but this doesn’t have to be true. Note the first column of 1:4 is actually the row index - you can tell this as it doesn’t have a column name.\n\nVectors all must be of the same object type (i.e., character, numeric, logical). In a data frame, each column can be a different object type. This is very useful especially when you have to have meta-data combined with numeric data.\n\nWe call use some new functions to look more at our data frame.\nView() will open our data frame like you might be used to looking at a spreadsheet in Excel.\n\nView(small_df)\n\nstr() gives us the structure of the object x.\n\nstr(small_df)\n\n'data.frame':   4 obs. of  3 variables:\n $ a: int  1 2 3 4\n $ b: int  5 6 7 8\n $ c: int  9 10 11 12\n\n\ndim() gives us the dimensions of x.\n\ndim(small_df)\n\n[1] 4 3\n\n\n\n\n\n\n\n\nNote that when referring to a two-dimensional piece of data, R uses the syntax [rows, columns]\n\n\n\n\n\n\nNote, that if you use dim() on a vector (which has only one dimension), you will get something unexpected.\n\n# this doesn't work\ndim(temps_C)\n\nNULL\n\n\nFor a vector, instead you should use the function length() to figure out how many elements are in the vector.\n\n# this does work\nlength(temps_C)\n\n[1] 7"
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#performing-operations-on-a-data-frame",
    "href": "posts/S07E04_basics_04/index.html#performing-operations-on-a-data-frame",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "7 Performing operations on a data frame",
    "text": "7 Performing operations on a data frame\nNow that we have our small_df we can try performing some operations on it.\nWhat if you wanted to take the log base 2 for every value in small_df? Just like we did for a vector, we can simply use the function log2() on small_df. Here I am assigning the output of this to a new data frame called small_df_log2.\n\n(small_df_log2 &lt;- log2(small_df))\n\n         a        b        c\n1 0.000000 2.321928 3.169925\n2 1.000000 2.584963 3.321928\n3 1.584963 2.807355 3.459432\n4 2.000000 3.000000 3.584963\n\n\nRemember, if you assign something to an object, but also want it to print at the same time, just surround the whole thing in parentheses.\nWhat if I wanted to take the log base 2 of only column a? There are a few ways I can do that.\n\n7.1 By indexing\nI can use the square brackets [] to access certain parts of my data frame. Remember for data frames, the syntax is [rows, columns]. Let’s try some example where we access by using indices (i.e., the position of the row, column, or the combination) to grab different parts of our data frame.\n\n# first row, second column\nsmall_df[1,2]\n\n[1] 5\n\n# all rows, second column\nsmall_df[,2]\n\n[1] 5 6 7 8\n\n# third row, all columns\nsmall_df[3,]\n\n  a b  c\n3 3 7 11\n\n\nIs there any difference as to the types of objects we get when doing these different types of selection? We can use the function str() to see what type of R object we have in the different scenarios.\n\n# first row, second column\nstr(small_df[1,2])\n\n int 5\n\n# all rows, second column\nstr(small_df[,2])\n\n int [1:4] 5 6 7 8\n\n# third row, all columns\nstr(small_df[3,])\n\n'data.frame':   1 obs. of  3 variables:\n $ a: int 3\n $ b: int 7\n $ c: int 11\n\n\nBack to the original idea - how would we take the data only from column a and log base 2 transform it, but leave the rest of small_df as it is?\n\n# first save our df with a new name\n# this is like doing a \"save as\" for an existing df\nsmall_df_log2_a &lt;- small_df\n\n# log2 transform the first column, and then assign that back to the first column\nsmall_df_log2_a[,1] &lt;- log2(small_df[,1])\n\n# check to see if it worked\nsmall_df_log2_a\n\n         a b  c\n1 0.000000 5  9\n2 1.000000 6 10\n3 1.584963 7 11\n4 2.000000 8 12\n\n\nNote that column a now is the object type “dbl” or numeric, instead of “int” or integer, since our log2 transformation has made our values no longer integers.\n\n\n7.2 By name\nWe can also index by providing column names - this is a nice approach since when going back to read code, a column name is often more informative than a column index/number. Note that in this case the column name a is in quotes since it is a character string.\n\n# all rows, the column \"a\"\nsmall_df[,\"a\"]\n\n[1] 1 2 3 4\n\n\nWe can also use the dollar sign accessor $ to extract an element in a data frame or list. In the case of a data frame, you are accessing a column (though you could be accessing something else if a different type of object). Note that when you type the name of a data frame, and then the $, R will prompt you with some possible column names.\n\n\nsmall_df$a\n\n[1] 1 2 3 4\n\n\nBy using this syntax, you are turning your data frame into a vector. This may or may not be what you want to do, so just be aware.\n\n\n\n\n\n\nAccessing certain observations can also be performed using the tidyverse functions select() and filter(). If you don’t know what I’m talking about simply ignore this, we will go over it in a future Code Club."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#practice-1",
    "href": "posts/S07E04_basics_04/index.html#practice-1",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "8 Practice",
    "text": "8 Practice\n\n\n\n\n\n\nCreate a new data frame and assign it to the variable df. Give is 5 columns and 3 rows, and add some numbers in each of the cells, it doesn’t matter what they are.\n\n\n\n\n\n\n# i'm just using different ways to creating strings of numbers \ndf &lt;- data.frame(col_1 = c(2, 3, 4),\n                 col_2 = seq(from = 5, to = 10, by = 2.5),\n                 col_3 = 4:6,\n                 col_4 = rnorm(3, mean = 10, sd = 2),\n                 col_5 = rep(x = 6, times = 3))\n\n\ndf\n\n  col_1 col_2 col_3     col_4 col_5\n1     2   5.0     4  8.706182     6\n2     3   7.5     5 13.453908     6\n3     4  10.0     6  7.366212     6\n\n\n\n\n\n\n\n\n\n\n\nMultiply all of column 1 by column 2.\n\n\n\n\n\nHere are some different ways to do this.\n\ndf$col_1 * df$col_2\n\n[1] 10.0 22.5 40.0\n\n\n\ndf[,1] * df[,2]\n\n[1] 10.0 22.5 40.0\n\n\n\ndf[,\"col_1\"] * df[,\"col_2\"]\n\n[1] 10.0 22.5 40.0\n\n\n\n\n\n\n\n\n\n\n\nCreate a sixth column that is the result of the addition of columns 3 and 4.\n\n\n\n\n\n\ncol_6 &lt;- df$col_3 + df$col_4\n\nnew_df &lt;- data.frame(df,\n                     col_6)\n\n\nnew_df\n\n  col_1 col_2 col_3     col_4 col_5    col_6\n1     2   5.0     4  8.706182     6 12.70618\n2     3   7.5     5 13.453908     6 18.45391\n3     4  10.0     6  7.366212     6 13.36621\n\n\n\n\n\n\n\n\n\n\n\nHow does having NAs in a vector change the class of your vector?\n\n\n\n\n\n\ntest_NA_1 &lt;- c(1, 2, 3, 4, NA)\n\nclass(test_NA_1)\n\n[1] \"numeric\"\n\ntest_NA_2 &lt;- c(1, 2, 3, 4, \"NA\")\n\nclass(test_NA_2)\n\n[1] \"character\""
  },
  {
    "objectID": "posts/S06E04_website_04/index.html",
    "href": "posts/S06E04_website_04/index.html",
    "title": "Quarto website 4",
    "section": "",
    "text": "We are continuing this semester’s Code Club series on making yourself a website. So far, we have gone through:\nToday, we are going to focus on interacting with our GitHub repository (or “repo” for short):"
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#git-and-github-repository-recap",
    "href": "posts/S06E04_website_04/index.html#git-and-github-repository-recap",
    "title": "Quarto website 4",
    "section": "1 Git and GitHub repository recap",
    "text": "1 Git and GitHub repository recap\nNow that you have actually created a local Git and a remote GitHub repository for your website, let’s revisit this illustration that Jess explained last week:\n\n\n\n\n\nFigure by Allison Horst\n\n\n\n\nAnd here is a graphic depicting our workflow more specifically, where we basically have a fourth area: the actual website.\n\n\n\n\n\n\n\n\n\nLet’s go through the four different “areas” in this illustration and how they interact:\n\nYour working directory1 (bottom right in the illustration) is the folder on your computer that contains all the files for your website. Within that folder:\n\nThe docs folder contains HTML and other files representing your rendered website\nEverything else (.qmd, .yml etc.) is the source code for your website\n\nIn the workflow we are showing you here, you’re modifying the files in your working directory predominantly using RStudio.\n\n\nYour local Git repo (bottom left in the illustration) contains one or more saved snapshots (versions through time) of your working directory.\nThe most recent snapshot of the local repo does not necessarily correspond to the state of your working directory: there is purposefully no auto-saving, so saving a snapshot (i.e. commiting) is something you always have to actively do2.\nSaving a snapshot of the current state of your working dir can be done in a number of ways, such as using Git commands in a terminal (the add and commit verbs in the illustration) or using the Git pane in RStudio, but the method we have shown you here uses the GitHub Desktop app.\n\n\nYour remote GitHub repo (top in the illustration) is simply the online counterpart of your local repo.\nJust like changes to your working dir aren’t automatically saved to your local repo, new snapshots in your local repo aren’t automatically published to your remote repo: to do so, we have to push our changes online. (The counterpart to push is pull, which we won’t talk more about here, will pull in changes from the online repo to your local repo.3)\nJust like for committing, we will use GitHub Desktop to push our changes online.\nWe “activated” the website area last week using some settings for the online repo. Therefore, we don’t have to think much about this aspect – there basically is an automatic connection between the remote repo and the website: GitHub will detect whenever we’ve changed our online repo, and will update the website for us.\n\nIn summary, when you have made changes to your website that you would like to put online, go to GitHub Desktop to save a snapshot to your local repo (i.e., to commit) and then push those changes to your remote (online) repo. GitHub will then detect the changes to your online repo and update your website.\nWe will practice this routine today."
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#changing-the-url-to-your-website",
    "href": "posts/S06E04_website_04/index.html#changing-the-url-to-your-website",
    "title": "Quarto website 4",
    "section": "2 Changing the URL to your website",
    "text": "2 Changing the URL to your website\nThe URLs to your repository and website are automatically determined based on your GitHub username and repo name as follows:\n\nWebsite: https://&lt;github-username&gt;.github.io/&lt;github-repo-name&gt;\nGitHub repo: https://github.com/&lt;github-username&gt;/&lt;github-repo-name&gt;\n\nFor instance, the Code Club practice website is under the GitHub username osu-codeclub and the repository name practice-website, and therefore, it has the following URLs:\n\nGitHub repo: https://github.com/osu-codeclub/practice-website\nWebsite: https://osu-codeclub.github.io/practice-website\n\nHowever, the main Code Club website has a shorter URL that only contains the GitHub username: https://osu-codeclub.github.io. You, too, can change your website’s URL so that it only contains your GitHub username.\n\nIf you’re making a personal website, you’ll likely want to make this change.\nIf you’re making a website covering a specific topic or project, and could see yourself making other similar websites, this URL change doesn’t make as much sense.\n\nHow can you get such an URL for your website? You can do so by giving your GitHub repo the name &lt;github-username&gt;.github.io.\n So, for whoever would like to have the shorter URL format, let’s change the GitHub repo name to your GitHub username. In your GitHub repository, click “Settings”:\n\n\n\n\n\n\n\n\n\nThen, right at the top of the General page (the one that should open by default), click inside the “Repository name” box, and you’ll notice that you can type to change the name. The new name of the repo should by your GitHub username (which should e.g. show in the URL to your repo) followed by .github.io. For example, if your username is lucy, your new repo name should be lucy.github.io. After you’ve typed the new name, click the “Rename” button:xxx\n\n\n\n\n\nYou can type directly in the box to change the repo’s name\n\n\n\n\nThat should send you back to your repository’s main page, and if all went well, your URL should have been updated immediately. To check this, you can go back to your repo’s settings and then click on “Pages” on the left-hand side, as shown below:\n\n\n\n\n\nOn the GitHub Pages page, you can check the URL to your site"
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#adding-about-info-and-a-readme",
    "href": "posts/S06E04_website_04/index.html#adding-about-info-and-a-readme",
    "title": "Quarto website 4",
    "section": "3 Adding About info and a README",
    "text": "3 Adding About info and a README\n\n3.1 About\nWhile we’re making edits on GitHub, let’s first add a very brief description of our repo, and the URL to the website, to the “About” section on the main page of your repo.\n Click the cog wheel icon shown below, and then:\n\n\n\n\n\n\n\n\n\n\nEnter a one-sentence description of your repo in the “Description” box.\nBelow “Website”, you can simply check the box “Use your GitHub Pages website” to add your website’s URL to this About section.\n\n\n\n\n\n\n\n\n\n\nNow, your About section should look something like this:\n\n\n\n\n\n\n\n\n\n\n\n\n3.2 README\nNext, let’s add a README file to our repo.\nIf we create a file that is called e.g. README or README.md in the top-level folder of our repo, GitHub will automatically show it (in rendered form, if the file is written in Markdown) on the main page of our repository. Besides the About section, this is another customary way you can make it clear to people that visit your repo on GitHub, what this repo is all about.\nUnlike the changes we made so far today (our website URL, the About info), creating a README file will actually modify the contents of our repo. Therefore, it will be easiest to create this file on our own computer, commit it to our local repo, and push the changes to the remote repo4.\n\nYour turn: Create a README file for your website’s repo\n\nSwitch to your RStudio window with your website RStudio project open, then click on “File” =&gt; “New File” =&gt; “Markdown File” (halfway down).\nIf the new file doesn’t automatically open in “Visual” mode, you can click the “Visual” button to do so, unless you would like to practice with Markdown syntax.\nSave the file straight away as README.md, in the top-level folder where you also have, e.g., the _quarto.yml file.\nAdd some text to the file, which can be as long or short as you want; you’ll mostly just want to make it clear (again) that this repo is the source for your website. For example, I’ll add for this practice website:\n\n## This is the repository for a practice website part of OSU's Code Club\n\n- OSU Code Club: &lt;https://osu-codeclub.github.io&gt;\n\n- OSU Code Club practice website: &lt;https://osu-codeclub.github.io/practice-website&gt;\n\n\n\n\n\n\n\n\nYour README plain Markdown file\n\n\n\n\nThe “README” in the filename doesn’t have to be in all-caps, but this is customary.\nThe .md extension stands for (plain) Markdown, as opposed to Quarto Markdown (.qmd) or R Markdown (.Rmd). The difference between plain Markfown and Quarto/R Markdown files is that the latter can execute code (usually but not limited to R code).\nAn interesting side note is that the conversion of a .qmd/.Rmd file to the final output file (HTML in our case, could e.g. also be PDF) takes place in two steps: first, it is rendered to .md, which is then rendered to the final output format."
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#updating-the-online-repo",
    "href": "posts/S06E04_website_04/index.html#updating-the-online-repo",
    "title": "Quarto website 4",
    "section": "4 Updating the online repo",
    "text": "4 Updating the online repo\nNow that we have made changes to our “working directory” by adding a README file, we should commit these changes to our local repo and then push them to the remote repo. For that, we’ll switch to GitHub Desktop.\n When you open GitHub Desktop, it should automatically focus on your website’s repo, and you should see a bunch of changes listed in the left-hand panel.\nTo commit all of these changes at once, focus on the bottom-left part, where you can leave the “Description” box empty, but you have to fill out something in the “Summary (required)” box, which should ideally summarize the changes you just made, e.g.:\n\n\n\n\n\nAfter entering something in the Summary box, click ‘Commit to main’\n\n\n\n\nThen, click on the large blue “Commit to main” button (this button may also say “Commit to master”) to commit your changes to your local repo.\nNext, the following should appear in the main GitHub Desktop pane, and you can click “Push origin”:\n\n\n\n\n\nClick ‘Push origin’ to push your local repo changes to remote\n\n\n\n\n\n\n\n\n\n\nGit terminology\n\n\n\n\nThe “master” or “main” in e.g. “Commit to main” refers to a specific so-called branch of your repository. With Git version control, it is for example common to work on experimental changes in your code in a separate (non-main) branch, so that your code in main keeps working in the meantime.\n“Origin” is the default name that is given to the default connection with your remote repo, so “Push origin” means push to the default remote repo.\n\n\n\n\n\nLet’s switch to our repo page on GitHub in our browser, where we should immediately see our new commit referenced at the top:\n\n\n\n\n\nYou should see your changes referred to in the online repo\n\n\n\n\nAnd if you scroll down, the README.md should appear in rendered form below the file listing:\n\n\n\n\n\nGitHub will render and display a README file in your repo automatically\n\n\n\n\nFinally, a couple of things to note about what we just did:\n\nUnlike most changes you’ll make to your repo, this change did not affect our website at all.\nWe can freely change our GitHub repo name without having to change the name of our folder with the website: these two can be the same, but they can also differ."
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#referencing-our-repo-on-the-website",
    "href": "posts/S06E04_website_04/index.html#referencing-our-repo-on-the-website",
    "title": "Quarto website 4",
    "section": "5 Referencing our repo on the website",
    "text": "5 Referencing our repo on the website\nFinally, we can reference our GitHub repo on our website in two ways, by making changes in our _quarto.yml.\nFirst, we can add a GitHub icon to the right-hand end of our top navigation bar, which will link to our GitHub repom as follows:\nwebsite:\n  navbar:\n    right:\n      - href: \"https://github.com/osu-codeclub/practice-website\"\n        icon: github\n\n\n\n\n\nMaking the change above should produce this icon in the navbar on your website\n\n\n\n\nSecond, we can add one or two “repo actions” links to the Table of Contents that on each page on our website, which will allow people to:\n\nAction issue: Report an “issue” on GitHub, e.g. report that a link on your site is broken. This will open a new so-called issue for your repo – you should get an email when this happens.\nAction edit: Make a suggestion for a change (“Edit this page”), e.g. fix the broken link. This will open a new so-called pull request for your repo, and you can choose whether you want to accept this request, in which case it should automatically update your repo and website.\n\nIf you want both of these type of links, you should add the following to your _quarto.yml:\nwebsite:\n  repo-url: https://github.com/osu-codeclub/osu-codeclub.github.io\n  repo-actions: [edit, issue]\n\n\n\n\n\nMaking the change above should produce these entries in the TOC of every page on your website\n\n\n\n\n\nYour turn: update _quarto.yml and get the changes to your website\n\nMake some or all of the suggested changes to your _quarto.yml file.\nRender your entire website, so the changes will be included in the website’s HTML files in your docs folder. (Recall that to render your full website, as opposed to a single document, click the “Render Website” button in RStudio’s “Build” Tab.)\nGo to GitHub Desktop and commit the changes to your local repo.\nStill in GitHub Desktop, push the changes to your remote repo.\nGo to you GitHub repo, and check that you see your most recent push.\nGo to / refresh your website, and see if the changes are there. (You may have to wait a minute or so.)"
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#footnotes",
    "href": "posts/S06E04_website_04/index.html#footnotes",
    "title": "Quarto website 4",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDirectory (or “dir” for short) is just another word for a folder on your computer.↩︎\nIt is also possible to save to a snapshot with only some of the changes that you’ve made to your working dir: you can add changed files individually rather than all at once, too.↩︎\nPulling in changes from the online repo is only relevant either when you are collaborating with others on a repo, such that sharing of changes happens via the online repo, or when you have made changes directly to the online repo (this is possible but generally not recommended).↩︎\nAlternatively, we could create and write this file directly on the GitHub website, but if we would do this, we would need to “pull” in these changes from remote, which is something we won’t cover here.↩︎"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html",
    "href": "posts/S06E11_shiny_04/index.html",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "",
    "text": "Welcome to our shiny app development class! We are now fully prepared to deploy our shiny app to our website.\nThere are several options available for deploying a shiny app, and we will utilize our knowledge of using the quarto website to accomplish this task."
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-1",
    "href": "posts/S06E11_shiny_04/index.html#step-1",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.1 Step 1",
    "text": "1.1 Step 1\nTo begin, you’ll need to install the r-shinylive R package. This package is currently hosted on GitHub and can be easily obtained from the R console by executing the following command:\n\n# Install the 'pak' package manager if you haven't already\ninstall.packages(\"pak\")\n# Install 'r-shinylive' using 'pak'\npak::pak(\"posit-dev/r-shinylive\")"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-2",
    "href": "posts/S06E11_shiny_04/index.html#step-2",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.2 Step 2",
    "text": "1.2 Step 2\nTo install the Quarto extension for shinylive, follow these steps:\n\nOpen the Terminal tab.\nRun the following command:\n\n\n# quarto add quarto-ext/shinylive"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-3",
    "href": "posts/S06E11_shiny_04/index.html#step-3",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.3 Step 3",
    "text": "1.3 Step 3\nTo include a Shiny app directly in your Quarto file (.qmd), you need to add a filter key for shinylive at the top of the desired Quarto file. Open your Quarto file and insert the following YAML header:\n\nfilters:\n  - shinylive"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-4",
    "href": "posts/S06E11_shiny_04/index.html#step-4",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.4 Step 4",
    "text": "1.4 Step 4\nYou can include the code for a Shiny application in a code block indicated by {shinylive-r}. Here is an example of how your code block could appear:\n\n---\ntitle: \"Our first r-shinylive Quarto document!\"\nfilters:\n  - shinylive\n---\n\n```{shinylive-r}\n#| standalone: true\n\n#library(shiny)\n\n# Define your Shiny UI here\n#ui &lt;- fluidPage(\n  # Your UI components go here\n)\n\n# Define your Shiny server logic here\n#server &lt;- function(input, output, session) {\n  # Your server code goes here\n}\n\n# Create and launch the Shiny app\n#shinyApp(ui, server)"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-5",
    "href": "posts/S06E11_shiny_04/index.html#step-5",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.5 Step 5",
    "text": "1.5 Step 5\nIf you have encountered issues with the quarto publish function, you can easily resolve them by adding the following steps:\n\nformat:\n  html:\n    resources: \n      - shinylive-sw.js"
  },
  {
    "objectID": "posts/S06E03_website_03/index.html#what-is-git",
    "href": "posts/S06E03_website_03/index.html#what-is-git",
    "title": "Quarto website 3: Deploying your website with GitHub 🐱",
    "section": "1.1 What is Git?",
    "text": "1.1 What is Git?\nGit is a version control system that allows materials (mostly code), in an organized way where changes are tracked. You can think of it as combining the tracked changes capabilities of Word, with the file sharing from OneDrive.\nWe are going to use Git (combined with GitHub, more on that in a second) to deploy our website, but it can also be used to share and make code available to collaborators or the wider data science community. You could even use Git for just yourself because it would allow you to always revert back to a previous version of any of your files in case you make a big mistake.\nHere is a nice illustration by Allison Horst that shows the basics of git (at least the basics of what we will be using).\n\n\n\n\n\nFigure from Allison Horst"
  },
  {
    "objectID": "posts/S06E03_website_03/index.html#what-is-github",
    "href": "posts/S06E03_website_03/index.html#what-is-github",
    "title": "Quarto website 3: Deploying your website with GitHub 🐱",
    "section": "1.2 What is GitHub?",
    "text": "1.2 What is GitHub?\nGitHub hosts Git-based projects. GitHub can be free (especially for academic projects), and is where we house all our Code Club content. I additionally use GitHub in my lab for creating code repositories that go along with our publications."
  },
  {
    "objectID": "posts/S06E03_website_03/index.html#what-is-github-pages",
    "href": "posts/S06E03_website_03/index.html#what-is-github-pages",
    "title": "Quarto website 3: Deploying your website with GitHub 🐱",
    "section": "1.3 What is GitHub Pages?",
    "text": "1.3 What is GitHub Pages?\nGitHub Pages is a tool allows you to host your website directly from a GitHub repository."
  },
  {
    "objectID": "posts/S06E03_website_03/index.html#what-is-github-desktop",
    "href": "posts/S06E03_website_03/index.html#what-is-github-desktop",
    "title": "Quarto website 3: Deploying your website with GitHub 🐱",
    "section": "1.4 What is GitHub Desktop?",
    "text": "1.4 What is GitHub Desktop?\nGitHub Desktop is a application that lets you use Git and GitHub in a less-scary-than-working-in-your-terminal way. Here is a longer tutorial on how to use GitHub desktop."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code Club blogroll",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nTidyverse 2: More dplyr Data Wrangling\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nFeb 23, 2024\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nTidyverse 1: Introduction to the tidyverse\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nFeb 16, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 5: Data Manipulation With Base R\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 4: Vectorized Operations and Data Frames\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nFeb 2, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 3: Built-in functions, Vectors, and Help\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 2: Scripts and Objects\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nJan 19, 2024\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 1: Getting Started\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nJan 12, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nShiny 04: Deploying Shiny App\n\n\nDeploying Shiny App using ShinyLive .\n\n\n\n\nshiny\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2023\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nShiny 03: Map viz. in Shiny\n\n\nExplore maps in Shiny App.\n\n\n\n\nshiny\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nNov 13, 2023\n\n\nSandip Mondal and Horacio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nShiny 02: Intro to Shiny (cont.)\n\n\nExplore additional features in Shiny App.\n\n\n\n\nshiny\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2023\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nShiny 01: Intro to Shiny\n\n\nWhat is Shiny? The Basic Structure of a Shiny App.\n\n\n\n\nshiny\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 7: making a presentation\n\n\nCreating a presentation with Quarto\n\n\n\n\nwebsite\n\n\nquarto presentations\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 6: Quarto features\n\n\nBasic formatting, citations, code chunks, tabsets, callouts, and more.\n\n\n\n\nwebsite\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2023\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 5: modifying your site\n\n\nMaking a fancy about page, drop down menu bars, and some (S)CSS styling.\n\n\n\n\nwebsite\n\n\ngit\n\n\n\n\n\n\n\n\n\n\n\nOct 2, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 4\n\n\nInteracting with our GitHub repository\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nSep 25, 2023\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 3: Deploying your website with GitHub 🐱\n\n\nUsing GitHub, GitHub Desktop, and GitHub Pages to deploy our website 🤩️.\n\n\n\n\nwebsite\n\n\ngit\n\n\n\n\n\n\n\n\n\n\n\nSep 18, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 2\n\n\nAdding a new page to your site & using YAML to modify the look and configuration of our new page and the entire site\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nSep 11, 2023\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 1: Initiating a website 🌐\n\n\n\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nWelcome to the new Code Club website!\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 18, 2023\n\n\nJelmer Poelstra, Jessica Cooperstone, Horacio Lopez-Nicora\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "pages/r_resources.html#new-to-r",
    "href": "pages/r_resources.html#new-to-r",
    "title": "Getting Started with R",
    "section": "1 New to R?",
    "text": "1 New to R?\nIf you are completely new to R, we recommend watching at least the first couple of videos from OSU’s Mike Sovic’s Youtube playlist of short videos on R, to get started.\nHere are some additional resources for learning the basics of R:\n\nA useful and fun written tutorial is R for cats.\nFor a more systematic and lengthy introduction to R, see A Tutorial Introduction to R (this gets fairly advanced after section 9).\nExcellent comprehensive introductions are the R Basics and Visualization classes by Rafael Irizarry that can be freely accessed; you do have to create an account.\nOSU TDAI videos:\n\nInstalling R / R Studio\nR / R Studio Introduction\n\n\nAlso, don’t hesitate to reach out to the Code Club organizers if you have any questions!"
  },
  {
    "objectID": "pages/r_resources.html#miscellaneous-r-tips",
    "href": "pages/r_resources.html#miscellaneous-r-tips",
    "title": "Getting Started with R",
    "section": "2 Miscellaneous R tips",
    "text": "2 Miscellaneous R tips\n\n2.1 Useful settings\nBy default, R will try to save your “environment” (e.g., your loaded data, variables, etc) when you exit, and then reload everything the way it was upon restarting R. However, this is bad! You should always be able to reproduce your environment given a set of commands saved in an R script or R Markdown document, whereas saving and reloading your environment encourages you to be sloppy about this.\nTo disable this in RStudio, go to Tools &gt; Global Options &gt; General and set the options as follows:\n\n\n\n\n2.2 Installing R packages\n\nCRAN packages\nTo install an R package that is available at CRAN, the default R package repository, from within R (e.g. in the R console in RStudio), use the install.packages() function.\nThe install.packages() function will handle dependencies within R — i.e., it will install other R packages that your package depends on. Occasionally, when the install function needs to compile a package from source, errors arise that relate to missing system dependencies (i.e. software outside of R).\nOn Mac and Linux, these system dependencies are best installed outside of R, such as with homebrew on Mac or apt on Ubuntu. The errror message you got when trying to install an R package should tell you which system dependencies are needed.\nOn Windows, you can use the installr package to install such dependencies or other software from within R — for example:\ninstall.packages(\"installr\")    # Install the installr package first\ninstalllr::install.RStudio()    # Install RStudio\ninstallr::install.python()      # Install Python\n\n\nInstalling packages from Github\nTo install a package from Github, use either the devtools or the remotes package – for example:\ninstall.packages(\"remotes\")                # Install the remotes package\nremotes::install_github(\"kbroman/broman\")  # Install from a repository using \"&lt;username&gt;/&lt;repo-name&gt;\"\nThis will install the package from source, so you will need to make sure you are able to do so by following the instructions in the section right above this one.\n\n\nInstalling packages from Bioconductor\nIf you’re doing bioinformatic analyses in R, you will probably run into packages that are not on CRAN but on Bioconductor. To install a package from Bioconductor, use the BiocManager package – for example:\ninstall.packages(\"BiocManager\")  # Install the BiocManager package\nBiocManager::install(\"edgeR\")    # Install the edgeR package from Bioconductor\n\n\n\n\n2.3 Updating R\nConsider updating R if you have an older version of R installed. As of August 2023, we would recommend to update R if your version is below 4.1.\nYou can check which version of R you have by looking at the first lines of output when running the following command inside R:\nsessionInfo()\nTo update:\n\nWindows: You can update R from within R. The updateR() function will also take care of updating your packages:\ninstall.packages(\"installr\")\ninstallr::updateR()\nMac: Download and install the latest .pkg file as if you were installing it for the first time.\n\n\n\nRe-installing your packages after updating (Mac and Linux)\nWhile the installr::updateR() function for Windows users takes care of reinstalling your packages along with updating R, Mac and Linux users will have to manually re-install their packages. Some people prefer to re-install these packages on the fly, which can end up being a way to get rid of packages you no longer use.\nBut if you want immediately reinstall all your packages, run this before you upgrade:\nmy_packages &lt;- installed.packages()\nsaveRDS(my_packages, \"my_packages.rds\")\nThen, after you’ve installed the latest R version:\nmy_packages &lt;- readRDS(\"CurrentPackages.rds\")\ninstall.packages(my_packages[1, ])\nThis will only work for packages available on CRAN. Of course, you can check your list for Github-only and Bioconductor packages and then install those with their respective commands (see below). Yes, this can be a bit of a hassle!"
  },
  {
    "objectID": "pages/setup.html",
    "href": "pages/setup.html",
    "title": "Computer Setup for Code Club",
    "section": "",
    "text": "Here, you will find general information about computer setup for Code Club. Additional setup instructions for individual sessions will appear in the posts for each session.\nIn summary, you just need to get access to R and RStudio, preferably via a local installation, and optionally via the Ohio Supercomputer Center (OSC).\nIf you run into issues or have questions, don’t hesitate to contact one of the organizers. You can also come to Code Club 15 minutes early, and one or more of the organizers should be there already."
  },
  {
    "objectID": "pages/setup.html#install-r",
    "href": "pages/setup.html#install-r",
    "title": "Computer Setup for Code Club",
    "section": "1 Install R",
    "text": "1 Install R\n\nWindows: Download and run the .exe file for the latest version of R from https://cran.r-project.org/bin/windows/base/, by clicking the large Download R [version-number] for Windows link at the top of the gray box.\nMac: Download and run the .pkg file for the latest version of R from https://cran.r-project.org/bin/macosx/, by clicking the link just below Latest release.\n\n\n\n\n\n\n\nAlready have R installed?\n\n\n\n\nPlease check your version of R – this information is printed to the console when you start R, and you can also get it by typing sessionInfo() and checking the first line of the output.\nCurrently (August 2023), we would recommend R version 4.2.0 or higher. And since we’ll work with the “base R pipe”, you’ll definitely need version 4.1.0 or higher.\nTo update R, see this page for instructions."
  },
  {
    "objectID": "pages/setup.html#install-rstudio",
    "href": "pages/setup.html#install-rstudio",
    "title": "Computer Setup for Code Club",
    "section": "2 Install RStudio",
    "text": "2 Install RStudio\nRStudio is a so-called Integrated Development Environment (IDE) for R, with side-by-side panes for an R script, an R concole, plots, help documents, and much more. While it is perfectly possible to use R without RStudio, RStudio has become the de facto standard for working with R and is very useful.\nTo install RStudio, go to the RStudio download page and download and run the installer file for your operating system."
  },
  {
    "objectID": "pages/setup.html#quarto-website-specific-installation",
    "href": "pages/setup.html#quarto-website-specific-installation",
    "title": "Computer Setup for Code Club",
    "section": "3 Quarto-website specific installation",
    "text": "3 Quarto-website specific installation\nFor the Fall 2023 sessions on creating a Quarto website, you will need to have the rmarkdown R package installed. You can do so by typing (or copying) the following into your R Console inside RStudio:\n\ninstall.packages(\"rmarkdown\")\n\nWhile not necessary for basic website building inside RStudio, it will also be a good idea to install Quarto itself. This is not an R package, but is a separate piece of software. To install it, go to https://quarto.org/docs/get-started/ and the correct installer for your operating system should be highlighted in a blue box. Click on that box to download and once downloaded, click on the installer to install Quarto."
  },
  {
    "objectID": "pages/setup.html#osc",
    "href": "pages/setup.html#osc",
    "title": "Computer Setup for Code Club",
    "section": "4 Alternative: Use RStudio Server at OSC",
    "text": "4 Alternative: Use RStudio Server at OSC\nUpon request (contact Jelmer), you can get access to the Ohio Supercomputer Center (OSC) Classroom Project for Code Club (PAS1838). This way, you can code in RStudio from your browser rather than with a local installation. This is a good option if you prefer not to install anything or if you run into problems during installations.\nAfter you asked for access to the OSC project, you should receive an email from OSC that you have been added to the Code Club OSC project.\n\nIf you already have an OSC account, you shouldn’t need to do anything to gain access, although the email may ask you to confirm/accept your being added to project.\nIf you do not yet have an OSC account, the email you received from OSC should have a link to do so. Alternatively, follow the instructions below to sign up and get access to the project.\n\n\n\n\n\n\n\nRun RStudio Server from the OSC OnDemand website (Click to expand)\n\n\n\n\n\nOSC OnDemand lets you access OSC resources through your browser and run applications like RStudio.\n\nTo get started, go to https://ondemand.osc.edu/ and log in with your OSC username and password.\nClick on “Interactive Apps” in the blue top bar, and select “RStudio Server” (near the bottom).\nNow, you’re on a page from which you can launch an RStudio server that will run on an OSC cluster. Select project PAS1838 in the dropdown menu and change the “Number of hours” to 2. Then click “Launch”.\nYou will be sent to a page where you can see the status of your “job” It usually starts running within seconds, and the color of the top bar will then switch from blue (“Queued” and then “Starting”) to green (“Running”).\nClick “Connect to RStudio Server” at the bottom of the box, and an RStudio Server instance will open."
  },
  {
    "objectID": "pages/setup.html#more",
    "href": "pages/setup.html#more",
    "title": "Computer Setup for Code Club",
    "section": "5 More info",
    "text": "5 More info\nPlease see our R Resources and Tips if you are new to R or need to update your R version!"
  }
]
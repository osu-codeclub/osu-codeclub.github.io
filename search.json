[
  {
    "objectID": "pages/schedule.html",
    "href": "pages/schedule.html",
    "title": "Schedule for Code Club",
    "section": "",
    "text": "In the fall of 2023, we are meeting on Mondays from 4-5 pm.\nJoin us in person in Columbus (Howlett 340 with Jessica Cooperstone) or in Wooster (Selby 203 with Jelmer Poelstra), or connect through Zoom (sign up to receive the Zoom link).\n\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS06E01\nAug 28\nJess\nQuarto website 1: Initiating a website\n\n\nS06E02\nSep 11\nJelmer\nQuarto website 2: Adding a page & YAML formatting\n\n\nS06E03\nSep 18\nJess\nQuarto website 3: Deploying to GitHub\n\n\nS06E04\nSep 25\nJelmer\nQuarto website 4: Interacting with your repository\n\n\nS06E05\nOct 2\nJess\nQuarto website 5: TBA\n\n\nS06E06\nOct 9\nJelmer\nQuarto website 6: TBA\n\n\nS06E07\nOct 16\nJess\nQuarto website 7: TBA\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/previous.html#current-semester-fall-23",
    "href": "pages/previous.html#current-semester-fall-23",
    "title": "Previous Code Club sessions",
    "section": "1 Current semester (Fall ’23)",
    "text": "1 Current semester (Fall ’23)\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS06E01\nAug 28\nJess\nQuarto website 1: Initiating a website\n\n\nS06E02\nSep 11\nJelmer\nQuarto website 2: Adding a page & YAML formatting\n\n\nS06E03\nSept 18\nJess\nQuarto website 3: Deploying to GitHub\n\n\nS06E04\nSept 25\nJelmer\nQuarto website 4: Interacting with your repository"
  },
  {
    "objectID": "pages/previous.html#previous-semesters",
    "href": "pages/previous.html#previous-semesters",
    "title": "Previous Code Club sessions",
    "section": "2 Previous semesters",
    "text": "2 Previous semesters\n\n\n\n\n\n\nAsk us for access to the Zoom recordings of previous Code Club sessions!\n\n\n\n\n\n\n\n2.1 Spring ’23\n\nR4DS = The R for Data Science book (2nd edition)\n\n\n\n\nSession\nDate\nPresenter\nTopic + link to BioDASH page\n\n\n\n\nS05E01\nJan 26\nJelmer\nR4DS, Ch. 4: Pipes\n\n\nS05E02\nFeb 02\nStephen\nR4DS, Ch. 6: Tidy Data, I\n\n\nS05E03\nFeb 09\nJessica & Daniel\nR4DS, Ch. 6: Tidy Data, II\n\n\nS05E04\nFeb 16\nMichael\nR4DS, Ch. 7: Code Style\n\n\nS05E05\nFeb 23\nJelmer\nR4DS, Ch. 8: Data Import, I\n\n\nS05E06\nMar 02\nStephen\nR4DS, Ch. 8: Data Import, II\n\n\nS05E07\nMar 09\nJessica\nR4DS, Ch. 9: Scripts & Projects\n\n\nS05E08\nMar 23\nJessica\nR4DS, Ch. 10: ggplot layers, part 1\n\n\nS05E09\nMar 30\nJelmer\nR4DS, Ch. 10: ggplot layers, part 2\n\n\n\n\n\n\n2.2 Summer & Fall ’22\n\nR4DS = The R for Data Science book (1st edition)\n\n\n\n\nSession\nDate\nPresenter\nTopic\n\n\n\n\nS04E01\nJune 09\nJelmer\nR4DS, Ch. 1: Intro\n\n\nS04E02\nJune 23\nMichael B.\nR4DS, Ch. 3.1- 3.4: Data viz I\n\n\nS04E03\nJune 30\nJessica\nR4DS, Ch. 3.5: Data viz II\n\n\nS04E04\nJuly 07\nJessica\nR4DS, Ch. 3.6: Data viz III\n\n\nS04E05\nJuly 14\nMike S.\nR4DS, Ch. 3.7: Data viz IV\n\n\nS04E06\nJuly 21\nJelmer\nR4DS, Ch. 3.8-3.10: Data viz V\n\n\nS04E07\nJuly 28\nMichael B.\nR4DS, Ch. 27: R Markdown\n\n\nS04E08\nSept 15\nJessica\nR4DS, Ch. 4, 6 & 8: Workflow\n\n\nS04E09\nSept 22\nJelmer\nR4DS, Ch. 5.1-5.2: Data transformation I - intro and filter()\n\n\nS04E10\nOct 06\nMichael B.\nR4DS, Ch. 5.3: Data transformation II - arrange()\n\n\nS04E11\nOct 20\nMichael B.\nR4DS, Ch. 5.4: Data transformation III - select()\n\n\nS04E12\nOct 27\nStephen\nR4DS, Ch. 5.5: Data transformation IV - mutate()\n\n\nS04E13\nNov 03\nMike S.\nR4DS, Ch. 5.6: Data transformation V - summarize() part 1\n\n\nS04E14\nNov 10\nJessica\nR4DS, Ch. 5.6: Data transformation V - summarize() part 2\n\n\nS04E15\nNov 17\nJelmer\nR4DS, Ch. 7.1-7.3: Exploratory Data Analysis I\n\n\nS04E16\nDec 01\nJelmer\nR4DS, Ch. 7.1-7.3: Exploratory Data Analysis II\n\n\nS04E17\nDec 08\nMichael B.\nR4DS, Ch. 10: Tibbles\n\n\n\n\n\n\n2.3 Spring ’22\n\n\n\nSession\nDate\nPresenter\nTopic (+ link)\nTopic block\n\n\n\n\nS03E01\nJan 13\nMike S.\nT-tests\nBasic statistics in R\n\n\nS03E02\nJan 20\nJessica\nANOVA\nBasic statistics in R\n\n\nS03E03\nJan 27\nJelmer\nPrincipal Component Analysis\nBasic statistics in R\n\n\nS03E04\nFeb 03\nJessica\nANOVA part II\nBasic statistics in R\n\n\nS03E05\nFeb 10\nStephen\nCorrelation\nBasic statistics in R\n\n\nS03E06\nFeb 17\nMichael B.\nData structures and subsetting\nBasic statistics in R\n\n\nS03E07\nFeb 24\nJelmer\nIntro to “DRY” and iteration\n“Don’t repeat yourself”\n\n\nS03E08\nMar 03\nJelmer\nLoops\n“Don’t repeat yourself”\n\n\nS03E09\nMar 10\nMike S.\nApply functions\n“Don’t repeat yourself”\n\n\nS03E10\nMar 24\nMike S.\nPurrr map functions\n“Don’t repeat yourself”\n\n\nS03E11\nApr 14\nMichael B.\nWriting functions part I\n“Don’t repeat yourself”\n\n\nS03E12\nApr 21\nMichael B.\nIncorporating your own functions in loops\n“Don’t repeat yourself”\n\n\n\n\n\n\n2.4 Fall ’21\n\n\n\nSession\nDate\nPresenter\nTopic (+ link)\nTopic block\n\n\n\n\nS02E01\nAug 26\nJelmer\nR basics – part I\nR basics\n\n\nS02E02\nSep 2\nMike S.\nR basics – part II\nR basics\n\n\nS02E03\nSep 9\nMichael B.\nR Markdown\nR basics\n\n\nS02E04\nSep 16\nJessica\nTidyverse intro – part I\nR basics\n\n\nS02E05\nSep 23\nStephen\nTidyverse intro – part II\nR basics\n\n\nS02E06\nSep 30\nMichael B.\nggplot intro – part I\nPlotting in R\n\n\nS02E07\nOct 07\nJelmer\nggplot intro – part II\nPlotting in R\n\n\nS02E08\nOct 21\nMike S.\nFaceting plots\nPlotting in R\n\n\nS02E09\nOct 28\nMike S.\nFaceting and combining plots\nPlotting in R\n\n\nS02E10\nNov 04\nDaniel Moreno\nStatistical results in plots with ggpubr\nPlotting in R\n\n\nS02E11\nNov 18\nJulia Vrtilek\nBat vocalizations with R at OSC\nPutting code to practice\n\n\nS02E12\nDec 02\nMatthew Teegarden\nInteractive applications with Shiny\nPutting code to practice\n\n\nS02E13\nDec 09\nJessica\nInteractive plots with Plotly\nPlotting in R\n\n\n\n\n\n\n2.5 Fall ’20 & Spring ’21\n\n\n\nSession nr.\nDate\nPresenter\nTopic (+ link)\nOther\n\n\n\n\nS01E01\nNov 18, 2020\nJelmer\nRStudio Projects & getting started\nslides\n\n\nS01E02\nDec 2, 2020\nJessica\ndplyr core verbs\n\n\n\nS01E03\nDec 9, 2020\nMike S.\nJoining datasets\n\n\n\nS01E04\nDec 16, 2020\nMichael B.\nggplot2 – round 1\n\n\n\nS01E05\nJan 15, 2021\nJessica\nggplot2 – round 2\n\n\n\nS01E06\nJan 22, 2021\nStephen\nFactors\n\n\n\nS01E07\nJan 29, 2021\nJelmer\nR Markdown\n\n\n\nS01E08\nFeb 5, 2021\nMike S.\nPivoting data\n\n\n\nS01E09\nFeb 12, 2021\nMichael B.\nSubsetting data\n\n\n\nS01E10\nFeb 19, 2021\nJessica\nFaceting, animating, and combining plots\n\n\n\nS01E11\nFeb 26, 2021\nStephen\nMaking maps with ggmap\n\n\n\nS01E12\nMar 5, 2021\nJelmer\nVectorization and loops\n\n\n\nS01E13\nMar 12, 2021\nMike S.\nThe apply family of functions\n\n\n\nS01E14\nMar 19, 2021\nMichael B.\nWriting your own functions\n\n\n\nS01E15\nMar 26, 2021\nJessica\nInteractive plots with Plotly\n\n\n\nS01E16\nApr 02, 2021\nStephen\nWorking with dates with lubridate\n\n\n\nS01E17\nApr 09, 2021\nJelmer\nIntroduction to regular expressions\n\n\n\nS01E18\nApr 16, 2021\nMike S.\nRegular Expressions: Part II\n\n\n\nS01E19\nApr 23, 2021\nMichael B.\nWord Clouds via tidytext\n\n\n\nS01E20\nApr 30, 2021\nJessica\nCleaning up variables names"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About OSU Code Club",
    "section": "",
    "text": "The Code Club at Ohio State University is a regularly occurring, interactive, in-person and online gathering to improve coding skills. We aim for a supportive and fun culture of learning together, and hope to offer something to participants at any experience level.\nAnyone who studies or works at the Ohio State University is welcome to join: please fill out this short form if you want to do so.\nIn the fall of 2023, we are meeting on Mondays from 4-5 pm. Join us in person in Columbus (Howlett 340 with Jessica Cooperstone) or in Wooster (Selby 203 with Jelmer Poelstra), or connect through Zoom (you’ll receive the Zoom link after signing up).\nIn each session, one of the organizers will be presenting. Code Club sessions are meant to be interactive and involved, so be prepared to follow along yourself and to do exercises, sometimes in groups with other participants.\nTeaching materials for each Code Club session are added to this website and will continue to be available. Code Club has run since the fall of 2020, and materials for the 71 sessions in the semesters prior to autumn 2023 are currently available at https://biodash.github.io but will eventually be migrated to this website.\nBy popular demand, Code Club has so far focused entirely on the R language and its surrounding ecosystem (R Markdown, Shiny, etc).\nIf you have any suggestions or requests for Code Club, don’t hesitate to contact one of the organizers.\n\n0.1 Sign up!\nTo sign up, please fill out this short form and you will be added to Code Club email list. Then, you’ll receive emails with updates about each session, links to the Zoom meeting and our folder with Zoom recordings of previous sessions.\n\n\n0.2 Organizers\nThe current organizers of Code Club are:\n\nJelmer Poelstra, bioinformatician at the MCIC core facility in Wooster.\nJessica Cooperstone, associate professor in the departments of Horticulture and Crop Science and Food Science and Technology.\nHoracio Lopez-Nicora, assistant professor in the department of Plant Pathology.\n\nIn previous semesters, we also had co-organizers Michael Broe (EEOB), Mike Sovic (CAPS), and Stephen Opiyo (MCIC Columbus).\n\n\n0.3 Learn more about -and get ready for- Code Club\n\nSchedule with upcoming sessions\nComputer setup instructions\nResources and tips for R novices\nList of previous sessions by semester for AU20-SP23\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/website_03_deploy-github/index.html#what-is-git",
    "href": "posts/website_03_deploy-github/index.html#what-is-git",
    "title": "Quarto website 3: Deploying your website with GitHub 🐱",
    "section": "1.1 What is Git?",
    "text": "1.1 What is Git?\nGit is a version control system that allows materials (mostly code), in an organized way where changes are tracked. You can think of it as combining the tracked changes capabilities of Word, with the file sharing from OneDrive.\nWe are going to use Git (combined with GitHub, more on that in a second) to deploy our website, but it can also be used to share and make code available to collaborators or the wider data science community. You could even use Git for just yourself because it would allow you to always revert back to a previous version of any of your files in case you make a big mistake.\nHere is a nice illustration by Allison Horst that shows the basics of git (at least the basics of what we will be using).\n\n\n\n\n\nFigure from Allison Horst"
  },
  {
    "objectID": "posts/website_03_deploy-github/index.html#what-is-github",
    "href": "posts/website_03_deploy-github/index.html#what-is-github",
    "title": "Quarto website 3: Deploying your website with GitHub 🐱",
    "section": "1.2 What is GitHub?",
    "text": "1.2 What is GitHub?\nGitHub hosts Git-based projects. GitHub can be free (especially for academic projects), and is where we house all our Code Club content. I additionally use GitHub in my lab for creating code repositories that go along with our publications."
  },
  {
    "objectID": "posts/website_03_deploy-github/index.html#what-is-github-pages",
    "href": "posts/website_03_deploy-github/index.html#what-is-github-pages",
    "title": "Quarto website 3: Deploying your website with GitHub 🐱",
    "section": "1.3 What is GitHub Pages?",
    "text": "1.3 What is GitHub Pages?\nGitHub Pages is a tool allows you to host your website directly from a GitHub repository."
  },
  {
    "objectID": "posts/website_03_deploy-github/index.html#what-is-github-desktop",
    "href": "posts/website_03_deploy-github/index.html#what-is-github-desktop",
    "title": "Quarto website 3: Deploying your website with GitHub 🐱",
    "section": "1.4 What is GitHub Desktop?",
    "text": "1.4 What is GitHub Desktop?\nGitHub Desktop is a application that lets you use Git and GitHub in a less-scary-than-working-in-your-terminal way. Here is a longer tutorial on how to use GitHub desktop."
  },
  {
    "objectID": "posts/website_02/index.html",
    "href": "posts/website_02/index.html",
    "title": "Quarto website 2",
    "section": "",
    "text": "In today’s session, you will add a new page to the website that you created in the first session.\nThen, we will talk about the “YAML” markup mini-language that is used to configure your website, and will make some changes to the YAML header for your new page and the YAML in the _quarto.yml file with site-wide settings."
  },
  {
    "objectID": "posts/website_02/index.html#adding-a-new-page-to-your-site",
    "href": "posts/website_02/index.html#adding-a-new-page-to-your-site",
    "title": "Quarto website 2",
    "section": "1 Adding a new page to your site",
    "text": "1 Adding a new page to your site\nLet’s create a new page for your site. If you already have an idea for a page that you would like to add to your site, you can go with that. Otherwise, you can follow along with my example, which will be a page about research projects on a personal website.\nEach page on your website has a corresponding .qmd source document. Currently, we just have two pages:\n\nA home page, for which index.qmd is the source.\nAn “about page”, for which about.qmd is the source.\n\nSo, to create a new page, we will create a new Quarto document — in RStudio, click File =&gt; New File =&gt; Quarto Document:\n\n\n\nThe window to create a new Quarto document\n\n\nUnlike last week, make sure the “Use visual markdown editor” box is checked, and then click the “Create Empty Document” button in the bottom left.\nOnce the file has been created, let’s save it straight away: press Ctrl/Cmd+S. Save it in the top-level folder for your website, i.e. the same folder that contains index.qmd and about.qmd. If you’re making a page for which you have your own ideas, you can name it accordingly — otherwise, save it as research.qmd.\n\n\n\nYour near-empty document should look something like this\n\n\nThe newly created document will only contain a few lines, as shown in the screenshot above. This is the so-called “YAML header”.\nWe talked a bit about the YAML “markup language” last week, mostly in the context of the _quarto.yml file, which consists only of YAML content, unlike this .qmd file. Let’s dive a little deeper into YAML, because it’s one of the key components of your website’s source."
  },
  {
    "objectID": "posts/website_02/index.html#a-little-more-about-yaml",
    "href": "posts/website_02/index.html#a-little-more-about-yaml",
    "title": "Quarto website 2",
    "section": "2 A little more about YAML",
    "text": "2 A little more about YAML\nYAML (“YAML Ain’t Markup Language”, a silly joke of a name) is a simple format commonly used for configuration. In the source files for your website, there is a lot of YAML content straight away.\nFirst, you have the _quarto.yml file that configures your website, including its navigation elements that are visible on every page of the site, like the “navbar” at the top. But there is also YAML in the headers of all .qmd files. For example, the top of our newly created research.qmd should read:\n---\ntitle: \"Untitled\"\n---\nAs opposed to the _quarto.yml file, this YAML header:\n\nIs surrounded by lines that only contain three dashes ---, that mark the beginning and the end of this YAML header.\nConfigures just this individual page, whereas the YAML in _quarto.yml specifies site-wide configurations.\n\n\nYAML consists of entries of key-value pairs: in the example above, title is the key that determines what the document’s title will be, and \"Untitled\" is the current value.\nValid YAML keys are limited to what has been pre-defined by others (i.e., in this case, the developers of Quarto), and the list of possible keys depends on the document type. The Quarto website has a full list of valid YAML keys for the _quarto.yml file as well as a a list for HTML pages, which is the kind of output that your .qmd files will produce when rendered.\nDepending on the key, the value can be:\n\nA “free-form string” of text, like for a title\nConstrained to a series of possible values, like for the theme key, which can set the overall look of a page to one of a few dozen available “themes”\nAn on/off switch using true/false, like whether to show a Table of Contents using the toc key.\n\n\n\n2.1 YAML’s structure\nYAML’s structure is quite simple, but it does have a few rules. Each entry is generally on its own line. It has a hierarchical structure in that many values can itself be given key-value pairs to specify additional options. For example, see this section from your _quarto.yml file:\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\nNote how the values for keys that simply take a value (above: theme, css, and toc) and have no “child keys” are on the same line as the key.\nIn contrast, keys whose values are really “child keys” (above: format and html):\n\nAre followed by a colon :\nAre on a line by themselves\nHave their child keys on the next line(s), indented one more level.\n\nIndentation in YAML has to use either two or four spaces (no tabs!) per indentation level, and YAML is sensitive to indentation errors. (Note that RStudio will by default insert multiple spaces instead of a true tab when you press the Tab key, so you can still use that just fine.)\n\n\n\n\n\n\n\nSite-wide vs. page-specific configuration\n\n\n\nThis format =&gt; html section in the _quarto.yml file will set defaults for the formatting of individual pages on your website. You can use the same keys (e.g. theme, css, and toc shown above) in the YAML header of your qmd files, which would override these site-wide settings.\n\n\n\nA final component of YAML syntax, with lists of entries, is used in the website section of _quarto.yml:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nHere, each entry (= each page on your website) is preceded by a dash -, and:\n\nThe top entry, for the homepage, has an href key pointing to the relevant file, as well as a text key (note: same indentation level, no additional dash) that will set what text is being displayed for this link.\nThe bottom entry uses an alternative specification method, with just a pointer to the file. When you do this, the displayed test on the website would be the same as the file name without the .qmd extension, namely “About”.\n\n\n\n\n\n\n\nYAML errors (Click to expand)\n\n\n\n\n\nIf you made a mistake in the YAML, you will see an ominous-looking box like this pop up:\n\n\n\nYou’ll see this error if you specified an invalid key in your YAML. Don’t panic! If you don’t already know what’s wrong, carefully read the error which is quite informative."
  },
  {
    "objectID": "posts/website_02/index.html#modifying-the-yaml-header-of-our-new-page",
    "href": "posts/website_02/index.html#modifying-the-yaml-header-of-our-new-page",
    "title": "Quarto website 2",
    "section": "3 Modifying the YAML header of our new page",
    "text": "3 Modifying the YAML header of our new page\nLet’s start by changing the page’s title to title: \"My Research\".\nThen, we can add a few new YAML entries to further populate the “title block” (top part) of your page:\n\nsubtitle: \"These are my ongoing and past research projects\"\ndate: 2023-09-11\nauthor: \"Lucy T. Hedgehog\", or for multiple authors, use the following syntax:\nauthor:\n  - Lucy T. Hedgehog\n  - Lucy T. Hedgehog's advisor \n\n\n\n\n\n\n\nYAML auto-complete and quoting (Click to expand)\n\n\n\n\n\n\nNote that when you type a new entry in the YAML header, RStudio will have an auto-completion feature with information boxes:\n\n\n\n\n\n\n\nIn the examples above, we have double-quoted (“…”) free-form YAML values like title. This is optional: as long as your title doesn’t contain any special characters, it would also work without quotes.\n\n\n\n\n\nHere are a few of the many other possible HTML page YAML keys that are particularly useful:\n\ndate-modified: If you wrote a page originally on a certain date, but made some modifications afterwards, you can get a separate date entry for the modifications. Useful for e.g. blog posts and reports.\ntitle-block-banner: true: Put the title block (title and subtitle) in a “banner” by adding a background color.\nnumber-sections: true: Number sections (as determined using headers and their levels) hierarchically.\ntoc-location: Where the Table of Contents should show up — one of left, right (default), or body"
  },
  {
    "objectID": "posts/website_02/index.html#exercises-i",
    "href": "posts/website_02/index.html#exercises-i",
    "title": "Quarto website 2",
    "section": "4 Exercises I",
    "text": "4 Exercises I\n\nExperiment with YAML header options\n\nOn your new page:\n\nTry adding the title-block-banner and see if you like that kind of format.\nAdd a few headers of different levels (start with “Header 2”, the title is basically the one level 1 header) — you can do so by clicking the dropdown menu that will say Normal:\n\n\n\n\n\nTry turning on number-sections and play around with the toc-location (Your _quarto.yml has an entry toc: true, so a table of contents will by default be shown on very page)."
  },
  {
    "objectID": "posts/website_02/index.html#modifying-the-_quarto.yml-file",
    "href": "posts/website_02/index.html#modifying-the-_quarto.yml-file",
    "title": "Quarto website 2",
    "section": "5 Modifying the _quarto.yml file",
    "text": "5 Modifying the _quarto.yml file\nAs mentioned above, the _quarto.yml file solely consists of YAML configurations, and these settings apply to the entire website.\nThe two most important “sections” in this file are:\n\nwebsite, where we can control things like the site’s navigation elements that will show up on every page\nformat =&gt; html, where we can specify page-level formatting settings. Here, we can use the same YAML keys that we could use in the YAML header of our new page (and any other page), except that the settings will be applied across all pages on the site.\n\n\n\n5.1 The website section\nIn my example, this section currently reads as follows – yours should be the same except for the title unless you did some customization yourself already:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nThe navbar key represents a navigation bar that is always shown across the top of the site, which should be a good default for most websites. But if you want a website navigation bar on the side, or combined top and side navigation (the latter is useful for sites with a lot of contents, and is used for example on Quarto’s own documentation website), this is possible: see Quarto’s Website Navigation docs.\nAny entries under the left key will be left-aligned on the navbar, i.e. consecutive entries start on the left-hand side of the navbar, moving rightward with every added entry. We could also add right-aligned entries with a right key (see the exercise below).\n\n\n\n\n\n\nNavbar auto-collapse (Click to expand)\n\n\n\n\n\nIf the width of your viewing window is narrow (like it often is in RStudio’s “Viewer”, as well as on phones), the navbar will be automatically collapsed into a “Hamburger menu:”\n\n\n\n\n\n\n\n\n\nIf we want our new page to show up in the navbar, we’ll have to add it as a new entry:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n      - href: research.qmd\n        text: My Research\n\nSome other useful keys for the website section include (see this Quarto docs page for a full list):\n\nback-to-top-navigation (a child key of website): When set to true, this will show a “Back to top” button once you reach the bottom of a page.\nfavicon (a child key of website): A favicon is an icon or small image that shows up in your browser next to the name of the website, see the icons shown in screenshot:\n\n\n\n\n\n\n\nicon (a navbar entry like href and text): This will allow you to show an icon instead of (default for external links) or in addition to text (default for internal links) for a link in your navbar. See here for a list of available icons. For example:\n\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n        icon: house\n\n\n\n\n\n\n\n\n5.2 The html format section\nHere is what the format section of your _quarto.yaml should look like:\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nAs mentioned before, the configuration done in this section can use the same keys as those in the YAML header for individual pages, but the settings done in _quarto.yaml will apply across the entire website.\nFor now, we’ll only talk about one key: theme. This will change the overall look of your website to a number of preset themes, each with different fonts and colors. While you can also completely customize your website’s look yourself, using one of these themes should work well for most of us.\nYou can see a visual list of available themes at https://bootswatch.com/. The default theme is cosmo, as you can see above. As an example, if we change Lucie’s website theme to lux:"
  },
  {
    "objectID": "posts/website_02/index.html#exercises-ii",
    "href": "posts/website_02/index.html#exercises-ii",
    "title": "Quarto website 2",
    "section": "6 Exercises II",
    "text": "6 Exercises II\n\nSite-wide configuration\n\nModify your _quarto.yml to configure your website. You can play around with whatever you prefer, but here are some suggestions:\n\nTry several different themes and pick one for your website.\nMove the navbar entry for the about.qmd page to the right-hand side.\nAdd one more icons to the Navbar, for example:\n\nAdd a link to your Twitter account and use the twitter icon\nIf you have one, add a link to your GitHub account and use the github icon\nAdd e.g. a question mark icon to your About page link (search for one here).\nTake a look at the visual list of possible icons and see if there are some that you’d like to use.\n\nAdd a favicon for your website."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#introduction",
    "href": "posts/website_01_initiation/index.html#introduction",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to begin this semester’s Code Club with a series on making yourself a website. There are lots of reasons why you might want a website, including to:\n\nhave a web presence about yourself (so when people google you, they can find your relevant info)\nhave a blog where you post about whatever it is you want to post about\nshare your research or data\n\nSome of you may already have a simple free or paid website for yourself, that you made through www.u.osu.edu, Squarespace, or Google Sites. These tools don’t require you to be able to code, and allow you to create a website with different levels of customization and interactivity.\nFor the next few sessions, we are going to go over making a website using Quarto. Quarto can be used as an open-source publishing system and you can integrate content from Jupyter notebooks, plain text markdown, Python, R, Julia and others. We are going to use Quarto integrated with R.\n\nTake a look at a gallery of Quarto website examples.\n\nWe picked this particular platform to go over in Code Club since its lightweight, customizable, free, and integrates with R which you’re probably learning anyway. I am going to start going through an example that will be my personal website. I picked this example because I thought this might be of interest to most of you."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#installation",
    "href": "posts/website_01_initiation/index.html#installation",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "2 Installation",
    "text": "2 Installation\nTo render your website in RStudio, you will need to have the rmarkdown R package installed. You can do so by typing (or copying) the following into your R Console inside RStudio:\n\ninstall.packages(\"rmarkdown\")\n\nWhile not necessary for basic website building inside RStudio, it will also be a good idea to have Quarto installed moving forward. This is not an R package, but is a separate piece of software. To install it, go to https://quarto.org/docs/get-started/ and the correct installer for your operating system should be highlighted in a blue box. Click on that box to download and once downloaded, click on the installer to install Quarto.\n\n\n\nThe blue box should highlight the installer for your operating system."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#initiating-your-website-project",
    "href": "posts/website_01_initiation/index.html#initiating-your-website-project",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "3 Initiating your website project",
    "text": "3 Initiating your website project\nThe first step to getting a website is to open up a new project in RStudio.\nStart by going to File &gt; New Project &gt; New Directory. When asked which Project Type you want, pick Quarto Website. Note that you can also initiate a Quarto Blog which is a type of Quarto Website - since the website template is simpler we are going to start there, and can change back in the future if you want. If you want to read ahead, here is a nice website about making your Quarto website into a blog.\n\n\n\na screen shot of the new project wizard - we are picking Quarto Website, or the third from the bottom choice\n\n\nYou will then be asked where you want this website to live in your computer. Under Directory Name pick the name of the folder you want your content to be in, and Create project as subdirectory of as where you want the location on your computer. I have used the Knitr engine for website building.\n\n\n\na screen shot of the new project wizard where we indicate our directory name and where that directory will reside. we use knitr engine to run, and are not creating a git repo, using renv, or using visual markdown editor. we are opening in a new session\n\n\nI am not creating a git repository (since we haven’t gone over that yet, we will add it later after we finish our site), am not using renv with this project (which automatically saves your environment), and I am not default using the visual editor (which let’s you look at your markdown files how they will look when executed) since I want you to get used to looking at markdown. You can always toggle the visual editor later.\nOnce you do this basically you have all the bones of a website! Congratulations 🥳"
  },
  {
    "objectID": "posts/website_01_initiation/index.html#orienting-to-your-website",
    "href": "posts/website_01_initiation/index.html#orienting-to-your-website",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "4 Orienting to your website",
    "text": "4 Orienting to your website\nA new RStudio window should have opened (since we checked the box in the previous step Open in new session) that has your new R project opened.\nWe now see the four quadrants of RStudio:\n\n\n\na screenshot of four quadrants of rstudio\n\n\n\nthe top left where the two website files index.qmd and _quarto.yml are open\nthe bottom left where we see the console\nthe top right where we see the tabs: Environment (which is currently empty), History (which we won’t use), Connections (which we won’t use), Tutorial (which we won’t use), and a new one Build (which is how we render our site)\nthe bottom right where we see Files (which houses the new files that populate our website), Plots (which you’ve seen before and where plots can be rendered if you don’t like them inline), Packages (which shows all the packages loaded in your R), Help (which you’ve seen before, and where you can get help), Viewer (a new one where we can see a preview rendering of our website), and Presentation (where we can see a preview rendering a presentation but we aren’t doing that right now)."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#building-your-site",
    "href": "posts/website_01_initiation/index.html#building-your-site",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "5 Building your site",
    "text": "5 Building your site\nLet’s see what our website looks like before we’ve done anything. If you go to the Build tab in the top right quadrant and click Render Website your site will render and show up in the Viewer in the bottom right."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#looking-around",
    "href": "posts/website_01_initiation/index.html#looking-around",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "6 Looking around",
    "text": "6 Looking around\nYou can now click around in your new and very unexciting website. Let’s look around and then we will go through the file structure to see how the two are related.\nAlong the top, or if you click the three lines in the top right (depending on the size of your browser page) you can see by default we get a Home and About page. If we click ‘website’ at the top, we go back to Home. We also have a search bar that allows us to search on our site.\nNow that we know what information we see on our site, we can look at the files that are used to build the site and try and interpret them.\n\n\n\na screenshot of the files generated by creating our skeleton website in the bottom right quadrant\n\n\nBefore we open the files, let’s talk about the file extensions and what they mean:\n\n.yml is a YAML or the file that indicates how the website will be configured\n.qmd is a Quarto markdown document, and if you’re familiar with RMarkdown .Rmd documents its very similar. It contains both text written in markdown and executable code.\n.css is a Cascading Style Sheets file that indicates the way to style an HTML document (i.e., your website)\n.Rproj is a R Project file that designates your working directory\n\nWe also have a folder _site which houses the knitted website files. More about this later."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#index.qmd",
    "href": "posts/website_01_initiation/index.html#index.qmd",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "7 index.qmd",
    "text": "7 index.qmd\nThis index.qmd file indicates what the home page of the site will look like.\n\n\n\na screenshot of the index.qmd file\n\n\nIntuitively we can compare this file to what the homepage of the website looks like. You can try editing this website, saving, and then click Render and see how this changes what the site looks like in the Viewer (bottom right quadrant). You can check Render on Save so that whenever you save, the file automatically renders.\nPlay around with adding text, code, headers, images, whatever you might want on your website homepage."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#about.qmd",
    "href": "posts/website_01_initiation/index.html#about.qmd",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "8 about.qmd",
    "text": "8 about.qmd\nThis about.qmd file indicates what the about page of the site will look like.\n\n\n\na screenshot of the about.qmd file\n\n\nJust like with the index.qmd file, you can play around with this page."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#quarto.yml",
    "href": "posts/website_01_initiation/index.html#quarto.yml",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "9 _quarto.yml",
    "text": "9 _quarto.yml\nThe YAML file indicates how the site should be configured.\n\n\n\na screenshot of the _quarto.yml file\n\n\nYou’re probably not familiar with these .yml files but still its not horribly difficult to figure out what the different bits do.\nAt the top, project type is indicated as website. We don’t want to change that now.\nIn the next section beginning at line 4, we can have some specific information for how the website populates. The title is listed as “website” - we can change that to what we want at the top of our website. There is also a specification for what are the items in your navitation bar - here we have that the Home text will link to the index.qmd, and the next link is about.qmd. You can make more .qmd files that have other information and refer to them here and they will also populate in your navigation bar.\nIn the third section at line 12, we can see some information on the setting of the website format. We have a html site, the theme is something called “cosmo” (see here for some other options), we are using the styles.css file for css theming (actually that file is currently blank but thats ok), and we are indicating toc (or table of contents) as true, therefore we have a table of contents.\nHere you can find some documentation about all the different stuff you can put in your YAML for a website."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#playing-around",
    "href": "posts/website_01_initiation/index.html#playing-around",
    "title": "Quarto website 1: Initiating a website 🌐",
    "section": "10 Playing around",
    "text": "10 Playing around\nNow that we have a general understanding of whats in our site, try playing around to begin customization to be how you want. We will do this for the rest of the session and please ask any questions on problems you come across, or share cool things you find!"
  },
  {
    "objectID": "posts/website_04/index.html",
    "href": "posts/website_04/index.html",
    "title": "Quarto website 4",
    "section": "",
    "text": "We are continuing this semester’s Code Club series on making yourself a website. So far, we have gone through:\nToday, we are going to focus on interacting with our GitHub repository:"
  },
  {
    "objectID": "posts/website_04/index.html#git-and-github-repository-recap",
    "href": "posts/website_04/index.html#git-and-github-repository-recap",
    "title": "Quarto website 4",
    "section": "1 Git and GitHub repository recap",
    "text": "1 Git and GitHub repository recap\nNow that you have actually created a local Git and a remote GitHub repository (or “repo” for short) for your website, let’s revisit this illustration that Jess explained last week:\n\n\n\n\n\nFigure by Allison Horst\n\n\n\n\nLet’s go through the three different “areas” in this illustration and how they interact, again:\n\nYour working directory1 (bottom right in the illustration) is the folder on your computer that contains all the files for your website. Within that folder:\n\nThe docs folder contains HTML and other files representing your rendered website\nEverything else (.qmd, .yml etc.) is the source code for your website\n\nIn the workflow we are showing you here, you’re modifying the files in your working directory predominantly using RStudio.\n\n\nYour local Git repo (bottom left in the illustration) contains one or more saved snapshots (versions through time) of your working directory.\nThe most recent snapshot of the local repo does not necessarily correspond to the state of your working directory: there is purposefully no auto-saving, so saving a snapshot (i.e. commiting) is something you always have to actively do2.\nSaving a snapshot of the current state of your working dir can be done in a number of ways, such as using Git commands in a terminal (the add and commit verbs in the illustration) or using the Git pane in RStudio, but the method we have shown you here uses the GitHub Desktop app.\n\n\nYour remote GitHub repo (top in the illustration) is simply the online counterpart of your local repo.\nJust like changes to your working dir aren’t automatically saved to your local repo, new snapshots in your local repo aren’t automatically published to your remote repo: to do so, we have to push our changes online. (The counterpart to push is pull, which we won’t talk more about here, will pull in changes from the online repo to your local repo.3)\nJust like for committing, we will use GitHub Desktop to push our changes online.\nIn our use case, where our repository contains a website, we basically have a fourth area: the actual website.\nWe “activated” this area last week using some settings for the online repo. Therefore, we don’t have to think much about this aspect – there basically is an automatic connection between the remote repo and the website: GitHub will detect whenever we’ve changed our online repo, and will update the website for us.\n\nIn summary, when you have made changes to your website that you would like to put online, go to GitHub Desktop to save a snapshot to your local repo (i.e., to commit) and then push those changes to your remote (online) repo. GitHub will then detect the changes to your online repo and update your website.\nWe will practice this routine today."
  },
  {
    "objectID": "posts/website_04/index.html#changing-the-url-to-your-website",
    "href": "posts/website_04/index.html#changing-the-url-to-your-website",
    "title": "Quarto website 4",
    "section": "2 Changing the URL to your website",
    "text": "2 Changing the URL to your website\nThe URLs to your repository and website are automatically determined based on your GitHub username and repo name as follows:\n\nWebsite: https://&lt;github-username&gt;.github.io/&lt;github-repo-name&gt;\nGitHub repo: https://github.com/&lt;github-username&gt;/&lt;github-repo-name&gt;\n\nFor instance, the Code Club practice website is under the GitHub username osu-codeclub and the repository name practice-website, and therefore, it has the following URLs:\n\nWebsite: https://osu-codeclub.github.io/practice-website\nGitHub repo: https://github.com/osu-codeclub/practice-website\n\nHowever, the main Code Club website has a shorter URL that only contains the GitHub username: https://osu-codeclub.github.io. How can you make that happen for your website? You can do so by giving your GitHub repo the same name as your GitHub username.\nSo, for whoever would like to have the shorter URL format, let’s change the GitHub repo name to your GitHub username.\n\nIf you’re making a personal website, you’ll likely want to make that change.\nIf you’re making a website covering a specific topic or project, and could see yourself making other similar websites, this URL change doesn’t make as much sense.\n\n In your GitHub repository, click “Settings”:\n\n\n\n\n\n\n\n\n\n Then, right at the top of the General page (the one that should open by default), click inside the “Repository name” box and you’ll notice that you can type to change the name. Give the repo the same name as your GitHub username (which should e.g. show in the URL to your repo), and then click the “Rename” button:\n\n\n\n\n\nYou can type directly in the box to change the repo’s name\n\n\n\n\nThat should send you back to your repository’s main page, and if all went well, your URL should have been updated immediately. To check this, you can go back to your repo’s settings and then click on “Pages” on the left-hand side, as shown below:\n\n\n\n\n\nOn the GitHub Pages page, you can check the URL to your site"
  },
  {
    "objectID": "posts/website_04/index.html#adding-about-info-and-a-readme",
    "href": "posts/website_04/index.html#adding-about-info-and-a-readme",
    "title": "Quarto website 4",
    "section": "3 Adding About info and a README",
    "text": "3 Adding About info and a README\n\n3.1 About\nWhile we’re making edits on GitHub, let’s first add a very brief description of our repo, and the URL to the website, to the “About” section on the main page of your repo.\n Click the cog wheel icon shown below:\n\n\n\n\n\n\n\n\n\n\nEnter a one-sentence description of your repo in the “Description” box —\nBelow “Website”, you can simply check the box “Use your GitHub Pages website” to add your website’s URL to this About section.\n\n\n\n\n\n\n\n\n\n\nNow, your About section should look something like this:\n\n\n\n\n\n\n\n\n\n\n\n\n3.2 README\nNext, let’s add a README file to our repo.\nIf we create a file that is called e.g. README or README.md in the top-level folder of our repo, GitHub will automatically show it (in rendered form, if the file is written in Markdown) on the main page of our repository.\nUnlike the changes we made so far today (our website URL, the About info), creating a README file will actually modify the contents of our repo. Therefore, it will be easiest to create this file on our own computer, commit it to our local repo, and push the changes to the remote repo. (Alternatively, we could create and write this file directly on the GitHub website, but if we would do this, we would need to “pull” in these changes from remote, which is something we won’t cover here.)\n To create our README file:\n\nSwitch to your RStudio window with oyur website RStudio project open, then click on “File” =&gt; “New File” =&gt; “Markdown File” (halfway down).\nIf the new file doesn’t automatically open in “Visual” mode, you can click the “Visual” button to do so, unless you would like to practice with Markdown syntax.\nLet’s save the file straight away as README.md, in the top-level folder where you also have, e.g., the _quarto.yml file.\nAdd some text to the README, which can be as long or short as you want; you’ll mostly just want to make it clear (again) that this repo is the source for your website. For example, I’ll add for this practice website:\n\n## This is the repository for a practice website part of OSU's Code Club\n\n- OSU Code Club: &lt;https://osu-codeclub.github.io&gt;\n\n- OSU Code Club practice website: &lt;https://osu-codeclub.github.io/practice-website&gt;\n\n\n\n\n\n\n\nYour README plain Markdown file\n\n\n\n\n“README” doesn’t have to be in all-caps, but this is customary.\nThe .md extension stands for (plain) Markdown, as opposed to Quarto Markdown (.qmd) or R Markdown (.Rmd). The difference between plain Markfown and Quarto/R Markdown files is that the latter can execute code (usually but not limited to R code)."
  },
  {
    "objectID": "posts/website_04/index.html#updating-the-online-repo",
    "href": "posts/website_04/index.html#updating-the-online-repo",
    "title": "Quarto website 4",
    "section": "4 Updating the online repo",
    "text": "4 Updating the online repo\nNow that we have made changes to our “working directory” by adding a README file, we should commit these changes to our local repo and then push them to the remote repo. For that, we’ll switch to GitHub Desktop.\n When you open GitHub Desktop, it should automatically focus on your website’s repo, and you should see a bunch of changes listed in the left-hand panel.\nTo commit all of these changes at once, focus on the bottom-left part, where you can leave the “Description” box empty, but you have to fill out something in the “Summary (required)” box, which should ideally summarize the changes you just made, e.g.:\n\n\n\n\n\nAfter entering something in the Summary box, click ‘Commit to main’\n\n\n\n\nThen, click on the large blue “Commit to main” box (this box may also say “Commit to master”) to commit your changes to your local repo.\nNext, the following should appear in the main GitHub Desktop pane, and you can click “Push origin”:\n\n\n\n\n\nClick ‘Push origin’ to push your local repo changes to remote\n\n\n\n\n\n\n\n\n\n\nGit terminology\n\n\n\n\nThe “master” or “main” in e.g. “Commit to main” refers to a specific so-called branch of your repository. With Git version control, it is for example common to work on experimental changes in your code in a separate (non-main) branch, so that your code in main keeps working in the meantime.\n“Origin” is the default name that is given to the default connection with your remote repo, so “Push origin” means push to the default remote repo.\n\n\n\nLet’s switch to our repo page on GitHub in our browser, where you should immediately see your new commit referenced at the top:\n\n\n\n\n\nYou should see your changes referred to in the online repo\n\n\n\n\nAnd if you scroll down, the README.md should appear in rendered form below the file listing:\n\n\n\n\n\nGitHub will render and display a README file in your repo automatically\n\n\n\n\nFinally, a couple of things to note about what we just did:\n\nUnlike most changes you’ll make to your repo, this change did not affect our website at all.\nWe can freely change our GitHub repo name without having to change the name of our folder with the website: these two can be the same, but they can also differ."
  },
  {
    "objectID": "posts/website_04/index.html#referencing-our-repo-on-the-website",
    "href": "posts/website_04/index.html#referencing-our-repo-on-the-website",
    "title": "Quarto website 4",
    "section": "5 Referencing our repo on the website",
    "text": "5 Referencing our repo on the website\nFinally, we can reference our GitHub repo on our website in two ways, by making changes in our _quarto.yml.\nFirst, we can add a GitHub icon to the right-hand end of our top navigation bar, which will link to our GitHub repom as follows:\nwebsite:\n  navbar:\n    right:\n      - href: \"https://github.com/osu-codeclub/practice-website\"\n        icon: github\n\n\n\n\n\nMaking the change above should produce this icon in the navbar on your website\n\n\n\n\nSecond, we can add one or two “repo actions” links to the Table of Contents that on each page on our website, which will allow people to:\n\nAction issue: Report an “issue” on GitHub, e.g. report that a link on your site is broken. This will open a new so-called issue for your repo – you should get an email when this happens.\nAction edit: Make a suggestion for a change (“Edit this page”), e.g. fix the broken link. This will open a new so-called pull request for your repo, and you can choose whether you want to accept this request, in which case it should automatically update your repo and website.\n\nIf you want both of these type of links, you should add the following to your _quarto.yml:\nwebsite:\n  repo-url: https://github.com/osu-codeclub/osu-codeclub.github.io\n  repo-actions: [edit, issue]\n\n\n\n\n\nMaking the change above should produce these entries in the TOC of every page on your website\n\n\n\n\n\nYour turn: update _quarto.yml and get the changes to your website\n\nMake some or all of the suggested changes to your _quarto.yml file\nRender your website, so the changes will be included in the website’s HTML files in your docs folder\nGo to GitHub Desktop and commit the changes to your local repo\nStill in GitHub Desktop, push the changes to your remote repo\nGo to you GitHub repo, and check that you see your most recent push\nGo to / refresh your website, and see if the changes are there. You may have to wait a minute or so.a"
  },
  {
    "objectID": "posts/website_04/index.html#footnotes",
    "href": "posts/website_04/index.html#footnotes",
    "title": "Quarto website 4",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDirectory (or “dir” for short) is just another word for a folder on your computer.↩︎\nIt is also possible to save to a snapshot with only some of the changes that you’ve made to your working dir: you can add changed files individually rather than all at once, too.↩︎\nPulling in changes from the online repo is only relevant either when you are collaborating with others on a repo, such that sharing of changes happens via the online repo, or when you have made changes directly to the online repo (this is possible but generally not recommended).↩︎"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to the new Code Club website!",
    "section": "",
    "text": "Code Club has a new website, made with Quarto!\nWe were previously on the “BioDASH” website, which also contained some educational bioinformatics material unrelated to Code Club.\nThat website was created using R Markdown and “Hugo”. A lot has happened in the realm of R Markdown websites in the meantime, and even R Markdown itself now has a successor: Quarto.\nIn the AU23 semester, we will teach making a website with Quarto, and we therefore think it is fitting that the Code Club website itself is also made with Quarto. Additionally, we think it will be nice to have a website just for Code Club content.\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code Club blogroll",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nQuarto website 4\n\n\nInteracting with our GitHub repository\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nSep 25, 2023\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 3: Deploying your website with GitHub 🐱\n\n\nUsing GitHub, GitHub Desktop, and GitHub Pages to deploy our website 🤩️.\n\n\n\n\nwebsite\n\n\ngit\n\n\n\n\n\n\n\n\n\n\n\nSep 18, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 2\n\n\nAdding a new page to your site & using YAML to modify the look and configuration of our new page and the entire site\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nSep 11, 2023\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 1: Initiating a website 🌐\n\n\n\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nWelcome to the new Code Club website!\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 18, 2023\n\n\nJelmer Poelstra, Jessica Cooperstone, Horacio Lopez-Nicora\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "pages/r_resources.html#new-to-r",
    "href": "pages/r_resources.html#new-to-r",
    "title": "Getting Started with R",
    "section": "1 New to R?",
    "text": "1 New to R?\nIf you are completely new to R, we recommend watching at least the first couple of videos from OSU’s Mike Sovic’s Youtube playlist of short videos on R, to get started.\nHere are some additional resources for learning the basics of R:\n\nA useful and fun written tutorial is R for cats.\nFor a more systematic and lengthy introduction to R, see A Tutorial Introduction to R (this gets fairly advanced after section 9).\nExcellent comprehensive introductions are the R Basics and Visualization classes by Rafael Irizarry that can be freely accessed; you do have to create an account.\nOSU TDAI videos:\n\nInstalling R / R Studio\nR / R Studio Introduction\n\n\nAlso, don’t hesitate to reach out to the Code Club organizers if you have any questions!"
  },
  {
    "objectID": "pages/r_resources.html#miscellaneous-r-tips",
    "href": "pages/r_resources.html#miscellaneous-r-tips",
    "title": "Getting Started with R",
    "section": "2 Miscellaneous R tips",
    "text": "2 Miscellaneous R tips\n\n2.1 Useful settings\nBy default, R will try to save your “environment” (e.g., your loaded data, variables, etc) when you exit, and then reload everything the way it was upon restarting R. However, this is bad! You should always be able to reproduce your environment given a set of commands saved in an R script or R Markdown document, whereas saving and reloading your environment encourages you to be sloppy about this.\nTo disable this in RStudio, go to Tools &gt; Global Options &gt; General and set the options as follows:\n\n\n\n\n2.2 Installing R packages\n\n2.2.1 CRAN packages\nTo install an R package that is available at CRAN, the default R package repository, from within R (e.g. in the R console in RStudio), use the install.packages() function.\nThe install.packages() function will handle dependencies within R — i.e., it will install other R packages that your package depends on. Occasionally, when the install function needs to compile a package from source, errors arise that relate to missing system dependencies (i.e. software outside of R).\nOn Mac and Linux, these system dependencies are best installed outside of R, such as with homebrew on Mac or apt on Ubuntu. The errror message you got when trying to install an R package should tell you which system dependencies are needed.\nOn Windows, you can use the installr package to install such dependencies or other software from within R — for example:\ninstall.packages(\"installr\")    # Install the installr package first\ninstalllr::install.RStudio()    # Install RStudio\ninstallr::install.python()      # Install Python\n\n\n2.2.2 Installing packages from Github\nTo install a package from Github, use either the devtools or the remotes package – for example:\ninstall.packages(\"remotes\")                # Install the remotes package\nremotes::install_github(\"kbroman/broman\")  # Install from a repository using \"&lt;username&gt;/&lt;repo-name&gt;\"\nThis will install the package from source, so you will need to make sure you are able to do so by following the instructions in the section right above this one.\n\n\n2.2.3 Installing packages from Bioconductor\nIf you’re doing bioinformatic analyses in R, you will probably run into packages that are not on CRAN but on Bioconductor. To install a package from Bioconductor, use the BiocManager package – for example:\ninstall.packages(\"BiocManager\")  # Install the BiocManager package\nBiocManager::install(\"edgeR\")    # Install the edgeR package from Bioconductor\n\n\n\n\n2.3 Updating R\nConsider updating R if you have an older version of R installed. As of August 2023, we would recommend to update R if your version is below 4.1.\nYou can check which version of R you have by looking at the first lines of output when running the following command inside R:\nsessionInfo()\nTo update:\n\nWindows: You can update R from within R. The updateR() function will also take care of updating your packages:\ninstall.packages(\"installr\")\ninstallr::updateR()\nMac: Download and install the latest .pkg file as if you were installing it for the first time.\n\n\n\n2.3.1 Re-installing your packages after updating (Mac and Linux)\nWhile the installr::updateR() function for Windows users takes care of reinstalling your packages along with updating R, Mac and Linux users will have to manually re-install their packages. Some people prefer to re-install these packages on the fly, which can end up being a way to get rid of packages you no longer use.\nBut if you want immediately reinstall all your packages, run this before you upgrade:\nmy_packages &lt;- installed.packages()\nsaveRDS(my_packages, \"my_packages.rds\")\nThen, after you’ve installed the latest R version:\nmy_packages &lt;- readRDS(\"CurrentPackages.rds\")\ninstall.packages(my_packages[1, ])\nThis will only work for packages available on CRAN. Of course, you can check your list for Github-only and Bioconductor packages and then install those with their respective commands (see below). Yes, this can be a bit of a hassle!"
  },
  {
    "objectID": "pages/setup.html",
    "href": "pages/setup.html",
    "title": "Computer Setup for Code Club",
    "section": "",
    "text": "Here, you will find general information about computer setup for Code Club. Additional setup instructions for individual sessions will appear in the posts for each session.\nIn summary, you just need to get access to R and RStudio, preferably via a local installation, and optionally via the Ohio Supercomputer Center (OSC).\nIf you run into issues or have questions, don’t hesitate to contact one of the organizers. You can also come to Code Club 15 minutes early, and one or more of the organizers should be there already."
  },
  {
    "objectID": "pages/setup.html#install-r",
    "href": "pages/setup.html#install-r",
    "title": "Computer Setup for Code Club",
    "section": "1 Install R",
    "text": "1 Install R\n\nWindows: Download and run the .exe file for the latest version of R from https://cran.r-project.org/bin/windows/base/, by clicking the large Download R [version-number] for Windows link at the top of the gray box.\nMac: Download and run the .pkg file for the latest version of R from https://cran.r-project.org/bin/macosx/, by clicking the link just below Latest release.\n\n\n\n\n\n\n\nAlready have R installed?\n\n\n\n\nPlease check your version of R – this information is printed to the console when you start R, and you can also get it by typing sessionInfo() and checking the first line of the output.\nCurrently (August 2023), we would recommend R version 4.2.0 or higher. And since we’ll work with the “base R pipe”, you’ll definitely need version 4.1.0 or higher.\nTo update R, see this page for instructions."
  },
  {
    "objectID": "pages/setup.html#install-rstudio",
    "href": "pages/setup.html#install-rstudio",
    "title": "Computer Setup for Code Club",
    "section": "2 Install RStudio",
    "text": "2 Install RStudio\nRStudio is a so-called Integrated Development Environment (IDE) for R, with side-by-side panes for an R script, an R concole, plots, help documents, and much more. While it is perfectly possible to use R without RStudio, RStudio has become the de facto standard for working with R and is very useful.\nTo install RStudio, go to the RStudio download page and download and run the installer file for your operating system."
  },
  {
    "objectID": "pages/setup.html#quarto-website-specific-installation",
    "href": "pages/setup.html#quarto-website-specific-installation",
    "title": "Computer Setup for Code Club",
    "section": "3 Quarto-website specific installation",
    "text": "3 Quarto-website specific installation\nFor the Fall 2023 sessions on creating a Quarto website, you will need to have the rmarkdown R package installed. You can do so by typing (or copying) the following into your R Console inside RStudio:\n\ninstall.packages(\"rmarkdown\")\n\nWhile not necessary for basic website building inside RStudio, it will also be a good idea to install Quarto itself. This is not an R package, but is a separate piece of software. To install it, go to https://quarto.org/docs/get-started/ and the correct installer for your operating system should be highlighted in a blue box. Click on that box to download and once downloaded, click on the installer to install Quarto."
  },
  {
    "objectID": "pages/setup.html#osc",
    "href": "pages/setup.html#osc",
    "title": "Computer Setup for Code Club",
    "section": "4 Alternative: Use RStudio Server at OSC",
    "text": "4 Alternative: Use RStudio Server at OSC\nUpon request (contact Jelmer), you can get access to the Ohio Supercomputer Center (OSC) Classroom Project for Code Club (PAS1838). This way, you can code in RStudio from your browser rather than with a local installation. This is a good option if you prefer not to install anything or if you run into problems during installations.\nAfter you asked for access to the OSC project, you should receive an email from OSC that you have been added to the Code Club OSC project.\n\nIf you already have an OSC account, you shouldn’t need to do anything to gain access, although the email may ask you to confirm/accept your being added to project.\nIf you do not yet have an OSC account, the email you received from OSC should have a link to do so. Alternatively, follow the instructions below to sign up and get access to the project.\n\n\n\n\n\n\n\nRun RStudio Server from the OSC OnDemand website (Click to expand)\n\n\n\n\n\nOSC OnDemand lets you access OSC resources through your browser and run applications like RStudio.\n\nTo get started, go to https://ondemand.osc.edu/ and log in with your OSC username and password.\nClick on “Interactive Apps” in the blue top bar, and select “RStudio Server” (near the bottom).\nNow, you’re on a page from which you can launch an RStudio server that will run on an OSC cluster. Select project PAS1838 in the dropdown menu and change the “Number of hours” to 2. Then click “Launch”.\nYou will be sent to a page where you can see the status of your “job” It usually starts running within seconds, and the color of the top bar will then switch from blue (“Queued” and then “Starting”) to green (“Running”).\nClick “Connect to RStudio Server” at the bottom of the box, and an RStudio Server instance will open."
  },
  {
    "objectID": "pages/setup.html#more",
    "href": "pages/setup.html#more",
    "title": "Computer Setup for Code Club",
    "section": "5 More info",
    "text": "5 More info\nPlease see our R Resources and Tips if you are new to R or need to update your R version!"
  }
]
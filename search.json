[
  {
    "objectID": "pages/schedule.html",
    "href": "pages/schedule.html",
    "title": "Schedule for Code Club",
    "section": "",
    "text": "Code Club has restarted for the 2025 Spring semester on January 14th and is being held on Tuesdays from 4-5 pm via Zoom and with in-person locations in Columbus and Wooster.\nIf you sign up using this Google form, we will add you to our mailing list and keep you up-to-date! (We have separate mailing lists for each semester, so please sign up again even if you‚Äôve joined before.)\n\nFor an overview of all previous Code Club sessions, including from previous semesters, see the Previous sessions page.\n\n\n\n\n\nSession\nDate\nPresenter\nTopic & link\n\n\n\n\nS09E10\nApr 01\nJelmer\nIteration III: purrr:map()\n\n\nS09E11\nApr 08\nHoracio\nCreating pretty tables with gt ‚Äì I\n\n\nS09E12\nApr 15\nHoracio\nCreating pretty tables with gt ‚Äì II\n\n\nS09E13\nApr 22\nHoracio\nCreating pretty tables with gt ‚Äì III\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/other.html",
    "href": "pages/other.html",
    "title": "Other coding-related OSU activities",
    "section": "",
    "text": "On this page, we‚Äôre listing other coding-related activities at OSU that Code Clubbers may be interested in. Let us know if you have a suggestion of something to add here."
  },
  {
    "objectID": "pages/other.html#formal-classes",
    "href": "pages/other.html#formal-classes",
    "title": "Other coding-related OSU activities",
    "section": "Formal classes",
    "text": "Formal classes\n\nPLNTPTH 6193: Practical Computing for Biologists (taught by Jelmer ‚Äî next up in AU25)\nHCS 7100: Data Visualization in R (taught each Autumn by Jess)\nENT 6702: Entomological Techniques and Data Analysis (taught by Kayla Perry and Sam Ward)"
  },
  {
    "objectID": "pages/other.html#other",
    "href": "pages/other.html#other",
    "title": "Other coding-related OSU activities",
    "section": "Other",
    "text": "Other\n\nPython Learning Community (Spring 2025)"
  },
  {
    "objectID": "pages/other.html#online-material-of-past-workshops",
    "href": "pages/other.html#online-material-of-past-workshops",
    "title": "Other coding-related OSU activities",
    "section": "Online material of past workshops",
    "text": "Online material of past workshops\n\nOSU Carpentries workshop organized by Code Club, Research Commons, and Imageomics on R for Reproducible Research (Feb 2025)\nAmplicon Metabarcoding Workshop (March 2024)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About OSU Code Club",
    "section": "",
    "text": "The Code Club at Ohio State University is a regularly occurring, interactive, in-person and online gathering to improve coding skills. We aim for a supportive and fun culture of learning together, and hope to offer something to participants at any experience level.\nAnyone who studies or works at the Ohio State University is welcome to join: please fill out this short form if you want to do so.\nIn each session, one of the organizers will be presenting. Code Club sessions are meant to be interactive and involved, so be prepared to follow along yourself and to do exercises, sometimes in groups with other participants.\n\n\n\n\n\n\n\n\n\nTeaching materials for each Code Club session are added to this website and will continue to be available. Code Club has run since the fall of 2020, and materials for the 71 sessions in the semesters prior to autumn 2023 are currently available at https://biodash.github.io but will eventually be migrated to this website.\nBy popular demand, Code Club has so far focused entirely on the R language and its surrounding ecosystem (R Markdown, Shiny, etc). If you have any suggestions or requests for Code Club, don‚Äôt hesitate to contact one of the organizers.\n\nSign up!\nTo sign up, please fill out this short form and you will be added to Code Club email list. Then, you‚Äôll receive emails with updates about each session, links to the Zoom meeting and our folder with Zoom recordings of previous sessions.\n\n\nOrganizers\nThe current organizers of Code Club are:\n\nJelmer Poelstra, bioinformatician at the MCIC core facility in Wooster.\nJessica Cooperstone, associate professor in the departments of Horticulture and Crop Science and Food Science and Technology.\nHoracio Lopez-Nicora, assistant professor in the department of Plant Pathology.\n\nIn previous semesters, we also had co-organizers Michael Broe (EEOB), Mike Sovic (CAPS), and Stephen Opiyo (MCIC Columbus).\n\n\nLearn more about -and get ready for- Code Club\n\nSchedule with upcoming sessions\nComputer setup instructions\nResources and tips for R novices\nList of previous sessions by semester\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/S07E13_ggplot_03/index.html",
    "href": "posts/S07E13_ggplot_03/index.html",
    "title": "Plotting 3: histogram, density, and bar plots",
    "section": "",
    "text": "In last week‚Äôs session, we delved into aesthetics and gained a deeper understanding of the topic. Additionally, we introduced the theme() function. We also acquired knowledge on the fundamentals of geom_boxplot(), geom_violin(), and stat_summary.\n\n\n\n\nLet‚Äôs explore our palmerpinguins dataset using histogram and density plots. We will learn about geom_histogram() and geom_density().\nLearn the basic of bar graph in ggplot2."
  },
  {
    "objectID": "posts/S07E13_ggplot_03/index.html#introduction",
    "href": "posts/S07E13_ggplot_03/index.html#introduction",
    "title": "Plotting 3: histogram, density, and bar plots",
    "section": "",
    "text": "In last week‚Äôs session, we delved into aesthetics and gained a deeper understanding of the topic. Additionally, we introduced the theme() function. We also acquired knowledge on the fundamentals of geom_boxplot(), geom_violin(), and stat_summary.\n\n\n\n\nLet‚Äôs explore our palmerpinguins dataset using histogram and density plots. We will learn about geom_histogram() and geom_density().\nLearn the basic of bar graph in ggplot2."
  },
  {
    "objectID": "posts/S07E13_ggplot_03/index.html#our-data-set",
    "href": "posts/S07E13_ggplot_03/index.html#our-data-set",
    "title": "Plotting 3: histogram, density, and bar plots",
    "section": "2 Our data set",
    "text": "2 Our data set\n\n\n\nArtwork by Allison Horst.\n\n\n\nWe are going to continue using our üêß data set from the package palmerpenguins. If you haven‚Äôt done so, please install that package first:\n\ninstall.packages(\"palmerpenguins\")\n\npalmerpenguins is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.¬†Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.\nWe‚Äôll now load the package, along with the tidyverse (which includes ggplot2):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.3     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.4     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nOnce you‚Äôve loaded that package you will have a data frame called penguins at your disposal ‚Äî let‚Äôs take a look:\n\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S07E13_ggplot_03/index.html#histograms-geom_histogram",
    "href": "posts/S07E13_ggplot_03/index.html#histograms-geom_histogram",
    "title": "Plotting 3: histogram, density, and bar plots",
    "section": "3 Histograms: geom_histogram()",
    "text": "3 Histograms: geom_histogram()\nA histogram provides a precise graphical portrayal of the distribution of numerical data. It only needs one aesthetic, which is the x variable.\n\nggplot(penguins, aes(x = flipper_length_mm)) + \n  geom_histogram() + \n  labs(title = \"Histogram of penguin flipper length\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is crucial to have good labels to ensure the accessibility of your plots to a broader audience. Always make sure that the axis (within labs(), use x=\"x-title\", y=\"y-title\") and legend (within labs(), use fill/color=\"legend-title\") labels display the complete variable name.\n\n\n\n\n\n\nThe default computation of geom_histogram through stat_bin uses 30 bins, which is not always an optimal choice.\nThere are possible options to address this issue. One option is to set the number of bins using the bins argument. Another option is to adjust the width of each bin using the binwidth argument.\nThe number of bins or bars in the histogram can be customized using the bins argument in the geom_histogram function.\nAn alternative option involves utilizing the binwidth argument in the geom_histogram function, which dictates the width of each bin on the X-axis. It is important to note that this argument takes priority over the bin argument.\n\n\n Exercise 1\n\nUsing the example from above, within geom_histogram() use the bins and binwidth arguments to change the size of each bar/bin.\n\n\n\nHints (click here)\n\nYou can use the following argument geom_histogram(bins = TRY DIFFERENT VALUES) or geom_histogram(binwidth = TRY DIFFERENT VALUES).\n\n\n\nSolutions (click here)\n\n\nggplot(penguins, aes(x = flipper_length_mm)) + \n  geom_histogram(binwidth = 2) + \n  labs(title = \"Histogram of penguin flipper length\")\n\n\n\n\n\n\n\nggplot(penguins, aes(x = flipper_length_mm)) + \n  geom_histogram(bins = 13) + \n  labs(title = \"Histogram of penguin flipper length\")\n\n\n\n\n\n\n\n\n\n\n\n\n3.1 Is the distribution bimodal?\nHistograms are effective in displaying the distributional characteristics of variables within a dataset. They provide visual cues regarding the location of distribution peaks, whether the distribution is skewed or symmetric, and the presence of any outliers. However, given that our dataset consists of three distinct species, can we utilize histograms to analyze all of them simultaneously?\n\nggplot(penguins) + \n  aes(x = flipper_length_mm, color = species) + \n  geom_histogram(bins = 30) + \n  theme_bw() + \n  theme(legend.position = \"bottom\") + \n  labs(title = \"Histogram of penguin flipper length\", \n       subtitle = \"By species\", \n       color = \"Penguin species\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThemes are a powerful way for customizing the non-data elements of your plots, such as titles, labels, fonts, background, gridlines, and legends. They can be employed to provide plots with a consistently customized appearance.\n\n\n\n\n\n\n\n\n Exercise 2\n\nInstead of coloring only the outline of the bins, let‚Äôs color the bins themselves.\n\n\n\nHints (click here)\n\nYou will have to use the argument fill. Please be sure that your legend title, adjusted using labs(), has been properly set.\n\n\n\nSolutions (click here)\n\n\nggplot(penguins) + \n  aes(x = flipper_length_mm, fill = species) + \n  geom_histogram(bins = 30) + \n  theme_bw() + \n  theme(legend.position = \"bottom\") + \n  labs(title = \"Histogram of penguin flipper length\", \n       subtitle = \"By species\",\n       fill = \"Penguin species\")"
  },
  {
    "objectID": "posts/S07E13_ggplot_03/index.html#density-plot-geom_density",
    "href": "posts/S07E13_ggplot_03/index.html#density-plot-geom_density",
    "title": "Plotting 3: histogram, density, and bar plots",
    "section": "4 Density plot: geom_density()",
    "text": "4 Density plot: geom_density()\nA density plot provides an alternative way to visualize the distributions of numerical variables. It is essentially a smoothed version of a histogram and serves as a practical option, especially when dealing with continuous data originating from a smooth underlying distribution.\n\nggplot(penguins) + \n  aes(x = flipper_length_mm, color = species) + \n  geom_density() + \n  theme_bw() + \n  theme(legend.position = \"bottom\") + \n  labs(title = \"Density plot of penguin flipper length\", \n       subtitle = \"By species\",\n       color = \"Penguin species\")\n\n\n\n\n\n\n\n\n\n\n Exercise 3\nLet‚Äôs analyze the distribution of penguins‚Äô body mass according to their species utilizing density plots. - Incorporate distinct colors for each species in the density plots, not just the lines. Employ a level of transparency to provide a clearer view. Please ensure that the density plot is accompanied by a title, subtitle, and caption.\n\n\nHints (click here)\n\nYou will have to use the argument fill to incorporate color, alpha for transparency, and caption within the labs argument.\n\n\n\nSolutions (click here)\n\n\nggplot(penguins) + \n  aes(x = body_mass_g, fill = species) + \n  geom_density(alpha = 0.2) + \n  theme_bw() + \n  theme(legend.position = \"bottom\") + \n  labs(title = \"Density plot of penguin body mass\", \n       subtitle = \"By species\",\n       caption = \"PalmerPinguins Dataset\",\n       fill = \"Penguin species\")"
  },
  {
    "objectID": "posts/S07E13_ggplot_03/index.html#geoms-from-ggplot-extension-packages",
    "href": "posts/S07E13_ggplot_03/index.html#geoms-from-ggplot-extension-packages",
    "title": "Plotting 3: histogram, density, and bar plots",
    "section": "5 Geoms from ggplot ‚Äúextension‚Äù packages",
    "text": "5 Geoms from ggplot ‚Äúextension‚Äù packages\nTransparency can help when density plots ovelap, but can I do better?\nThere are various ggplot extension packages available. Some of these packages provide extra geoms, such as the trendy ‚Äúridgeline‚Äù plots offered by the ggridges package.\nTransparency can help when density plots ovelap, but can I do better?\nThere are various ggplot extension packages available. Some of these packages provide extra geoms, such as the trendy ‚Äúridgeline‚Äù plots offered by the ggridges package.\nWe‚Äôll have to install the package:\n\ninstall.packages(\"ggridges\")\n\nAfter loading it, we can utilize the ridgeplot geom geom_density_ridges() in the same manner as any other geom.\n\nlibrary(ggridges)\nggplot(penguins) + \n  aes(x = body_mass_g, y = species, fill = species) + \n  geom_density_ridges(alpha = 0.2) + \n  theme_bw() + \n  theme(legend.position = \"bottom\") + \n  labs(title = \"Density plot of penguin body mass\", \n       subtitle = \"By species\",\n       caption = \"PalmerPinguins Dataset\",\n       fill = \"Penguin species\") \n\nPicking joint bandwidth of 153\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease note that when using geom_density_ridges(), we need to specify the y."
  },
  {
    "objectID": "posts/S07E13_ggplot_03/index.html#bar-graphs-geom_bar",
    "href": "posts/S07E13_ggplot_03/index.html#bar-graphs-geom_bar",
    "title": "Plotting 3: histogram, density, and bar plots",
    "section": "6 Bar graphs: geom_bar()",
    "text": "6 Bar graphs: geom_bar()\nIn order to analyze the distribution of a categorical variable, a bar chart can be employed. The bar heights indicate the frequency of observations associated with each x value.\n\nggplot(penguins, aes(x = species)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n6.1 Stacked bar plots.\nStacked bar plots can be utilized to visualize the association between two categorical variables. For instance, these two stacked bar plots demonstrate the relation between island and species, showcasing the distribution of species within each island.\nStacked bar plots can be utilized to visualize the association between two categorical variables. For instance, these two stacked bar plots demonstrate the relation between island and species, showcasing the distribution of species within each island.\nThe first plot displays the frequencies of penguin species on different islands. It reveals that there is an equal number of Adelies on each island. Nonetheless, we lack a clear understanding of the percentage distribution within each specific island.\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe second plot, which is a relative frequency plot created by setting position = \"fill\" in the geom, is more useful for comparing species distributions across islands because it is not influenced by the unequal numbers of penguins on the islands.\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\nBy using this plot, we can see that Gentoo penguins exclusively live on Biscoe Island and represent approximately 75% of the penguins on that island. Chinstrap penguins exclusively inhabit Dream Island and make up approximately 50% of the penguins on that island. Whereas Adelie penguins inhabit all three islands and account for the entire penguin population on Torgersen Island."
  },
  {
    "objectID": "posts/S07E13_ggplot_03/index.html#bar-chart-of-means-stat_summary",
    "href": "posts/S07E13_ggplot_03/index.html#bar-chart-of-means-stat_summary",
    "title": "Plotting 3: histogram, density, and bar plots",
    "section": "7 Bar chart of means: stat_summary()",
    "text": "7 Bar chart of means: stat_summary()\nTo summarize the data using averages, we can use the stat_summary() function. Instead of invoking a geom_* function, we can employ stat_summary() to define the desired method for summarizing the data and presenting it in our visual representation.\n\nggplot(penguins, aes(x = species, y = body_mass_g)) +\n  theme_bw() +\n  stat_summary(fun = \"mean\",\n               geom = \"bar\",\n               alpha = 0.5,\n               color = \"black\",\n               size = 0.5,\n               mapping = aes(fill = species)) +\n  stat_summary(fun.data = \"mean_se\",\n               geom = \"errorbar\",\n               width = 0.5)\n\n\n\n\n\n\n\n\n\n Exercise 4\n\nTo keep only the Gentoo data, pipe your dataset into the filter() function.\nCreate a bar graph examining the mean bill_length_mm by sex by piping the filtered data into ggplot().\nEnsure that the points with unknown sex (NA) are removed.\nInclude error bars in the bar plots and add transparency.\nDisplay all data points on top of the boxplot.\nFinally, use color to fill every bar by using the ‚ÄúDarSet2‚Äù palette from the ‚ÄúRColorBrewer‚Äù package, which was installed last week.\n\n\n\nHints (click here)\n\nYou will have to load RColorBrewer and use the argument scale_fill_brewer(palette = \"Dark2\").\n\n\n\nSolutions (click here)\n\n\npenguins |&gt; \n  filter(species == \"Gentoo\", !is.na(sex)) |&gt; \n  ggplot(aes(x = sex, y = bill_length_mm)) + \n  theme_bw() +\n  stat_summary(geom = \"bar\",\n               fun = \"mean\",\n               alpha = 0.5,\n               color = \"black\",\n               size = 0.5,\n               mapping = aes(fill=sex)) +\n    stat_summary(fun.data = \"mean_se\", \n                 geom = \"errorbar\", \n                 width = 0.5) +\n  scale_fill_brewer(palette = \"Dark2\")"
  },
  {
    "objectID": "posts/S09E01_ggplot_01/index.html",
    "href": "posts/S09E01_ggplot_01/index.html",
    "title": "Introduction to ggplot2 - 01",
    "section": "",
    "text": "Figure from Allison Horst\n\n\n\n\nThe very popular R package ggplot2 is based on a system called the Grammar of Graphics by Leland Wilkinson which aims to create a grammatical rules for the development of graphics. It is part of a larger group of packages called ‚Äúthe tidyverse.‚Äù\n\n\nThe package ggplot2 is a part of a larger collection of packages called ‚Äúthe tidyverse‚Äù that are designed for data science. You can certainly use R without using the tidyverse, but it has many packages that I think will make your life a lot easier. We can install just ggplot2 or install all of the packages in the core tidyverse (which is what I‚Äôd recommend since we will use the others too), which include:\n\ndplyr: for data manipulation\nggplot2: a ‚Äúgrammar of graphics‚Äù for creating beautiful plots\nreadr: for reading in rectangular data (i.e., Excel-style formatting)\ntibble: using tibbles as modern/better dataframes\nstringr: handling strings (i.e., text or stuff in quotes)\nforcats: for handling categorical variables (i.e., factors) (meow!)\ntidyr: to make ‚Äútidy data‚Äù\npurrr: for enhancing functional programming (also meow!)\nlubridate: for working with dates\n\nWe have used many of these other packages in Code Club. There are more tidyverse packages outside of these core nine, and we will talk about some of them another time.\n\ntl;dr Tidyverse has a lot of packages that make data analysis easier. None of them are required, but I think you‚Äôll find many tidyverse approaches easier and more intuitive than using base R.\n\nYou can find here some examples of comparing tidyverse and base R syntax.\n\n\n\nTo install packages in R that are on the Comprehensive R Archive Network (CRAN), you can use the function install.packages().\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\n\nWe only need to install packages once. But, every time we want to use them, we need to ‚Äúload‚Äù them, and can do this using the function library(). Since you will likely often use the tidyverse functions, it‚Äôs a good habit to add the code library(tidyverse) to the top of each of your scripts/RMarkdown/Quarto documents.\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/S09E01_ggplot_01/index.html#what-is-the-tidyverse",
    "href": "posts/S09E01_ggplot_01/index.html#what-is-the-tidyverse",
    "title": "Introduction to ggplot2 - 01",
    "section": "",
    "text": "The package ggplot2 is a part of a larger collection of packages called ‚Äúthe tidyverse‚Äù that are designed for data science. You can certainly use R without using the tidyverse, but it has many packages that I think will make your life a lot easier. We can install just ggplot2 or install all of the packages in the core tidyverse (which is what I‚Äôd recommend since we will use the others too), which include:\n\ndplyr: for data manipulation\nggplot2: a ‚Äúgrammar of graphics‚Äù for creating beautiful plots\nreadr: for reading in rectangular data (i.e., Excel-style formatting)\ntibble: using tibbles as modern/better dataframes\nstringr: handling strings (i.e., text or stuff in quotes)\nforcats: for handling categorical variables (i.e., factors) (meow!)\ntidyr: to make ‚Äútidy data‚Äù\npurrr: for enhancing functional programming (also meow!)\nlubridate: for working with dates\n\nWe have used many of these other packages in Code Club. There are more tidyverse packages outside of these core nine, and we will talk about some of them another time.\n\ntl;dr Tidyverse has a lot of packages that make data analysis easier. None of them are required, but I think you‚Äôll find many tidyverse approaches easier and more intuitive than using base R.\n\nYou can find here some examples of comparing tidyverse and base R syntax."
  },
  {
    "objectID": "posts/S09E01_ggplot_01/index.html#installing-ggplot-tidyverse",
    "href": "posts/S09E01_ggplot_01/index.html#installing-ggplot-tidyverse",
    "title": "Introduction to ggplot2 - 01",
    "section": "",
    "text": "To install packages in R that are on the Comprehensive R Archive Network (CRAN), you can use the function install.packages().\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\n\nWe only need to install packages once. But, every time we want to use them, we need to ‚Äúload‚Äù them, and can do this using the function library(). Since you will likely often use the tidyverse functions, it‚Äôs a good habit to add the code library(tidyverse) to the top of each of your scripts/RMarkdown/Quarto documents.\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/S09E01_ggplot_01/index.html#data",
    "href": "posts/S09E01_ggplot_01/index.html#data",
    "title": "Introduction to ggplot2 - 01",
    "section": "4.1 Data",
    "text": "4.1 Data\nThe first argument passed to your plot is the data. How did I know that? It‚Äôs in the documentation.\n\n?ggplot()\n\nThe simplest ggplot code you can write, just using the ggplot() function and indicating the data we want to use. Because data is the default first argument, you can actually omit the data = part of this code and it will work just the same.\n\nggplot(data = penguins)\n\n\n\n\nWhy do we not see a plot? Well we haven‚Äôt told R what to plot! We are getting the first ‚Äúbase‚Äù layer of the plot.\nYou can also pipe |&gt; or %&gt;%, the data to the ggplot function. When reading code, you can interpret the pipe as ‚Äúand then.‚Äù Here, take the penguins data, and then, run ggplot(). Writing code in this way is my preference so I tend to code like this. We talked in more detail about the pipe in past Code Clubs.\n\npenguins |&gt; \n  ggplot()\n\n\n\n\nStill nothing. Well that‚Äôs what we would expect."
  },
  {
    "objectID": "posts/S09E01_ggplot_01/index.html#aesthetic-mappings-aes",
    "href": "posts/S09E01_ggplot_01/index.html#aesthetic-mappings-aes",
    "title": "Introduction to ggplot2 - 01",
    "section": "4.2 Aesthetic mappings aes()",
    "text": "4.2 Aesthetic mappings aes()\nNow that we‚Äôve indicated our data, we can add aesthetics mapping so we can work towards actually see a plot. We want to make a scatterplot where on the x-axis we have bill length (bill_length_mm), and on the y-axis we have bill depth (bill_depth_mm).\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm))\n\n\n\n\nSo we have progressed from a blank plot, but we still do not have a plot by basically anyone‚Äôs defintion. Why not?\nEven though we have indicated to R our data and aesthetic mappings, we have not indicated what precisely to do with our data. We have said what we want on x and y (and now we can see those labelled appearing) but we have not indicated what type of plot we want. And, we can do that in the next step, by adding a geom_."
  },
  {
    "objectID": "posts/S09E01_ggplot_01/index.html#geoms-geom_",
    "href": "posts/S09E01_ggplot_01/index.html#geoms-geom_",
    "title": "Introduction to ggplot2 - 01",
    "section": "4.3 Geoms geom_",
    "text": "4.3 Geoms geom_\nNow let‚Äôs indicate what type of plot we want. In this example, we are going to make a scatterplot, and to do that we will use geom_point()\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nWe have a plot! It‚Äôs not a finished plot, but its a plot and we can work from here.\nLet‚Äôs say we wanted to see whether penguins of different species are in different places on our plot. We can take the variable species and map it to the aesthetic color.\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nNote what R has done for us - we now see each dot colored based on which species it is, and we also have a new legend.\nWhat if we wanted to add a line that shows the relationship between bill_length_mm and bill_depth_mm for each species? We can layer in another geom, here we will use geom_smooth.\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") # the method is a linear model\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n4.3.1 Global vs.¬†local aes()\nA note about aesthetic mappings now that we have introduced geoms -aes() can go in two places:\n\nin the ggplot() call, and this means they will inherit for every layer of the plot\nin a specific geom_, and those aesthetics will only be for that specific geom.\n\nSo we can make the same plot we saw above by mapping aesthetics within geom_point().\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\npenguins |&gt; \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm, color = species))\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nLet‚Äôs look at example where changing the location of the aesthetic mappings does make a difference.\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") # the method is a linear model\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\npenguins |&gt; \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_smooth(method = \"lm\") # the method is a linear model\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nError in `geom_smooth()`:\n! Problem while computing stat.\n‚Ñπ Error occurred in the 2nd layer.\nCaused by error in `compute_layer()`:\n! `stat_smooth()` requires the following missing aesthetics: x and y.\n\n\nWhat happened here? We got an ‚Äúerror in geom_smooth()...stat_smooth()` requires the following miss aesthetics: x and y‚Äù.\nThis happened because we have only set our x and y aesthetics in geom_point() and not in geom_smooth() so R doesn‚Äôt know what to map x and y to. When we map our aesthetics globally, we don‚Äôt have this problem because x and y inherit for every subsequent layer.\nWe can also do a combination of global and local setting.\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(method = \"lm\") # the method is a linear model\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(aes(color = species), method = \"lm\") +\n  geom_smooth(method = \"lm\", color = \"black\") # the method is a linear model\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range (`stat_smooth()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nWhen we set color only in geom_point(), we do not ‚Äúgroup‚Äù by color (here, by species) so we get our smoothed line for all the data (instead of by species).\n\n\n4.3.2 Mapping vs.¬†‚Äòsetting‚Äô\nIf you want to map a variable to an aesthetic, it MUST be within the aes() statement. If you just want to change the color to ‚Äúblue‚Äù for example, it should be outside the aes() statement. Look at the difference.\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(color = \"#088F8F\") \n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nIf we put ‚Äúblue‚Äù instead our aesthetic mappings, we get something that doesn‚Äôt make sense.\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = \"blue\"))\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\ntl:dr if mapping a variable to an aesthetic, inside aes(), if not, then outside."
  },
  {
    "objectID": "posts/S09E01_ggplot_01/index.html#different-geoms",
    "href": "posts/S09E01_ggplot_01/index.html#different-geoms",
    "title": "Introduction to ggplot2 - 01",
    "section": "5.1 Different geoms",
    "text": "5.1 Different geoms\nCreate a boxplot that shows the distribution of body mass for penguins on the different islands.\n\n\nNeed a hint?\n\nThe geom for a boxplot is called geom_boxplot().\n\n\n\nClick for the solution\n\n\npenguins |&gt; \n  ggplot(aes(x = island, y = body_mass_g)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`)."
  },
  {
    "objectID": "posts/S09E01_ggplot_01/index.html#mapping-to-other-aesthetics",
    "href": "posts/S09E01_ggplot_01/index.html#mapping-to-other-aesthetics",
    "title": "Introduction to ggplot2 - 01",
    "section": "5.2 Mapping to other aesthetics",
    "text": "5.2 Mapping to other aesthetics\nCreate a scatterplot that shows the relationship between bill length and bill depth, but color the points based on what island the penguins are from, and make the points a different shape based on sex.\n\n\nNeed a hint?\n\nYou can make the aesthetic shape = in the same way you use color.\n\n\n\nClick for the solution\n\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, bill_depth_mm, \n             color = island, shape = sex)) +\n  geom_point()\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\nNot happy with missing values? We can remove them.\n\npenguins |&gt; \n  drop_na(bill_length_mm, bill_depth_mm, island, sex) |&gt;  # drop missing values\n  ggplot(aes(x = bill_length_mm, bill_depth_mm, \n             color = island, shape = sex)) +\n  geom_point()"
  },
  {
    "objectID": "posts/S07E08_tidy_03/index.html#introduction",
    "href": "posts/S07E08_tidy_03/index.html#introduction",
    "title": "Tidyverse 3: Grouping and Summarizing Data",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of the past two weeks\nIn the past two weeks, we‚Äôve been learning about 5 functions from the dplyr package, a central workhorse of the tidyverse ecosystem, to manipulate data in data frames:\n\nfilter() to pick rows (which typically represent observations/samples/individuals)\nselect() to pick columns (which typically represent variables/properties)\narrange() to sort data frame rows\nrename() to change data frame column names\nmutate() to add and manipulate data frame columns\n\n\n\nLearning objectives for today\nToday, we will focus on a slightly more complicated and very powerful dplyr function: summarize() to compute summaries across rows, typically across groups of rows.\nWe will also learn about a couple other handy functions to work with groups of rows: the slice_() family of functions and count().\n\n\nSetting up\nLoad the tidyverse:\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.4     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\nStill need to install the tidyverse? Click here for instructions\n\n\n\n\n\n\ninstall.packages(\"tidyverse\")\n\n\n\n\nWe‚Äôll continue working with the diamonds dataframe (automatically loaded with the tidyverse), so let‚Äôs take another look at that:\n\nhead(diamonds)\n\n# A tibble: 6 √ó 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48"
  },
  {
    "objectID": "posts/S07E08_tidy_03/index.html#summarize",
    "href": "posts/S07E08_tidy_03/index.html#summarize",
    "title": "Tidyverse 3: Grouping and Summarizing Data",
    "section": "2 summarize()",
    "text": "2 summarize()\n\n2.1 A first example\nThe summarize() function from the dplyr package can compute across-row data summaries. As a first example, here‚Äôs how you can compute the overall mean of the carat column:\n\ndiamonds |&gt;\n  summarize(carat_mean = mean(carat))\n\n# A tibble: 1 √ó 1\n  carat_mean\n       &lt;dbl&gt;\n1      0.798\n\n\nAs you can see, this function has quite a different output from the dplyr functions we‚Äôd seen so far. All of those returned a manipulated version of our original dataframe, whereas summarize() returns a ‚Äúcompletely new‚Äù dataframe with a summary of the original data.\nHowever, summarizing across all rows at once with summarize() is much more verbose than the simple, base R:\n\nmean(diamonds$carat)\n\n[1] 0.7979397\n\n\n\n\n\n2.2 Summarizing by group\nThe real power of summarize() comes with its ability to compute group-wise summaries. For example, simply by adding .by = cut, it will calculate the mean carat separately for each value of cut:\n\ndiamonds |&gt;\n  summarize(carat_mean = mean(carat), .by = cut)\n\n# A tibble: 5 √ó 2\n  cut       carat_mean\n  &lt;ord&gt;          &lt;dbl&gt;\n1 Ideal          0.703\n2 Premium        0.892\n3 Good           0.849\n4 Very Good      0.806\n5 Fair           1.05 \n\n\nNice! We can also compute multiple summarized variables ‚Äî and use summarizing functions other than mean():\n\ndiamonds |&gt;\n  summarize(carat_mean = mean(carat),\n            carat_max = max(carat),\n            .by = cut)\n\n# A tibble: 5 √ó 3\n  cut       carat_mean carat_max\n  &lt;ord&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n1 Ideal          0.703      3.5 \n2 Premium        0.892      4.01\n3 Good           0.849      3.01\n4 Very Good      0.806      4   \n5 Fair           1.05       5.01\n\n\nA handy helper function is n(), which will compute the number of rows for each group (i.e.¬†the group sizes, which can be good to know, for example so you don‚Äôt make unfounded conclusions based on really small sample sizes):\n\ndiamonds |&gt;\n  summarize(carat_mean = mean(carat),\n            n_diamonds = n(),\n            .by = cut)\n\n# A tibble: 5 √ó 3\n  cut       carat_mean n_diamonds\n  &lt;ord&gt;          &lt;dbl&gt;      &lt;int&gt;\n1 Ideal          0.703      21551\n2 Premium        0.892      13791\n3 Good           0.849       4906\n4 Very Good      0.806      12082\n5 Fair           1.05        1610\n\n\nHere is an overview of the most commonly used functions to compute summaries:\n\nmean() & median()\nmin() & max()\nsum()\nsd(): standard deviation\nIQR(): interquartile range\nn(): counts the number of rows (observations)\nn_distinct(): counts the number of distinct (unique) values\n\nTwo other comments:\n\nYou can also ask summarize() to compute summaries by multiple columns, which will return separate summaries for each combination of the involved variables ‚Äî we‚Äôll see this in the exercises.\nThis may be obvious, but whatever column you are computing summaries by (using .by) should be a categorical variable. In our diamond examples, we‚Äôre only using columns that are factors, but ‚Äúregular‚Äù character columns will work just fine as well.\n\n\n\n\n\n\n\n\nSide note: group_by()\n\n\n\nThe ‚Äúclassic‚Äù way of using summarize() with multiple groups is by preceding it with a group_by() call ‚Äî e.g., the code below is equivalent to our last example above:\n\ndiamonds |&gt;\n  group_by(cut) |&gt; \n  summarize(carat_mean = mean(carat),\n            n_diamonds = n())\n\n# A tibble: 5 √ó 3\n  cut       carat_mean n_diamonds\n  &lt;ord&gt;          &lt;dbl&gt;      &lt;int&gt;\n1 Fair           1.05        1610\n2 Good           0.849       4906\n3 Very Good      0.806      12082\n4 Premium        0.892      13791\n5 Ideal          0.703      21551\n\n\n\nThe .by argument to summarize() (and other functions!) is a rather recent addition, but I prefer it over group_by():\n\nIt is simpler, a bit less typing, and makes the summarize() call self-contained\nWhen grouping by multiple columns, group_by() has some odd, unhelpful behavior where it keeps some of the groupings, such that you likely need an ungroup() call as well."
  },
  {
    "objectID": "posts/S07E08_tidy_03/index.html#exercises-i",
    "href": "posts/S07E08_tidy_03/index.html#exercises-i",
    "title": "Tidyverse 3: Grouping and Summarizing Data",
    "section": "3 Exercises I",
    "text": "3 Exercises I\n\n3.1 Diamond sizes in relation to clarity\nA) Compute the mean length (x), width (y), and depth (z) for each diamond clarity. Also include a column with group sizes. Do you see any clear differences?\n\n\nSolution (click here)\n\n\ndiamonds |&gt;\n  summarize(x_mean = mean(x),\n            y_mean = mean(y),\n            z_mean = mean(z),\n            n_diamonds = n(),\n            .by = clarity)\n\n# A tibble: 8 √ó 5\n  clarity x_mean y_mean z_mean n_diamonds\n  &lt;ord&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;      &lt;int&gt;\n1 SI2       6.40   6.40   3.95       9194\n2 SI1       5.89   5.89   3.64      13065\n3 VS1       5.57   5.58   3.44       8171\n4 VS2       5.66   5.66   3.49      12258\n5 VVS2      5.22   5.23   3.22       5066\n6 VVS1      4.96   4.98   3.06       3655\n7 I1        6.76   6.71   4.21        741\n8 IF        4.97   4.99   3.06       1790\n\n\n\n\nB) Diamond size differences between clarities may become more apparent if we use the overall volume:\n\nDig up your mutate() skills to create a volume column vol (length * width * depth)\nCompute the mean volume for each diamond clarity\n\n\n\nSolution (click here)\n\n\ndiamonds |&gt;\n  mutate(vol = x * y * z) |&gt;\n  summarize(vol_mean = mean(vol), .by = clarity)\n\n# A tibble: 8 √ó 2\n  clarity vol_mean\n  &lt;ord&gt;      &lt;dbl&gt;\n1 SI2        175. \n2 SI1        138. \n3 VS1        119. \n4 VS2        124. \n5 VVS2        97.6\n6 VVS1        82.5\n7 I1         205. \n8 IF          83.3\n\n\n\n\n\n\n\n\n3.2 Diamond prices\nA) For each diamond cut, compute the price‚Äôs mean, median, minimum, maximum, and standard deviation.\n\n\nSolution (click here)\n\n\ndiamonds |&gt;\n  summarize(price_mean = mean(price),\n            price_median = median(price),\n            price_min = min(price),\n            price_max = max(price),\n            price_sd = sd(price),\n            .by = cut)\n\n# A tibble: 5 √ó 6\n  cut       price_mean price_median price_min price_max price_sd\n  &lt;ord&gt;          &lt;dbl&gt;        &lt;dbl&gt;     &lt;int&gt;     &lt;int&gt;    &lt;dbl&gt;\n1 Ideal          3458.        1810        326     18806    3808.\n2 Premium        4584.        3185        326     18823    4349.\n3 Good           3929.        3050.       327     18788    3682.\n4 Very Good      3982.        2648        336     18818    3936.\n5 Fair           4359.        3282        337     18574    3560.\n\n\n\n\nB) Find the combination of cut, color, and clarity that on average yields the most expensive diamonds.\nFor this, you‚Äôll have to group by all these 3 columns. Try this for yourself first, but check out the first solution if you can‚Äôt get that part to work.\n\n\nGrouping solution (click here)\n\n.by = c(cut, color, clarity) will group by these 3 columns at once.\n\n\n\nSolution (click here)\n\nAfter summarizing, it makes sense to arrange in descending order by price, so you can see the cut-color-clarity combinations with the most expensive diamonds:\n\ndiamonds |&gt;\n  summarize(price = mean(price),\n            .by = c(cut, color, clarity)) |&gt;\n  arrange(desc(price))\n\n# A tibble: 276 √ó 4\n   cut       color clarity  price\n   &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;    &lt;dbl&gt;\n 1 Very Good D     IF      10298.\n 2 Good      D     IF      10030.\n 3 Ideal     J     I1       9454 \n 4 Premium   D     IF       9056.\n 5 Premium   J     SI2      7550.\n 6 Fair      D     I1       7383 \n 7 Premium   J     VVS1     7244.\n 8 Ideal     I     SI2      7192.\n 9 Premium   I     VS2      7156.\n10 Premium   I     SI2      7148.\n# ‚Ñπ 266 more rows"
  },
  {
    "objectID": "posts/S07E08_tidy_03/index.html#the-slice_-functions",
    "href": "posts/S07E08_tidy_03/index.html#the-slice_-functions",
    "title": "Tidyverse 3: Grouping and Summarizing Data",
    "section": "4 The slice_ functions",
    "text": "4 The slice_ functions\nLike the filter() function, functions in the slice_ family select specific rows, but have some different functionality that‚Äôs quite handy ‚Äî especially in combination with grouping.\nLet‚Äôs say we wanted to only get, for each cut, the diamond with the highest value of carat. We can do this pretty easily with the slice_max() function, which will return the row(s) with the highest value for a specified variable:\n\ndiamonds |&gt;\n  slice_max(carat, by = cut)\n\n# A tibble: 8 √ó 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03\n2  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17\n3  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24\n4  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77\n5  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77\n6  3.01 Good      H     SI2      57.6    64 18593  9.44  9.38  5.42\n7  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31\n8  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98\n\n\n\n\nWhy are we getting more than one diamond per cut in some cases? (Click to see the answer)\n\nBecause of ties in the cut value. (We‚Äôll get back to this in the next set of exercises.)\n\n\nYou can get more than just the single highest (slice_max()) / lowest (slice_min()) value per group with the n= argument, and can get a specific proportion of rows with prop=:\n\n# Get the 3 highest-depth diamonds for each value of cut\ndiamonds |&gt;\n  slice_max(depth, by = cut, n = 3)\n\n# A tibble: 280 √ó 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  2.01 Ideal   I     VS2      66.7    56 15729  7.75  7.65  5.14\n 2  0.71 Ideal   E     SI2      65.5    55  2511  5.62  5.56  3.66\n 3  3.01 Ideal   J     I1       65.4    60 16538  8.99  8.93  5.86\n 4  0.8  Premium G     SI1      63      59  2760  5.9   5.81  3.69\n 5  0.9  Premium I     VS2      63      58  2761  6.16  6.12  3.87\n 6  0.72 Premium I     IF       63      57  2795  5.72  5.7   3.6 \n 7  0.72 Premium E     VS2      63      55  2802  5.79  5.61  3.59\n 8  0.7  Premium E     VS2      63      60  2818  5.64  5.6   3.54\n 9  0.81 Premium G     SI1      63      60  2832  5.87  5.81  3.68\n10  0.7  Premium G     VS1      63      60  2838  5.64  5.57  3.53\n# ‚Ñπ 270 more rows\n\n\n\n# Get the 1% lowest-carat diamonds for each value of color\ndiamonds |&gt;\n  slice_min(carat, by = color, prop = 0.01)\n\n# A tibble: 926 √ó 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.2  Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n 2  0.2  Premium   E     VS2      59.8    62   367  3.79  3.77  2.26\n 3  0.2  Premium   E     VS2      59      60   367  3.81  3.78  2.24\n 4  0.2  Premium   E     VS2      61.1    59   367  3.81  3.78  2.32\n 5  0.2  Premium   E     VS2      59.7    62   367  3.84  3.8   2.28\n 6  0.2  Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 \n 7  0.2  Very Good E     VS2      63.4    59   367  3.74  3.71  2.36\n 8  0.2  Ideal     E     VS2      62.2    57   367  3.76  3.73  2.33\n 9  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n10  0.21 Very Good E     VS2      63.2    54   386  3.82  3.78  2.4 \n# ‚Ñπ 916 more rows\n\n\n\n\n\n\n\n\n\nThe full set of slice_ functions\n\n\n\n\nslice_head(n = 1) takes the first row.\nslice_tail(n = 1) takes the last row\nslice_min(x, n = 1) takes the row with the smallest value in column x.\nslice_max(x, n = 1) takes the row with the largest value in column x.\nslice_sample(n = 1) takes one random row.\nslice(15) takes the 15th row."
  },
  {
    "objectID": "posts/S07E08_tidy_03/index.html#the-count-function",
    "href": "posts/S07E08_tidy_03/index.html#the-count-function",
    "title": "Tidyverse 3: Grouping and Summarizing Data",
    "section": "5 The count() function",
    "text": "5 The count() function\nAbove, we used the n() helper with summarize() to get the number of rows with each value of cut (i.e.¬†the group sizes) along with other computed summaries.\nGetting a ‚Äúcount table‚Äù like that is such a common part of Exploratory Data Analysis (EDA) that there‚Äôs another dplyr function available for it, count(). And unless you‚Äôre already summarize-ing, this one is simpler to use:\n\ndiamonds |&gt; count(cut)\n\n# A tibble: 5 √ó 2\n  cut           n\n  &lt;ord&gt;     &lt;int&gt;\n1 Fair       1610\n2 Good       4906\n3 Very Good 12082\n4 Premium   13791\n5 Ideal     21551\n\n\nWe may also want to sort the output by frequency, which can be useful especially when there are many different values for the focal variable (not really the case here, but you get the point):\n\ndiamonds |&gt; count(cut, sort = TRUE)\n\n# A tibble: 5 √ó 2\n  cut           n\n  &lt;ord&gt;     &lt;int&gt;\n1 Ideal     21551\n2 Premium   13791\n3 Very Good 12082\n4 Good       4906\n5 Fair       1610\n\n\nAnd you can also create counts for value combinations across multiple columns:\n\ndiamonds |&gt; count(cut, color)\n\n# A tibble: 35 √ó 3\n   cut   color     n\n   &lt;ord&gt; &lt;ord&gt; &lt;int&gt;\n 1 Fair  D       163\n 2 Fair  E       224\n 3 Fair  F       312\n 4 Fair  G       314\n 5 Fair  H       303\n 6 Fair  I       175\n 7 Fair  J       119\n 8 Good  D       662\n 9 Good  E       933\n10 Good  F       909\n# ‚Ñπ 25 more rows\n\n\n\n\n\n\n\n\n\nBase R‚Äôs table() function\n\n\n\nAlso worth mentioning is the base R table() function, which is similar to count(). While its output format is unwieldy for follow-up analyses1, you may prefer its formatting especially when wanting to glance at a 2-way count table to see patterns:\n\ntable(diamonds$cut, diamonds$color)\n\n           \n               D    E    F    G    H    I    J\n  Fair       163  224  312  314  303  175  119\n  Good       662  933  909  871  702  522  307\n  Very Good 1513 2400 2164 2299 1824 1204  678\n  Premium   1603 2337 2331 2924 2360 1428  808\n  Ideal     2834 3903 3826 4884 3115 2093  896\n\n\n\nAdditionally, as a dplyr function, count() only works with data frames. Occasionally, you may also need to create a count table for a vector, and table() can do that:\n\ncut_vec &lt;- diamonds$cut\n\ntable(cut_vec)\n\ncut_vec\n     Fair      Good Very Good   Premium     Ideal \n     1610      4906     12082     13791     21551"
  },
  {
    "objectID": "posts/S07E08_tidy_03/index.html#exercises-ii",
    "href": "posts/S07E08_tidy_03/index.html#exercises-ii",
    "title": "Tidyverse 3: Grouping and Summarizing Data",
    "section": "6 Exercises II",
    "text": "6 Exercises II\n\n6.1 No ties, please\nAbove, when we first used slice_max(), we got multiple rows for some groups. Check out the help for this function (?slice_max) and get it to print only one row per group, even in the case of ties.\n\n\nSolution (click here)\n\nThe with_ties argument controls this. The default is TRUE (do include ties), so we want to set it to FALSE (don‚Äôt include ties):\n\ndiamonds |&gt;\n  slice_max(carat, by = cut, with_ties = FALSE)\n\n# A tibble: 5 √ó 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03\n2  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17\n3  3.01 Good      I     SI2      63.9    60 18242  9.06  9.01  5.77\n4  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31\n5  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98\n\n\n\n\n\n\n\n\n6.2 Random diamonds\nUse slice_sample() to get 5 random diamonds for each combination of cut, color and clarity.\n\n\nSolution (click here)\n\n\ndiamonds |&gt;\n  slice_sample(n = 5, by = c(cut, color, clarity))\n\n# A tibble: 1,342 √ó 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1.2  Ideal   E     SI2      61.3  56    6006  6.85  6.88  4.21\n 2  1.02 Ideal   E     SI2      62.6  54.6  4983  6.4   6.44  4.02\n 3  0.78 Ideal   E     SI2      61    56    3053  5.92  5.98  3.63\n 4  1.11 Ideal   E     SI2      61.2  57    4969  6.7   6.74  4.11\n 5  1    Ideal   E     SI2      60.7  55    4077  6.39  6.33  3.86\n 6  0.71 Premium E     SI1      60.3  60    2674  5.77  5.74  3.47\n 7  0.82 Premium E     SI1      61.2  61    3211  5.98  5.95  3.65\n 8  0.51 Premium E     SI1      61.3  54    1546  5.18  5.13  3.16\n 9  0.57 Premium E     SI1      62.2  55    1590  5.36  5.31  3.32\n10  0.41 Premium E     SI1      62.4  58     755  4.75  4.77  2.97\n# ‚Ñπ 1,332 more rows\n\n\n\n\n\n\n\n\n6.3 count()\nA) Create a sorted count table of diamond claritys\n\n\nSolution (click here)\n\n\ndiamonds |&gt; count(clarity, sort = TRUE)\n\n# A tibble: 8 √ó 2\n  clarity     n\n  &lt;ord&gt;   &lt;int&gt;\n1 SI1     13065\n2 VS2     12258\n3 SI2      9194\n4 VS1      8171\n5 VVS2     5066\n6 VVS1     3655\n7 IF       1790\n8 I1        741\n\n\n\n\nB) What are the least common combinations of clarity and depth for diamonds costing less than $5,000?\n\n\nHints (click here)\n\n\nYou‚Äôll have to filter() first.\nCan you sort in reverse order with count()? If not, you‚Äôll have to use a separate arrange()\n\n\n\n\nSolution (click here)\n\n\ndiamonds |&gt;\n  filter(price &lt; 5000) |&gt; \n  count(clarity, color) |&gt;\n  arrange(n)\n\n# A tibble: 56 √ó 3\n   clarity color     n\n   &lt;ord&gt;   &lt;ord&gt; &lt;int&gt;\n 1 I1      J        26\n 2 I1      D        32\n 3 IF      D        39\n 4 IF      J        40\n 5 VVS1    J        51\n 6 I1      I        65\n 7 VVS2    J        67\n 8 I1      E        84\n 9 I1      H       108\n10 I1      G       114\n# ‚Ñπ 46 more rows\n\n\n\n\n\n\n\n6.4 Bonus: sort then slice\nslice_head() will print the first-occurring row(s), and its twin slice_tail() prints the last row(s). In combination with sorting, these can give more flexibility than the min-max functions.\nFor each color, use arrange() and slice_head() to get the 3 diamonds with the highest carat, with ties in carat broken by price (highest first).\n\n\nSolution (click here)\n\n\ndiamonds |&gt;\n  arrange(desc(carat), desc(price)) |&gt;\n  slice_head(n = 3, by = color)\n\n# A tibble: 21 √ó 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98\n 2  4.5  Fair      J     I1       65.8    58 18531 10.2  10.2   6.72\n 3  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24\n 4  4.13 Fair      H     I1       64.8    61 17329 10     9.85  6.43\n 5  3.65 Fair      H     I1       67.1    53 11668  9.53  9.48  6.38\n 6  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03\n 7  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17\n 8  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31\n 9  3.67 Premium   I     I1       62.4    56 16193  9.86  9.81  6.13\n10  3.4  Fair      D     I1       66.8    52 15964  9.42  9.34  6.27\n# ‚Ñπ 11 more rows"
  },
  {
    "objectID": "posts/S07E08_tidy_03/index.html#footnotes",
    "href": "posts/S07E08_tidy_03/index.html#footnotes",
    "title": "Tidyverse 3: Grouping and Summarizing Data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIt‚Äôs not actually a data frame‚Ä¶‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S06E03_website_03/index.html#what-is-git",
    "href": "posts/S06E03_website_03/index.html#what-is-git",
    "title": "Quarto website 3: Deploying your website with GitHub üê±",
    "section": "1.1 What is Git?",
    "text": "1.1 What is Git?\nGit is a version control system that allows materials (mostly code), in an organized way where changes are tracked. You can think of it as combining the tracked changes capabilities of Word, with the file sharing from OneDrive.\nWe are going to use Git (combined with GitHub, more on that in a second) to deploy our website, but it can also be used to share and make code available to collaborators or the wider data science community. You could even use Git for just yourself because it would allow you to always revert back to a previous version of any of your files in case you make a big mistake.\nHere is a nice illustration by Allison Horst that shows the basics of git (at least the basics of what we will be using).\n\n\n\n\n\nFigure from Allison Horst"
  },
  {
    "objectID": "posts/S06E03_website_03/index.html#what-is-github",
    "href": "posts/S06E03_website_03/index.html#what-is-github",
    "title": "Quarto website 3: Deploying your website with GitHub üê±",
    "section": "1.2 What is GitHub?",
    "text": "1.2 What is GitHub?\nGitHub hosts Git-based projects. GitHub can be free (especially for academic projects), and is where we house all our Code Club content. I additionally use GitHub in my lab for creating code repositories that go along with our publications."
  },
  {
    "objectID": "posts/S06E03_website_03/index.html#what-is-github-pages",
    "href": "posts/S06E03_website_03/index.html#what-is-github-pages",
    "title": "Quarto website 3: Deploying your website with GitHub üê±",
    "section": "1.3 What is GitHub Pages?",
    "text": "1.3 What is GitHub Pages?\nGitHub Pages is a tool allows you to host your website directly from a GitHub repository."
  },
  {
    "objectID": "posts/S06E03_website_03/index.html#what-is-github-desktop",
    "href": "posts/S06E03_website_03/index.html#what-is-github-desktop",
    "title": "Quarto website 3: Deploying your website with GitHub üê±",
    "section": "1.4 What is GitHub Desktop?",
    "text": "1.4 What is GitHub Desktop?\nGitHub Desktop is a application that lets you use Git and GitHub in a less-scary-than-working-in-your-terminal way. Here is a longer tutorial on how to use GitHub desktop."
  },
  {
    "objectID": "posts/S07E09_tidy_04/index.html#starting-note",
    "href": "posts/S07E09_tidy_04/index.html#starting-note",
    "title": "Tidyverse 4: Tidy Data and Pivoting",
    "section": "1.1 Starting note",
    "text": "1.1 Starting note\nMuch of this page is inspired from and has examples from - Hadley Wickam‚Äôs Tidy Data - R for Data Science"
  },
  {
    "objectID": "posts/S07E09_tidy_04/index.html#set-up",
    "href": "posts/S07E09_tidy_04/index.html#set-up",
    "title": "Tidyverse 4: Tidy Data and Pivoting",
    "section": "2.1 Set up",
    "text": "2.1 Set up\nLets get our favorite library loaded up\n\n#install.packages(\"tidyverse\") # delete first hash and run to install if you havent already\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.0     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/S07E09_tidy_04/index.html#data-structure",
    "href": "posts/S07E09_tidy_04/index.html#data-structure",
    "title": "Tidyverse 4: Tidy Data and Pivoting",
    "section": "3.1 Data Structure",
    "text": "3.1 Data Structure\nMost datasets we work with in R are organized in a roughly rectangular grid-like format made up of rows and columns that contain some values.\nEach value in a dataset belongs to some variable and some observation.\n\nA variable contains values of an attribute that was measured (i.e., length, sex, pH, color)\nAn observation contains all the values measured on the same thing (unit) (i.e., person, sample, day)\n\nExamples:\n\nIf I‚Äôm measuring the height of a population each person will be one observation and the variable I am measuring is height\n\n\n\nheight &lt;- tibble(\n height_in = c(rnorm(43, m=67, sd=8))\n )\n\nheight\n\n# A tibble: 43 √ó 1\n   height_in\n       &lt;dbl&gt;\n 1      67.7\n 2      53.2\n 3      66.6\n 4      69.8\n 5      69.1\n 6      76.0\n 7      55.7\n 8      66.9\n 9      69.6\n10      65.8\n# ‚Ñπ 33 more rows\n\n\n\n\nIf I‚Äôm counting the number of geese I see on campus throughout the year every day, the variables will be number of geese I see, and the day I count them on. The observation will be one instance of me counting geese on a specific day\n\n\n\ngeese &lt;- tibble(\n day = seq(1:365),\n geese_number = c(trunc(rnorm(365, m=24, sd=10)))\n )\n\ngeese\n\n# A tibble: 365 √ó 2\n     day geese_number\n   &lt;int&gt;        &lt;dbl&gt;\n 1     1           44\n 2     2           16\n 3     3           27\n 4     4           22\n 5     5            9\n 6     6           15\n 7     7            3\n 8     8           16\n 9     9           20\n10    10           47\n# ‚Ñπ 355 more rows\n\n\n\nThis may sound like review, but in practice can be somewhat tricky\n\n\n\n\n\n\nQuestion\n\n\n\nLooking at the diamonds dataset, what is the observation and variable of the the value diamonds[5,7] ?\n\n\nSolution (click here)\n\n\ndiamonds[5,7]\n\n# A tibble: 1 √ó 1\n  price\n  &lt;int&gt;\n1   335\n\n\nThe observation here is the 5th diamond and the variable we are measuring is price"
  },
  {
    "objectID": "posts/S07E09_tidy_04/index.html#pre-tidy-date",
    "href": "posts/S07E09_tidy_04/index.html#pre-tidy-date",
    "title": "Tidyverse 4: Tidy Data and Pivoting",
    "section": "3.2 Pre-Tidy Date",
    "text": "3.2 Pre-Tidy Date\n\n‚ÄúAll tidy data sets are alike. Each messy dataset is messy in its own way‚Äù - Hadley Wickham.\n\nAt risk of stating the obvious, organizing values in datasets can be accomplished in many ways\nHere with an example of table of student grades on several assignments adapted from Hadley Wickam‚Äôs Tidy Data\n\nclassroom &lt;- tribble(\n  ~name,    ~quiz1, ~quiz2, ~test1,\n  \"Billy\",  NA,     \"67\",    \"75\",\n  \"Suzy\",   \"44\",    NA,     NA,\n  \"Lionel\", \"86\",    \"74\",    \"84\",\n  \"Jenny\",  \"94\",    \"98\",    \"88\"\n  )\n\nclassroom\n\n# A tibble: 4 √ó 4\n  name   quiz1 quiz2 test1\n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 Billy  &lt;NA&gt;  67    75   \n2 Suzy   44    &lt;NA&gt;  &lt;NA&gt; \n3 Lionel 86    74    84   \n4 Jenny  94    98    88   \n\n\nThere is more than one way to organize this information in a table - for instance here we can flip (transpose) the table to have student names in columns and assessments in rows\n\ntribble(\n  ~assessment, ~Billy, ~Suzy, ~Lionel, ~Jenny,\n  \"quiz1\",     NA,     \"44\",   \"86\",     \"94\",\n  \"quiz2\",     \"67\",    NA,    \"74\",     \"98\",\n  \"test1\",     \"75\",    NA,    \"84\",     \"88\"\n  )\n\n# A tibble: 3 √ó 5\n  assessment Billy Suzy  Lionel Jenny\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;\n1 quiz1      &lt;NA&gt;  44    86     94   \n2 quiz2      67    &lt;NA&gt;  74     98   \n3 test1      75    &lt;NA&gt;  84     88   \n\n\nThis data isn‚Äôt tidy data yet though.\n\n\n\n\n\n\nSIde Note: Different Organizations Serve Different Purposes\n\n\n\n\n\nDifferent ways of organizing data can serve different purposes - some ways of organizing data are great for collecting data, some good for analyzing data, some both, and some neither.\n\n\n\n\n3.2.1 The look of tidy data\nRoughly speaking, in tidy data columns contain variables and rows contain observations\nHere‚Äôs the dataset manually remade in a tidy format\n\ntidy_classroom &lt;- tibble( name = c( rep( \"Billy\", 3), rep( \"Jenny\", 3), rep(\"Lionel\", 3), rep(\"Suzy\", 3)),\n        assessment = c( rep(c(\"quiz1\", \"quiz2\", \"test1\"), 4)),\n        grade = c(NA, \"67\", \"75\", \"94\", \"98\", \"88\", \"86\", \"74\", \"84\", \"44\", NA, NA))\n\n\ntidy_classroom\n\n# A tibble: 12 √ó 3\n   name   assessment grade\n   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;\n 1 Billy  quiz1      &lt;NA&gt; \n 2 Billy  quiz2      67   \n 3 Billy  test1      75   \n 4 Jenny  quiz1      94   \n 5 Jenny  quiz2      98   \n 6 Jenny  test1      88   \n 7 Lionel quiz1      86   \n 8 Lionel quiz2      74   \n 9 Lionel test1      84   \n10 Suzy   quiz1      44   \n11 Suzy   quiz2      &lt;NA&gt; \n12 Suzy   test1      &lt;NA&gt; \n\n\nHere, the values, variables, and observations are more clear\nThe variables are\n\nthe names of the students (in the name column)\nthe assessments (in the assessment column)\nthe grades (in the grade column)\n\nEach observation here is a particular grade, on each assessmnet, for each student.\n\n\n\n\n\n\nNote\n\n\n\n\n\nLook at the dimensions of this table. From this, we can immediatly tell the number of variables, and the number of observations in this dataset"
  },
  {
    "objectID": "posts/S07E09_tidy_04/index.html#tidy-data-definition",
    "href": "posts/S07E09_tidy_04/index.html#tidy-data-definition",
    "title": "Tidyverse 4: Tidy Data and Pivoting",
    "section": "3.3 Tidy data definition",
    "text": "3.3 Tidy data definition\nTidy data is a standard way of organizing data, and is defined by 3 things\nIn tidy data\n\nEach variable is one column; columns are single variables\nEach observation is one row; rows are single observations\nEach value is a cell; cells are values\n\nMessy data is defined as any data organization that is not tidy data\n\nWhy use tidy data?\n\nHaving data structured as tidy data makes it easier to manipulate and analyze data in tidy R - in fact, most of the functions we have been learning up to now have been preformed on tidy data - this is the tidyverse after all\nSome functions require tidy data, and most operations on data in the tidyverse are made significantly easier by having your data as tidy data (i.e., data visualization, statistics)\nHaving data in a standardized format makes it easier to collaborate on\n\n\n\n\n\n\n\nOrder of Columns\n\n\n\n\n\nA note on ordering of columns : While order of columns doesn‚Äôt really matter for data to be considered tidy, it is standard and common practice to put meta data (aka fixed or random variables) first, followed by the columns for measured data (i.e., sample name columns go first)"
  },
  {
    "objectID": "posts/S07E09_tidy_04/index.html#pivoting-longer",
    "href": "posts/S07E09_tidy_04/index.html#pivoting-longer",
    "title": "Tidyverse 4: Tidy Data and Pivoting",
    "section": "4.1 Pivoting Longer",
    "text": "4.1 Pivoting Longer\nOne common problem mentioned in R for data science and by Hadley Wickham is when you have column names that are actually variable values (when a single variable is spread across multiple columns)\n\n\n\n\n\n\nSidenote\n\n\n\n\n\nHaving a set of columns with variable values for names is actually very common in metabomolics or genomics data, where column titles are metabolites, genes, taxa, etc.\n\n\n\nHere is a dataset with this issue - This data denotes the population of Afghanistan, Brazil, and China for the years 1999 and 2000\n\ntable4b\n\n# A tibble: 3 √ó 3\n  country         `1999`     `2000`\n  &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat are the variables in the table4b data?\n\n\nSolution (click here)\n\nThe variables are\n\ncountry\nyear\npopulation\n\n\n\n\nThis format of data is sometimes called wide data, where the row of column names (the very first row) actually contains variable values.\nIn this data it doesn‚Äôt look very wide, but imagine how much wider if data was taken every year up to or past this year. Wide data tends to get wide very quickly.\n\nFor an example of very wide data, look at the who dataset\n\ndata(who)\n who\n\n# A tibble: 7,240 √ó 60\n   country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544\n   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 Afghani‚Ä¶ AF    AFG    1980          NA           NA           NA           NA\n 2 Afghani‚Ä¶ AF    AFG    1981          NA           NA           NA           NA\n 3 Afghani‚Ä¶ AF    AFG    1982          NA           NA           NA           NA\n 4 Afghani‚Ä¶ AF    AFG    1983          NA           NA           NA           NA\n 5 Afghani‚Ä¶ AF    AFG    1984          NA           NA           NA           NA\n 6 Afghani‚Ä¶ AF    AFG    1985          NA           NA           NA           NA\n 7 Afghani‚Ä¶ AF    AFG    1986          NA           NA           NA           NA\n 8 Afghani‚Ä¶ AF    AFG    1987          NA           NA           NA           NA\n 9 Afghani‚Ä¶ AF    AFG    1988          NA           NA           NA           NA\n10 Afghani‚Ä¶ AF    AFG    1989          NA           NA           NA           NA\n# ‚Ñπ 7,230 more rows\n# ‚Ñπ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,\n#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,\n#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,\n#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,\n#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,\n#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;, ‚Ä¶\n\n\n\nTo make this data tidy, we need to the the column names (the year variable) and turn it into its own column (called year), and take all of the population data and put that into a second variable column (called population)\nPreviously with the classroom data we did this manually, but there is a much better way to pivot from wide messy data, to longer tidy data with the function pivot_longer\nLets look at the help file for it\n\n?pivot_longer\n\nFrom this, we see that the pivot_longer function can take a lot of aruguments, but there are only a few important ones\n\ncols, in which we select the columns to pivot (i.e., the columns whos names contain a variable)\nnames_to, in which we create a new column for where our old column names are to be put into\nvalues_to, in which we create a second new column for the values to be put into\n\nHere‚Äôs what that looks like in our example\n\ntidy_table4b &lt;- table4b |&gt; \n  pivot_longer(cols = `1999`:`2000`, \n               names_to = \"year\", \n               values_to = \"population\") \n\n# note here the numbers are in backticks. This is because R treats column names as characters, and calling a name as number data won't work here. \n\n# the new column names also need to be in quotes here\n\ntidy_table4b\n\n# A tibble: 6 √ó 3\n  country     year  population\n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;\n1 Afghanistan 1999    19987071\n2 Afghanistan 2000    20595360\n3 Brazil      1999   172006362\n4 Brazil      2000   174504898\n5 China       1999  1272915272\n6 China       2000  1280428583\n\n\nusing pivot_longer we turned a 3x3 table where the column names stored variable values into a 6x3 table where each column contains a single variable, and each row a single observation - and presto, tidy data!\nOne other thing to note here is that we are not pivoting every column. In some datasets you may only have a few columns that you would like to be longer\n\n4.1.1 More examples and uses of pivot\nPivoting isn‚Äôt just for cleaning up! When combined with other functions, pivoting can also be a very useful way to manipulate data to make it easier to analyze\nLast week, we used the summary function to find the mean height, width and depth of diamonds in the diamonds dataset\n\ndata(diamonds)\n\n\ndiamonds |&gt; \n  summarise(mean_x = mean(x),\n            mean_y = mean(y),\n            mean_z = mean(z))\n\n# A tibble: 1 √ó 3\n  mean_x mean_y mean_z\n   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1   5.73   5.73   3.54\n\n\nFor this we had to create a new column for every dimensional mean, which a.) takes a while to type, especially if we wanted to find the mean of further values and b.) comes out to not be tidy data\nAnother way to find the means for these columns is to use the pivot_longer function to make another column which we can group the values by\n\ndiamonds |&gt; \npivot_longer(cols = c(x:z), \n             names_to = \"dimension\", \n             values_to = \"value\") |&gt; \n  summarise(mean_value = mean(value),\n            .by = dimension)\n\n# A tibble: 3 √ó 2\n  dimension mean_value\n  &lt;chr&gt;          &lt;dbl&gt;\n1 x               5.73\n2 y               5.73\n3 z               3.54\n\n# note in cols, I'm not specifying x, y, and z individually. In the dataset they are all next to each other, so I can use the : operator to signify that I want columns x through z. This can be really helpful on wider datasets. \n\nHere we only have three values, but for wider datasets this can be a very powerful tool\n\n\n4.1.2 Pivot longer problems\n\n\n\n\n\n\nQuestion 1\n\n\n\nMake the classroom data from earlier into a tidy format using pivot_longer\n\nclassroom &lt;- tribble(\n  ~name,    ~quiz1, ~quiz2, ~test1,\n  \"Billy\",  NA,     \"D\",    \"C\",\n  \"Suzy\",   \"F\",    NA,     NA,\n  \"Lionel\", \"B\",    \"C\",    \"B\",\n  \"Jenny\",  \"A\",    \"A\",    \"B\"\n  )\n\n\n\nSolution (click here)\n\n\nclassroom |&gt; \n  pivot_longer(cols = c(quiz1,quiz2, test1), \n               names_to = \"assesment\", \n               values_to = \"grade\")\n\n# A tibble: 12 √ó 3\n   name   assesment grade\n   &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;\n 1 Billy  quiz1     &lt;NA&gt; \n 2 Billy  quiz2     D    \n 3 Billy  test1     C    \n 4 Suzy   quiz1     F    \n 5 Suzy   quiz2     &lt;NA&gt; \n 6 Suzy   test1     &lt;NA&gt; \n 7 Lionel quiz1     B    \n 8 Lionel quiz2     C    \n 9 Lionel test1     B    \n10 Jenny  quiz1     A    \n11 Jenny  quiz2     A    \n12 Jenny  test1     B    \n\n\n\n\n\n\n\n\n\n\n\nQuestion 2\n\n\n\nFind the means, minimum values, maximum values, and standard deviations of all of the numeric columns in the diamonds dataset using pivot_longer followed by summarise\n\n\nHint (click here)\n\nWhich are the numeric columns?\n\nstr(diamonds)\n\ntibble [53,940 √ó 10] (S3: tbl_df/tbl/data.frame)\n $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n $ cut    : Ord.factor w/ 5 levels \"Fair\"&lt;\"Good\"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...\n $ color  : Ord.factor w/ 7 levels \"D\"&lt;\"E\"&lt;\"F\"&lt;\"G\"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...\n $ clarity: Ord.factor w/ 8 levels \"I1\"&lt;\"SI2\"&lt;\"SI1\"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...\n $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n\n\n\n\n\nSolution (click here)\n\n\ndiamonds |&gt; \n  pivot_longer(cols = c(carat,depth:z), \n               names_to = \"parameter\", \n               values_to = \"value\") |&gt; \n  summarise(mean = mean(value),\n            min = min(value),\n            max = max(value),\n            sd = sd(value),\n            .by = parameter)\n\n# A tibble: 7 √ó 5\n  parameter     mean   min      max       sd\n  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 carat        0.798   0.2     5.01    0.474\n2 depth       61.7    43      79       1.43 \n3 table       57.5    43      95       2.23 \n4 price     3933.    326   18823    3989.   \n5 x            5.73    0      10.7     1.12 \n6 y            5.73    0      58.9     1.14 \n7 z            3.54    0      31.8     0.706\n\n\n\n\n\n\n\n\n\n\n\nQuestion 3 - Challange\n\n\n\nTake a look at the very wide dataset who\n\ndata(who)\n\nhead(who)\n\n# A tibble: 6 √ó 60\n  country   iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544\n  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 Afghanis‚Ä¶ AF    AFG    1980          NA           NA           NA           NA\n2 Afghanis‚Ä¶ AF    AFG    1981          NA           NA           NA           NA\n3 Afghanis‚Ä¶ AF    AFG    1982          NA           NA           NA           NA\n4 Afghanis‚Ä¶ AF    AFG    1983          NA           NA           NA           NA\n5 Afghanis‚Ä¶ AF    AFG    1984          NA           NA           NA           NA\n6 Afghanis‚Ä¶ AF    AFG    1985          NA           NA           NA           NA\n# ‚Ñπ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,\n#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,\n#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,\n#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,\n#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,\n#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;,\n#   new_sn_f014 &lt;dbl&gt;, new_sn_f1524 &lt;dbl&gt;, new_sn_f2534 &lt;dbl&gt;, ‚Ä¶\n\n\nThis data contains records of the counts of confirmed tuberculosis cases by country, year, and demographic group. The demographic groups are broken down by sex (m, f) and age (0-14, 15-25, 25-34, 35-44, 45-54, 55-64, unknown).\nAfter using pivot_longer, find the country with the most cases of tb in 2011.\nNote: The first four columns (country, iso2, iso3, and year) are already properly formatted and do not need to be pivoted here.\n\n\nHint (click here)\n\nNA values are liekly to mess up your analysis here - check the pivot_longer() help file to see what arguments are available to remove NA values\n\n\n\nSolution (click here)\n\n\nwho |&gt; \n  pivot_longer(cols = !c(country:year), \n               names_to = \"demographic\", \n               values_to = \"tb_counts\", \n               values_drop_na = TRUE) |&gt; \n  summarise(count = sum(tb_counts),\n            .by = c(country,year)) |&gt; \n  filter(year=='2011') |&gt; \n  arrange(desc(count))\n\n# A tibble: 210 √ó 3\n   country                                year  count\n   &lt;chr&gt;                                 &lt;dbl&gt;  &lt;dbl&gt;\n 1 China                                  2011 865059\n 2 India                                  2011 642311\n 3 Indonesia                              2011 313601\n 4 South Africa                           2011 289111\n 5 Bangladesh                             2011 148198\n 6 Pakistan                               2011 127571\n 7 Russian Federation                     2011 104320\n 8 Philippines                            2011  93580\n 9 Democratic People's Republic of Korea  2011  85564\n10 Kenya                                  2011  84548\n# ‚Ñπ 200 more rows\n\n\nChina is our winner with a sum of 865059 cases in 2011"
  },
  {
    "objectID": "posts/S07E09_tidy_04/index.html#pivoting-wider",
    "href": "posts/S07E09_tidy_04/index.html#pivoting-wider",
    "title": "Tidyverse 4: Tidy Data and Pivoting",
    "section": "4.2 Pivoting Wider",
    "text": "4.2 Pivoting Wider\nThe other function of the day here is pivot_wider\npivot_wider , as the name might imply, is the inverse of pivot_longer and creates columns from from values stored in another column\n\n4.2.1 Uses of pivot_wider()\nYou may be thinking, ‚Äúwhy would I ever need this? I thought the whole point was to avoid having columns of variable values‚Äù\npivot_wider is an especially useful function in many situations. Here are only a few:\n\npivot_wider is useful where we have the opposite problem as we saw when learning pivot_longer - when a multiple variables are stored in a single column (single observation is scattered across more than one row)\npivot_wider can be useful when we want to make calculations across columns\nNot every function in R accepts tidy data, sometimes we do need wide data! (e.g., anything that requires a matrix, PCA)\n\n\n\n4.2.2 Using pivot_wider()\nLets see how pivot_wider() is used\nThis is a dataset containing population data and the number of cases of some disease in Afghanistan, Brazil, and China for the years 1999 and 2000\n\ntable2\n\n# A tibble: 12 √ó 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\nHere, we have columns containing more than one variable this time (type has both cases and population).\nLets check out pivot_wider to see how we can undo this and make our data tidy again\n\n?pivot_wider\n\nAgain, pivot_wider has a bunch of arguments, but this time there are really only two essential ones\n\nnames_from which denotes the column in which our new column names are stored\nvalues_from which denotes the column in which the values we will be filling our new columns with are stored\n\n\n\n\n\n\n\nNote:\n\n\n\n\n\nThere are fewer important arguments in pivot_wider - which one is missing its inverse from pivot_longer?\n\n\n\nLets see it in action\n\ntable2 |&gt; \n  pivot_wider(names_from = type, values_from = count)\n\n# A tibble: 6 √ó 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\nWe have now seperated our variables into seperate columns, and now our rows each contain only one observation. Tidy data!\n\n\n4.2.3 Pivot Wider Problems\n\n\n\n\n\n\nQuestion 1\n\n\n\nUndo the tidy_classroom and make it look like one of its untidy form using pivot_wider\n\ntidy_classroom &lt;- tibble( name = c( rep( \"Billy\", 3), rep( \"Jenny\", 3), rep(\"Lionel\", 3), rep(\"Suzy\", 3)),\n        assessment = c( rep(c(\"quiz1\", \"quiz2\", \"test1\"), 4)),\n        grade = c(NA, \"67\", \"75\", \"94\", \"98\", \"88\", \"86\", \"74\", \"84\", \"44\", NA, NA))\n\n\n\nSolution (click here)\n\n\ntidy_classroom |&gt; \n  pivot_wider(names_from = assessment, values_from = grade)\n\n# A tibble: 4 √ó 4\n  name   quiz1 quiz2 test1\n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 Billy  &lt;NA&gt;  67    75   \n2 Jenny  94    98    88   \n3 Lionel 86    74    84   \n4 Suzy   44    &lt;NA&gt;  &lt;NA&gt; \n\n\n\n\n\n\n\n\n\n\n\nQuestion 2\n\n\n\nIn one of the questions from using pivot_longer, we put all of the numeric variables into two columns, here named parameter and value. Can you return the data tampered_diamonds to its original state?\n\ntampered_diamonds &lt;- diamonds |&gt; \n  pivot_longer(cols = c(carat, depth:z), names_to = \"parameter\", values_to = \"value\")\n\nnote : if you encounter an error, be sure to check the hint\n\n\nHint (click here)\n\n\ntampered_diamonds |&gt; \n  pivot_wider(names_from = parameter, values_from = value)\n\nWarning: Values from `value` are not uniquely identified; output will contain list-cols.\n‚Ä¢ Use `values_fn = list` to suppress this warning.\n‚Ä¢ Use `values_fn = {summary_fun}` to summarise duplicates.\n‚Ä¢ Use the following dplyr code to identify duplicates.\n  {data} |&gt;\n  dplyr::summarise(n = dplyr::n(), .by = c(cut, color, clarity, parameter)) |&gt;\n  dplyr::filter(n &gt; 1L)\n\n\n# A tibble: 276 √ó 10\n   cut       color clarity carat       depth       table price x     y     z    \n   &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;list&gt;      &lt;list&gt;      &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;\n 1 Ideal     E     SI2     &lt;dbl [469]&gt; &lt;dbl [469]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 2 Premium   E     SI1     &lt;dbl [614]&gt; &lt;dbl [614]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 3 Good      E     VS1     &lt;dbl [89]&gt;  &lt;dbl [89]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 4 Premium   I     VS2     &lt;dbl [315]&gt; &lt;dbl [315]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 5 Good      J     SI2     &lt;dbl [53]&gt;  &lt;dbl [53]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 6 Very Good J     VVS2    &lt;dbl [29]&gt;  &lt;dbl [29]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 7 Very Good I     VVS1    &lt;dbl [69]&gt;  &lt;dbl [69]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 8 Very Good H     SI1     &lt;dbl [547]&gt; &lt;dbl [547]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 9 Fair      E     VS2     &lt;dbl [42]&gt;  &lt;dbl [42]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n10 Very Good H     VS1     &lt;dbl [257]&gt; &lt;dbl [257]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n# ‚Ñπ 266 more rows\n\n\nUh-oh! Uh-oh! With what we have learned so far, we cant undo pivot_longer with pivot_wider here! Can you figure out why?\n\n\n\nSolution (click here)\n\n\n# code from the error read out\ntampered_diamonds %&gt;%\n  dplyr::group_by(cut, color, clarity, parameter) %&gt;%\n  dplyr::summarise(n = dplyr::n(), .groups = \"drop\")  %&gt;%\n  dplyr::filter(n &gt; 1L)\n\n# A tibble: 1,897 √ó 5\n   cut   color clarity parameter     n\n   &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;     &lt;int&gt;\n 1 Fair  D     I1      carat         4\n 2 Fair  D     I1      depth         4\n 3 Fair  D     I1      price         4\n 4 Fair  D     I1      table         4\n 5 Fair  D     I1      x             4\n 6 Fair  D     I1      y             4\n 7 Fair  D     I1      z             4\n 8 Fair  D     SI2     carat        56\n 9 Fair  D     SI2     depth        56\n10 Fair  D     SI2     price        56\n# ‚Ñπ 1,887 more rows\n\n# example of multiple replicates\ntampered_diamonds |&gt; \n  filter(cut==\"Premium\", color == \"D\", clarity==\"VS2\")\n\n# A tibble: 2,373 √ó 5\n   cut     color clarity parameter  value\n   &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;      &lt;dbl&gt;\n 1 Premium D     VS2     carat       0.22\n 2 Premium D     VS2     depth      59.3 \n 3 Premium D     VS2     table      62   \n 4 Premium D     VS2     price     404   \n 5 Premium D     VS2     x           3.91\n 6 Premium D     VS2     y           3.88\n 7 Premium D     VS2     z           2.31\n 8 Premium D     VS2     carat       0.71\n 9 Premium D     VS2     depth      62.5 \n10 Premium D     VS2     table      60   \n# ‚Ñπ 2,363 more rows\n\n\nmultiple values for each ‚Äútype‚Äù of diamond - not uniquely identifiable, thus we can‚Äôt get to the original dataset"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html",
    "href": "posts/S06E11_shiny_04/index.html",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "",
    "text": "Welcome to our shiny app development class! We are now fully prepared to deploy our shiny app to our website.\nThere are several options available for deploying a shiny app, and we will utilize our knowledge of using the quarto website to accomplish this task."
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-1",
    "href": "posts/S06E11_shiny_04/index.html#step-1",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.1 Step 1",
    "text": "1.1 Step 1\nTo begin, you‚Äôll need to install the r-shinylive R package. This package is currently hosted on GitHub and can be easily obtained from the R console by executing the following command:\n\n# Install the 'pak' package manager if you haven't already\ninstall.packages(\"pak\")\n# Install 'r-shinylive' using 'pak'\npak::pak(\"posit-dev/r-shinylive\")"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-2",
    "href": "posts/S06E11_shiny_04/index.html#step-2",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.2 Step 2",
    "text": "1.2 Step 2\nTo install the Quarto extension for shinylive, follow these steps:\n\nOpen the Terminal tab.\nRun the following command:\n\n\n# quarto add quarto-ext/shinylive"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-3",
    "href": "posts/S06E11_shiny_04/index.html#step-3",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.3 Step 3",
    "text": "1.3 Step 3\nTo include a Shiny app directly in your Quarto file (.qmd), you need to add a filter key for shinylive at the top of the desired Quarto file. Open your Quarto file and insert the following YAML header:\n\nfilters:\n  - shinylive"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-4",
    "href": "posts/S06E11_shiny_04/index.html#step-4",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.4 Step 4",
    "text": "1.4 Step 4\nYou can include the code for a Shiny application in a code block indicated by {shinylive-r}. Here is an example of how your code block could appear:\n\n---\ntitle: \"Our first r-shinylive Quarto document!\"\nfilters:\n  - shinylive\n---\n\n```{shinylive-r}\n#| standalone: true\n\n#library(shiny)\n\n# Define your Shiny UI here\n#ui &lt;- fluidPage(\n  # Your UI components go here\n)\n\n# Define your Shiny server logic here\n#server &lt;- function(input, output, session) {\n  # Your server code goes here\n}\n\n# Create and launch the Shiny app\n#shinyApp(ui, server)"
  },
  {
    "objectID": "posts/S06E11_shiny_04/index.html#step-5",
    "href": "posts/S06E11_shiny_04/index.html#step-5",
    "title": "Shiny 04: Deploying Shiny App",
    "section": "1.5 Step 5",
    "text": "1.5 Step 5\nIf you have encountered issues with the quarto publish function, you can easily resolve them by adding the following steps:\n\nformat:\n  html:\n    resources: \n      - shinylive-sw.js"
  },
  {
    "objectID": "posts/S09E12_gt_02/index.html#introduction",
    "href": "posts/S09E12_gt_02/index.html#introduction",
    "title": "Introduction to gt Tables - 02",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nOverview\nWelcome back to the second week of our gt table tutorial! Today, we‚Äôll dive deeper into the advanced features of the gt package. We‚Äôll start by exploring conditional formatting to highlight specific values in your tables, making important data points stand out. Next, we‚Äôll learn how to group rows and columns to create more organized and intuitive tables. Finally, we‚Äôll cover how to customize column labels to enhance the readability and user-friendliness of your tables. By the end of this session, you‚Äôll have a solid understanding of these advanced techniques, enabling you to create sophisticated and professional tables for your data presentations. Let‚Äôs get started!\n\n\nRecall the gt Tables Workflow\n\n\n\n\n\n\nPlease let‚Äôs go ahead and install the gt package first:\n\ninstall.packages(\"gt\")"
  },
  {
    "objectID": "posts/S09E12_gt_02/index.html#our-data-set",
    "href": "posts/S09E12_gt_02/index.html#our-data-set",
    "title": "Introduction to gt Tables - 02",
    "section": "2 Our data set",
    "text": "2 Our data set\n\nWe will use the palmerpenguins data set\n\n\n\nIllustration by Allison Horst\n\n\nWe are going to continue using our üêß data set from the package palmerpenguins. If you haven‚Äôt done so, please install that package first:\n\ninstall.packages(\"palmerpenguins\")\n\npalmerpenguins is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.¬†Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.\nWe‚Äôll now load the package, along with the gt and tidyverse:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.4.1\n\n\nOnce you‚Äôve loaded that package you will have a data frame called penguins at your disposal ‚Äî let‚Äôs take a look:\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ‚Ñπ 334 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S09E12_gt_02/index.html#create-table-and-label-column-names",
    "href": "posts/S09E12_gt_02/index.html#create-table-and-label-column-names",
    "title": "Introduction to gt Tables - 02",
    "section": "3 Create table and label column names",
    "text": "3 Create table and label column names\nFor this session, we‚Äôll be working with the Palmer Penguins data set. After loading the data set, you can create a basic table by passing the data frame to the gt() function. This function generates a table object that you can print and view.\nLet‚Äôs apply what we learned last week and relabel the columns of the Palmer Penguins data set.\n\n\n Exercise 1\n\nCreate a simple table using gt and the Palmer Penguins data set and relabel the columns. Please make the column names in bold.\n\n\n\nHint (click here)\n\nFor the label argument, you can either provide a character vector directly or wrap it in md() to enable Markdown syntax (such as bold text). Save and call this table: penguins_relabeled\n\n\n\nSolutions (click here)\n\n\npenguins_relabeled &lt;-  penguins %&gt;%  \n  gt() %&gt;% \n  cols_label(\n    species = md('**Species**'),\n    island = md('**Island**'),\n    bill_length_mm = md('**Bill Length (mm)**'),\n    bill_depth_mm = md('**Bill Depth (mm)**'),\n    flipper_length_mm = md('**Flipper Length (mm)**'),\n    body_mass_g = md('**Body Mass (g)**'),\n    sex = md('**Sex**'),\n    year = md('**Year**'),\n  )\n\npenguins_relabeled\n\n\n\n\n\n  \n    \n      Species\n      Island\n      Bill Length (mm)\n      Bill Depth (mm)\n      Flipper Length (mm)\n      Body Mass (g)\n      Sex\n      Year\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009"
  },
  {
    "objectID": "posts/S09E12_gt_02/index.html#highlight-based-on-multiple-conditions",
    "href": "posts/S09E12_gt_02/index.html#highlight-based-on-multiple-conditions",
    "title": "Introduction to gt Tables - 02",
    "section": "4 Highlight Based on Multiple Conditions",
    "text": "4 Highlight Based on Multiple Conditions\nLast week, we introduced conditional highlighting in gt. Today, we‚Äôll further explore how to highlight cells based on multiple conditions.\n\n# Apply conditional formatting to highlight bill lengths above 45 mm and body mass above 4000 grams\npenguins_relabeled %&gt;%\n  tab_style(\n    style = cell_fill(color = \"lightblue\"),\n    locations = cells_body(\n      columns = c(bill_length_mm),\n      rows = bill_length_mm &gt; 45\n    )\n  ) %&gt;%\n  tab_style(\n    style = cell_fill(color = \"lightyellow\"),\n    locations = cells_body(\n      columns = c(body_mass_g),\n      rows = body_mass_g &gt; 4000\n    )\n  )\n\n\n\n\n\n  \n    \n      Species\n      Island\n      Bill Length (mm)\n      Bill Depth (mm)\n      Flipper Length (mm)\n      Body Mass (g)\n      Sex\n      Year\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n  \n  \n  \n\n\n\n\nThe simplicity of this process allows you to quickly identify patterns in the raw data that may be worth further investigation.\n\n\n Exercise 2\n\nHighlight rows for Adelie Penguins and Biscoe Island.\nWhat can you learn from this highlighted table?\n\n\n\nSolutions (click here)\n\n\npenguins_relabeled %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"lightcoral\")),\n    locations = cells_body(\n      rows = species == \"Adelie\" & island == \"Biscoe\"\n    )\n  ) %&gt;% \n  tab_style(\n    style = cell_fill(color = \"lightblue\"),\n    locations = cells_body(\n      columns = c(bill_length_mm),\n      rows = bill_length_mm &gt; 45\n    )\n  ) %&gt;%\n  tab_style(\n    style = cell_fill(color = \"lightyellow\"),\n    locations = cells_body(\n      columns = c(body_mass_g),\n      rows = body_mass_g &gt; 4000\n    )\n  )\n\n\n\n\n\n  \n    \n      Species\n      Island\n      Bill Length (mm)\n      Bill Depth (mm)\n      Flipper Length (mm)\n      Body Mass (g)\n      Sex\n      Year\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009"
  },
  {
    "objectID": "posts/S09E12_gt_02/index.html#group-by-rows-and-columns",
    "href": "posts/S09E12_gt_02/index.html#group-by-rows-and-columns",
    "title": "Introduction to gt Tables - 02",
    "section": "5 Group by Rows and Columns",
    "text": "5 Group by Rows and Columns\nOnce you have created your table, gt offers several basic formatting options to enhance its appearance and readability. Let‚Äôs recall the anatomy of a gt table.\n\n\n\n\n\nLast week we learned that you can add titles and subtitles to provide context and make the table more informative. The tab_header() function allows you to specify these elements. Additionally, you can format the columns to display numbers, dates, or currencies appropriately using functions like fmt_number(), fmt_date(), and fmt_currency(). These formatting options help ensure that the data is presented clearly and professionally. By applying these basic formatting techniques, you can significantly improve the visual appeal and utility of your tables.\nNow let‚Äôs group rows and column by a specific classification, using the tab_row_group and tab_spanner functions to group the data by these categories.\n\nGrouping Rows by Species\nIn this example, the tab_row_group function is used to group rows by the species column. Each species is given a label, making it easier to distinguish between the different groups of penguins.\n\n# Group rows by species and island\npenguins_relabeled %&gt;%\n  tab_row_group(\n    label = md(\"***Adelie Penguins***\"),\n    rows = species == \"Adelie\"\n  ) %&gt;%\n  tab_row_group(\n    label = md(\"***Chinstrap Penguins***\"),\n    rows = species == \"Chinstrap\"\n  ) %&gt;%\n  tab_row_group(\n    label = md(\"***Gentoo Penguins***\"),\n    rows = species == \"Gentoo\"\n  )\n\n\n\n\n\n  \n    \n      Species\n      Island\n      Bill Length (mm)\n      Bill Depth (mm)\n      Flipper Length (mm)\n      Body Mass (g)\n      Sex\n      Year\n    \n  \n  \n    \n      Gentoo Penguins\n    \n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    \n      Chinstrap Penguins\n    \n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n    \n      Adelie Penguins\n    \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n  \n  \n  \n\n\n\n\n\n\nGrouping Columns by Measurements\nIn this example, the tab_spanner function is used to group columns related to measurements under a common label ‚ÄúMeasurements‚Äù. This helps to categorize the columns and make the table more organized.\n\n# Group columns by measurements\npenguins_relabeled %&gt;%\n  tab_spanner(\n    label = md(\"**Measurements**\"),\n    columns = c(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)\n  )\n\n\n\n\n\n  \n    \n      Species\n      Island\n      \n        Measurements\n      \n      Sex\n      Year\n    \n    \n      Bill Length (mm)\n      Bill Depth (mm)\n      Flipper Length (mm)\n      Body Mass (g)\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n  \n  \n  \n\n\n\n\nIn the following exercise, both tab_row_group and tab_spanner functions can be used to group rows by island and columns by measurements. This will create a well-organized table that is easy to read and interpret.\n\n\n\n Exercise 3\n\nGrouping Rows by Island and Columns by Measurements\n\n\n\nSolutions (click here)\n\n\n# Group rows by species and columns by measurements\npenguins_relabeled %&gt;% \n  tab_row_group(\n    label = md(\"***Adelie Penguins***\"),\n    rows = species == \"Adelie\"\n  ) %&gt;%\n  tab_row_group(\n    label = md(\"***Chinstrap Penguins***\"),\n    rows = species == \"Chinstrap\"\n  ) %&gt;%\n  tab_row_group(\n    label = md(\"***Gentoo Penguins***\"),\n    rows = species == \"Gentoo\"\n  ) %&gt;%\n  tab_spanner(\n    label = md(\"**Measurements**\"),\n    columns = c(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)\n  )\n\n\n\n\n\n  \n    \n      Species\n      Island\n      \n        Measurements\n      \n      Sex\n      Year\n    \n    \n      Bill Length (mm)\n      Bill Depth (mm)\n      Flipper Length (mm)\n      Body Mass (g)\n    \n  \n  \n    \n      Gentoo Penguins\n    \n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    \n      Chinstrap Penguins\n    \n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n    \n      Adelie Penguins\n    \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009"
  },
  {
    "objectID": "posts/S09E12_gt_02/index.html#combining-data-wrangling-with-the-gt-package",
    "href": "posts/S09E12_gt_02/index.html#combining-data-wrangling-with-the-gt-package",
    "title": "Introduction to gt Tables - 02",
    "section": "6 Combining data wrangling with the gt package",
    "text": "6 Combining data wrangling with the gt package\nLet‚Äôs combine skills we learned in previous sessions with gt.\n\nLong to wide format\nFirst, let‚Äôs use pivot_wider to format our original data set.\n\npenguins &lt;- palmerpenguins::penguins %&gt;%  \n  filter(!is.na(sex))\n\npenguin_counts &lt;- penguins %&gt;%  \n  mutate(year = as.character(year)) %&gt;%  \n  group_by(species, island, sex, year) %&gt;%  \n  summarise(n = n(), .groups = 'drop')\n\npenguin_counts_wider &lt;- penguin_counts %&gt;%  \n  pivot_wider(\n    names_from = c(species, sex),\n    values_from = n\n  ) %&gt;%  \n  # Make missing numbers (NAs) into zero\n  mutate(across(.cols = -(1:2), .fns = ~replace_na(., replace = 0))) %&gt;%  \n  arrange(island, year)\n\nNow let‚Äôs format this table and make it look nice.\n\n\n\n Exercise 4\n\nAdd labels such as a title, a subtitle and group the columns.\n\n\n\nSolutions (click here)\n\n\npenguin_counts_wider %&gt;%  \n  gt() %&gt;%  \n  cols_label(\n    island = 'Island',\n    year = 'Year',\n    Adelie_female = 'Adelie (female)',\n    Adelie_male = 'Adelie (male)',\n    Chinstrap_female = 'Chinstrap (female)',\n    Chinstrap_male = 'Chinstrap (male)',\n    Gentoo_female = 'Gentoo (female)',\n    Gentoo_male = 'Gentoo (male)',\n  ) %&gt;%  \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) %&gt;%  \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male')\n  ) %&gt;%  \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  ) %&gt;%  \n  tab_header(\n    title = 'Penguins in the Palmer Archipelago',\n    subtitle = 'Data is courtesy of the {palmerpenguins} R package'\n  ) \n\n\n\n\n\n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n    \n      Island\n      Year\n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Adelie (female)\n      Adelie (male)\n      Chinstrap (female)\n      Chinstrap (male)\n      Gentoo (female)\n      Gentoo (male)\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html",
    "href": "posts/S06E08_shiny_01/index.html",
    "title": "Shiny 01: Intro to Shiny",
    "section": "",
    "text": "Welcome to our shiny app development class! Throughout this session, we will dive into the world of Shiny and explore its incredible potential for creating interactive web applications.\nBy the end of this session, you will have a solid understanding of what Shiny is and how it can be utilized to build dynamic apps. We will also focus on mastering the basic structure of a Shiny app, equipping you with the necessary skills to create your own customized applications."
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#the-user-interface-section-structure",
    "href": "posts/S06E08_shiny_01/index.html#the-user-interface-section-structure",
    "title": "Shiny 01: Intro to Shiny",
    "section": "2.1 The User Interface Section Structure",
    "text": "2.1 The User Interface Section Structure\nThe user interface, commonly referred to as the ‚Äúfront end‚Äù of an application, is the visual and interactive aspect that users encounter. It is typically organized into several sections: titlePanel(), sidebarPanel(), and mainPanel(). In order to establish this structure, the code must be organized into sections that are constructed with functions, as demonstrated below.\n\n\n\nBasic ui (User Interface) code structure (Higgins 2023)\n\n\nThe code required to achieve this follows a similar hierarchy, as depicted in the figure below.\n\n\n\nUser Interface (ui) hierarchy code structure (Higgins 2023)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#the-server-section-structure",
    "href": "posts/S06E08_shiny_01/index.html#the-server-section-structure",
    "title": "Shiny 01: Intro to Shiny",
    "section": "2.2 The Server Section Structure",
    "text": "2.2 The Server Section Structure\nThe server section of an app, also known as the ‚Äúback end‚Äù, is where data processing takes place. Users don‚Äôt see this part but it handles inputs from the user and generates outputs such as model predictions or tables. These results are rendered to HTML and assigned to unique output values.\n\n\n\nBasic server code structure (Higgins 2023)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#how-to-run-a-shiny-app",
    "href": "posts/S06E08_shiny_01/index.html#how-to-run-a-shiny-app",
    "title": "Shiny 01: Intro to Shiny",
    "section": "2.3 How to Run a Shiny App",
    "text": "2.3 How to Run a Shiny App\nThe code required to run a Shiny app is always the same and quite straightforward. The shinyApp() function takes two arguments: the user interface (ui) and the server code (server) that are being used.\n\n\n\nExecuting and running a Shiny App (Higgins 2023)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#how-to-stop-a-shiny-app",
    "href": "posts/S06E08_shiny_01/index.html#how-to-stop-a-shiny-app",
    "title": "Shiny 01: Intro to Shiny",
    "section": "2.4 How to Stop a Shiny App",
    "text": "2.4 How to Stop a Shiny App\nTo stop your app, you have several options:\n\nClick the stop sign icon located on the toolbar of the R Console pane.\nClose the Shiny app window.\nClick within the Console pane and then press Esc (or Ctrl-C if using the command line) to halt it."
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#lets-complete-each-section.",
    "href": "posts/S06E08_shiny_01/index.html#lets-complete-each-section.",
    "title": "Shiny 01: Intro to Shiny",
    "section": "3.1 Let‚Äôs Complete Each Section.",
    "text": "3.1 Let‚Äôs Complete Each Section.\n\nCall shiny into R environment\n\n\nlibrary(shiny)\n\n\nLet‚Äôs complete some of the sections:\n\n\nui &lt;- fluidPage( \n  titlePanel(title = \"This is my First Shiny App\"), \n  sidebarLayout( \n    sidebarPanel(\"This is the sidebar panel.\"), \n    mainPanel(\"This is the main panel, where output is displayed.\") \n    ) \n  )\n\n\nWe have no input, so, we just need the basic server function.\n\n\nserver &lt;- shinyServer(\n  function(input,output){ \n    } \n  )\n\n\nLet‚Äôs run our Shiny App!\n\n\nshinyApp(ui=ui, server=server)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#lets-make-some-modifications.",
    "href": "posts/S06E08_shiny_01/index.html#lets-make-some-modifications.",
    "title": "Shiny 01: Intro to Shiny",
    "section": "3.2 Let‚Äôs Make Some Modifications.",
    "text": "3.2 Let‚Äôs Make Some Modifications.\n\n#1. Load your library, always.\nlibrary(shiny)\n\n#2. Let‚Äôs fill some of the sections\nui&lt;-fluidPage(\n  titlePanel(title = \"This is my First Shiny App\"), \n  sidebarLayout(position = \"right\",\n                sidebarPanel(h3(\"This is sidebar panel.\"), h4(\"Notice the sidebar is displayed on the right.\"), h5(\"But looked better on the left side.\")),\n                mainPanel(h4(\"This is the main panel, where output is displayed.\"),\n                          h5(\"This is additional explanation about the output.\"))\n  )\n)\n\n#3. We have no input, so, we just need the basic server function\nserver&lt;-shinyServer(\n  function(input,output){\n  }\n)\n\n#4. Let‚Äôs run the app\nshinyApp(ui=ui, server=server)"
  },
  {
    "objectID": "posts/S06E08_shiny_01/index.html#lets-include-text-input",
    "href": "posts/S06E08_shiny_01/index.html#lets-include-text-input",
    "title": "Shiny 01: Intro to Shiny",
    "section": "3.3 Let‚Äôs Include Text Input",
    "text": "3.3 Let‚Äôs Include Text Input\n\nlibrary(shiny)\n\nui&lt;- fluidPage(\n  titlePanel(\"Our First Shiny App\"), \n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"name\", \"Enter your first and last name\"),\n      textInput(\"email\", \"Enter your email\"),\n      selectInput(\"country\", \"Select the country you live in\", choices = c(\"\", \"Australia\", \"Germany\", \"India\", \"Paraguay\", \"UK\", \"USA\"))\n    ),\n    mainPanel(\n      paste(\"Your contact information\"),\n      textOutput(\"name\"),\n      textOutput(\"email\"),\n      textOutput(\"country\")\n    ) \n  )  \n)\n\nserver&lt;- shinyServer(function(input, output){\n  output$name&lt;- renderText({\n    paste(input$name)\n  })\n  output$email&lt;-renderText({\n    paste(input$email)\n  })\n  output$country&lt;-renderText({\n    paste(input$country)\n  })\n})\n\nshinyApp(ui=ui, server = server)"
  },
  {
    "objectID": "posts/S08E07_reprod_02/index.html#practice",
    "href": "posts/S08E07_reprod_02/index.html#practice",
    "title": "Reproducibility 2: Introduction to Quarto",
    "section": "2.1 Practice",
    "text": "2.1 Practice\n\nStart a new R Project.\nWithin your R Project, create a new Quarto document and save it."
  },
  {
    "objectID": "posts/S08E07_reprod_02/index.html#how-does-it-works",
    "href": "posts/S08E07_reprod_02/index.html#how-does-it-works",
    "title": "Reproducibility 2: Introduction to Quarto",
    "section": "3.1 How does it works",
    "text": "3.1 How does it works\nWhen you render a Quarto document, the process begins with knitr executing all the code chunks and generating a new markdown (.md) document that includes both the code and its output. This Markdown file is then processed by Pandoc, which creates the final, polished format. The  Render button automates and organizes these steps, executing them in the correct sequence for you.\n\n\n\n\n\nDuring the rendering process, Quarto creates a new file that includes the selected text, code, and results from the .qmd file. This new file can be formatted as an HTML, PDF, MS Word document, presentation, website, book, interactive document, or other formats."
  },
  {
    "objectID": "posts/S08E07_reprod_02/index.html#practice-1",
    "href": "posts/S08E07_reprod_02/index.html#practice-1",
    "title": "Reproducibility 2: Introduction to Quarto",
    "section": "3.2 Practice",
    "text": "3.2 Practice\n\nRender your Quarto document.\nUse the gear icon to select your preferred preview option, such as displaying it in the viewer panel or opening it in a new window, after rendering."
  },
  {
    "objectID": "posts/S08E07_reprod_02/index.html#yaml-header",
    "href": "posts/S08E07_reprod_02/index.html#yaml-header",
    "title": "Reproducibility 2: Introduction to Quarto",
    "section": "4.1 YAML Header",
    "text": "4.1 YAML Header\nThe YAML (Yet Another Markdown Language, or YAML Ain‚Äôt Markup Language) is located at the top of your document and is enclosed by ‚Äú‚Äî‚Äù lines.\nYAML is where you can set the content that will appear at the beginning of your compiled document. For instance:\n\ntitle: ‚ÄúYour title here‚Äù (make sure it is enclosed in quotes)\nauthor: ‚ÄúThe author‚Äôs name‚Äù (again, in quotes)\ndate: The date you want to display at the top of your document, enclosed in quotes. If you wish to learn more about other options, see https://quarto.org/docs/reference/dates.html.\noutput: Specifies the format of the compiled document. For this class, I recommend using html_document, as it offers the richest format. Your output will be a .html file, which you can save or share.\n\nHere‚Äôs a simple example:\n---\ntitle: \"This is my descriptive title\"\nauthor: \"Horacio Lopez-Nicora\"\ndate: \"October 21, 2024\"\nformat: html\neditor: visual \n---\nQuarto supports various format types, such as HTML, PDF, and Word documents. In this course, we will focus exclusively on HTML. The example below demonstrates how you can modify the YAML to include a table of contents (toc). The YAML provided below highlights several options available for HTML output.\n---\ntitle: \"This is my descriptive title\"\nauthor: \"Horacio Lopez-Nicora\"\ndate: today\ndate-format: long\nformat:\n  html:\n    toc: true\n---\nA full list of HTML format options can be found at the HTML Options page on the quarto website."
  },
  {
    "objectID": "posts/S08E07_reprod_02/index.html#text",
    "href": "posts/S08E07_reprod_02/index.html#text",
    "title": "Reproducibility 2: Introduction to Quarto",
    "section": "4.2 Text",
    "text": "4.2 Text\nBy default, a Quarto document opens in Visual Editor mode. This user-friendly visual interface resembles writing in programs like Word or Google Docs, offering options for clickable buttons such as Bold (or keyboard shortcut ‚åòB), Italicize (or keyboard shortcut ‚åòI), and adding bulleted lists, among others.\nAlternatively, switching to Source Editor mode provides a text-based editor where these buttons are not available. In this mode, familiarity with Markdown syntax is necessary.\n\n\n\n\n\n\nTip\n\n\n\nMarkdown Syntax: see cheatsheet here:https://www.markdownguide.org/cheat-sheet/) or in RStudio Help &gt; Markdown Quick Reference."
  },
  {
    "objectID": "posts/S08E07_reprod_02/index.html#code",
    "href": "posts/S08E07_reprod_02/index.html#code",
    "title": "Reproducibility 2: Introduction to Quarto",
    "section": "4.3 Code",
    "text": "4.3 Code\nCode chunks are sections of your Quarto document designated for executing code. To insert a new code chunk, you can:\n\nUse the keyboard shortcut Cmd + Option + I (Mac) or Ctrl + Alt + I (Windows).\nType ```{r} to start the chunk and ``` to end it, placing your code in between.\nUse the ‚ÄúAdd Chunk‚Äù command from the editor toolbar and select R.\n\nCode chunks appear as follows:\n\n\n\n\n\nYou place your code on the empty line within the chunk. You can include multiple lines of code in a single chunk; however, if you find yourself needing to scroll through the chunk, it might be too lengthy.\n\nThe gear icon allows you to modify chunk options, which we will discuss in more detail later.\nThe triangle with a line below it executes all code chunks that precede the current one.\nThe play button runs the current chunk.\n\nYou can also include comments within a code chunk by using the # symbol to comment them out.\n# A very interesting comment\nSuper_Code()\n\n\n\n\n\n\nWarning\n\n\n\nWhen you render your Quarto document, the process will execute all the code within it. This means that if your code contains errors or doesn‚Äôt function properly, your document will not be rendered.\n\n\nIn Quarto, you can use inline code to embed code directly within your document‚Äôs text. To apply this syntax, simply enclose the expression in backticks. For example:\nThe sum of 6 and 6 is 12. In this case, 12 was generated with the following inline code `r 6+6`.\n\n4.3.1 Enhancing Your Code Chunks with Options\nYou can enhance your code chunks by adding options using #|. This provides R with further instructions on executing your code and compiling your document. HERE are some common examples.\n{r}\n#| eval: FALSE\n#| echo: TRUE\n#| code-fold: TRUE\n\n6 + 6\nThis occurs after the code chunk is rendered.\n\n\nCode\n6 + 6"
  },
  {
    "objectID": "posts/S08E07_reprod_02/index.html#practice-2",
    "href": "posts/S08E07_reprod_02/index.html#practice-2",
    "title": "Reproducibility 2: Introduction to Quarto",
    "section": "4.4 Practice",
    "text": "4.4 Practice\nNow, let‚Äôs edit our Quarto document.\n\nIn your Quarto document‚Äôs YAML section, include a subtitle and specify a date format. Additionally, enable a table of contents for improved navigation.\nMake use of the Visual editor to draft text. Regularly switch between the visual and source editors to familiarize yourself with RMarkdown.\nIntegrate code chunks while configuring them with the following options: execute the code but hide the code itself in the output."
  },
  {
    "objectID": "posts/S09E05_maps_01/index.html#intro",
    "href": "posts/S09E05_maps_01/index.html#intro",
    "title": "Plotting geographical maps in R: part I",
    "section": "1 Intro",
    "text": "1 Intro\nToday is the first of three Code Club sessions on making maps with R. We will:\n\nPlot maps of various regions and learn how to format them (part I, today)\nAdd points/markers and text (part II)\nMake ‚Äúchoropleth‚Äù maps, where areas are colored depending on a variable like mean temperature (part III)\nUse different map backgrounds, like those of Google Maps, and make interactive maps (part IV??)\n\nThis content builds to some extent on the previous series of sessions on making plots with ggplot2, as we will mainly use this package to make maps.\n\nSetting up\nWe‚Äôll load the entire tidyverse because we‚Äôll be using functions from dplyr as well as today‚Äôs main package, ggplot2. You probably have the tidyverse installed already, but if not, run:\n\n# Only run this if you have not yet installed the tidyverse\ninstall.packages(\"tidyverse\")\n\nAnd to actually load it:\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.4     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nWe will also need to install two spatial packages:\n\ninstall.packages(\"maps\")\ninstall.packages(\"sf\")\n\nWe don‚Äôt need to load these, they are used in the ‚Äúbackground‚Äù by some of the ggplot functions we‚Äôll use."
  },
  {
    "objectID": "posts/S09E05_maps_01/index.html#basic-maps",
    "href": "posts/S09E05_maps_01/index.html#basic-maps",
    "title": "Plotting geographical maps in R: part I",
    "section": "2 Basic maps",
    "text": "2 Basic maps\n\nMap data to draw states in the US\nWhen plotting maps, we typically need a base map that has outlines like administrative borders and coastlines. For today‚Äôs maps, we will get this type of map data through ggplot2‚Äôs map_data() function.\nLet‚Äôs get a dataframe with the outlines of the lower 48 states of the US (i.e., without Alaska and Hawaii), and take a look at what it contains:\n\nstates &lt;- map_data(map = \"state\")\n\nhead(states)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\n\nEach row in this dataframe makes up a single point along the outline of a state:\n\nThe long and lat columns contain longitudes and latitudes in decimal format. In the US, all longitudes are negative as we are west of the prime meridian that runs through the UK, and all latitudes are positive as we are north of the equator.\nThe group column groups the rows (points) into shapes/‚Äúpolygons‚Äù that outline the borders of a state, or in some cases, parts of a state1. (This is complemented by the order column which provides the drawing order.)\nThe region column contains the name of the state that the point applies to.\n\n\n\n\nRecall: latitude (left) determines the position along the north-south axis, and longitude (right) the position along the east-west axis. Source: Wikipedia\n\n\n\n\n\nOur first map\nTo make a first map, we pass our dataframe to ggplot as per usual, and then use the geom geom_polygon() to draw the polygons that make up the states, mapping:\n\nLongitude (long, east-west axis) to the x aesthetic\nLatitude (lat, north-south axis) to the y aesthetic\n\n\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat))\n\n\n\n\nThat doesn‚Äôt look so good ‚Äì what could be the problem here?\nWe need to tell ggplot which groups of points together form discrete shapes like an individual state‚Äôs outline, and can do so by additionally mapping our data frame‚Äôs group column to the plot‚Äôs group aesthetic:\n\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat, group = group))\n\n\n\n\nMuch better!\n\n\n\nMap projections\nWhen creating maps, especially for large geographic areas like the world, continents, or big countries like the US, you need to consider the ‚Äúprojection‚Äù. We will not go into the details of map projections here, but will note that:\n\nDifferent projections are suitable for different geographic areas\nThe ggplot function coord_sf() sets a geographic coordinate system for the plot and with its argument crs (Coordinate Reference System, CRS), we can set the specific projection.\nCRS projections have numbers, e.g.:\n\n5070 is a projection suitable for the lower 48\n4326 is what GPS coordinates like those in our states dataframe are based on\n\nBelow, we‚Äôll use coord_sf(crs = 5070, default_crs = 4326), to state that:\n\nWe want to plot the map with the 5070 CRS\nOur data has 4326-style GPS coordinates\n\n\nIn the map below, note the curvature of especially the latitudinal lines, which our previous maps didn‚Äôt have:\n\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat, group = group)) +\n  coord_sf(crs = 5070, default_crs = 4326)\n\n\n\n\n\n\nMap theming\nWith maps, more basic ggplot2 themes like theme_minimal() or theme_void() tend to look better since we‚Äôre often not that interested in the background panel and the axes.\n\nWith theme_minimal() ‚Äì something like this could be useful for a map in a scientific paper:\n\n\n# Code is the same as above, just with `theme_minimal()` added:\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat, group = group)) +\n  coord_sf(crs = 5070, default_crs = 4326) +\n  theme_minimal()\n\n\n\n\n\nWith theme_void(), which omits the plotting panel and axis altogether:\n\n\n# Code is the same as above, just with `theme_void()` added:\nggplot(states) +\n  geom_polygon(aes(x = long, y = lat, group = group)) +\n  coord_sf(crs = 5070, default_crs = 4326) +\n  theme_void()\n\n\n\n\nWhen you make many plots that should have similar theming, a nice ggplot trick is to set an overall theme for the entire session with the theme_set() function, and optionally modify that with the theme_update() function.\nLet‚Äôs do that here, so we don‚Äôt have to keep adding the theme_void() line to every plot ‚Äî and we‚Äôre also saying that we want any legends above the plot rather than besides it:\n\ntheme_set(theme_void())\ntheme_update(legend.position = \"top\")\n\nWe may also want to change the fill and outline colors of the states ‚Äî and let‚Äôs save this map as an object p so we can build on it in the next section:\n\np &lt;- ggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey85\",\n    color = \"grey40\",\n    linewidth = 0.1\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)\n\np\n\n\n\n\n\n\n Exercise\nA) Create a map that does not have visible state lines. While you‚Äôre at it, you can also play around with the settings inside geom_polygon() to get a map look that you like ‚Äî or one that you hate, just for the fun of it. And how about a map with a blue panel background? After all, most (but not all) of the area surrounding the US is water.\n\n\nClick here for hints\n\n\nIf the fill and color(=outlines) colors are assigned the same color, no state lines will be visible.\nYou can set the panel background (which in this case is the area around the US stated) with theme(panel.background = element_rect(...)).\n\n\n\n\nClick here to see some examples\n\n\nYou can make sure that the state lines aren‚Äôt visible by providing the same color for the color and fill aesthetics:\n\n\nggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"palevioletred\",\n    color = \"palevioletred\"\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)\n\n\n\n\n\nWhy should the map look good, anyway?\n\n\nggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"lightblue\",\n    color = \"darkred\",\n    linewidth = 1\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)\n\n\n\n\n\nA blue panel background:\n\n\nggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey85\",\n    color = \"grey40\",\n    linewidth = 0.1\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326) +\n  theme(\n    panel.background = element_rect(fill = \"dodgerblue\", color = \"grey20\")\n    )\n\n\n\n\n\nB) Still using the states dataframe as a starting point, can you make a map that only shows Ohio? And/or another state, or a combination of neighboring states that you would like to see?\n\n\nClick here to see hints\n\n\nRather than trying to zoom in by setting different axis limits, try to use filter() to subset states to only Ohio (and/or other states) before you pass the data to ggplot().\nWhen plotting individual states, our current CFS does not look that great as states are ‚Äútilted‚Äù. When you‚Äôre not interested in looking up a correct projection, just adding coord_sf() with no arguments can give a reasonable look.\n\n\n\n\nClick here to see some examples\n\n\nWhat are the state names like? Turns out they are all in lowercase:\n\n\nunique(states$region)\n\n [1] \"alabama\"              \"arizona\"              \"arkansas\"            \n [4] \"california\"           \"colorado\"             \"connecticut\"         \n [7] \"delaware\"             \"district of columbia\" \"florida\"             \n[10] \"georgia\"              \"idaho\"                \"illinois\"            \n[13] \"indiana\"              \"iowa\"                 \"kansas\"              \n[16] \"kentucky\"             \"louisiana\"            \"maine\"               \n[19] \"maryland\"             \"massachusetts\"        \"michigan\"            \n[22] \"minnesota\"            \"mississippi\"          \"missouri\"            \n[25] \"montana\"              \"nebraska\"             \"nevada\"              \n[28] \"new hampshire\"        \"new jersey\"           \"new mexico\"          \n[31] \"new york\"             \"north carolina\"       \"north dakota\"        \n[34] \"ohio\"                 \"oklahoma\"             \"oregon\"              \n[37] \"pennsylvania\"         \"rhode island\"         \"south carolina\"      \n[40] \"south dakota\"         \"tennessee\"            \"texas\"               \n[43] \"utah\"                 \"vermont\"              \"virginia\"            \n[46] \"washington\"           \"west virginia\"        \"wisconsin\"           \n[49] \"wyoming\"             \n\n\n\nPlotting only Ohio ‚Äì first use filter() to only keep the outline for the state of Ohio, then plot like before:\n\n\nstates |&gt;\n  filter(region == \"ohio\") |&gt; \n  ggplot() +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"skyblue\",\n    color = \"grey40\",\n    linewidth = 0.5\n    ) +\n  coord_sf()\n\n\n\n\n\nPlotting Ohio along with two neighboring states:\n\n\nstates |&gt;\n  filter(region %in% c(\"ohio\", \"indiana\", \"michigan\")) |&gt; \n  ggplot() +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"azure4\",\n    color = \"grey40\",\n    linewidth = 0.5\n    ) +\n  coord_sf()\n\n\n\n\n\n\n\n\nZooming in\nIn the exercise above, we plotted only Ohio by filtering the input data frame. Alternatively, we may want to zoom in to a region without considering administrative borders. We can do so with the xlim and ylim arguments of coord_sf():\n\nggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey85\",\n    color = \"grey40\",\n    linewidth = 0.2\n    ) +\n  # Set the x and y limits inside coord_sf:\n  coord_sf(xlim = c(-79, -89), ylim = c(35, 45)) +\n  # We may now want to draw a border around the plot since we're cutting of\n  # landmasses:\n  theme(\n    panel.border = element_rect(fill = NA, color = \"grey20\", linewidth = 0.5)\n    )"
  },
  {
    "objectID": "posts/S09E05_maps_01/index.html#footnotes",
    "href": "posts/S09E05_maps_01/index.html#footnotes",
    "title": "Plotting geographical maps in R: part I",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n Michigan for example, has a polygon for the lower part of the state, and one for the Upper Peninsula.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S09E13_gt_03/index.html#introduction",
    "href": "posts/S09E13_gt_03/index.html#introduction",
    "title": "Introduction to gt Tables - 03",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nOverview\nIn the final session of our gt tutorial series, we‚Äôll explore how to take your tables to the next level using the gtExtras package. You‚Äôll learn how to add sparklines, color scales, bar and density plots, and visual summaries. Additionally, you will learn how to save your polished tables as PNG, PDF, or HTML for use in reports and presentations. Let‚Äôs get started!\n\n\nRecall the gt Tables Workflow\n\n\n\n\n\n\nPlease let‚Äôs go ahead and install the gt, gtExtras, and svglite package first:\n\ninstall.packages(\"gt\")\nlibrary(gt)\n\ninstall.packages(\"gtExtras\")\nlibrary(gtExtras)\n\ninstall.packages(\"svglite\")\nlibrary(svglite)"
  },
  {
    "objectID": "posts/S09E13_gt_03/index.html#our-data-set",
    "href": "posts/S09E13_gt_03/index.html#our-data-set",
    "title": "Introduction to gt Tables - 03",
    "section": "2 Our data set",
    "text": "2 Our data set\n\nWe will use the palmerpenguins data set\n\n\n\nIllustration by Allison Horst\n\n\nWe are going to continue using our üêß data set from the package palmerpenguins. If you haven‚Äôt done so, please install that package first:\n\ninstall.packages(\"palmerpenguins\")\n\npalmerpenguins is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.¬†Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.\nWe‚Äôll now load the package, along with the gt and tidyverse:\n\n# Load necessary packages\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(svglite)\nlibrary(palmerpenguins)\n\nOnce you‚Äôve loaded that package you will have a data frame called penguins at your disposal ‚Äî let‚Äôs take a look:\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ‚Ñπ 334 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S09E13_gt_03/index.html#color-coding-with-gt_color_rows",
    "href": "posts/S09E13_gt_03/index.html#color-coding-with-gt_color_rows",
    "title": "Introduction to gt Tables - 03",
    "section": "3 Color-Coding with gt_color_rows()",
    "text": "3 Color-Coding with gt_color_rows()\nThe gt_color_rows() function transforms your tables from plain data displays into intuitive visual insights by applying gradient color scales to numerical columns. This powerful feature enables readers to instantly identify patterns, outliers, and value distributions without requiring careful examination of each number, making complex data relationships immediately apparent through color intensity.\nIn addition to using color-coding with gt_color_rows(), we‚Äôll also implement gt_theme() to create a consistent and professional visual style for our tables, ensuring they align with our overall design aesthetic.\n\n# Summarize data\npenguins_summary &lt;- penguins %&gt;%\n  filter(!is.na(bill_length_mm), !is.na(flipper_length_mm), !is.na(body_mass_g)) %&gt;%\n  group_by(species) %&gt;%\n  summarize(\n    Mean_Bill_Length = mean(bill_length_mm),\n    Mean_Flipper_Length = mean(flipper_length_mm),\n    Mean_Body_Mass = mean(body_mass_g),\n    .groups = \"drop\"\n  )\n\n# Create styled table\npenguins_summary %&gt;%\n  gt() %&gt;%\n  fmt_number(everything(), decimals = 1) %&gt;%\n  tab_header(\n    title = \"Penguin Species Summary\",\n    subtitle = \"Mean values for bill length, flipper length, and body mass\"\n  ) %&gt;%\n  gt_theme_538() %&gt;% \n  gt_color_rows(\n    columns = Mean_Bill_Length,\n    palette = \"ggsci::orange_material\"\n  )\n\n\n\n\n\n  \n    \n      Penguin Species Summary\n    \n    \n      Mean values for bill length, flipper length, and body mass\n    \n    \n      species\n      Mean_Bill_Length\n      Mean_Flipper_Length\n      Mean_Body_Mass\n    \n  \n  \n    Adelie\n38.8\n190.0\n3,700.7\n    Chinstrap\n48.8\n195.8\n3,733.1\n    Gentoo\n47.5\n217.2\n5,076.0\n  \n  \n  \n\n\n\n\n\n\n Exercise 1\n\nUsing penguins_summary, create a similar table using a different gt_theme(), try for instance gt_theme_nytimes() or gt_theme_dot_matrix(). Additionally, try changing the palette to ‚Äúggsci::blue_material‚Äù or ‚Äúviridis‚Äù.\nFinally, apply the gt_color_rows() to the three columns: Mean_Bill_Length, Mean_Flipper_Length, and Mean_Body_Mass.\n\n\n\nHint (click here)\n\nUse the c() function after columns =.\n\n\n\nSolutions (click here)\n\n\npenguins_summary %&gt;%\n  gt() %&gt;%\n  fmt_number(everything(), decimals = 1) %&gt;%\n  tab_header(\n    title = \"Penguin Species Summary\",\n    subtitle = \"Mean values for bill length, flipper length, and body mass\"\n  ) %&gt;%\n  gt_theme_538() %&gt;% \n  gt_color_rows(\n    columns = c(Mean_Bill_Length, Mean_Flipper_Length, Mean_Body_Mass),\n    palette = \"ggsci::blue_material\"\n  )\n\n\n\n\n\n  \n    \n      Penguin Species Summary\n    \n    \n      Mean values for bill length, flipper length, and body mass\n    \n    \n      species\n      Mean_Bill_Length\n      Mean_Flipper_Length\n      Mean_Body_Mass\n    \n  \n  \n    Adelie\n38.8\n190.0\n3,700.7\n    Chinstrap\n48.8\n195.8\n3,733.1\n    Gentoo\n47.5\n217.2\n5,076.0"
  },
  {
    "objectID": "posts/S09E13_gt_03/index.html#merging-and-labeling-columns",
    "href": "posts/S09E13_gt_03/index.html#merging-and-labeling-columns",
    "title": "Introduction to gt Tables - 03",
    "section": "4 Merging and Labeling Columns",
    "text": "4 Merging and Labeling Columns\nThe cols_merge() and cols_label() functions provide essential tools for transforming cluttered tables into more digestible and professional displays. By strategically combining related columns and implementing clear, descriptive labels, you‚Äôll create tables that communicate your data‚Äôs story more effectively while reducing visual complexity.\n\n# generating the data set\npenguins_stats &lt;- penguins %&gt;%\n  filter(!is.na(sex), !is.na(bill_length_mm)) %&gt;%\n  group_by(species, sex) %&gt;%\n  summarize(\n    Mean_Bill = mean(bill_length_mm),\n    SD_Bill = sd(bill_length_mm),\n    .groups = \"drop\"\n  )\n\n# Merging and labeling columns\npenguins_stats %&gt;%\n  gt() %&gt;%\n  cols_merge(\n    columns = c(Mean_Bill, SD_Bill),\n    pattern = \"{1} ¬± {2}\"\n  ) %&gt;%\n  fmt_number(columns = \"Mean_Bill\", decimals = 1) %&gt;%\n  fmt_number(columns = \"SD_Bill\", decimals = 2) %&gt;%\n  cols_label(\n    species = \"Species\",\n    sex = \"Sex\",\n    Mean_Bill = \"Mean ¬± SD\"\n  ) %&gt;%\n  tab_header(\n    title = \"Bill Length (mm) by Species and Sex\"\n  ) %&gt;% \n  tab_options(\n    table.width = pct(70)\n    ) %&gt;% \n  gt_theme_538()\n\n\n\n\n\n  \n    \n      Bill Length (mm) by Species and Sex\n    \n    \n    \n      Species\n      Sex\n      Mean ¬± SD\n    \n  \n  \n    Adelie\nfemale\n37.3 ¬± 2.03\n    Adelie\nmale\n40.4 ¬± 2.28\n    Chinstrap\nfemale\n46.6 ¬± 3.11\n    Chinstrap\nmale\n51.1 ¬± 1.56\n    Gentoo\nfemale\n45.6 ¬± 2.05\n    Gentoo\nmale\n49.5 ¬± 2.72\n  \n  \n  \n\n\n\n\n\n\n Exercise 2\n\nCreate the same table we produced earlier with the penguins_stats data set. This time, format all column labels and the heading in BOLD to enhance readability.\nFormat both the mean and standard deviation values to display with 1 decimal place (using decimals = 1). Instead of specifying each column individually, use the ends_with() function to select and format all relevant columns at once.\n\n\n\nSolutions (click here)\n\n\npenguins_stats %&gt;%\n  gt() %&gt;%\n  cols_merge(\n    columns = c(Mean_Bill, SD_Bill),\n    pattern = \"{1} ¬± {2}\"\n  ) %&gt;%\n  fmt_number(columns = ends_with(\"Bill\"), decimals = 1) %&gt;%\n  cols_label(\n    species = md(\"**Species**\"),\n    sex = md(\"**Sex**\"),\n    Mean_Bill = md(\"**Mean ¬± SD**\")\n  ) %&gt;%\n  tab_header(\n    title = md(\"**Bill Length (mm) by Species and Sex**\")\n  ) %&gt;% \n  tab_options(\n    table.width = pct(70)\n    ) %&gt;% \n  gt_theme_nytimes()\n\n\n\n\n\n  \n    \n      Bill Length (mm) by Species and Sex\n    \n    \n    \n      Species\n      Sex\n      Mean ¬± SD\n    \n  \n  \n    Adelie\nfemale\n37.3 ¬± 2.0\n    Adelie\nmale\n40.4 ¬± 2.3\n    Chinstrap\nfemale\n46.6 ¬± 3.1\n    Chinstrap\nmale\n51.1 ¬± 1.6\n    Gentoo\nfemale\n45.6 ¬± 2.1\n    Gentoo\nmale\n49.5 ¬± 2.7"
  },
  {
    "objectID": "posts/S09E13_gt_03/index.html#add-inline-bar-plots-with-gt_plt_bar_pct",
    "href": "posts/S09E13_gt_03/index.html#add-inline-bar-plots-with-gt_plt_bar_pct",
    "title": "Introduction to gt Tables - 03",
    "section": "5 Add Inline Bar Plots with gt_plt_bar_pct()",
    "text": "5 Add Inline Bar Plots with gt_plt_bar_pct()\nThe gt_plt_bar_pct() function transforms ordinary numeric data into compelling visual elements by embedding miniature bar charts directly alongside your values. These inline visualizations instantly communicate proportional relationships within your data, allowing readers to grasp relative magnitudes at a glance without the need for mental calculations or separate charts.\n\npenguins %&gt;%\n  count(species, island) %&gt;%\n  group_by(island) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  gt() %&gt;%\n  gt_plt_bar_pct(column = prop, labels = TRUE) %&gt;%\n  tab_header(\n    title = \"Species Proportions by Island\",\n    subtitle = \"Inline bar chart with percentage labels\"\n  )\n\n\n\n\n\n  \n    \n    \n    \n  \n  \n    \n      Species Proportions by Island\n    \n    \n      Inline bar chart with percentage labels\n    \n    \n      species\n      n\n      prop\n    \n  \n  \n    \n      Biscoe\n    \n    Adelie\n44\n26.2%\n    Gentoo\n124\n73.8%\n    \n      Dream\n    \n    Adelie\n56\n45.2%\n    Chinstrap\n68\n54.8%\n    \n      Torgersen\n    \n    Adelie\n52\n100%"
  },
  {
    "objectID": "posts/S09E13_gt_03/index.html#add-sparklines-with-gt_plt_sparkline",
    "href": "posts/S09E13_gt_03/index.html#add-sparklines-with-gt_plt_sparkline",
    "title": "Introduction to gt Tables - 03",
    "section": "6 Add Sparklines with gt_plt_sparkline()",
    "text": "6 Add Sparklines with gt_plt_sparkline()\nThe gt_plt_sparkline() function elevates your tables by embedding miniature data visualizations directly within cells, allowing readers to grasp trends and distributions at a glance without separate charts. These compact graphical elements provide powerful contextual information alongside your numeric data, transforming static tables into dynamic, information-rich displays that reveal patterns that might otherwise remain hidden in rows of numbers.\n\npenguins %&gt;%\n  filter(!is.na(flipper_length_mm)) %&gt;%\n  group_by(species, island) %&gt;%\n  summarise(flipper_mean = mean(flipper_length_mm), \n            flipper_dist = list(flipper_length_mm), .groups = \"drop\") %&gt;%\n  gt() %&gt;%\n  fmt_number(flipper_mean, decimals = 1) %&gt;% \n  gt_plt_sparkline(flipper_dist) %&gt;%\n  tab_header(\n    title = \"Flipper Length Distribution\",\n    subtitle = \"Sparklines show data spread by species and island\"\n  )\n\n\n\n\n\n  \n    \n      Flipper Length Distribution\n    \n    \n      Sparklines show data spread by species and island\n    \n    \n      species\n      island\n      flipper_mean\n      flipper_dist\n    \n  \n  \n    Adelie\nBiscoe\n188.8\n          196.0\n    Adelie\nDream\n189.7\n          201.0\n    Adelie\nTorgersen\n191.2\n          197.0\n    Chinstrap\nDream\n195.8\n          198.0\n    Gentoo\nBiscoe\n217.2\n          213.0"
  },
  {
    "objectID": "posts/S09E13_gt_03/index.html#add-density-plots-with-gt_plt_dist",
    "href": "posts/S09E13_gt_03/index.html#add-density-plots-with-gt_plt_dist",
    "title": "Introduction to gt Tables - 03",
    "section": "7 Add density plots with gt_plt_dist()",
    "text": "7 Add density plots with gt_plt_dist()\nThe gt_plt_dist() function elevates your tables by embedding compact density plots directly alongside your numeric data, providing immediate visual context for distributions. These inline visualizations allow readers to quickly grasp the shape and spread of your data without needing to reference separate charts, creating a more comprehensive and insightful table that combines both precise values and their distributional patterns.\n\npenguins %&gt;% filter(!is.na(flipper_length_mm), !is.na(body_mass_g), !is.na(species)) %&gt;% \n  group_by(species) %&gt;%\n  summarise(\n    dist = list(body_mass_g)\n  ) %&gt;%\n  gt() %&gt;%\n  gt_plt_dist(dist, type = \"density\", fill = \"lightblue\") %&gt;%\n  cols_label(\n    dist = \"Density Plot\"\n  ) %&gt;%\n  tab_header(title = \"Average Body Mass and Distribution\")\n\n\n\n\n\n  \n    \n      Average Body Mass and Distribution\n    \n    \n    \n      species\n      Density Plot\n    \n  \n  \n    Adelie\n          \n    Chinstrap\n          \n    Gentoo\n          \n  \n  \n  \n\n\n\n\n\n\n Exercise 3\n\nCreate a table displaying the average body mass (in grams and one decimal place) for each of the three penguin species, accompanied by density plots that visualize the distribution of mass values. This combination will allow for both precise numeric comparison and visual analysis of how the masses are distributed within each species.\n\n\n\nSolutions (click here)\n\n\ntable_density &lt;-  penguins %&gt;% filter(!is.na(flipper_length_mm), !is.na(body_mass_g), !is.na(species)) %&gt;% \n  group_by(species) %&gt;%\n  summarise(\n    avg_mass = mean(body_mass_g),\n    dist = list(body_mass_g)\n  ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = avg_mass, decimals = 1) %&gt;% \n  gt_plt_dist(dist, type = \"density\", fill = \"lightblue\") %&gt;%\n  cols_label(\n    species = \"Species\",\n    avg_mass = \"Avg Mass (g)\",\n    dist = \"Density Plot\"\n  ) %&gt;%\n  tab_header(title = \"Average Body Mass and Distribution\")"
  },
  {
    "objectID": "posts/S09E13_gt_03/index.html#save-your-table",
    "href": "posts/S09E13_gt_03/index.html#save-your-table",
    "title": "Introduction to gt Tables - 03",
    "section": "8 SAVE YOUR TABLE",
    "text": "8 SAVE YOUR TABLE\nMake sure the following packages are installed:\n\ninstall.packages(\"webshot2\")\nlibrary(webshot2)\n\n\n# SAVE AS .PNG\ngtsave(table_density, \"table_density.png\")\n\n# SAVE AS .PDF\ngtsave(table_density, \"table_density.pdf\")\n\n# SAVE AS .HTML\ngtsave(table_density, \"table_density.html\")\n\n# BONUS - saving multiple formats in one go:\nwalk(\n  c(\"png\", \"pdf\", \"html\"),\n  ~gtsave(table_density, filename = paste0(\"table_density.\", .x))\n)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to the new Code Club website!",
    "section": "",
    "text": "Code Club has a new website, made with Quarto!\nWe were previously on the ‚ÄúBioDASH‚Äù website, which also contained some educational bioinformatics material unrelated to Code Club.\nThat website was created using R Markdown and ‚ÄúHugo‚Äù. A lot has happened in the realm of R Markdown websites in the meantime, and even R Markdown itself now has a successor: Quarto.\nIn the AU23 semester, we will teach making a website with Quarto, and we therefore think it is fitting that the Code Club website itself is also made with Quarto. Additionally, we think it will be nice to have a website just for Code Club content.\nIn the SP24 semester, we will be teaching the basics of R from the beginning, no previous experience required.\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/S08E06_reprod_01/index.html#introduction-a-series-on-reproducibility",
    "href": "posts/S08E06_reprod_01/index.html#introduction-a-series-on-reproducibility",
    "title": "Reproducibility 1:  Intro, File Organization, and RStudio Projects",
    "section": "1 Introduction: A series on reproducibility",
    "text": "1 Introduction: A series on reproducibility\nToday is the first of a series of 6 Code Club sessions that will cover several topics under the umbrella of ‚Äúreproducibility‚Äù.\nWhat do we mean by reproducibility? Your research is reproducible when third parties are able to perform the same analysis on your data, and produce the same results.\nReproducibility is perhaps a low bar compared to the related concept of replicability, which is the ability to produce the same (qualitative) results when applying the same analysis to different data. Here is a helpful table showing these two and two other related concepts:\n\n\n\nFrom The Turing Way\n\n\nFor example:\n\nSay that you‚Äôve written a paper in which you present the results of one of your research projects. When this research is fully reproducible, it means that someone else should be able to be able to run the exact same analysis and produce all the results and figures using your paper and its associated documentation.\nRelatedly, when you work in a reproducible manner and you abandon an analysis for say two years, you will be able to pick up from where you left off without much trouble.\n\n\n\nUsing R is already a big step in the right direction!\n\n‚ÄúThe most basic principle for reproducible research is: Do everything via code.‚Äù ‚ÄîKarl Broman, University of Wisconsin-Madison\n\nIt is inherently more reproducible to write code, such as in R, as opposed to clicking around in a program with a Graphical User Interface (GUI).\nIn addition, R is open source and freely available. If you use a proprietary program that requires an expensive license, your work may be reproducible in principle, but won‚Äôt be in practice for many people.\n\n\n\nAdditional aspects & the plan for this series\nResearch that is fully reproducible should use a set of tools and best-practice related to:\n\nFile organization\nFile version management\nProject documentation\nCode style and organization\nData and code sharing\nSoftware management\n\nThis series of Code Club sessions will not extensively cover the above, but we will cover three topics that touch on all of them:\n\nFile organization and ‚ÄúRStudio Projects‚Äù (today)\nCombining code and text (‚Äúliterate programming‚Äù) with Quarto (sessions 2 and 3)\nFile version control and code sharing with Git and GitHub (sessions 4 and 5)\nUsing RStudio at OSC (session 6, part I)\nR version & package management (session 6, part II)"
  },
  {
    "objectID": "posts/S08E06_reprod_01/index.html#research-project-file-organization",
    "href": "posts/S08E06_reprod_01/index.html#research-project-file-organization",
    "title": "Reproducibility 1:  Intro, File Organization, and RStudio Projects",
    "section": "2 Research project file organization",
    "text": "2 Research project file organization\n\nRecommendation 1: Use one folder hierarchy for one project\nUsing one folder, or really a hierarchy of folders, for one project means that you:\n\nDon‚Äôt mix files for multiple distinct projects inside one folder.\nDon‚Äôt keep files for one project in multiple places.\n\nFor example:\n\n\n\nTwo project folder hierarchies, nicely separated and self-contained.\n\n\n\nWhen you have a single folder hierarchy for each project, it is:\n\nEasier to find files and to share your project, harder to accidentally throw away stuff, etc.\nPossible to use relative paths within a project‚Äôs scripts, which improves reproducibility (see below).\n\n\n\n\nRecommendation 2: Separate different kinds of files using a consistent subfolder structure\nWithin your project‚Äôs directory hierarchy:\n\nSeparate code from data.\nSeparate raw data from processed data and from results.\n\nAlso:\n\nTreat raw data as read-only.\nTreat generated output as somewhat disposable and as possible to regenerate.\n\n\nFor example, here is one good way of organizing a (bioinformatics) research project:"
  },
  {
    "objectID": "posts/S08E06_reprod_01/index.html#directories-and-paths",
    "href": "posts/S08E06_reprod_01/index.html#directories-and-paths",
    "title": "Reproducibility 1:  Intro, File Organization, and RStudio Projects",
    "section": "3 Directories and paths",
    "text": "3 Directories and paths\nFirst, ‚Äúdirectory‚Äù (‚Äúdir‚Äù for short) is just another word for folder that you will see commonly used for anything coding-related.\nSecond, your ‚Äúworking directory‚Äù is the directory where you are currently located. When you open R (or Python, or a Terminal, etc.), it will always have a starting point at a specific location in your computer1.\nThere are functions to change your working dir as well as ways to refer to any location on the computer regardless of whether you are there. That brings us to the third term, path, which is a specification of the location of a file or folder on the computer.\nThe key concept here is that folders are separated by slashes ‚Äì forward slashes in Mac and Linux, for example:\n/Users/John Doe/Desktop/cats.png\n‚Ä¶and backward slashes in Windows, for example:\nC:\\Users\\John Doe\\Desktop\\cats.png\nThere are two types of paths:\n\nAbsolute paths start from a root (top-level) directory, and correctly point to a file or folder regardless of what your working dir is. If you think of a path as a way to point to a geographic location, then absolute paths are like GPS coordinates. The two paths above are examples of absolute (or ‚Äúfull‚Äù) paths.\nRelative paths start from a specific working dir (and won‚Äôt work if you‚Äôre elsewhere). If you think of a path as a way to point to a geographic location, then relative paths are like directions like ‚ÄúTake the second left‚Äù. For example:\n\nresults/fastqc/sampleA.html\n\n\n\nCould a file name by itself, like myscript.R, be considered a path? If so, what kind, and what is the implied location of the file?\n\nA file name that does not include a folder, like myscript.R, can indeed be considered a path: a relative path that assumes the file is in your current working directory.\n\n\n\nDon‚Äôt absolute paths sound better? What could be a disadvantage of them?\n\nAbsolute paths:\n\nDon‚Äôt generally work across computers\nBreak when your move a project folder hierarchy to a a different place on your computer\n\nOn the other hand, relative paths that use the root of the project folder hierarchy as the working dir, also work when moving the folder within and between computers.\n\n\n\n\nTwo project dir hierarchies, and the absolute and relative path to a (FASTQ) file.\n\n\n\n\n\n\nNow everything was moved into Dropbox.The absolute path has changed, but the relative path remains the same."
  },
  {
    "objectID": "posts/S08E06_reprod_01/index.html#getting-and-setting-the-working-directory-in-r",
    "href": "posts/S08E06_reprod_01/index.html#getting-and-setting-the-working-directory-in-r",
    "title": "Reproducibility 1:  Intro, File Organization, and RStudio Projects",
    "section": "4 Getting and setting the working directory in R",
    "text": "4 Getting and setting the working directory in R\nIn R, we can see what our working directory is using the function getwd() (short for ‚Äúget working dir‚Äù):\n\ngetwd()\n\n[1] \"/Users/jessicacooperstone/Library/CloudStorage/OneDrive-TheOhioStateUniversity/BuckeyeBox Data/JLC_Files/OSU/research/code club/osu-codeclub.github.io/posts/S08E06_reprod_01\"\n\n\nYou can see that the output path is MY working directory ‚Äì yours will be different as the set up of your computer organization structure is different from mine (and recall that you will see backslashes if you have Windows).\nYou can change (set) your working directory using the function setwd():\n\nsetwd(\"/this/should/be/your/working-directory/path\")"
  },
  {
    "objectID": "posts/S08E06_reprod_01/index.html#use-an-rstudio-project-instead",
    "href": "posts/S08E06_reprod_01/index.html#use-an-rstudio-project-instead",
    "title": "Reproducibility 1:  Intro, File Organization, and RStudio Projects",
    "section": "5 Use an RStudio Project instead!",
    "text": "5 Use an RStudio Project instead!\nRStudio Projects are an RStudio-specific concept that create a special file (.Rproj), primarily to designate a directory as the working directory for everything within it, and to make it easy to switch between projects.\n\n\nCreate an RStudio Project for Code Club\n\nYou may already have a folder on your computer for all things Code Club. If not, please create one now. You can do this outside of R in your regular file browser (or if you feel adventurous you can use the R function dir.create(), e.g.¬†dir.create(\"path/to/your/dir\")).\nClick File (top menu bar) &gt; New Project, and then select Existing Directory. Select the folder for Code Club that you created in the previous step.\n\nAfter RStudio automatically reloads, the R working directory will be set to the place where your RStudio Project file is located.\nTherefore, you should see the file ending in .Rproj in the RStudio Files tab in the lower right pane. Also, you can check your working dir:\n\ngetwd()\n\n\n\n\nWhy RStudio Projects are useful\nIn brief, RStudio Projects help you to organize your work and make it more reproducible:\n\nWhen using Projects, you can avoid manually setting your working directory and can therefore use relative file paths to refer to files within the project. This way, even if you move the project directory, or copy it to a different computer, the same paths will still work. (Just make sure your Project is in the appropriate location: in the top-level dir of your folder hierarchy for your research project or stuff like Code Club.)\nProjects encourage you to organize research projects inside self-contained folder hierarchies exactly as recommended above.\nThey record which scripts (and R Markdown files) are open in RStudio, and will reopen all of those when you reopen the project. This becomes quite handy, say, when you work on three different projects, each of which uses a number of scripts.\nAdditionally, when you switch between Projects, R will restart, which is a good thing, since you don‚Äôt want to randomly carry over objects and loaded packages across research projects."
  },
  {
    "objectID": "posts/S08E06_reprod_01/index.html#bonus-file-naming",
    "href": "posts/S08E06_reprod_01/index.html#bonus-file-naming",
    "title": "Reproducibility 1:  Intro, File Organization, and RStudio Projects",
    "section": "6 Bonus: File naming",
    "text": "6 Bonus: File naming\nWe‚Äôll go through three principles for good file names (from Jenny Bryan) ‚Äî good file names:\n\nAre machine-readable\nAre human-readable\nPlay well with default file ordering\n\n\n\nMachine-readable\nConsistent and informative naming helps you to programmatically find and process files.\n\nIn file names, provide metadata like Sample ID, date, and treatment ‚Äì with such file names, you can easily select samples from e.g.¬†a certain month or treatment:\n\nsample032_2016-05-03_low.txt\n\nsamples_soil_treatmentA_2019-01.txt\n\nAvoid spaces in file names. More generally, only use the following in file names:\n\nAlphanumeric characters A-Z, a-z, 0-9\nUnderscores _\nHyphens (dashes) -\nPeriods (dots) .\n\n\n\n\n\nHuman-readable\n\n‚ÄúName all files to reflect their content or function. For example, use names such as bird_count_table.csv, manuscript.md, or sightings_analysis.py.‚Äù\n‚Äî Wilson et al.¬†2017\n\nOne good way to combine machine- and human-readable (opinionated recommendations):\n\nUse underscores (_) to delimit units you may later want to separate on: sampleID, treatment, date.\nWithin such units, use dashes (-) to delimit words: grass-samples.\nLimit the use of periods (.) to indicate file extensions.\nGenerally avoid capitals.\n\nFor example:\nmmus001_treatmentA_filtered-by-quality.bam\nmmus001_treatmentA_filtered-by-quality.bam\n.\n.\nmmus086_treatmentA_filtered-by-quality.bam\n\n\n\nPlay well with default file ordering\n\nUse leading zeros for lexicographic sorting: sample005.\nDates should always be written as YYYY-MM-DD: 2020-10-11.\nGroup similar files together by starting with same phrase, and number scripts by execution order:\n\nDE-01_normalize.R\nDE-02_test.R\nDE-03_process-significant.R\n\n\n\n\nFurther resources\n\n‚ÄúThe Turing Way‚Äù E-book on Reproducible Research\nWilson et al.¬†2017, PLOS Computational Biology: ‚ÄúGood enough practices in scientific computing‚Äù\nKieran Healy: ‚ÄúThe Plain Person‚Äôs Guide to Plain Text Social Science‚Äù"
  },
  {
    "objectID": "posts/S08E06_reprod_01/index.html#footnotes",
    "href": "posts/S08E06_reprod_01/index.html#footnotes",
    "title": "Reproducibility 1:  Intro, File Organization, and RStudio Projects",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n You can think of this along the lines of opening a file browser (Finder / File Explorer etc.) ‚Äì it will always have a starting point, and you can move around to go to other locations.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S08E09_reprod_04/factbook_20241028.html",
    "href": "posts/S08E09_reprod_04/factbook_20241028.html",
    "title": "My first GitHub document",
    "section": "",
    "text": "Let‚Äôs add some material to our document so we can better see what our resulting documents will look like. This will also give us an opportunity to practice some of what we‚Äôve been going over in Code Club this semester.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "posts/S08E09_reprod_04/factbook_20241028.html#pivot",
    "href": "posts/S08E09_reprod_04/factbook_20241028.html#pivot",
    "title": "My first GitHub document",
    "section": "4.1 Pivot",
    "text": "4.1 Pivot\nLooks like our year columns are characters, let‚Äôs convert them to be numeric, and in the process practice pivoting.\n\nfactbook_pop_long &lt;- factbook_pop |&gt; \n  pivot_longer(cols = starts_with(\"2\"), # pick columns start with 2\n               names_to = \"year\", # take names to new col \"year\"\n               values_to = \"pop\") |&gt; # values in cells to new col \"pop\"\n  mutate(year = parse_number(year)) |&gt; # use mutate to remove extra year garbage\n  mutate(pop = as.numeric(pop)) # convert pop to be numeric\n\nglimpse(factbook_pop_long)\n\nNow that we‚Äôve cleaned that up, let‚Äôs go back wide to calculate which country had the largest percent population growth from 2000 to 2015.\nGo wide! And let‚Äôs clean up those column names at the same time.\n\nfactbook_pop_wide &lt;- factbook_pop_long |&gt; \n  pivot_wider(names_from = year, # go from long to wide data\n              values_from = pop) |&gt; \n  janitor::clean_names()"
  },
  {
    "objectID": "posts/S08E09_reprod_04/factbook_20241028.html#calculate-percent-population-growth",
    "href": "posts/S08E09_reprod_04/factbook_20241028.html#calculate-percent-population-growth",
    "title": "My first GitHub document",
    "section": "4.2 Calculate percent population growth",
    "text": "4.2 Calculate percent population growth\nLet‚Äôs now see which country had the largest percent population growth from 2000 to 2015.\n\nfactbook_pop_wide |&gt; \n  mutate(perc_pop_growth = ((x2015 - x2000)/x2000 * 100)) |&gt; \n  mutate(perc_pop_growth = round(perc_pop_growth, digits = 1)) |&gt; \n  select(country_name, perc_pop_growth, x2000, x2015) |&gt; # pull only the columns we want\n  slice_max(perc_pop_growth, n = 5) # pick top 5\n\nAnd which country had the smallest percent population growth from 2000 to 2015.\n\nfactbook_pop_wide |&gt; \n  mutate(perc_pop_growth = ((x2015 - x2000)/x2000 * 100)) |&gt; \n  select(country_name, perc_pop_growth, x2000, x2015) |&gt; # pull only the columns we want\n  slice_min(perc_pop_growth, n = 5) # pick lowest 5"
  },
  {
    "objectID": "posts/S08E10_reprod_05/factbook_20241028.html",
    "href": "posts/S08E10_reprod_05/factbook_20241028.html",
    "title": "My first GitHub document",
    "section": "",
    "text": "Let‚Äôs add some material to our document so we can better see what our resulting documents will look like. This will also give us an opportunity to practice some of what we‚Äôve been going over in Code Club this semester.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "posts/S08E10_reprod_05/factbook_20241028.html#pivot",
    "href": "posts/S08E10_reprod_05/factbook_20241028.html#pivot",
    "title": "My first GitHub document",
    "section": "4.1 Pivot",
    "text": "4.1 Pivot\nLooks like our year columns are characters, let‚Äôs convert them to be numeric, and in the process practice pivoting.\n\nfactbook_pop_long &lt;- factbook_pop |&gt; \n  pivot_longer(cols = starts_with(\"2\"), # pick columns start with 2\n               names_to = \"year\", # take names to new col \"year\"\n               values_to = \"pop\") |&gt; # values in cells to new col \"pop\"\n  mutate(year = parse_number(year)) |&gt; # use mutate to remove extra year garbage\n  mutate(pop = as.numeric(pop)) # convert pop to be numeric\n\nglimpse(factbook_pop_long)\n\nNow that we‚Äôve cleaned that up, let‚Äôs go back wide to calculate which country had the largest percent population growth from 2000 to 2015.\nGo wide! And let‚Äôs clean up those column names at the same time.\n\nfactbook_pop_wide &lt;- factbook_pop_long |&gt; \n  pivot_wider(names_from = year, # go from long to wide data\n              values_from = pop) |&gt; \n  janitor::clean_names()"
  },
  {
    "objectID": "posts/S08E10_reprod_05/factbook_20241028.html#calculate-percent-population-growth",
    "href": "posts/S08E10_reprod_05/factbook_20241028.html#calculate-percent-population-growth",
    "title": "My first GitHub document",
    "section": "4.2 Calculate percent population growth",
    "text": "4.2 Calculate percent population growth\nLet‚Äôs now see which country had the largest percent population growth from 2000 to 2015.\n\nfactbook_pop_wide |&gt; \n  mutate(perc_pop_growth = ((x2015 - x2000)/x2000 * 100)) |&gt; \n  mutate(perc_pop_growth = round(perc_pop_growth, digits = 1)) |&gt; \n  select(country_name, perc_pop_growth, x2000, x2015) |&gt; # pull only the columns we want\n  slice_max(perc_pop_growth, n = 5) # pick top 5\n\nAnd which country had the smallest percent population growth from 2000 to 2015.\n\nfactbook_pop_wide |&gt; \n  mutate(perc_pop_growth = ((x2015 - x2000)/x2000 * 100)) |&gt; \n  select(country_name, perc_pop_growth, x2000, x2015) |&gt; # pull only the columns we want\n  slice_min(perc_pop_growth, n = 5) # pick lowest 5"
  },
  {
    "objectID": "posts/S06E06_website_07/index.html",
    "href": "posts/S06E06_website_07/index.html",
    "title": "Quarto website 7: making a presentation",
    "section": "",
    "text": "1 Introduction\nToday we are going to learn how to make a presentation using Quarto. We will go over how to:\n\nCreate a Quarto presentation document\nAlter the YAMl to change your theming\nCreate slides\n\nHere you can find a demo presentation that will show you some of the options of things you can do in a Quarto presentation.\n\n\n2 Create a Quarto presentation\nOpen the project that contains your website. Then go to File &gt; New File &gt; Quarto Presentation. We are going to render our prsentation into a Reveal JS format (kind of like the presentation equivalent of .html). This is an open source .html format for presentations. Since we‚Äôve been using the visual markdown editor, check the box to use it now.\n\nSave this file in your website directory.\n\n\n3 The YAML\nWe will first look at the YAML.\ntitle: \"My practice presentation\"\nauthor: \"Jessica Cooperstone\"\nformat: revealjs\neditor: visual\nLet‚Äôs render the .qmd file to see what it looks like.\n\nIn your viewer, if you click on the hamburger in the bottom left corner, we can see:\n\nSlides: here we have our first slide, and an empty second slide\nTools: which let‚Äôs us view the slides in different way, and export them as a pdf\nClose: which just gets us out of this view\n\nWe can adjust our YAML to change the themeing of our slides by setting key:value pairs under format. Here are some that I‚Äôve set which renders like this:\ntitle: \"My practice presentation\"\nauthor: \"Jessica Cooperstone\"\nformat: \n  revealjs:\n    slide-number: true\n    logo: \"img/my-image.png\"\n    footer: \"I ‚ù§Ô∏è [Code Club](https://osu-codeclub.github.io/)\"\n    theme: moon\n    echo: true\n\nJust like there are\n\nslide-number can be true or false, and there are different formats of numbering to pick from.\nlogo allows you to specify a logo which will appear on the bottom right of your slide, I‚Äôve selected an image of the code slash\nfooter sets a footer which appears in the middle of your slides\ntheme can be set a preset themes for a presentation. Click here to see the full list. You can also set a theme by providing a .scss. file.\necho: true means by default all code will be shown, this is the default\n\nYou can find the full list of all the options for revealjs here.\nThe settings of your YAML will inherit for your whole presentation, unless you override any options for an individual slide.\n\n\n\n\n\n\nLet‚Äôs all try playing around with our YAML.\n\n\n\n\n\n\n\n\n4 Creating slides\nYou can add a slide by creating a level 2 header (by using two hashtags), or if you‚Äôre in the visual editor, you can click on Normal &gt; Header 2. This will insert a slide.\n\nIf we toggle back to Source you can see that just two ## have been added. You might find typing this easier than setting a Header 2.\nWhat we type here in Heading 2 will be the title of our slide.\n\nIf you wanted to make a bulleted list, you can use the visual editor to insert bullets, and add some content.\n\nTry rendering this to see what happens.\n\nIf you click back and forth in your viewer, you will see that both items in the bulleted list appear together. If you want bullets to populate one at a time, you can set incremental: true in your YAML, or if you just want the bullets to increment in this slide only, you can set it by clicking on the three dots on the right of your slide, and setting Classes to be .incremental. You can learn more about incremental lists here. If you toggle between the visual and source editor, you can see what code you‚Äôd need to type to get your bullets to be incremental.\n\nThis is what your incremented slide would look like in the source editor.\n## The title of my second slide\n\n::: incremental\n-   The first item in my list\n-   A second item in my list\n:::\nOne of the main reasons you might want to create a Quarto presentation is because you want to show code. Just like we talked about last week, you can add a code chunk by clicking Insert &gt; Executable cell &gt; R to add an R code chunk.\nYou can type whatever code you want, here I am putting in some code that makes a plot. I am setting at the top of the chunk that I want the output to be on the next slide, since the code is a little long and the plot is a little big.\nA the top of a code chunk, you can set the options for that chunk after #| at the top of that chunk.\n#| output-location: slide\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins %&gt;%\n  ggplot(aes(x = species, y = flipper_length_mm, color = species)) +\n  geom_boxplot() +\n  geom_jitter() + \n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = \"Penguin species\",\n       y = \"Flipper length, in mm\",\n       title = \"Penguin flipper length by species\")\nWhen this renders, it looks like this:\n\n\nWe can also make it so that the code is collapsable, like this:\n#| code-fold: true\n#| code-summary: \"Click for the full code\"\n\npenguins %&gt;%\n  ggplot(aes(x = species, y = flipper_length_mm, color = species)) +\n  geom_boxplot() +\n  geom_jitter() + \n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = \"Penguin species\",\n       y = \"Flipper length, in mm\",\n       title = \"Penguin flipper length by species\")\nWhen rendered, it looks like this:\n\n\n\n\n\n\n\nLet‚Äôs all try playing around with creating slides and modifying them. Is there anything specific anyone wants to know how to do?\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/S09E09_functional-programming_02/index.html#introduction",
    "href": "posts/S09E09_functional-programming_02/index.html#introduction",
    "title": "Iterating part II: writing custom functions and purrr:map()",
    "section": "1 Introduction",
    "text": "1 Introduction\n\n\n\n\n\nGeneralized code for creating a new function\n\n\n\n\nYou might find yourself in a situation where you are copying and pasting your code multiple times, changing a single variable. This could be situation where you want to run a series of statistical tests, each with a different response variable. Or, you want to make a series of plots, adjusting which variables are on the x-axis. This is generally not a good idea, as it is error prone and inefficient.\nWe are spending this module going through things you can do to avoid copy and pasting your code. Last week we went over writing and using for loops. Today we are going to talk about:\n\nwriting your own functions\niterating with those functions using purrr:map()\n\nWe will start, like we typically do, by loading the packages we will use today.\n\nlibrary(tidyverse) # for wrangling and everything\nlibrary(palmerpenguins) # for penguins data\nlibrary(glue) # for easy pasting of names"
  },
  {
    "objectID": "posts/S09E09_functional-programming_02/index.html#writing-functions",
    "href": "posts/S09E09_functional-programming_02/index.html#writing-functions",
    "title": "Iterating part II: writing custom functions and purrr:map()",
    "section": "2 Writing functions",
    "text": "2 Writing functions\nThere are many functions that exist in R, both built into the base functionality, and addition ones we can access by loading different packages. We have talked about functions before in Code Club, and you may be using them without explicitly realizing they are functions. For example, mean() is a function that calculates the mean of an object (usually a vector).\nThere are some functions which are by default available when you load R (like mean()), and others that exist within packages that require you to load those packages (e.g., tidyverse) before they can be used (e.g., ggplot()).\nBut, there may be situations where we want to do something in R, and a function does not exist to do this task. This could be because the operation you want to do is so specific to you that no other person could have possibly wanted to do that, or simply that no one has gotten around to writing a built in function yet. This is where writing your own functions can be very useful.\n\n2.1 General syntax\nThe general syntax of a function is like this:\n\nname_of_function &lt;- function(arguments) {\n  insert_code_here()\n}\n\nYou can pass multiple arguments to a function, but we are going to start simply with a function that takes one argument.\n\n\n2.2 Functions with one argument\nHere, I am writing a little function to do something simple, like calculate from millimeters to inches.\n\nmm_to_inch &lt;- function(value_in_mm) {\n  value_in_mm * 0.0393701 # code to convert from mm to inch\n}\n\nHere, we would call value_in_mm our argument or parameter. Remember that this is a user-defined term, you could call this x, i, or really whatever you want. I like giving the arguments easy-to-read and easy-to-remember names.\nNow that we‚Äôve made a function, we can see it in our environment under the ‚ÄúFunctions‚Äù header.\n\nIf we click on this item, we can see the details of the function.\n\nIf we start typing our function, and put our cursor between the parentheses and press tab, we can also see some information about our function.\n\nWe can now pass arguments to our new function, here we will try passing 100 mm and see what that would be in inches.\n\nmm_to_inch(value_in_mm = 100)\n\n[1] 3.93701\n\n\nBecause our function only takes one argument, we can be less explicit and remove value_in_mm and get the same result.\n\nmm_to_inch(100)\n\n[1] 3.93701\n\n\nWe also might want to pass a whole column or vector to our function, which we can also do.\n\nmm_to_inch(penguins$bill_length_mm)\n\n  [1] 1.539371 1.555119 1.586615       NA 1.444883 1.547245 1.531497 1.543308\n  [9] 1.342520 1.653544 1.488190 1.488190 1.618111 1.519686 1.362205 1.440946\n [17] 1.523623 1.673229 1.354331 1.811025 1.488190 1.484253 1.413387 1.503938\n [25] 1.527560 1.389765 1.598426 1.594489 1.492127 1.594489 1.555119 1.464568\n [33] 1.555119 1.610237 1.433072 1.543308 1.527560 1.661418 1.480316 1.566930\n [41] 1.437009 1.606300 1.417324 1.736221 1.456694 1.559056 1.618111 1.476379\n [49] 1.417324 1.665355 1.559056 1.578741 1.377953 1.653544 1.358268 1.629922\n [57] 1.535434 1.598426 1.437009 1.480316 1.405513 1.625985 1.480316 1.618111\n [65] 1.433072 1.637796 1.397639 1.618111 1.413387 1.645670 1.318898 1.562993\n [73] 1.559056 1.803151 1.397639 1.685040 1.610237 1.464568 1.425198 1.657481\n [81] 1.362205 1.688977 1.444883 1.381891 1.468505 1.625985 1.429135 1.452757\n [89] 1.507875 1.531497 1.405513 1.618111 1.338583 1.559056 1.425198 1.606300\n [97] 1.500001 1.586615 1.303150 1.700788 1.377953 1.614174 1.484253 1.488190\n[105] 1.492127 1.562993 1.519686 1.503938 1.500001 1.700788 1.500001 1.795277\n[113] 1.562993 1.661418 1.559056 1.681103 1.519686 1.468505 1.405513 1.618111\n[121] 1.425198 1.484253 1.582678 1.629922 1.385828 1.598426 1.527560 1.633859\n[129] 1.535434 1.736221 1.515749 1.696851 1.448820 1.476379 1.500001 1.618111\n[137] 1.401576 1.582678 1.456694 1.562993 1.582678 1.598426 1.263780 1.602363\n[145] 1.468505 1.535434 1.543308 1.440946 1.417324 1.488190 1.417324 1.633859\n[153] 1.814962 1.968505 1.917324 1.968505 1.874017 1.830710 1.787403 1.838584\n[161] 1.704725 1.842521 1.610237 1.929135 1.791340 1.905513 1.803151 1.940946\n[169] 1.653544 1.937009 1.818899 1.917324 1.976379 1.775592 1.830710 1.822836\n[177] 1.688977 1.814962 1.751969 1.881891 1.897639 1.968505 1.862206 1.685040\n[185] 1.775592 2.346458 1.933072 1.905513 1.677166 1.748032 1.732284 1.917324\n[193] 1.681103 1.952757 1.783466 1.952757 1.988190 1.716536 1.791340 1.988190\n[201] 1.767717 1.779529 1.834647 1.909450 1.775592 1.972442 1.830710 1.771654\n[209] 1.724410 1.791340 1.700788 1.984253 1.783466 1.818899 1.799214 2.137796\n[217] 1.803151 1.960631 1.818899 1.948820 1.712599 1.996064 1.877954 1.826773\n[225] 1.897639 1.830710 1.826773 1.913387 1.870080 2.011812 1.779529 1.779529\n[233] 1.933072 2.066930 1.866143 1.968505 1.767717 2.000001 1.708662 2.019686\n[241] 1.870080 2.051182 1.870080 2.055119 1.791340 1.948820 1.751969 2.000001\n[249] 1.944883 1.846458 1.905513 2.011812 1.909450 2.200789 1.858269 1.933072\n[257] 1.862206 1.842521 1.641733 2.102363 1.704725 1.893702 1.988190 1.960631\n[265] 1.712599 2.027560 1.818899 2.169293 1.751969 1.921261 1.858269       NA\n[273] 1.842521 1.984253 1.779529 1.964568 1.830710 1.968505 2.019686 1.787403\n[281] 2.074804 1.779529 1.814962 2.019686 1.811025 2.019686 1.834647 2.035434\n[289] 1.850395 2.047245 1.807088 1.988190 1.980316 2.283466 1.826773 1.937009\n[297] 1.669292 1.909450 1.700788 1.992127 1.838584 2.047245 1.988190 1.948820\n[305] 1.826773 2.078741 1.610237 2.133859 1.673229 2.007875 1.956694 1.870080\n[313] 1.874017 2.047245 1.846458 2.106300 1.929135 1.818899 2.003938 1.791340\n[321] 2.003938 2.000001 1.972442 1.929135 2.027560 1.960631 1.893702 2.023623\n[329] 1.799214 1.996064 1.673229 2.055119 1.779529 1.940946 1.976379 1.795277\n[337] 2.043308 1.842521 1.799214 2.196852 1.712599 1.952757 2.000001 1.976379\n\n\nInstead of just printing this information, we might want to save it in our dataframe, which we can do by nesting our function within a mutate() function. Remember that mutate() works with the syntax new_column = function(existing_variables). Also remember that by default, new columns are added after the last column (and if you want to also reorder, you can do that with select()).\n\npenguins |&gt; \n  mutate(bill_length_inch = mm_to_inch(bill_length_mm))\n\n# A tibble: 344 √ó 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ‚Ñπ 334 more rows\n# ‚Ñπ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_length_inch &lt;dbl&gt;\n\n\n\n\n2.3 Embedding built in functions\nWe can also use other functions inside our function. For example, R does not by default have a function that calculates the coefficient of variation for a variable. We can write that ourselves though so it‚Äôs fine.\n\n# calculate the coefficient of variation by \n# dividing the standard deviation by the mean\ncv &lt;- function(x) {\n        (sd(x)/mean(x))\n}\n\n\n\n2.4 Functions with two arguments\nWe can also write functions that take more than one argument. Here is a simple example for calculating BMI, which is weight in kg divided by height in meters squared.\n\ncalculate_bmi &lt;- function(weight_kg, height_cm) {\n  weight_kg/(height_cm/100)^2\n}\n\n\ncalculate_bmi(weight_kg = 80, height_cm = 180)\n\n[1] 24.69136\n\n\nIf you provide your arguments in the order they are expected (here, weight_kg and then height_cm), then you don‚Äôt need to specify which is which. But, iif you want to give the arguments in a different order you need to be explicit.\n\n# this is wrong\ncalculate_bmi(180, 80)\n\n[1] 281.25\n\n\n\n# this is better\ncalculate_bmi(height_cm = 180, weight_kg = 80)\n\n[1] 24.69136\n\n\n\n\n2.5 Functions with one argument practice\nWrite two functions that convert between degrees Fahrenheit and degrees Celsius and test to see if they work.\n\n\nNeed a hint?\n\n¬∞C = (¬∞F - 32) √ó 5/9 or ¬∞F = (¬∞C * 9/5) + 32\n\n\n\nClick for the solution\n\n\n# create a function to convert F to C\ndegF_to_degC &lt;- function(deg_F) {\n  (deg_F - 32) * (5/9)\n}\n\n# create a function to convert C to F\ndegC_to_degF &lt;- function(deg_C) {\n  (deg_C * (9/5)) + 32\n}\n\n\ndegF_to_degC(deg_F = 32)\n\n[1] 0\n\ndegF_to_degC(deg_F = 100)\n\n[1] 37.77778\n\ndegC_to_degF(deg_C = 0)\n\n[1] 32\n\ndegC_to_degF(deg_C = -40)\n\n[1] -40\n\n\n\n\n\n2.6 Plotting functions\nNow that we are a little comfortable with writing functions, we can make ones that are a little more complicated.\nWe can also write a function to make our plot.\n\nspecies_bill_plotting &lt;- function(focal_species) {\n    penguins |&gt; \n    filter(species == focal_species) |&gt; \n    drop_na() |&gt; \n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = focal_species, # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\", \n         caption = \"Data collected from LTER, Antarctica\") + \n    theme_classic() \n}\n\nThen, we can pass our argument to the plot, here, the name of the species we want to plot. This is a useful tool for making many plots with the same structure.\n\nspecies_bill_plotting(\"Adelie\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nWe can then pass this function in a for loop with some simpler looking code (because the bulk of it is elsewhere).\n\npenguin_species &lt;- unique(penguins$species)\n\nfor (focal_species in penguin_species) {\n  # pass each focal species to the species_bill_plotting function\n  plot &lt;- species_bill_plotting(focal_species)\n\n# save the plots\n  filename &lt;- glue(\"figs/{focal_species}_bill-dimensions.png\") # create filename\n  ggsave(filename, plot) # save the plot to file\n}\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n2.7 Writing plotting functions practice\nWrite a function to make a series of boxplots that show the difference in body_mass_g between male and female penguins by species. Feed one species to your function to check if it works (you don‚Äôt need to iterate with it yet).\n\n\nNeed a hint?\n\nCheck back to our example where we used a for loop to see how to make this plot.\n\n\n\nClick for the solution\n\n\n# create the function\nbody_mass_by_sex_plotting &lt;- function(focal_species) {\n    penguins |&gt; \n    filter(species == focal_species) |&gt; \n    drop_na(sex, body_mass_g) |&gt; \n    ggplot(aes(x = sex, y = body_mass_g, color = sex)) +\n      geom_boxplot() +\n      theme_minimal() +\n      scale_color_brewer(palette = \"Dark2\") +\n      theme(legend.position = \"none\") + # don't need one bc duplicative with x-axis\n      labs(x = \"Sex\",\n        y = \"Body mass (grams)\",\n        title = focal_species)\n}\n\n# apply the function to Adelie penguins\nbody_mass_by_sex_plotting(\"Adelie\")"
  },
  {
    "objectID": "posts/S09E09_functional-programming_02/index.html#iteration-with-purrrmap",
    "href": "posts/S09E09_functional-programming_02/index.html#iteration-with-purrrmap",
    "title": "Iterating part II: writing custom functions and purrr:map()",
    "section": "3 Iteration with purrr:map",
    "text": "3 Iteration with purrr:map\nTo simplify our code, we could replace our for loop with one of the tidyverse:purrr functions intended for functional program that being with map*().\nBut before we do this, we need to learn a little bit about lists.\n\n3.1 About lists\nA list is a new data structure for Code Club. A list can contain other data structures, like data frames, vectors or others, within it.\nTo see what a list looks like, we will look under the hood at the object that comprises a ggplot plot. We have one in our environment called plot so let‚Äôs look at that.\n\nView(plot)\n\n\nWe can see that in this case, plot is a list which contains 11 objects, many of which also contain sub-objects. For example, data is a dataframe that. contains the data underlying our plot. It is a tibble type of dataframe with 68 rows and 8 columns.\nIf I want to access that first item in the list, I can do that in a few different ways.\nI can use the dollar sign operator $ to extract parts of the list\n\nplot$data\n\n# A tibble: 68 √ó 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Chinstrap Dream            46.5          17.9               192        3500\n 2 Chinstrap Dream            50            19.5               196        3900\n 3 Chinstrap Dream            51.3          19.2               193        3650\n 4 Chinstrap Dream            45.4          18.7               188        3525\n 5 Chinstrap Dream            52.7          19.8               197        3725\n 6 Chinstrap Dream            45.2          17.8               198        3950\n 7 Chinstrap Dream            46.1          18.2               178        3250\n 8 Chinstrap Dream            51.3          18.2               197        3750\n 9 Chinstrap Dream            46            18.9               195        4150\n10 Chinstrap Dream            51.3          19.9               198        3700\n# ‚Ñπ 58 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nOr, I can use indexing to extract out the first item in our list.\n\nplot[1]\n\n$data\n# A tibble: 68 √ó 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Chinstrap Dream            46.5          17.9               192        3500\n 2 Chinstrap Dream            50            19.5               196        3900\n 3 Chinstrap Dream            51.3          19.2               193        3650\n 4 Chinstrap Dream            45.4          18.7               188        3525\n 5 Chinstrap Dream            52.7          19.8               197        3725\n 6 Chinstrap Dream            45.2          17.8               198        3950\n 7 Chinstrap Dream            46.1          18.2               178        3250\n 8 Chinstrap Dream            51.3          18.2               197        3750\n 9 Chinstrap Dream            46            18.9               195        4150\n10 Chinstrap Dream            51.3          19.9               198        3700\n# ‚Ñπ 58 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n3.2 map()\nThe simplest of the functions in purrr is map(), which applies a function over each element of a vector, and returns a list. There are some basics we will have to go over for this to make sense.\nThe map(), we provide a vector/list to iterate over, and a function, like this:\n\nmap(.x = 1:5, # our vector to apply our function over\n    function(x) x + 1) # what the function is\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 3\n\n[[3]]\n[1] 4\n\n[[4]]\n[1] 5\n\n[[5]]\n[1] 6\n\n\nNow let‚Äôs get back to the function we wrote to make our plots - instead of incorporating this into a for loop, we can apply it within map() like this:\n\nmap(penguin_species, # vector to iterate over\n    species_bill_plotting) # function to use\n\n[[1]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n[[2]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n[[3]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nWow that was simple!\nWe could also incorporate both the printing and saving of the plot into one function like this:\n\nspecies_bill_plotting_saving &lt;- function(focal_species) {\n  \n# create plot and assign it to something \n  plot_via_function &lt;- penguins |&gt; \n    filter(species == focal_species) |&gt; \n    drop_na() |&gt; \n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = focal_species, # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\", \n         caption = \"Data collected from LTER, Antarctica\") + \n    theme_classic() \n  \n# print\n  print(plot_via_function)\n  \n# save\n  filename &lt;- glue(\"figs/{focal_species}_bill-dimensions-via-function.png\") # choose filename\n  ggsave(filename, plot_via_function) # save the plot to file\n}\n\nThen, this code will:\n\nGenerate your plots\nPrint those plots for you to view in RStudio\nSave those plots in a directory called figs in your working directory\n\n\nmap(penguin_species, # vector to iterate over\n    species_bill_plotting_saving) # function to apply\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n[[1]]\nfigs/Adelie_bill-dimensions-via-function.png\n\n[[2]]\nfigs/Gentoo_bill-dimensions-via-function.png\n\n[[3]]\nfigs/Chinstrap_bill-dimensions-via-function.png\n\n\n\n\n3.3 Functions with more arguments practice\nTry applying your function you made to create a series of boxplots for body mass by sex over each of the penguin species, though edit it so it both prints and saves your plots.\n\n\nNeed a hint?\n\nHere is my hint\n\n\n\nClick for the solution\n\nEdit the function to include printing and saving.\n\nspecies_body_mass_sex_plotting_saving &lt;- function(focal_species) {\n  my_plot &lt;- penguins |&gt; \n    filter(species == focal_species) |&gt; \n    drop_na(sex, body_mass_g) |&gt; \n    ggplot(aes(x = sex, y = body_mass_g, color = sex)) +\n      geom_boxplot() +\n      theme_minimal() +\n      scale_color_brewer(palette = \"Dark2\") +\n      theme(legend.position = \"none\") + # don't need one bc duplicative with x-axis\n      labs(x = \"Sex\",\n        y = \"Body mass (grams)\",\n        title = focal_species)\n\n# print\n  print(my_plot)\n  \n# save\n  filename &lt;- glue(\"figs/{focal_species}_body-mass-by-sex.png\") # choose filename\n  ggsave(filename, my_plot) # save the plot to file\n}\n\nApply the function across the species\n\nmap(penguin_species, # what to iterate over\n    species_body_mass_sex_plotting_saving) # the function to iterate with\n\n\n\n\nSaving 7 x 5 in image\n\n\n\n\n\nSaving 7 x 5 in image\n\n\n\n\n\nSaving 7 x 5 in image\n\n\n[[1]]\nfigs/Adelie_body-mass-by-sex.png\n\n[[2]]\nfigs/Gentoo_body-mass-by-sex.png\n\n[[3]]\nfigs/Chinstrap_body-mass-by-sex.png"
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#introduction",
    "href": "posts/S07E02_basics_02/index.html#introduction",
    "title": "R Basics 2: Scripts and Objects",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of last week\nLast week, we installed R and RStudio, learned about the distinction between the two, familiarized ourselves with RStudio, learned about ‚Äúworking directories‚Äù and RStudio Projects, and had our first interactions with R by using it as a calculator.\n\n\nLearning objectives for today\n\nA little more basic interaction with R: missing prompts and data types\nWriting code in R scripts instead of the console, and commenting your code\nUsing and naming R objects, and (not) saving your environment\n\n\n\nSetting up\nIf you created an RStudio Project for Code Club last week, then be sure to have that Project open before we get started. When you start RStudio, it may well have already opened that project for you (check the top-right corner, and see the screenshots below) ‚Äî if not, click File (top menu bar) &gt; Recent Projects, and select your Project for Code Club from the list.\n\n\n\n\n\nYou have an open project ‚Äúcodeclub‚Äù\n\n\n\n\n\n\nYou have no Project open\n\n\n\n\nIf you don‚Äôt have an RStudio Project, no worries. We‚Äôll be saving a file today, but you can always save it in an appropriate directory on the fly."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#a-little-more-basic-interaction-with-r",
    "href": "posts/S07E02_basics_02/index.html#a-little-more-basic-interaction-with-r",
    "title": "R Basics 2: Scripts and Objects",
    "section": "2 A little more basic interaction with R",
    "text": "2 A little more basic interaction with R\n\n2.1 The R prompt, revisited\nThe &gt; sign in your console is the R ‚Äúprompt‚Äù. It indicates that R is ready for you to type something.\nWhen you are not seeing the &gt; prompt, R is either busy (because you asked it to do a longer-running computation) or waiting for you to complete an incomplete command.\nType the following into your console, and press Enter (called Return on a Mac, but you get the idea):\n\n203 /\n\nYou should notice that your prompt turned into a +.\n\n\nWhat is going on here? (Click for the answer)\n\nR is waiting for you to finish the command, since you typed an incomplete command: something has to follow the division sign /.\n\nTo get out of this situation, one option is to try and finish the command (in this case, by typing another number) ‚Äî but here, let‚Äôs practice another option: aborting the command by pressing Esc.\nWhile it was obvious here that our command was incomplete, you will often type incomplete commands without realizing you did so (typical cases include forgetting a closing parenthesis )). Aborting and fixing the command in full is often the way to go, especially if you‚Äôre writing code in a script (as we‚Äôll do below).\n\n\n\n2.2 R data types\nIf we just type a number and press Enter‚Ä¶\n\n203\n\n[1] 203\n\n\n‚Ä¶ then R will simply print the number back to us.\nUnder the hood, R is calling a function called print()1, and we saw an example of this last week, too ‚Äî typing the name of an object will print it‚Äôs value:\n\nx &lt;- 5\nx\n\n[1] 5\n\n\nRather than a number, what if we want R to print back to us some text, which in programming lingo is called a ‚Äúcharacter string‚Äù?\n\nFantastic\n\nError in eval(expr, envir, enclos): object 'Fantastic' not found\n\n\n\n\nWhat seems to be going wrong? (Click for the answer)\n\nWhenever you type a character string, R expects to find an object with that name (we saw our first object x last week, and will talk more about them today).\nWhen no object exists with that name, R will throw an error.\n\nWe can get R to print character strings back to us, and use them in other ways, as long as they are quoted:\n\n\"Fantastic\"\n\n[1] \"Fantastic\"\n\n\"Code Club\"\n\n[1] \"Code Club\"\n\n\nSo, R treats numbers and character strings differently: unlike numbers, character strings need to be quoted. This avoids confusion with objects because unquoted character strings are assumed to be objects, and also allows for ‚Äúspecial characters‚Äù like spaces.\n\n\n\n\n\n\nQuote types\n\n\n\nDouble quotes (\"Fantastic\") and single quotes ('Fantastic') can be used interchangeably in R. Double quotes are preferred by most ‚Äústyle guides‚Äù.\n\n\nA little more on R‚Äôs main ‚Äúdata types‚Äù:\n\nNumbers are by default of the data type numeric (and can also be integer - whole numbers only)\nCharacter strings are by default of the data type character (and can also be factor for categorical data)\nThe final main data type is logical, which can be either TRUE or FALSE."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#exercises-1",
    "href": "posts/S07E02_basics_02/index.html#exercises-1",
    "title": "R Basics 2: Scripts and Objects",
    "section": "3 Exercises 1",
    "text": "3 Exercises 1\nA) Which of the following do you think would work and which would return an error:\n\nsession_topic &lt;- \"introduction\"\n\n\nsession_topic &lt;- introduction\n\nTry both to see which works and what error you get for the other one. Also, try to describe in words what the correct line of code is doing.\n\n\nSolution (click here)\n\nThe first of the two options was correct R code, while the second returns an error.\nIn general, keep in mind that unquoted character strings represent objects whereas quoted character strings are ‚Äúliterals‚Äù. Here, we wanted to assign the literal string \"introduction\" to the object session_topic ‚Äî so the former should be quoted and the latter not.\nAn error is produced when you run the second option, because the object introduction does not exist (unless, of course, you had created an object of that name!):\n\nsession_topic &lt;- introduction\n\nError in eval(expr, envir, enclos): object 'introduction' not found\n\n\n\nB) Having run the code above, which of the following would make R print \"introduction\"?\n\n\"session_topic\"\n\n\nsession_topic\n\n\n\nSolution (click here)\n\nThe second option is the correct one: here, we want to have R print the value of the object session_topic (which we had just created in exercise A), so we shouldn‚Äôt use quotes.\n\nsession_topic\n\n[1] \"introduction\"\n\n\n\nC) Do you think the following code would successfully add 5 and 7? If not, what might happen instead?\n\n\"5\" + \"7\"\n\n\n\nSolution (click here)\n\nIn the code above, the ‚Äúnumbers‚Äù are saved not as numbers (in R lingo: as a numeric) but as character strings (character).\nR can‚Äôt add character strings, so it will return an error:\n\n\"5\" + \"7\"\n\nError in \"5\" + \"7\": non-numeric argument to binary operator\n\n\n(Perhaps you expected it to combine/‚Äúconcatenate‚Äù the two strings in some way ‚Äî this is in fact what Python would do. Or to automatically convert the characters to numbers, since you‚Äôre clearly wanting them to be numbers ‚Äî but it doesn‚Äôt do that either.)\n\nD) (Bonus) Execute the following code and check its output:\n\nTRUE + FALSE\n\nHad you expected this result? If not, can you make sense of it: the fact that it works, the specific results, and the fact that we are not using quotes in the code.\nAnd based on your deliberations, what do you expect the following code to return?\n\nTRUE + TRUE\n\n\n\nSolution (click here)\n\n\nLogicals (TRUE and FALSE) can be used as numbers, in which case TRUE is equivalent to 1, and FALSE is equivalent to 0.\nTherefore, TRUE + FALSE will return 1, and TRUE + TRUE will therefore return 2.\nLogicals (TRUE and FALSE) are made up of letters but are not character strings, so they shouldn‚Äôt be quoted."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#r-scripts",
    "href": "posts/S07E02_basics_02/index.html#r-scripts",
    "title": "R Basics 2: Scripts and Objects",
    "section": "4 R scripts",
    "text": "4 R scripts\n\n4.1 The editor pane\nJess showed us the four quadrants of RStudio last week:\n\n\n\n\n\nOne of those contains a ‚ÄúSource Editor‚Äù pane, as in a Text Editor. Here, we can open and edit all sorts of text files ‚Äî including R scripts. This quadrant will disappear if you have no files open:\n\nCreate and open a new R script by clicking File (top menu bar) &gt; New File &gt; R Script.\n\n\n\n\n4.2 Why use a script?\nAn R script is a text file that contains R code.\nSo far, we have been typing commands directly into the R console. But it‚Äôs a good idea to write and save most of our code in scripts.\nThis helps us keep track of what we‚Äôve been doing, especially in the longer run, and to re-run our code after modifying input data or one of the lines of code.\n\n\n\n\n\n\nInteractive scripts\n\n\n\nFor those of you who are familiar with the notion of a script from other contexts or programming languages ‚Äî saving our code as a script does not mean that we necessarily need to run the entire script all at once.\nIn R, it is instead most common to write and run code interactively, often line by line.\n\n\n\n\n\n4.3 Saving the script\nLet‚Äôs save this new script right away‚Ä¶\n\nClick File &gt; Save As\n\n‚Ä¶ and give it a descriptive name like codeclub_02.R:\n\nYou may want to put the script in a folder for Code Club ‚Äî which should be automatically selected if you are using your Code Club RStudio Project.\nMake sure it has the file extension .R ‚Äî which should also have been automatically suggested by the pop-up window.\n\n\n\n\n\n\n\nFile extensions\n\n\n\nAn R script is just a plain-text file and you could also save it with, for example, a .txt extension ‚Äî this will not break the file, but does have drawbacks.\nWhen you use a .R extension, your computer and RStudio alike will recognize it as an R script. In RStudio, this means you‚Äôll get some formatting that helps when writing your R code, and it can even recognize and warn you about certain errors in your code.\n\n\n\n\n\n4.4 Sending code to the console\nIf you write most of your code in a script in the Editor, as we recommended above, wouldn‚Äôt it be a hassle to execute it? Do you need to copy-and-paste the code into the console? Luckily not.\nStart by by typing another simple calculation, this time in your R script:\n\n203 / 2.54\n\nWith the cursor still on this line of code in the script, press Ctrl + Enter (or, on a Mac: Cmd + Enter).\nThe code will be copied to the R console and executed (so you should see the result printed as shown below), and additionally, the cursor will move to the next line in the script.\n\n\n[1] 79.92126\n\n\n\n\n\n\n\n\nMore on sending code to the console\n\n\n\nNote that it doesn‚Äôt matter where on the line your cursor is: Ctrl + Enter will always execute the entire line unless you have selected only part of it. (And when you have selected multiple lines of code, it will execute them all.)\nTo execute a line of code, an alternative to the keyboard shortcut is to click the Run button in the bar right above your script, but we recommend using the keyboard shortcut ‚Äî it is much faster, at least once you get used to it.\n\n\nFor the rest of this Code Club session, try to write your code in your script, and send it to the console using the keyboard shortcut.\n\n\n\n4.5 Commenting\nYou can use # signs to comment your code:\n\n# Divide by 2.54 to get the wingspan in inches:\n203 / 2.54    # Original measurement was in cm\n\n\nAnything to the right of a # is ignored by R, meaning it won‚Äôt be executed\nYou can use # both at the start of a line (entire line is a comment) or anywhere in a line following code (rest of the line is a comment)\nIn your R script, comments are formatted differently so you can clearly distinguish them from code\n\nWe recommend that you use lots of comments in your R scripts! They are useful not only for others that you may share your code with, but also for yourself when you look back at your code a day, a month, or a year later."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#r-objects",
    "href": "posts/S07E02_basics_02/index.html#r-objects",
    "title": "R Basics 2: Scripts and Objects",
    "section": "5 R Objects",
    "text": "5 R Objects\n\n5.1 Assigning stuff to R objects\nAs we‚Äôve seen a couple of times now, we can assign a value to an object with the assignment operator &lt;-. A few more examples:\n\nwingspan_cm &lt;- 203\nconversion &lt;- 2.54\n\nType that into your script, and use Ctrl/Cmd + Enter twice to send it to the console.\n\n\n\n\n\n\nThe Environment tab\n\n\n\nRecall also that the objects you create get added to your ‚Äúenvironment‚Äù, which RStudio shows in the Environment tab in the top-right panel ‚Äî check that wingspan_cm and conversion are indeed there.\n\n\nAfter you‚Äôve assigned a number to an object, you can use it in calculations like so:\n\nwingspan_cm / conversion\n\n[1] 79.92126\n\n\nOr, similarly:\n\nwingspan_inch &lt;- wingspan_cm / conversion\nwingspan_inch\n\n[1] 79.92126\n\n\nThis illustrates that when you execute code with objects, R substitutes the object name that you provide by its contents under the hood. In other words, the object is just a reference to the underlying value(s).\n‚ÄúObject‚Äù is a general term that encompasses R items of any size or complexity:\n\nObjects can also contain character strings, collections of numbers or character strings (including in table or matrix format), and functions.\nThe above does not mean that ‚Äúanything goes‚Äù ‚Äî R distinguishes between a limited number of ‚Äúdata structures‚Äù, each with their own defined structure. We‚Äôll learn about the most important ones next week.\nThe objects we created so far are called vectors, which are more commonly thought of as containing a series of values, but in R, can have a length of one2.\n\n\n\n\n\n\n\nMore on assignment operators\n\n\n\nThe keyboard shortcut for the assignment operator is Alt/Option + -.\nNote that you can also use = as an assignment operator, as is common in other programming languages. But because = can have other meanings, we recommend sticking with the &lt;- combination.\n\n# This also works to assign the value 5 to x (but we recommend using &lt;- instead)\nx = 5\n\n\n\n\n\n\n5.2 Object names\nObjects can be given almost any name such as x, current_temperature, or subject_id. Some pointers on object names:\n\nBecause R is case sensitive, wingspan_inch is different from Wingspan_inch!\nAn object name cannot contain spaces ‚Äî so for readability, you should separate words using:\n\nUnderscores: wingspan_inch (this is called ‚Äúsnake case‚Äù, which we often use in Code Club)\nPeriods: wingspan.inch\nCapitalization: wingspanInch or WingspanInch (‚Äúcamel case‚Äù)\n\nYou will make things easier for yourself by naming objects in a consistent way, for instance by always sticking to your favorite case style like ‚Äúsnake case.‚Äù3\nObject names can contain but cannot start with a number: x2 is valid but 2x is not. (There are also some other restrictions that are beyond the scope of this introduction4.)\nMake object names descriptive yet not too long ‚Äî this is not always easy!\n\n\n\nThere are only two hard things in Computer Science: cache invalidation and naming things.\n‚Äì Phil Karlton\n\n\n\n\n5.3 Saving the environment\nRecall that your environment contains all the R objects that you created. When you close R, it will probably ask you whether you want to save your environment (AKA workspace) ‚Äî something like:\n\n\n\n\n\nWhen you do save this, the next time you start R, R will reload your environment so you can pick up right where you left off. While this may seem convenient, we recommend that you don‚Äôt do this.\n\n\nCan you think of a reason why automatically saving and reloading your workspace may not be a good idea? (Click for the answer)\n\nThe main reason why this is generally not considered good practice relates to the idea that you should be able to reproduce your environment (and more broadly speaking, your analysis) from the code in your script.\nRemember that you can modify your environment either by entering commands in the console directly, or by running them from a script ‚Äî or even from multiple different scripts. Additionally, it is common to run lines in a script out of order, or write lines in the script that you don‚Äôt execute.\nTherefore, if you ‚Äúcarry around‚Äù the same environment across multiple different sessions, you run a greater risk of not having a reproducible set of steps in your script.\n\nGenerally, a better way of working in R than saving your entire environment is to use and save scripts (as we‚Äôve seen today) and to save specific outputs such as tables and plots (as we‚Äôll see soon).\nTo make RStudio stop asking you about saving your workspace, click Tools &gt; Global Options &gt; General and (un)check the boxes as follows:\n\n\n\n\n\n\n\n\n\n\n\nRestarting R\n\n\n\nTaking the ideas about reproducibility a step further, it can be a good idea to occasionally restart R in the middle of working on some code.\nThat way, you can check whether the code in your script is correct and complete, that you are not relying on code that is not in the script, and so on.\nTo do so, you don‚Äôt need to close and reopen RStudio itself: under Session in the top menu bar, you can click Restart R (and you should also see the keyboard shortcut for it in the menu bar: Ctrl + Shift + F10 (Windows) / Cmd + Shift + 0 (Mac)."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#exercises-2",
    "href": "posts/S07E02_basics_02/index.html#exercises-2",
    "title": "R Basics 2: Scripts and Objects",
    "section": "6 Exercises 2",
    "text": "6 Exercises 2\nA) Why do the following bits of code fail with an error?\n\nsession number &lt;- 2\n\n\nExpert_Level &lt;- 3\nExpert_level\n\n\n\nSolution (click here)\n\nThe first fails because an object name cannot contain a space.\nThe second fails because of a difference in capitalization (Level vs level): recall that R is case sensitive.\n\nB) What will be the value of distance_miles after executing the following lines in R: 31 or 62?\n\ndistance_km &lt;- 50\ndistance_miles &lt;- distance_km * 0.62    # distance_miles is now 31 \ndistance_km &lt;- 100\n\ndistance_miles                          # What is the value of distance_miles now?\n\nCome up with an expectation, then run the code above and see if you were right. What does this tell you about ‚Äúlinkage‚Äù between objects in R?\n\n\nSolution (click here)\n\nObjects don‚Äôt get ‚Äúlinked‚Äù to each other at all in R.\nIn other words, distance_miles was really assigned the outcome of distance_km * 2, which is 31, rather than its ‚Äúformula‚Äù.\nTherefore, distance_miles wasn‚Äôt (and couldn‚Äôt be!) ‚Äúupdated‚Äù after we changed the value of distance_km, and continued to be 31:\n\ndistance_km &lt;- 50\ndistance_miles &lt;- distance_km * 0.62    # distance_miles is now 31.07 \ndistance_km &lt;- 100\n\ndistance_miles                          # What is the value of distance_miles now?\n\n[1] 31\n\n\n\n\n\n\nAttribution\nThis was modified after material from The Carpentries, especially from this Data Carpentry workshop and this ‚ÄúR for Ecology‚Äù workshop."
  },
  {
    "objectID": "posts/S07E02_basics_02/index.html#footnotes",
    "href": "posts/S07E02_basics_02/index.html#footnotes",
    "title": "R Basics 2: Scripts and Objects",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWe‚Äôll talk about functions soon, likely next week.‚Ü©Ô∏é\nObjects that contain a single value are a distinct data structure called ‚Äúscalars‚Äù in some languages, and are more informally also called ‚Äúvariables‚Äù.‚Ü©Ô∏é\nIt is also recommended to use nouns for variable names, and verbs for function names. For more, two popular R style guides are Hadley Wickham‚Äôs and Google‚Äôs.‚Ü©Ô∏é\nFor example, there are some names that cannot be used because they are the names of fundamental keywords in R (e.g., if, else, for, see here for a complete list). In general, it‚Äôs also best not to use the names of existing functions, even though this is possible.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S09E06_maps_02/index.html",
    "href": "posts/S09E06_maps_02/index.html",
    "title": "Plotting geographical maps in R: part II",
    "section": "",
    "text": "Today is the second of a series of Code Club sessions on making maps with R.\nIn the first session, we learned the basics of making and formatting maps with ggplot functions.\nToday, we will learn how to add points/markers and text in various ways, and we will also see several data wrangling and general ggplot tricks while doing so."
  },
  {
    "objectID": "posts/S09E06_maps_02/index.html#setting-up",
    "href": "posts/S09E06_maps_02/index.html#setting-up",
    "title": "Plotting geographical maps in R: part II",
    "section": "1 Setting up",
    "text": "1 Setting up\n\nInstalling and loading R packages\nLast week, we realized during the session that two additional packages need to be installed for some of the ggplot map-related functions to work, so let‚Äôs make sure everyone has these installed:\n\nif (! require(maps)) install.packages(\"maps\")\nif (! require(sf)) install.packages(\"sf\")\n\nThe above type of code with the if statements is likely new to most of you. You can read this code as: if the package is not installed, then install it1.\nAdditionally, we‚Äôll use a package with the quite specific purpose of avoiding overlap between text labels in ggplots:\n\nif (! require(ggrepel)) install.packages(\"ggrepel\")\n\nFinally, let‚Äôs load these packages, along with the tidyverse:\n\nlibrary(maps)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.4     \n\n\n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚úñ purrr::map()    masks maps::map()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggrepel)\n\n\n\n\nPicking up where we left off last week\nLike last week,\n\nWe‚Äôll set a ggplot theme for all the following plots:\n\n\ntheme_set(theme_void())\ntheme_update(legend.position = \"top\")\n\n\nWe‚Äôll load US state-wise map data:\n\n\nstates &lt;- map_data(map = \"state\")\n\nhead(states)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\n\n\nAnd create and store a base plot that we can build on:\n\n\np &lt;- ggplot(states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey85\",\n    color = \"grey40\",\n    linewidth = 0.1\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)\n\np"
  },
  {
    "objectID": "posts/S09E06_maps_02/index.html#adding-markers-and-text-to-maps",
    "href": "posts/S09E06_maps_02/index.html#adding-markers-and-text-to-maps",
    "title": "Plotting geographical maps in R: part II",
    "section": "2 Adding markers and text to maps",
    "text": "2 Adding markers and text to maps\n\nAdding single text labels and points\nWe can add points to a map with the familiar geom geom_point(). We have previously used this geom to make scatterplots based on data in a data frame, but it can plot points at individually-specified locations, too.\nAs a first example, we‚Äôll just add a single point to show where the city of Columbus is, setting its coordinates ‚Äúon the fly‚Äù (outside of aes()) and using the OSU scarlet color via its Hex code as the point color:\n\np +\n  geom_point(x = -82.99, y = 39.99, colour = \"#ba0c2f\", size = 4)\n\n\n\n\nWe can add arbitrary text labels in a similar way with the geom geom_text(), in which we specify the text that we want to print using the label argument (and note that I‚Äôm subtracting 1 from the latitude so the text ends up a bit below the point and not right on top of it):\n\np +\n  geom_point(x = -82.99, y = 39.99, colour = \"#ba0c2f\", size = 4) +\n  geom_text(x = -82.99, y = 39.99 - 1, label = \"Columbus\", size = 4)\n\n\n\n\n\n\nAdding a set of points from a data frame\nIn your research, you may want to make a map that plots sampling locations. As a simple fictional example, we can create a dataframe with four sampling locations, a grouping factor (season), and a column with a numerical result for each location (yield):\n\nlocations &lt;- data.frame(\n  location = c(\"L01\", \"L02\", \"L03\", \"L04\"),\n  long = c(-80, -100, -90, -110),\n  lat = c(35, 33, 45, 43),\n  season = c(\"winter\", \"winter\", \"summer\", \"summer\"),\n  yield = c(16, 97, 39, 66)\n)\n\nlocations\n\n  location long lat season yield\n1      L01  -80  35 winter    16\n2      L02 -100  33 winter    97\n3      L03  -90  45 summer    39\n4      L04 -110  43 summer    66\n\n\nNow, we can add a layer to our saved plot p with the sampling locations ‚Äî note that:\n\nWe are giving geom_point() ‚Äúits own‚Äù data set with the data = argument\nWe map the fill aesthetic to the season column so we can distinguish samples from different seasons\nWe use point shape 21 (see this overview of R point shapes), which allows for a fill color (separate from the outline color which can be set with color):\n\n\np +\n  geom_point(\n    data = locations,\n    aes(x = long, y = lat, fill = season),\n    size = 4,\n    shape = 21\n    )\n\n\n\n\n\n\n Exercise 1\nBuild on the previous map by making the appearance of the sampling location points reflect the values in the yield column. For example, higher yields could produce larger points, or the fill color of the points could depend on the yield.\n\n\nClick here for some hints\n\n\nTo make points vary in size, use the size aesthetic aes(size = ...)\nTo make points vary in fill color, use the fill aesthetic and then switch to a different aesthetic for season, like point shape.\n\n\n\n\nClick here for possible solutions with point size\n\n\n\nMake points vary in size according to the values in the yield column by including size = yield inside aes():\n\n\np_size &lt;- p + \n  geom_point(\n    data = locations,\n    aes(x = long, y = lat, fill = season, size = yield),\n    shape = 21\n    )\n\np_size\n\n\n\n\n\nAs an aside, the above legend had quite a small point size for the location with the lowest yield ‚Äì to improve that, we can expand the limits of the scale, and optionally also play around with the range of point sizes and the breaks, i.e.¬†the values that get displayed in the legend:\n\n\np_size +\n  scale_size_continuous(\n    limits = c(0, 100),\n    breaks = c(10, 50, 100),\n    range = c(1, 10)\n    )\n\n\n\n\n\n\n\nClick here for possible solutions with point fill color\n\n\n\nIf we want to use fill color instead for yield, we‚Äôll need a different aesthetic for season, e.g.¬†shape:\n\n\np_fill &lt;- p +\n  geom_point(\n    data = locations,\n    aes(x = long, y = lat, shape = season, fill = yield),\n    size = 5\n    ) +\n  # Make sure the shapes support a fill color (the default ones don't):\n  scale_shape_manual(values = c(21, 23))\n\np_fill\n\n\n\n\n\nFor a nicer-looking fill color scale, we can change to one of the viridis color scales:\n\n\np_fill +\n  scale_fill_viridis_c(option = \"inferno\")"
  },
  {
    "objectID": "posts/S09E06_maps_02/index.html#a-county-level-map-of-ohio",
    "href": "posts/S09E06_maps_02/index.html#a-county-level-map-of-ohio",
    "title": "Plotting geographical maps in R: part II",
    "section": "3 A county-level map of Ohio",
    "text": "3 A county-level map of Ohio\nThe background map we‚Äôve been working with so far doesn‚Äôt have county lines. But in some cases, like when making a map of single state such as Ohio, those would come in handy.\n\nGetting county-level map data for just Ohio\nWe can get a county-level map of the entire United States using map_data(map = \"county\"):\n\nmap_data(map = \"county\") |&gt;\n  head()\n\n       long      lat group order  region subregion\n1 -86.50517 32.34920     1     1 alabama   autauga\n2 -86.53382 32.35493     1     2 alabama   autauga\n3 -86.54527 32.36639     1     3 alabama   autauga\n4 -86.55673 32.37785     1     4 alabama   autauga\n5 -86.57966 32.38357     1     5 alabama   autauga\n6 -86.59111 32.37785     1     6 alabama   autauga\n\n\nWe will filter this dataframe so we are only left with data from Ohio:\n\nohio &lt;- map_data(map = \"county\") |&gt;\n  filter(region == \"ohio\")\n\nhead(ohio)\n\n       long      lat group order region subregion\n1 -83.66902 39.02989  2012 59960   ohio     adams\n2 -83.56590 39.02989  2012 59961   ohio     adams\n3 -83.37109 39.06426  2012 59962   ohio     adams\n4 -83.30806 39.06426  2012 59963   ohio     adams\n5 -83.30233 39.05280  2012 59964   ohio     adams\n6 -83.25649 39.01842  2012 59965   ohio     adams\n\n\nLet‚Äôs get a feel for what‚Äôs in the resulting dataframe ‚Äî the only region (i.e.¬†state) should be ohio, and subregions represent counties:\n\nohio |&gt; count(region)\n\n  region    n\n1   ohio 1427\n\nohio |&gt; count(subregion) |&gt; head()\n\n  subregion  n\n1     adams 17\n2     allen 16\n3   ashland 17\n4 ashtabula 11\n5    athens 19\n6  auglaize 16\n\n\nThe number of entries for each county (n in the output above) is simply how many points make up the lines. Those numbers are quite low, making this a relatively low-resolution map ‚Äî but good enough for our purposes.\n\n\nA base map of Ohio\nNow we are ready to plot our first map of Ohio:\n\np_ohio &lt;- ggplot(ohio) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey90\",\n    color = \"grey70\"\n    ) +\n  coord_sf()\n\np_ohio\n\n\n\n\nWe can use this as a base map to plot points on, like we did above with the US map. Or we could create a map where counties differ in fill color depending on some variable, like the number of farms or eagle nests in each county.\n\n\n\nAdding county names\nFor now, without pulling in additional data, say that we want to print the county names in the map.\nThe county names are in all-lowercase, so let‚Äôs start by transforming to ‚ÄúTitle Case‚Äù using the tools::toTitleCase() function:\n\nohio &lt;- ohio |&gt;\n  mutate(subregion = tools::toTitleCase(subregion))\n\nhead(ohio)\n\n       long      lat group order region subregion\n1 -83.66902 39.02989  2012 59960   ohio     Adams\n2 -83.56590 39.02989  2012 59961   ohio     Adams\n3 -83.37109 39.06426  2012 59962   ohio     Adams\n4 -83.30806 39.06426  2012 59963   ohio     Adams\n5 -83.30233 39.05280  2012 59964   ohio     Adams\n6 -83.25649 39.01842  2012 59965   ohio     Adams\n\n\nBut if we now add text labels with geom_text() using the subregion colum, we‚Äôll get the following terrible map:\n\np_ohio +\n  geom_text(\n    aes(x = long, y = lat, label = subregion),\n    color = \"darkblue\",\n    size = 3\n    )\n\n\n\n\n\n\nWhy is this happening?\n\n\nThe reason is that each county has a number of rows in the dataframe: one for each point that makes up its border. And right now, we‚Äôre printing the county label for every single point.\n\n\nSo, we‚Äôll need a single pair of coordinates for each county to print each county name once, and those should be in the center of each county. Therefore, we‚Äôll need to compute some kind of approximation of the county centers.\nTaking the mean of the border-coordinates for each county could be a start, but looking at the positions of the text labels in the map above, can you think of a reason why that may not be optimal?\n\n\nClick for the answer\n\n\nThere are more points in irregularly-shaped (i.e., not straight lines) parts of the border. In practice, those tend be on specific sides of the border (e.g., look at the western border of Ohio and the counties there), so the mean values will be drawn towards those sides. Using the median wouldn‚Äôt help.\n\n\nA better ‚Äìthough still not perfect‚Äì way to compute this is by subtracting, for both latitude and longitude, half of the range (max. - min.) from the maximum value:\n\ncounty_coords &lt;- ohio |&gt;\n  summarize(\n    long = max(long) - ((max(long) - min(long)) / 2),\n    lat = max(lat) - ((max(lat) - min(lat)) / 2),\n    .by = subregion\n    )\n\nhead(county_coords)\n\n  subregion      long      lat\n1     Adams -83.47995 38.84367\n2     Allen -84.14172 40.78887\n3   Ashland -82.28247 40.82324\n4 Ashtabula -80.76986 41.73425\n5    Athens -82.00745 39.37939\n6  Auglaize -84.17036 40.52244\n\n\nNow, we can add the county labels to the plot:\n\np_ohio +\n  geom_text(\n    data = county_coords,\n    aes(x = long, y = lat, label = subregion),\n    color = \"darkblue\",\n    size = 3\n    )\n\n\n\n\n\n\n\n Exercise 2\nA) OSU has campuses in the following places:\n\nColumbus, Franklin County\nWooster, Wayne County\nLima, Allen County\nMansfield, Richland County\nMarion, Marion County\nNewark, Licking County\n\nCan you create a map similar to our previous one, but then with only these 6 counties labeled by name? Like in the example below:\n\n\n\n\n\n\n\nClick here for some hints\n\n\nYou‚Äôll have to filter() the county_coords data frame to only keep the counties of interest.\nAfter that, the plotting code will be identical to that for the previous map, just make sure you pass the correct, filtered data frame.\n\n\n\n\nClick here for the solution\n\n\nFirst we filter the county_coords to only keep our focal counties, and store the result in a new data frame:\n\n\nfocal_counties &lt;- c(\"Franklin\", \"Wayne\", \"Allen\",\n                    \"Richland\", \"Marion\", \"Licking\") \n\ncounty_coords_sel &lt;- county_coords |&gt;\n  filter(subregion %in% focal_counties)\n\n\nWe use the same plotting code as before, but now with county_coords_sel:\n\n\np_ohio +\n  geom_text(\n    data = county_coords_sel,\n    aes(x = long, y = lat, label = subregion),\n    color = \"darkblue\",\n    size = 4\n    )\n\n\n\n\n\n\nB) (Bonus) Can you produce a map that has a different fill color for each county, like the one below?\n\n\n\n\n\n\n\nClick here for some hints\n\n\nYou‚Äôll want to keep the original geom_polygon() layer with the gray counties (i.e., you can start with the p_ohio map), and then add a second geom_polygon() layer that only has the selected counties.\nIn that second layer, map the county column to the fill aesthetic.\nMake sure to add the geom_text() layer last, or it would be masked by the polygon layer.\nIf you‚Äôre printing the names of the counties, then you won‚Äôt need a legend: you can turn that off using theme(legend.position = \"none\").\n\n\n\n\nClick here for the solution\n\n\np_ohio +\n  geom_polygon(\n    data = ohio |&gt; filter(subregion %in% focal_counties),\n    aes(x = long, y = lat, group = group, fill = subregion),\n    color = \"grey70\"\n    ) +\n  geom_text(\n    data = county_coords_sel,\n    aes(x = long, y = lat, label = subregion),\n    color = \"darkblue\",\n    size = 4\n    ) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/S09E06_maps_02/index.html#plotting-ohio-cities",
    "href": "posts/S09E06_maps_02/index.html#plotting-ohio-cities",
    "title": "Plotting geographical maps in R: part II",
    "section": "4 Plotting Ohio cities",
    "text": "4 Plotting Ohio cities\nFinally, we‚Äôll add all larger Ohio cities to our Ohio map. From the maps package, we can use the us.cities dataframe which contains US cities with populations greater than about 40,000:\n\n# 'us.cities' should be available if you have loaded the maps package\nhead(us.cities)\n\n        name country.etc    pop   lat    long capital\n1 Abilene TX          TX 113888 32.45  -99.74       0\n2   Akron OH          OH 206634 41.08  -81.52       0\n3 Alameda CA          CA  70069 37.77 -122.26       0\n4  Albany GA          GA  75510 31.58  -84.18       0\n5  Albany NY          NY  93576 42.67  -73.80       2\n6  Albany OR          OR  45535 44.62 -123.09       0\n\n\nLet‚Äôs pre-process this data a bit by:\n\nOnly taking Ohio cities with populations over 50,000\nStripping the state-abbreviation suffix that all cities have, as we saw above. Since we are left with only Ohio cities, we can therefore simply remove OH from the name:\n\n\noh_cities &lt;- us.cities |&gt;\n  filter(country.etc == \"OH\", pop &gt; 50000) |&gt;\n  # We'll use the sub() function to substitute \" OH\" with nothing (\"\"):\n  mutate(name = sub(pattern = \" OH\", replacement = \"\", x = name))\n\nhead(oh_cities)\n\n            name country.etc    pop   lat   long capital\n1          Akron          OH 206634 41.08 -81.52       0\n2         Canton          OH  77575 40.81 -81.37       0\n3     Cincinnati          OH 301561 39.14 -84.51       0\n4      Cleveland          OH 443949 41.48 -81.68       0\n5       Columbus          OH 741677 39.99 -82.99       2\n6 Cuyahoga Falls          OH  52223 41.17 -81.52       0\n\n\n\n\nAdding city points\nNow, let‚Äôs add these cities to our Ohio base map (p_ohio), with larger points for larger cities:\n\np_ohio_cities &lt;- p_ohio +\n  geom_point(\n    data = oh_cities,\n    aes(x = long, y = lat, size = pop),\n    fill = \"steelblue3\",\n    shape = 21\n    )\n\np_ohio_cities\n\n\n\n\n\n\nAdding city names\nNext, let‚Äôs add the names of the cities with geom_text():\n\np_ohio_cities +\n  geom_text(\n    data = oh_cities,\n    aes(x = long, y = lat + 0.1, label = name)\n    )\n\n\n\n\nOuch, there are a lot of overlapping labels there! We can avoid this with a drop-in replacement for geom_text() named geom_text_repel() from the ggrepel package:\n\np_ohio_cities_labeled &lt;- p_ohio_cities +\n  geom_text_repel(\n    data = oh_cities,\n    aes(x = long, y = lat, label = name)\n    )\n\np_ohio_cities_labeled\n\n\n\n\n\n\nSide note: A better legend\nWe may want to change the size legend a bit:\n\nIts title is pop, which we can change to e.g.¬†Population size.\nThe scientific notation of the population sizes is cumbersome to read, and we can change it to a notation with a comma as a thousands-separator (13,000, etc.) using labels = scales:comma.\nThe range of the legend entries (breaks) is quite a bit more restricted than the sizes of our cites (200-600k versus 50-740k), so we may want to get a better range by manually defining breaks.\n\n\np_ohio_cities_labeled +\n  scale_size_continuous(\n    name = \"Population size\",\n    labels = scales::comma,\n    breaks = c(100, 400, 700) * 1000\n  )\n\n\n\n\n\n\n\n\n\n\nWant to further expand the range of the legend‚Äôs scale breaks? (Click to expand)\n\n\n\n\n\nggplot will refuse to include breaks in the legend that are outside of the scale‚Äôs limits, which are by default the range of the data. Because the smallest city in the dataset is just larger than 50,000, and the largest city is just smaller than 750,000 (see below), setting breaks to these values will therefore not work unless we expand the scale‚Äôs limits with the limits argument.\nCheck what the range of population sizes is (min. and max.):\n\nrange(oh_cities$pop)\n\n[1]  50010 741677\n\n\nOr if we wanted to see which cities these are:\n\noh_cities |&gt; arrange(pop) |&gt; head(n = 1)\n\n       name country.etc   pop   lat   long capital\n1 Mansfield          OH 50010 40.76 -82.53       0\n\noh_cities |&gt; arrange(desc(pop)) |&gt; head(n = 1)\n\n      name country.etc    pop   lat   long capital\n1 Columbus          OH 741677 39.99 -82.99       2\n\n\n\nBreaks at 50 and 750 will be ignored by default (!), because they are outside of the scale‚Äôs limits:\n\np_ohio_cities_labeled +\n  scale_size_continuous(\n    name = \"Population size\",\n    labels = scales::comma,\n    breaks = c(50, 100, 250, 500, 750) * 1000\n  )\n\n\n\n\nIf we also expand the limits of the scale, we can include breaks at 50 and 750:\n\np_ohio_cities_labeled +\n  scale_size_continuous(\n    name = \"Population size\",\n    labels = scales::comma,\n    limits = c(50, 750) * 1000,\n    breaks = c(50, 100, 250, 500, 750) * 1000\n  )\n\n\n\n\n\n\n\n\n\n\n Bonus exercise\nCan you produce a map in which the names of cities with a population larger than 100,000 are in a bold italic (bold.italic) fontface, whereas those of smaller cities are in regular (plain) fontface?\nSee the example below:\n\n\n\n\n\n\n\nClick here for some hints\n\n\nUsing mutate() with an ifelse() statement, you‚Äôll first want to create a column that specifies whether or not a city has a population larger than 100,000.\nNext, you can map that newly created column to the fontface aesthetic (aes(fontface = ...)).\nThe fontface aesthetic is a bit unusual, so using it like you would say the size or color aesthetic doesn‚Äôt quite work. Take a look at the example in the ggplot docs and see if you can figure out how to use it.\n\n\n\n\nClick here for the solution\n\n\n\nFirst, we create a new column is_large that indicates whether a city has more than 100,000 inhabitants. Instead of coding this column with TRUE/FALSE (see below), we‚Äôll need to directly use the specific fontfaces we want to display for each type of city:\n\n\noh_cities &lt;- oh_cities |&gt;\n  mutate(is_large = ifelse(pop &gt; 100000, \"bold.italic\", \"plain\"))\n\n\nNext, we can map the fontface aesthetic to the is_large column:\n\n\np_ohio_cities +\n  geom_text_repel(\n    data = oh_cities,\n    aes(x = long, y = lat, label = name, fontface = is_large)\n    )\n\n\n\n\n\nIf we were using any other aesthetic (e.g.¬†fill), we would probably use TRUE/FALSE in the focal column instead, and that would work ‚Äî but it returns an error here:\n\n\noh_cities &lt;- oh_cities |&gt;\n  mutate(is_large = ifelse(pop &gt; 100000, TRUE, FALSE))\n\np_ohio_cities +\n  geom_text_repel(\n    data = oh_cities,\n    aes(x = long, y = lat, label = name, fontface = is_large)\n    )\n\nError in FUN(X[[i]], ...): invalid fontface TRUE\n\n\nAlong the same lines, there are no scale_fontface functions to set the fontfaces: this instead has to be done with the values in the column."
  },
  {
    "objectID": "posts/S09E06_maps_02/index.html#footnotes",
    "href": "posts/S09E06_maps_02/index.html#footnotes",
    "title": "Plotting geographical maps in R: part II",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n Specifically, ! require(...) will return TRUE if the package cannot be loaded because it is not installed ‚Äî and due to the if() statement, the install.packages(\"maps\") will be executed only if it returns TRUE.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S08E02_wrangling_02/index.html#load-packages",
    "href": "posts/S08E02_wrangling_02/index.html#load-packages",
    "title": "Data wrangling: using select(), arrange(), and mutate()",
    "section": "1.1 Load packages",
    "text": "1.1 Load packages\nFirst we will load the packages that we will use today.\n\nlibrary(tidyverse) \n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.3     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.4     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor) # for cleaning column names\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test"
  },
  {
    "objectID": "posts/S08E02_wrangling_02/index.html#data",
    "href": "posts/S08E02_wrangling_02/index.html#data",
    "title": "Data wrangling: using select(), arrange(), and mutate()",
    "section": "1.2 Data",
    "text": "1.2 Data\nWe are going to use data from The World Factbook, put together by the CIA to ‚Äúprovides basic intelligence on the history, people, government, economy, energy, geography, environment, communications, transportation, military, terrorism, and transnational issues for 265 world entities.‚Äù I thought this data would give us some opportunities to flex our R skills, and learn a bit about the world.\nThe data we are going to download can be found here, though I have saved the file, added it to our Code Club Github, and included some code below for you to download it.\nIf you downloaded this file two weeks ago, you don‚Äôt need to download it again, you just need to make sure you know where it is on your computer to read it in.\n\ndownload.file(\n  url = \"https://raw.githubusercontent.com/osu-codeclub/osu-codeclub.github.io/main/posts/S08E01_wrangling_01/data/factbook-2015.csv\",\n  destfile = \"factbook_download_2015.csv\"\n)\n\nWe can read it in using the tidyverse function from the readr package called read_csv().\n\nfactbook_2015 &lt;- read_csv(\"factbook_download_2015.csv\")\n\nRows: 217 Columns: 53\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (2): Country Name, Country Code\ndbl (51): Population, total, Population growth (annual %), Surface area (sq....\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe can look at this data another way, using the function head() to look at the first six rows, and every column.\n\nhead(factbook_2015)\n\n# A tibble: 6 √ó 53\n  `Country Name` `Country Code` `Population, total` Population growth (annual ‚Ä¶¬π\n  &lt;chr&gt;          &lt;chr&gt;                        &lt;dbl&gt;                        &lt;dbl&gt;\n1 Afghanistan    AFG                       33753499                        3.12 \n2 Albania        ALB                        2880703                       -0.291\n3 Algeria        DZA                       39543154                        2.00 \n4 American Samoa ASM                          51368                       -1.64 \n5 Andorra        AND                          71746                        0.174\n6 Angola         AGO                       28127721                        3.62 \n# ‚Ñπ abbreviated name: ¬π‚Äã`Population growth (annual %)`\n# ‚Ñπ 49 more variables: `Surface area (sq. km)` &lt;dbl&gt;,\n#   `Poverty headcount ratio at national poverty lines (% of population)` &lt;dbl&gt;,\n#   `GNI, Atlas method (current US$)` &lt;dbl&gt;,\n#   `GNI per capita, Atlas method (current US$)` &lt;dbl&gt;,\n#   `GNI, PPP (current international $)` &lt;dbl&gt;,\n#   `GNI per capita, PPP (current international $)` &lt;dbl&gt;, ‚Ä¶\n\n\nTwo weeks ago, we cleaned up the column names, so let‚Äôs do that again. If you want to remember why, you can go back to that lesson.\n\nfactbook_2015 &lt;- clean_names(factbook_2015)"
  },
  {
    "objectID": "posts/S08E02_wrangling_02/index.html#practice",
    "href": "posts/S08E02_wrangling_02/index.html#practice",
    "title": "Data wrangling: using select(), arrange(), and mutate()",
    "section": "2.1 Practice",
    "text": "2.1 Practice\nCome up with 3 different ways to select the columns about children, and make sure you also include a country column so you know what you‚Äôre looking at.\n\n\nNeed a hint?\n\nHere are the columns that I‚Äôm considering to be about children:\n[1] ‚Äúcountry_name‚Äù\n[17] ‚Äúmortality_rate_under_5_per_1_000_live_births‚Äù\n[18] ‚Äúprevalence_of_underweight_weight_for_age_percent_of_children_under_5‚Äù\n[19] ‚Äúimmunization_measles_percent_of_children_ages_12_23_months‚Äù\n[20] ‚Äúprimary_completion_rate_total_percent_of_relevant_age_group‚Äù\n[21] ‚Äúschool_enrollment_secondary_percent_gross‚Äù\n[22] ‚Äúschool_enrollment_primary_and_secondary_gross_gender_parity_index_gpi‚Äù\n\n\n\nClick for the solution\n\nBy name and for columns in a row, using the :.\n\nfactbook_2015 |&gt; \n  select(country_name, \n         mortality_rate_under_5_per_1_000_live_births:\n         school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi)\n\n# A tibble: 217 √ó 7\n   country_name        mortality_rate_under_5_per_1_000‚Ä¶¬π prevalence_of_underw‚Ä¶¬≤\n   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ‚Ñπ 207 more rows\n# ‚Ñπ abbreviated names: ¬π‚Äãmortality_rate_under_5_per_1_000_live_births,\n#   ¬≤‚Äãprevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ‚Ñπ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,\n#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,\n#   school_enrollment_secondary_percent_gross &lt;dbl&gt;, ‚Ä¶\n\n\nBy index:\n\nfactbook_2015 |&gt; \n  select(1, 17:22) \n\n# A tibble: 217 √ó 7\n   country_name        mortality_rate_under_5_per_1_000‚Ä¶¬π prevalence_of_underw‚Ä¶¬≤\n   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ‚Ñπ 207 more rows\n# ‚Ñπ abbreviated names: ¬π‚Äãmortality_rate_under_5_per_1_000_live_births,\n#   ¬≤‚Äãprevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ‚Ñπ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,\n#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,\n#   school_enrollment_secondary_percent_gross &lt;dbl&gt;, ‚Ä¶\n\n\nBy name characteristics:\n\nfactbook_2015 |&gt; \n  select(country_name, contains(\"under_5\"), contains(\"children\"),\n         contains(\"primary\"), contains(\"school\"))\n\n# A tibble: 217 √ó 7\n   country_name        mortality_rate_under_5_per_1_000‚Ä¶¬π prevalence_of_underw‚Ä¶¬≤\n   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ‚Ñπ 207 more rows\n# ‚Ñπ abbreviated names: ¬π‚Äãmortality_rate_under_5_per_1_000_live_births,\n#   ¬≤‚Äãprevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ‚Ñπ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,\n#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,\n#   school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi &lt;dbl&gt;, ‚Ä¶\n\n\nThese are just some ways!"
  },
  {
    "objectID": "posts/S08E02_wrangling_02/index.html#practice-1",
    "href": "posts/S08E02_wrangling_02/index.html#practice-1",
    "title": "Data wrangling: using select(), arrange(), and mutate()",
    "section": "3.1 Practice",
    "text": "3.1 Practice\nWhich countries have the lowest cell phone subscriptions? mobile_cellular_subscriptions_per_100_people\n\n\nNeed a hint?\n\nYou can use the function arrange() to sort your columns. The default arranging is from low to high, so if you want to go from high to low, you can set arrange(desc()).\n\n\n\nClick for the solution\n\n\nfactbook_2015 |&gt; \n  select(country_name, mobile_cellular_subscriptions_per_100_people) |&gt; \n  arrange(mobile_cellular_subscriptions_per_100_people)\n\n# A tibble: 217 √ó 2\n   country_name              mobile_cellular_subscriptions_per_100_people\n   &lt;chr&gt;                                                            &lt;dbl&gt;\n 1 Korea, Dem. People's Rep.                                         12.8\n 2 Eritrea                                                           14.2\n 3 Micronesia, Fed. Sts.                                             20.6\n 4 Central African Republic                                          25.8\n 5 South Sudan                                                       25.9\n 6 Cuba                                                              29.4\n 7 Djibouti                                                          31.2\n 8 Marshall Islands                                                  31.4\n 9 Kiribati                                                          35.1\n10 Chad                                                              38.7\n# ‚Ñπ 207 more rows"
  },
  {
    "objectID": "posts/S08E02_wrangling_02/index.html#practice-2",
    "href": "posts/S08E02_wrangling_02/index.html#practice-2",
    "title": "Data wrangling: using select(), arrange(), and mutate()",
    "section": "4.1 Practice",
    "text": "4.1 Practice\nWhich country has the highest dollar amount of GDP due to agricultlure, foresty and fishing products? What is that amount in US dollars?\n\n\nNeed a hint?\n\nOur data has gdp_current_us and agriculture_forestry_and_fishing_value_added_percent_of_gdp. From this you can calculate how much the total GDP from these sources.\n\n\n\nClick for the solution\n\n\nfactbook_2015 |&gt; \n  mutate(\n    ag_gdp = agriculture_forestry_and_fishing_value_added_percent_of_gdp * gdp_current_us) |&gt; \n  select(country_name, ag_gdp, agriculture_forestry_and_fishing_value_added_percent_of_gdp, gdp_current_us) |&gt; \n  arrange(desc(ag_gdp))\n\n# A tibble: 217 √ó 4\n   country_name        ag_gdp agriculture_forestry_and_fishing_‚Ä¶¬π gdp_current_us\n   &lt;chr&gt;                &lt;dbl&gt;                               &lt;dbl&gt;          &lt;dbl&gt;\n 1 China              9.28e13                                8.39        1.11e13\n 2 India              3.40e13                               16.2         2.10e12\n 3 United States      1.88e13                                1.03        1.83e13\n 4 Indonesia          1.16e13                               13.5         8.61e11\n 5 Nigeria            1.02e13                               20.6         4.93e11\n 6 Brazil             7.78e12                                4.32        1.80e12\n 7 Pakistan           6.98e12                               23.3         3.00e11\n 8 Turkiye            5.94e12                                6.87        8.64e11\n 9 Russian Federation 5.28e12                                3.87        1.36e12\n10 Japan              4.60e12                                1.03        4.44e12\n# ‚Ñπ 207 more rows\n# ‚Ñπ abbreviated name:\n#   ¬π‚Äãagriculture_forestry_and_fishing_value_added_percent_of_gdp"
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#introduction",
    "href": "posts/S06E01_website_01/index.html#introduction",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to begin this semester‚Äôs Code Club with a series on making yourself a website. There are lots of reasons why you might want a website, including to:\n\nhave a web presence about yourself (so when people google you, they can find your relevant info)\nhave a blog where you post about whatever it is you want to post about\nshare your research or data\n\nSome of you may already have a simple free or paid website for yourself, that you made through www.u.osu.edu, Squarespace, or Google Sites. These tools don‚Äôt require you to be able to code, and allow you to create a website with different levels of customization and interactivity.\nFor the next few sessions, we are going to go over making a website using Quarto. Quarto can be used as an open-source publishing system and you can integrate content from Jupyter notebooks, plain text markdown, Python, R, Julia and others. We are going to use Quarto integrated with R.\n\nTake a look at a gallery of Quarto website examples.\n\nWe picked this particular platform to go over in Code Club since its lightweight, customizable, free, and integrates with R which you‚Äôre probably learning anyway. I am going to start going through an example that will be my personal website. I picked this example because I thought this might be of interest to most of you."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#installation",
    "href": "posts/S06E01_website_01/index.html#installation",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "2 Installation",
    "text": "2 Installation\nTo render your website in RStudio, you will need to have the rmarkdown R package installed. You can do so by typing (or copying) the following into your R Console inside RStudio:\n\ninstall.packages(\"rmarkdown\")\n\nWhile not necessary for basic website building inside RStudio, it will also be a good idea to have Quarto installed moving forward. This is not an R package, but is a separate piece of software. To install it, go to https://quarto.org/docs/get-started/ and the correct installer for your operating system should be highlighted in a blue box. Click on that box to download and once downloaded, click on the installer to install Quarto.\n\n\n\nThe blue box should highlight the installer for your operating system."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#initiating-your-website-project",
    "href": "posts/S06E01_website_01/index.html#initiating-your-website-project",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "3 Initiating your website project",
    "text": "3 Initiating your website project\nThe first step to getting a website is to open up a new project in RStudio.\nStart by going to File &gt; New Project &gt; New Directory. When asked which Project Type you want, pick Quarto Website. Note that you can also initiate a Quarto Blog which is a type of Quarto Website - since the website template is simpler we are going to start there, and can change back in the future if you want. If you want to read ahead, here is a nice website about making your Quarto website into a blog.\n\n\n\na screen shot of the new project wizard - we are picking Quarto Website, or the third from the bottom choice\n\n\nYou will then be asked where you want this website to live in your computer. Under Directory Name pick the name of the folder you want your content to be in, and Create project as subdirectory of as where you want the location on your computer. I have used the Knitr engine for website building.\n\n\n\na screen shot of the new project wizard where we indicate our directory name and where that directory will reside. we use knitr engine to run, and are not creating a git repo, using renv, or using visual markdown editor. we are opening in a new session\n\n\nI am not creating a git repository (since we haven‚Äôt gone over that yet, we will add it later after we finish our site), am not using renv with this project (which automatically saves your environment), and I am not default using the visual editor (which let‚Äôs you look at your markdown files how they will look when executed) since I want you to get used to looking at markdown. You can always toggle the visual editor later.\nOnce you do this basically you have all the bones of a website! Congratulations ü•≥"
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#orienting-to-your-website",
    "href": "posts/S06E01_website_01/index.html#orienting-to-your-website",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "4 Orienting to your website",
    "text": "4 Orienting to your website\nA new RStudio window should have opened (since we checked the box in the previous step Open in new session) that has your new R project opened.\nWe now see the four quadrants of RStudio:\n\n\n\na screenshot of four quadrants of rstudio\n\n\n\nthe top left where the two website files index.qmd and _quarto.yml are open\nthe bottom left where we see the console\nthe top right where we see the tabs: Environment (which is currently empty), History (which we won‚Äôt use), Connections (which we won‚Äôt use), Tutorial (which we won‚Äôt use), and a new one Build (which is how we render our site)\nthe bottom right where we see Files (which houses the new files that populate our website), Plots (which you‚Äôve seen before and where plots can be rendered if you don‚Äôt like them inline), Packages (which shows all the packages loaded in your R), Help (which you‚Äôve seen before, and where you can get help), Viewer (a new one where we can see a preview rendering of our website), and Presentation (where we can see a preview rendering a presentation but we aren‚Äôt doing that right now)."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#building-your-site",
    "href": "posts/S06E01_website_01/index.html#building-your-site",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "5 Building your site",
    "text": "5 Building your site\nLet‚Äôs see what our website looks like before we‚Äôve done anything. If you go to the Build tab in the top right quadrant and click Render Website your site will render and show up in the Viewer in the bottom right."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#looking-around",
    "href": "posts/S06E01_website_01/index.html#looking-around",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "6 Looking around",
    "text": "6 Looking around\nYou can now click around in your new and very unexciting website. Let‚Äôs look around and then we will go through the file structure to see how the two are related.\nAlong the top, or if you click the three lines in the top right (depending on the size of your browser page) you can see by default we get a Home and About page. If we click ‚Äòwebsite‚Äô at the top, we go back to Home. We also have a search bar that allows us to search on our site.\nNow that we know what information we see on our site, we can look at the files that are used to build the site and try and interpret them.\n\n\n\na screenshot of the files generated by creating our skeleton website in the bottom right quadrant\n\n\nBefore we open the files, let‚Äôs talk about the file extensions and what they mean:\n\n.yml is a YAML or the file that indicates how the website will be configured\n.qmd is a Quarto markdown document, and if you‚Äôre familiar with RMarkdown .Rmd documents its very similar. It contains both text written in markdown and executable code.\n.css is a Cascading Style Sheets file that indicates the way to style an HTML document (i.e., your website)\n.Rproj is a R Project file that designates your working directory\n\nWe also have a folder _site which houses the knitted website files. More about this later."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#index.qmd",
    "href": "posts/S06E01_website_01/index.html#index.qmd",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "7 index.qmd",
    "text": "7 index.qmd\nThis index.qmd file indicates what the home page of the site will look like.\n\n\n\na screenshot of the index.qmd file\n\n\nIntuitively we can compare this file to what the homepage of the website looks like. You can try editing this website, saving, and then click Render and see how this changes what the site looks like in the Viewer (bottom right quadrant). You can check Render on Save so that whenever you save, the file automatically renders.\nPlay around with adding text, code, headers, images, whatever you might want on your website homepage."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#about.qmd",
    "href": "posts/S06E01_website_01/index.html#about.qmd",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "8 about.qmd",
    "text": "8 about.qmd\nThis about.qmd file indicates what the about page of the site will look like.\n\n\n\na screenshot of the about.qmd file\n\n\nJust like with the index.qmd file, you can play around with this page."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#quarto.yml",
    "href": "posts/S06E01_website_01/index.html#quarto.yml",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "9 _quarto.yml",
    "text": "9 _quarto.yml\nThe YAML file indicates how the site should be configured.\n\n\n\na screenshot of the _quarto.yml file\n\n\nYou‚Äôre probably not familiar with these .yml files but still its not horribly difficult to figure out what the different bits do.\nAt the top, project type is indicated as website. We don‚Äôt want to change that now.\nIn the next section beginning at line 4, we can have some specific information for how the website populates. The title is listed as ‚Äúwebsite‚Äù - we can change that to what we want at the top of our website. There is also a specification for what are the items in your navitation bar - here we have that the Home text will link to the index.qmd, and the next link is about.qmd. You can make more .qmd files that have other information and refer to them here and they will also populate in your navigation bar.\nIn the third section at line 12, we can see some information on the setting of the website format. We have a html site, the theme is something called ‚Äúcosmo‚Äù (see here for some other options), we are using the styles.css file for css theming (actually that file is currently blank but thats ok), and we are indicating toc (or table of contents) as true, therefore we have a table of contents.\nHere you can find some documentation about all the different stuff you can put in your YAML for a website."
  },
  {
    "objectID": "posts/S06E01_website_01/index.html#playing-around",
    "href": "posts/S06E01_website_01/index.html#playing-around",
    "title": "Quarto website 1: Initiating a website üåê",
    "section": "10 Playing around",
    "text": "10 Playing around\nNow that we have a general understanding of whats in our site, try playing around to begin customization to be how you want. We will do this for the rest of the session and please ask any questions on problems you come across, or share cool things you find!"
  },
  {
    "objectID": "posts/S06E05_website_05/index.html",
    "href": "posts/S06E05_website_05/index.html",
    "title": "Quarto website 5: modifying your site",
    "section": "",
    "text": "Artwork from ‚ÄúHello, Quarto‚Äù keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.‚Äù\n\n1 Introduction\nToday we are going to continue customizing our website by:\n\nMaking a fancy about page\nLearning how to make multi-level drop down menu headers\nChanging our website themeing in _quarto.yml\nDoing some light (S)CSS styling to change the visuals of our site\n\nThen, we will push our changes to GitHub using GitHub Desktop. But first:\n\n\n\n\n\n\n\nAre there other things you want to learn how to do with your website?\n\n\nPlease share!\n\n\n\n\nA good way to see what is possible to do with your website is to browse through some other people‚Äôs sites. There is a Quarto website gallery here. Just like people can access the source code on your website, you can often do the same for others. This means if you see a feature you like, you can go into their website code and try and figure out how its done.\n\n\n2 Updating our About page\nBecause many people who have a Quarto website will have an About page, there are some special, nicely formatted templates which you can use. You can learn more about fancy about pages here, inclduing seeing what the different templates look like.\nWe are going to practie with our Code Club practice-website.\nFirst, let‚Äôs set one of the about templates in the YAML of our about.qmd file. I am going to start with jolla.\ntitle: \"About me\"\nabout:\n  template: jolla\n  image: name_of_image.jpg\nBefore we render this page, we need to make sure the image we want to appear in this about page is in the home directory of your website. If you want to keep all your images in a subfolder so they‚Äôre not just floating around loose, you can. And then your YAML will look like this:\ntitle: \"About me\"\nabout:\n  template: jolla # could also use trestles, solana, marquee, broadside\n  image: img/name_of_image.jpg\nIf you want to use some of the other templates, like trestles, solana, marquee, and broadside, you will want to have other information in your about.qmd, perhaps sections on Education and Experience.\nCheck out using these different templates and pick the one you like the most if you want to customize your about page.\n\n\n3 Creating multi-level drop down menu headers\nEarlier I mentioned we can go into other websites to see how different features are coded. We are going to do this on the OSU Code Club website to see how it has achieved having multi-level headers. We can also visit the source repository on GitHub to see how this website is formatted.\nIf you look at the Code Club website homepage, you can see that the header ‚ÄúNew here?‚Äù has a drop down, and allows you to choose from a few different options.\n\nHow was that done? If you remember back a few sessions ago, we set what our headers were going to be in the _quarto.yml file. Let‚Äôs see what that file looks like from the Code Club source repo.\nThe _quarto.yml looks like this:\nproject:\n  type: website\n  preview: \n    navigate: false\n\nwebsite:\n  title: \"OSU Code Club\"\n  site-url: https://osu-codeclub.github.io/\n  repo-url: https://github.com/osu-codeclub/osu-codeclub.github.io\n  repo-actions: [edit, issue]\n  page-navigation: true\n  back-to-top-navigation: true\n  navbar:\n    left:\n      - href: pages/schedule.qmd\n        text: Schedule\n      - href: pages/previous.qmd\n        text: Previous sessions\n      - text: New here?\n        menu:\n        - text: Computer setup for Code Club\n          href: pages/setup.qmd\n        - text: R resources for beginners\n          href: pages/r_resources.qmd\n        - text: Sign up!\n          href: https://forms.gle/eYkMvmJShrcANUrt5\nLooking at this we can see what code is used for make drop down headers. You can copy this code into your _quarto.yml and then modify the text and href to be appropriate for your site.\nRemember that when you link to new pages, you will need to have material for that page to populate. If we look at the example above, the ‚ÄúComputer setup for Code Club‚Äù material is in a file called setup.qmd in a folder called pages in the home directory of the website.\n\n\n4 Altering website styling in _quarto.yml\nMaking simpler changes, like setting your background colors and fonts, you can do by altering your _quarto.yml file under the format header. For example, we could make the following changes to our practice-website.\nwebsite:\n  navbar:\n    background: \"#06280C\" # foresty green\n\nformat:\n  html:\n    theme: flatly\n    toc: true\n    number-sections: true\n    mainfont: Proxima Nova\n    backgroundcolor: \"#CFDAD3\" # light grey\n    monobackgroundcolor: \"#CFDAD3\" # light grey\n    title-block-banner: \"#06280C\" # foresty green\n    title-block-banner-color: \"#CFDAD3\" # light grey\n    fontcolor: \"#06280C\" # foresty green\n    linkcolor: \"#0E11E2\" # hyperlink blue\nYou don‚Äôt need to comment on what your colors are, I just like to do this since I have no connection between hexadecimal codes and actual colors, and this helps me to remember what is what. You can see all of the html options you can change within your YAML here\nOnce you made changes, render your website to see what they look like.\n\n\n5 Altering (S)CSS code to change website styling\nSometimes you might want to make more changes that what you can do using the avaiable keys in your YAML. When that is the case, you can make additional alterations by creating a .scss theme file.\nCSS stands for Cascading Style Sheets and it is used to format the layout of a webpage. By learning how to modify existing CSS files, it is relatively simple to change how your website looks. SCSS is Sassy CSS and the difference is not really important right now, but I think the .scss files are a little easier to modify, and are the default in Quarto, so we are going to work from those.\nThe Quarto website built in themes use Bootswatch and both the Code Club and practice-website use flatly so let‚Äôs start there. You can find .scss. files for each theme in the Quarto GitHub source repo here. I am going to go to the flatly theme and download it using the ‚ÄúDownload raw file‚Äù button in the top right of the page. Save this file in the home directory of your website.\n\nLet‚Äôs open it in RStudio. We will play around with making some changes.\nOne thing you might want to change first are the colors. Quarto accepts color information as hexadecimal codes. If you want to know the hexadecimal 6 digit code for any color you can go to www.htmlcolorcodes.com to find the color/code pair that you want.\nIn the Quarto documentation, you can find information about the Sass variables that can be specified within your .scss. file what what they mean.\n\n\n6 Commit and push to GitHub\nOnce you are happy with your changes, the last step is to commit and push them to GitHub so the changes can be reflected on your website. You can do this in GitHub desktop by entering a comment in the bottom left, committing to main (or master), and then push to origin.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/S06E09_shiny_02/index.html",
    "href": "posts/S06E09_shiny_02/index.html",
    "title": "Shiny 02: Intro to Shiny (cont.)",
    "section": "",
    "text": "Welcome to our shiny app development class! Throughout this session, we will continue diving into the world of Shiny and explore its incredible potential for creating interactive web applications. Today we will use the function reactiveVal."
  },
  {
    "objectID": "posts/S06E09_shiny_02/index.html#shiny-app-to-collect-data.",
    "href": "posts/S06E09_shiny_02/index.html#shiny-app-to-collect-data.",
    "title": "Shiny 02: Intro to Shiny (cont.)",
    "section": "1 Shiny App to collect data.",
    "text": "1 Shiny App to collect data.\nThe reactiveVal function is utilized to create a ‚Äúreactive value‚Äù object which has special capabilities for reactive programming. It serves as a variable that allows both reading and writing of values. Whenever the value is read from a reactiveVal object, the calling reactive expression becomes dependent on it. Similarly, when the value is altered, any reactives that were previously dependent on it are notified.\nLet‚Äôs make a shiny app and see how this works!\n\n# Install and call the following packages.\nlibrary(shiny)\nlibrary(DT)\n\n# Initialize an empty data frame to store the collected data\ncollected_data &lt;- data.frame(\n  Treatment = character(0),\n  PlotNumber = numeric(0),\n  StandCount = numeric(0),\n  PlantHeight = numeric(0),\n  Severity = numeric(0)\n)\n\n# Create a variable to store the selected rows\nselected_rows &lt;- reactiveVal()\n\n# Define the UI\nui &lt;- fluidPage(\n  titlePanel(\"Soybean Field Data Collection\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"treatment\", \"Select Treatment:\", c(\"T1\", \"T2\", \"T3\")),\n      numericInput(\"plot\", \"Enter Plot Number:\", value = 101, min = 101, max = 304),\n      numericInput(\"stand_count\", \"Enter Stand Count:\", value = 0),\n      numericInput(\"plant_height\", \"Enter Plant Height (in cm):\", value = 0),\n      numericInput(\"severity\", \"Enter Severity Rating:\", value = 0),\n      actionButton(\"submit\", \"Submit Data\"),\n      actionButton(\"delete\", \"Delete Selected Row\"),\n      downloadButton(\"downloadData\", \"Download Data\")\n    ),\n    \n    mainPanel(\n      DTOutput(\"dataTable\")\n    )\n  )\n)\n\n# Define the server\nserver &lt;- function(input, output, session) {\n  collected_data_reactive &lt;- reactiveVal(NULL)\n  \n  observeEvent(input$submit, {\n    new_entry &lt;- data.frame(\n      Treatment = input$treatment,\n      PlotNumber = input$plot,\n      StandCount = input$stand_count,\n      PlantHeight = input$plant_height,\n      Severity = input$severity\n    )\n    # Append the new entry to the collected data\n    collected_data &lt;- rbind(collected_data_reactive(), new_entry)\n    collected_data_reactive(collected_data)\n    \n    # Reset input fields\n    updateSelectInput(session, \"treatment\", selected = \"T1\")\n    updateNumericInput(session, \"plot\", value = 101)\n    updateNumericInput(session, \"stand_count\", value = 0)\n    updateNumericInput(session, \"plant_height\", value = 0)\n    updateNumericInput(session, \"severity\", value = 0)\n  })\n  \n  observeEvent(input$delete, {\n    # Get the selected row(s) and remove them from the collected data\n    selected_rows(input$dataTable_rows_selected)\n    if (length(selected_rows()) &gt; 0) {\n      collected_data &lt;- collected_data_reactive()\n      collected_data &lt;- collected_data[-selected_rows(), ]\n      collected_data_reactive(collected_data)\n    }\n  })\n  \n  output$dataTable &lt;- renderDT({\n    datatable(collected_data_reactive(), options = list(select = \"multi\"))\n  })\n  \n  # Download data as a CSV file\n  output$downloadData &lt;- downloadHandler(\n    filename = function() {\n      \"collected_data.csv\"\n    },\n    content = function(file) {\n      write.csv(collected_data_reactive(), file)\n    }\n  )\n}\n\n# Run the app\nshinyApp(ui, server)\n\nNow that we have successfully developed a shiny app for data collection, we can now proceed to working on another app designed for processing the collected data."
  },
  {
    "objectID": "posts/S06E09_shiny_02/index.html#shiny-app-to-process-collected-data.",
    "href": "posts/S06E09_shiny_02/index.html#shiny-app-to-process-collected-data.",
    "title": "Shiny 02: Intro to Shiny (cont.)",
    "section": "2 Shiny App to process collected data.",
    "text": "2 Shiny App to process collected data.\nWe will use shinyjs and ggstatsplot to generate a shiny app that will use collected data to process and generate some preliminary data viz and descriptive stats. For this you will need to use .csv file Aggressiveness_Zone.csv that was sent to your email.\n\n# Load required libraries\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggstatsplot)\nlibrary(shinyjs)\n\n# Define UI\nui &lt;- fluidPage(\n  useShinyjs(),\n  titlePanel(\"Summary Statistics and Plots\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Choose CSV File\"),\n      selectInput(\"plotType\", \"Select Plot Type\",\n                  c(\"Box-violin Plot\", \"Box Plot\", \"Violin Plot\")),\n      \n      # Add options to modify axis label and tick label size\n      sliderInput(\"axisLabelSize\", \"Axis Label Size\", min = 8, max = 20, value = 12),\n      sliderInput(\"axisTickLabelSize\", \"Axis Tick Label Size\", min = 8, max = 20, value = 10)\n    ),\n    \n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Summary Statistics\", tableOutput(\"summaryTable\")),\n        tabPanel(\"Plots\", plotOutput(\"plot\"))\n      )\n    )\n  )\n)\n\n# Define server\nserver &lt;- function(input, output) {\n  data &lt;- reactive({\n    inFile &lt;- input$file\n    if (is.null(inFile)) return(NULL)\n    read.csv(inFile$datapath)\n  })\n  \n  # Define plot_type in the global scope\n  plot_type &lt;- reactive({\n    if (!is.null(data())) {\n      switch(input$plotType,\n             \"Box-violin Plot\" = {\n               ggstatsplot::ggbetweenstats(data(), x = AEZ, y = RF, messages = FALSE)\n             },\n             \"Box Plot\" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +\n               geom_boxplot() +\n               scale_fill_brewer(palette = \"Set1\") +\n               theme(axis.text.x = element_text(size = input$axisTickLabelSize),\n                     axis.text.y = element_text(size = input$axisTickLabelSize),\n                     axis.title.x = element_text(size = input$axisLabelSize),\n                     axis.title.y = element_text(size = input$axisLabelSize))\n             ,\n             \"Violin Plot\" = ggplot(data(), aes(x = AEZ, y = RF, fill = AEZ)) +\n               geom_violin() +\n               geom_point(aes(x = AEZ, y = RF), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 2) +\n               stat_summary(aes(group = AEZ), fun.data = mean_cl_boot, geom = \"crossbar\", width = 0.5) +\n               scale_fill_brewer(palette = \"Set2\") +\n               theme(axis.text.x = element_text(size = input$axisTickLabelSize),\n                     axis.text.y = element_text(size = input$axisTickLabelSize),\n                     axis.title.x = element_text(size = input$axisLabelSize),\n                     axis.title.y = element_text(size = input$axisLabelSize))\n      )\n    }\n  })\n  \n  output$summaryTable &lt;- renderTable({\n    if (is.null(data())) return(NULL)\n    summary_stats &lt;- data() %&gt;%\n      group_by(AEZ) %&gt;%\n      summarize(\n        Mean = mean(RF),\n        Standard_Deviation = sd(RF),\n        Standard_Error = sd(RF) / sqrt(n())\n      )\n    as.data.frame(summary_stats)\n  })\n  \n  output$plot &lt;- renderPlot({\n    plot_type()\n  })\n}\n\n# Run the application\nshinyApp(ui, server)"
  },
  {
    "objectID": "posts/S07E03_basics_03/index.html#introduction",
    "href": "posts/S07E03_basics_03/index.html#introduction",
    "title": "R Basics 3: Built-in functions, Vectors, and Help",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of last week\nLast week, we did a little more basic interaction with R (missing prompts and data types), we wrote code in R scripts (and added comments to our code), and used and named R objects.\nHere are some additional tips from our previous session: Go to Tools and then Keyboard Shortcuts Help. Identify useful keyboard shortcuts and use them during today‚Äôs session.\n\n\nLearning objectives for today\n\nBuilt-in Functions\nVectors in R\nGetting Help with R"
  },
  {
    "objectID": "posts/S07E03_basics_03/index.html#types-of-functions-in-r",
    "href": "posts/S07E03_basics_03/index.html#types-of-functions-in-r",
    "title": "R Basics 3: Built-in functions, Vectors, and Help",
    "section": "2 Types of Functions in R",
    "text": "2 Types of Functions in R\nFunctions are the foundation of almost everything in R. In programming, they are sets of organized instructions designed to perform specific tasks. The purpose of functions is to create self-contained programs that can be called upon as needed.\n\n\n\nFig. 1. Types of Functions in R\n\n\n\n2.1 What‚Äôs in a function?\nWhat exactly is a function? Let‚Äôs recall from our math knowledge:\n\n\n\nFig. 2. Function Rules\n\n\nA function in R is a collection of statements that can be reused in a program. This is the syntax of defining a function in R:\n\n\n\nFig. 3. R Function Syntax\n\n\n\n\nWhich function was covered during our first session of Code Club? (Click for the answer)\n\nDuring our first session of Code Club, we examined the setwd function.\n\n\n\n2.2 Types of built-in functions in R?\nBuilt-in functions, which are already created or defined in the programming framework, are referred to as built-in functions. R offers a comprehensive collection of functions that can effectively handle almost any task for the user. These built-in functions are categorized based on their functionality as follows.\n\n\n\nFig. 4. Types of built-in functions in R\n\n\n\n\n\n\n\n\nBefore we begin examining various functions\n\n\n\nPlease refer to:\n\nThe R Base Package\nBase R Cheat Sheet\n\n\n\n\n\nMath functions\nA numeric function in R is defined as a function that can accept either a set of numeric values or a numeric vector (see below) as an input argument to carry out specific tasks. Here are several frequently used numeric functions in R programming.\n\n\n\n\n\n\n\nFunction\nDescription\n\n\nabs(x)\nabsolute value\n\n\nsqrt(x)\nsquare root\n\n\nceiling(x)\nceiling(3.475) is 4\n\n\nfloor(x)\nfloor(3.475) is 3\n\n\ntrunc(x)\ntrunc(5.99) is 5\n\n\nround(x¬†, digits=¬†n)\nround(3.475, digits=2) is 3.48\n\n\nsignif(x¬†, digits=¬†n)\nsignif(3.475, digits=2) is 3.5\n\n\ncos(x), sin(x), tan(x)\nalso asin(x), acos(x), cosh(x), acosh(x), etc.\n\n\nlog(x)\nnatural logarithm\n\n\nlog10(x)\ncommon logarithm\n\n\nexp(x)\ne^x\n\n\n\n\n\nExercises 1\nA) Let‚Äôs explore one function in particular: sum\nLast week we used R as a calculator. Add 5 and 7 the way we did last week and then try using the built-in function sum.\nUsing R as a calculator to add 5 and 7:\n\n\nSolution (click here)\n\n\n5 + 7\n\n[1] 12\n\n\n\nUsing the sum built-in function in R, add 5 and 7:\n\n\nSolution (click here)\n\n\nsum(5, 7)\n\n[1] 12\n\n\n\nB) Now, let‚Äôs combine functions by adding 3, 7, 9, and 11. After that, we will multiply the sum by 3. Lastly, we will calculate the square root of this result and round it to the nearest whole number.\n\n\nSolution (click here)\n\n\nround(sqrt(sum(3, 7, 9, 11)*3))\n\n[1] 9\n\n\n\nC) Below is a very common example in my data analysis.\n\n\nIn the field of Plant Pathology, data such as disease incidence or severity is typically collected as a percentage or proportion. To prepare the data for analysis, it is common to apply a data transformation known as the arc-sine square root. You have gathered disease severity data from three plots: 0.75 (control), 0.70 (Trt 1), and 0.30 (Trt 2). Apply the transformation mentioned above to your data for analysis.  (Click for the answer)\n\n\nControl &lt;- 0.75\nTrt1 &lt;- 0.70\nTrt2 &lt;- 0.30\n\nasin(sqrt(Control))\n\n[1] 1.047198\n\nasin(sqrt(Trt1))\n\n[1] 0.9911566\n\nasin(sqrt(Trt2))\n\n[1] 0.5796397\n\n\n\n\n\nStatistical probability functions\nThe table below provides descriptions of functions pertaining to probability distributions.\n\n\n\n\n\n\n\nFunction\nDescription\n\n\ndnorm(x)\nnormal density function (by default m=0 sd=1)\n\n\npnorm(q)\ncumulative normal probability for q\n(area under the normal curve to the left of q)\npnorm(1.96) is 0.975\n\n\nqnorm(p)\nnormal quantile.¬†\nvalue at the p percentile of normal distribution\nqnorm(.9) is 1.28 # 90th percentile\n\n\nrnorm(n, m=0, sd=1)\nn random normal deviates with mean m\nand standard deviation sd.\n\n\n\nLet‚Äôs generate 10 random normal variates with mean=50, sd=10.\n\nx &lt;- rnorm(10, m=50, sd=10)\nround(x) # Rounding to the nearest whole number. \n\n [1] 50 62 78 58 51 38 47 56 66 57\n\n\nNow let‚Äôs do the same thing, but call it y .\n\n\n\n\n\n\nDid you get the same result?\n\n\n\nTo ensure reproducibility of pseudo-random numbers for the random number generators listed, you can utilize set.seed(1234) or any other integer.\n\n\n\n\nExample (click here)\n\n\nset.seed(1234)\nx &lt;- round(rnorm(10, m=50, sd=10))\nx\n\n [1] 38 53 61 27 54 55 44 45 44 41\n\n\n\n\n\nOther statistical and useful functions\nOther useful statistical functions are provided in the following table.\n\n\n\n\n\n\n\nFunction\nDescription\n\n\nseq(from¬†,¬†to¬†,¬†by)\ngenerate a sequence\nindices &lt;- seq(1,10,2)\n#indices is c(1, 3, 5, 7, 9)\n\n\nrep(x¬†,¬†ntimes)\nrepeat¬†x¬†n¬†times\ny &lt;- rep(1:3, 2)\n# y is c(1, 2, 3, 1, 2, 3)\n\n\n\nEach has the option na.rm to strip missing values before calculations. Otherwise the presence of missing values will lead to a missing result.\n\n\n\n\n\n\n\nmean(x¬†, trim=0,\nna.rm=¬†FALSE¬†)\nmean of object x\n\n\nsd(x)\nstandard deviation of object(x).\n\n\nmedian(x)\nmedian\n\n\nrange(x)\nrange\n\n\nsum(x)\nsum\n\n\nmin(x)\nminimum\n\n\nmax(x)\nmaximum\n\n\n\n\n\n\n\n\n\nNota bene\n\n\n\nObject can be a numeric vector or data frame.\n\n\n\n\nExercises 2\nA) Let‚Äôs explore the following functions together using the group of numbers: 5, 7, 3, and 9 (in this order). These functions include: sum, min, max, and range\n\n\nSolution (click here)\n\n\nsum(5, 7, 3, 9)\n\n[1] 24\n\nmin(5, 7, 3, 9)\n\n[1] 3\n\nmax(5, 7, 3, 9)\n\n[1] 9\n\nrange(5, 7, 3, 9)\n\n[1] 3 9\n\n\n\nB) Let‚Äôs now get the average, standard deviation, and sort these numbers using mean, sd, and sort.\n\n\nSolution (click here)\n\n\nmean(5, 7, 3, 9)\n\n[1] 5\n\nsd(5, 7, 3, 9)\n\nError in sd(5, 7, 3, 9): unused arguments (3, 9)\n\nsort(5, 7, 3, 9)\n\nError in sort(5, 7, 3, 9): 'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?"
  },
  {
    "objectID": "posts/S07E03_basics_03/index.html#vectors-in-r",
    "href": "posts/S07E03_basics_03/index.html#vectors-in-r",
    "title": "R Basics 3: Built-in functions, Vectors, and Help",
    "section": "3 Vectors in R",
    "text": "3 Vectors in R\nDepending on the type of data that one needs to store in R, different data structures can be used. The four most commonly used data structures in R are vectors, lists, matrices, and data frames. In this session, we will only be working with vectors.\nThe fundamental data structure in R is vectors, which are 1-dimensional data structures that can only contain one type of data (e.g., all entries must have the same mode). To create a vector in R, the function c() (concatenate or combine) is used, as shown below.\nLet‚Äôs create a vector named ‚Äúmy_vector‚Äù with 5 entries.\n\nmy_vector &lt;- c(10, 30, 50, 20, 40)\nmy_vector\n\n[1] 10 30 50 20 40\n\n\nThe output generated on the previous code chunk displays the entries in your vector, with the 1 in squared brackets indicating the position of the entry to its right in the vector. In this case, 10 is the first entry of the vector.\nIf, for any reason, we only wish to extract the value 50 from this vector, we can utilize our knowledge of it being in the third position to do so.\n\nmy_vector[3]\n\n[1] 50\n\n\nSince a vector can only contain one data type, all its members need to be of the same type. If you attempt to combine data of different types into a vector, R will not provide a warning, but rather coerce it to the most flexible type. (The order of flexibility, from least to most, is: logical, integer, double, character). Therefore, if you add a number to a logical vector, the entire vector will be converted to a numeric vector.\nTo check what data type an object is, run the R built-in function class(), with the object as the only parameter.\n\nclass(my_vector)\n\n[1] \"numeric\"\n\n\nIf you for any reason want to have more information about any object you have stored in your R session the command¬†str()¬†is very helpful.\n\nstr(my_vector)\n\n num [1:5] 10 30 50 20 40\n\n\n\nExercises 3\nA) Let‚Äôs revisit mean, sd, sort, and other basic R operators.\n\nmean(my_vector)\n\n[1] 30\n\nsd(my_vector)\n\n[1] 15.81139\n\nsort(my_vector)\n\n[1] 10 20 30 40 50\n\n\nB) Add 7 to the my_vector, multiply 3 by my_vector, and check which values are greater than 25.\n\n\nSolution (click here)\n\n\n7 + my_vector\n\n[1] 17 37 57 27 47\n\n3 * my_vector\n\n[1]  30  90 150  60 120\n\n25 &gt;= my_vector\n\n[1]  TRUE FALSE FALSE  TRUE FALSE\n\n\n\nC) Please create another_vector and add it to my_vector. Next, use the sum function to combine these vectors."
  },
  {
    "objectID": "posts/S07E03_basics_03/index.html#getting-help-with-r",
    "href": "posts/S07E03_basics_03/index.html#getting-help-with-r",
    "title": "R Basics 3: Built-in functions, Vectors, and Help",
    "section": "4 Getting Help with R",
    "text": "4 Getting Help with R\nBefore seeking assistance from others, it is generally advisable for you to attempt to resolve the problem on your own. R provides comprehensive tools for accessing documentation and searching for help.\n\n4.1 R Help: help() and ?\nThe help() function and ? help operator in R offer access to documentation pages for R functions, data sets, and other objects. They provide access to both packages in the standard R distribution and contributed packages.\n\nExercises 4\nA) Can you obtain information about the type of R object that mean() and sum() functions take by using the help() or ? functions?"
  },
  {
    "objectID": "posts/S09E11_gt_01/index.html#introduction",
    "href": "posts/S09E11_gt_01/index.html#introduction",
    "title": "Introduction to gt Tables - 01",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nOverview\nWelcome to this session on the gt package in R! The gt package is a powerful tool designed to help you create and customize tables with ease. Whether you‚Äôre preparing data for a report, presentation, or publication, gt offers a range of features to make your tables both informative and visually appealing. In this session, we‚Äôll explore the capabilities of the gt package, guiding you through its basic and advanced functionalities.\nThe purpose of this session is to provide you with a comprehensive understanding of how to use the gt package effectively. We‚Äôll start with the basics, such as installing the package and creating simple tables, and gradually move on to more advanced features like conditional formatting and grouping rows and columns. By the end of this session, you‚Äôll be equipped with the skills to create professional-quality tables that can improve your data presentations.\n\n\nSession key topics\n\nInstallation and Setup: Install the gt package and set up your environment.\nCreating Your First Table: Get hands-on experience with creating a basic table from a data frame.\nCustomizing Tables: Discover how to add titles, subtitles, footnotes, and format columns.\nAdvanced Table Features: Explore grouping, conditional formatting, and applying themes.\nPractical Example: Build a comprehensive table using multiple features.\nQ&A and Wrap-Up: Address any questions and recap the key points.\n\nLet‚Äôs get started and unlock the potential of the gt package for your data visualization needs!\n\n\nThe gt Tables Workflow\n\n\n\n\n\n\nPlease let‚Äôs go ahead and install the gt package first:\n\ninstall.packages(\"gt\")"
  },
  {
    "objectID": "posts/S09E11_gt_01/index.html#our-data-set",
    "href": "posts/S09E11_gt_01/index.html#our-data-set",
    "title": "Introduction to gt Tables - 01",
    "section": "2 Our data set",
    "text": "2 Our data set\n\nCreating our Data.Frame\nWe are going to create a simple data frame using information from the gapminder package.\n\nsimple_table &lt;- data.frame(\n  Country = c(\"Brazil\", \"Italy\", \"Paraguay\", \"USA\"),\n  Capital = c(\"Bras√≠lia\", \"Roma\", \"Asunci√≥n\", \"Washington D.C.\"),\n  Continent = c(\"Americas\", \"Europe\", \"Americas\", \"Americas\"),\n  LifeExp = c(72.4, 80.5, 71.8, 78.2)\n)\n\n\n\n\n\n\n\nRecall that `as_tibble()` turns an existing object, such as a data frame or matrix, into a so-called tibble.\n\n\n\n\n\n\n\n\nWe will also use the palmerpenguins data set\n\n\n\nIllustration by Allison Horst\n\n\nWe are going to continue using our üêß data set from the package palmerpenguins. If you haven‚Äôt done so, please install that package first:\n\ninstall.packages(\"palmerpenguins\")\n\npalmerpenguins is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.¬†Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.\nWe‚Äôll now load the package, along with the gt and tidyverse:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gt)\n\nOnce you‚Äôve loaded that package you will have a data frame called penguins at your disposal ‚Äî let‚Äôs take a look:\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ‚Ñπ 334 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S09E11_gt_01/index.html#creating-a-simple-table-from-a-data-frame",
    "href": "posts/S09E11_gt_01/index.html#creating-a-simple-table-from-a-data-frame",
    "title": "Introduction to gt Tables - 01",
    "section": "3 Creating a Simple Table from a Data Frame",
    "text": "3 Creating a Simple Table from a Data Frame\nCreating a table with the gt package is remarkably simple. You begin by selecting a data frame that you want to display. For this session, we‚Äôll use a data.frame we created and the Palmer Penguins dataset.\nAfter loading the dataset, you can create a basic table by passing the data frame to the gt() function. This function generates a table object that you can print and view.\n\n# Create a simple table\nsimple_table %&gt;% gt()\n\n\n\n\n\n  \n    \n      Country\n      Capital\n      Continent\n      LifeExp\n    \n  \n  \n    Brazil\nBras√≠lia\nAmericas\n72.4\n    Italy\nRoma\nEurope\n80.5\n    Paraguay\nAsunci√≥n\nAmericas\n71.8\n    USA\nWashington D.C.\nAmericas\n78.2\n  \n  \n  \n\n\n\n\nThe simplicity of this process allows you to quickly transform raw data into a structured table format, making it easier to analyze and present.\n\n3.1 Basic Formatting Options\nOnce you have created your table, gt offers several basic formatting options to enhance its appearance and readability. Let‚Äôs first take a look at the anatomy of a gt table.\n\n\n\n\n\nYou can add titles and subtitles to provide context and make the table more informative. The tab_header() function allows you to specify these elements. Additionally, you can format the columns to display numbers, dates, or currencies appropriately using functions like fmt_number(), fmt_date(), and fmt_currency(). These formatting options help ensure that the data is presented clearly and professionally. By applying these basic formatting techniques, you can significantly improve the visual appeal and utility of your tables.\nLet‚Äôs go ahead and add a title and subtitle to our basic simple table.\n\n# Add titles and subtitles\nsimple_table %&gt;% gt() %&gt;% \n  tab_header(\n    title = \"Life Expectation in 2007\",\n    subtitle = \"Data retrieved from the `gapminder` package\"\n  )\n\n\n\n\n\n  \n    \n      Life Expectation in 2007\n    \n    \n      Data retrieved from the `gapminder` package\n    \n    \n      Country\n      Capital\n      Continent\n      LifeExp\n    \n  \n  \n    Brazil\nBras√≠lia\nAmericas\n72.4\n    Italy\nRoma\nEurope\n80.5\n    Paraguay\nAsunci√≥n\nAmericas\n71.8\n    USA\nWashington D.C.\nAmericas\n78.2\n  \n  \n  \n\n\n\n\nLet‚Äôs say we want, for some reason to express LifeExp with two decimal. We can do this using the function fmt_number.\n\n# Format columns with numbers\nsimple_table %&gt;% gt() %&gt;%\n  fmt_number(decimals = 2)\n\n\n\n\n\n  \n    \n      Country\n      Capital\n      Continent\n      LifeExp\n    \n  \n  \n    Brazil\nBras√≠lia\nAmericas\n72.40\n    Italy\nRoma\nEurope\n80.50\n    Paraguay\nAsunci√≥n\nAmericas\n71.80\n    USA\nWashington D.C.\nAmericas\n78.20\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nIf there are several columns we would like to apply fmt_number, then we can use the following statement: fmt_number(columns = vars(column_1, column_2, column_3, column_4), decimals = 2)\n\n\n\n\n\n\nFootnotes are also an essential part of data presentation, providing additional context, explanations, or references that enhance the understanding of the data. Using footnotes can help clarify complex information, cite sources, or highlight important details that might not be immediately apparent from the table itself.\nIn the gtpackage, the tab_footnote function allows you to add these valuable annotations directly to your tables, making them more informative and professional.\nUsing our previous example, let‚Äôs add a footnote to our simple table.\n\n# Add titles and subtitles and footnote\nsimple_table %&gt;% gt() %&gt;% \n  tab_header(\n    title = \"Life Expectation in 2007\",\n    subtitle = \"Data retrieved from the `gapminder` package\"\n  ) %&gt;% \n  tab_footnote(\n    footnote = \"Data retreived from `gapminder`\",\n    locations = cells_title(groups = \"title\")\n  )\n\n\n\n\n\n  \n    \n      Life Expectation in 20071\n    \n    \n      Data retrieved from the `gapminder` package\n    \n    \n      Country\n      Capital\n      Continent\n      LifeExp\n    \n  \n  \n    Brazil\nBras√≠lia\nAmericas\n72.4\n    Italy\nRoma\nEurope\n80.5\n    Paraguay\nAsunci√≥n\nAmericas\n71.8\n    USA\nWashington D.C.\nAmericas\n78.2\n  \n  \n  \n    \n      1 Data retreived from `gapminder`\n    \n  \n\n\n\n\nNow let‚Äôs put in practice what we learn with the Palmer Penguin data set.\n\n\n Exercise 1\n\nCreate a simple table using gt and the Palmer Penguins data set.\n\n\n\nSolutions (click here)\n\n\npenguins %&gt;% gt()\n\n\n\n\n\n  \n    \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n      year\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n  \n  \n  \n\n\n\n\n\n\n\n\n\n Exercise 2\n\nCreate a simple table and add titles and subtitles using gt and the Palmer Penguins data set.\n\n\n\nSolutions (click here)\n\n\n# Create a table with titles and subtitles\npenguins %&gt;% gt() %&gt;%\n  tab_header(\n    title = \"Palmer Penguins Data\",\n    subtitle = \"Species, Island, and Measurements\"\n  )\n\n\n\n\n\n  \n    \n      Palmer Penguins Data\n    \n    \n      Species, Island, and Measurements\n    \n    \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n      year\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n  \n  \n  \n\n\n\n\n\n\nCreate a simple table and add titles, subtitles, and a footnote using gt and the Palmer Penguins data set. The location of the footnote should be in the subtitle.\n\n\n\nSolutions (click here)\n\n\n# Create a table with titles, subtitles, and footnote\npenguins %&gt;% gt() %&gt;%\n  tab_header(\n    title = \"Palmer Penguins Data\",\n    subtitle = \"Species, Island, and Measurements\"\n  ) %&gt;% \n  tab_footnote(\n    footnote = \"Data collected by Dr. Kristen Gorman\",\n    locations = cells_title(groups = \"subtitle\")\n  )\n\n\n\n\n\n  \n    \n      Palmer Penguins Data\n    \n    \n      Species, Island, and Measurements1\n    \n    \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n      year\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n  \n  \n  \n    \n      1 Data collected by Dr. Kristen Gorman\n    \n  \n\n\n\n\n\n\n\n\n\n Exercise 3\n\nCreate a simple table and add titles, subtitles, and a footnote using gt and the Palmer Penguins data set. The location of the footnote should be in the subtitle.\nAdditionally, make sure that all numerical variables are presented with two decimal places.\n\n\n\nSolutions (click here)\n\n\n# Create a table with titles, subtitles, and footnote\npenguins %&gt;% gt() %&gt;%\n  tab_header(\n    title = \"Palmer Penguins Data\",\n    subtitle = \"Species, Island, and Measurements\"\n  ) %&gt;% \n  tab_footnote(\n    footnote = \"Data collected by Dr. Kristen Gorman\",\n    locations = cells_title(groups = \"subtitle\")\n  ) %&gt;% \n  fmt_number(\n    columns = vars(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g),\n    decimals = 2\n  )\n\n\n\n\n\n  \n    \n      Palmer Penguins Data\n    \n    \n      Species, Island, and Measurements1\n    \n    \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n      year\n    \n  \n  \n    Adelie\nTorgersen\n39.10\n18.70\n181.00\n3,750.00\nmale\n2007\n    Adelie\nTorgersen\n39.50\n17.40\n186.00\n3,800.00\nfemale\n2007\n    Adelie\nTorgersen\n40.30\n18.00\n195.00\n3,250.00\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.70\n19.30\n193.00\n3,450.00\nfemale\n2007\n    Adelie\nTorgersen\n39.30\n20.60\n190.00\n3,650.00\nmale\n2007\n    Adelie\nTorgersen\n38.90\n17.80\n181.00\n3,625.00\nfemale\n2007\n    Adelie\nTorgersen\n39.20\n19.60\n195.00\n4,675.00\nmale\n2007\n    Adelie\nTorgersen\n34.10\n18.10\n193.00\n3,475.00\nNA\n2007\n    Adelie\nTorgersen\n42.00\n20.20\n190.00\n4,250.00\nNA\n2007\n    Adelie\nTorgersen\n37.80\n17.10\n186.00\n3,300.00\nNA\n2007\n    Adelie\nTorgersen\n37.80\n17.30\n180.00\n3,700.00\nNA\n2007\n    Adelie\nTorgersen\n41.10\n17.60\n182.00\n3,200.00\nfemale\n2007\n    Adelie\nTorgersen\n38.60\n21.20\n191.00\n3,800.00\nmale\n2007\n    Adelie\nTorgersen\n34.60\n21.10\n198.00\n4,400.00\nmale\n2007\n    Adelie\nTorgersen\n36.60\n17.80\n185.00\n3,700.00\nfemale\n2007\n    Adelie\nTorgersen\n38.70\n19.00\n195.00\n3,450.00\nfemale\n2007\n    Adelie\nTorgersen\n42.50\n20.70\n197.00\n4,500.00\nmale\n2007\n    Adelie\nTorgersen\n34.40\n18.40\n184.00\n3,325.00\nfemale\n2007\n    Adelie\nTorgersen\n46.00\n21.50\n194.00\n4,200.00\nmale\n2007\n    Adelie\nBiscoe\n37.80\n18.30\n174.00\n3,400.00\nfemale\n2007\n    Adelie\nBiscoe\n37.70\n18.70\n180.00\n3,600.00\nmale\n2007\n    Adelie\nBiscoe\n35.90\n19.20\n189.00\n3,800.00\nfemale\n2007\n    Adelie\nBiscoe\n38.20\n18.10\n185.00\n3,950.00\nmale\n2007\n    Adelie\nBiscoe\n38.80\n17.20\n180.00\n3,800.00\nmale\n2007\n    Adelie\nBiscoe\n35.30\n18.90\n187.00\n3,800.00\nfemale\n2007\n    Adelie\nBiscoe\n40.60\n18.60\n183.00\n3,550.00\nmale\n2007\n    Adelie\nBiscoe\n40.50\n17.90\n187.00\n3,200.00\nfemale\n2007\n    Adelie\nBiscoe\n37.90\n18.60\n172.00\n3,150.00\nfemale\n2007\n    Adelie\nBiscoe\n40.50\n18.90\n180.00\n3,950.00\nmale\n2007\n    Adelie\nDream\n39.50\n16.70\n178.00\n3,250.00\nfemale\n2007\n    Adelie\nDream\n37.20\n18.10\n178.00\n3,900.00\nmale\n2007\n    Adelie\nDream\n39.50\n17.80\n188.00\n3,300.00\nfemale\n2007\n    Adelie\nDream\n40.90\n18.90\n184.00\n3,900.00\nmale\n2007\n    Adelie\nDream\n36.40\n17.00\n195.00\n3,325.00\nfemale\n2007\n    Adelie\nDream\n39.20\n21.10\n196.00\n4,150.00\nmale\n2007\n    Adelie\nDream\n38.80\n20.00\n190.00\n3,950.00\nmale\n2007\n    Adelie\nDream\n42.20\n18.50\n180.00\n3,550.00\nfemale\n2007\n    Adelie\nDream\n37.60\n19.30\n181.00\n3,300.00\nfemale\n2007\n    Adelie\nDream\n39.80\n19.10\n184.00\n4,650.00\nmale\n2007\n    Adelie\nDream\n36.50\n18.00\n182.00\n3,150.00\nfemale\n2007\n    Adelie\nDream\n40.80\n18.40\n195.00\n3,900.00\nmale\n2007\n    Adelie\nDream\n36.00\n18.50\n186.00\n3,100.00\nfemale\n2007\n    Adelie\nDream\n44.10\n19.70\n196.00\n4,400.00\nmale\n2007\n    Adelie\nDream\n37.00\n16.90\n185.00\n3,000.00\nfemale\n2007\n    Adelie\nDream\n39.60\n18.80\n190.00\n4,600.00\nmale\n2007\n    Adelie\nDream\n41.10\n19.00\n182.00\n3,425.00\nmale\n2007\n    Adelie\nDream\n37.50\n18.90\n179.00\n2,975.00\nNA\n2007\n    Adelie\nDream\n36.00\n17.90\n190.00\n3,450.00\nfemale\n2007\n    Adelie\nDream\n42.30\n21.20\n191.00\n4,150.00\nmale\n2007\n    Adelie\nBiscoe\n39.60\n17.70\n186.00\n3,500.00\nfemale\n2008\n    Adelie\nBiscoe\n40.10\n18.90\n188.00\n4,300.00\nmale\n2008\n    Adelie\nBiscoe\n35.00\n17.90\n190.00\n3,450.00\nfemale\n2008\n    Adelie\nBiscoe\n42.00\n19.50\n200.00\n4,050.00\nmale\n2008\n    Adelie\nBiscoe\n34.50\n18.10\n187.00\n2,900.00\nfemale\n2008\n    Adelie\nBiscoe\n41.40\n18.60\n191.00\n3,700.00\nmale\n2008\n    Adelie\nBiscoe\n39.00\n17.50\n186.00\n3,550.00\nfemale\n2008\n    Adelie\nBiscoe\n40.60\n18.80\n193.00\n3,800.00\nmale\n2008\n    Adelie\nBiscoe\n36.50\n16.60\n181.00\n2,850.00\nfemale\n2008\n    Adelie\nBiscoe\n37.60\n19.10\n194.00\n3,750.00\nmale\n2008\n    Adelie\nBiscoe\n35.70\n16.90\n185.00\n3,150.00\nfemale\n2008\n    Adelie\nBiscoe\n41.30\n21.10\n195.00\n4,400.00\nmale\n2008\n    Adelie\nBiscoe\n37.60\n17.00\n185.00\n3,600.00\nfemale\n2008\n    Adelie\nBiscoe\n41.10\n18.20\n192.00\n4,050.00\nmale\n2008\n    Adelie\nBiscoe\n36.40\n17.10\n184.00\n2,850.00\nfemale\n2008\n    Adelie\nBiscoe\n41.60\n18.00\n192.00\n3,950.00\nmale\n2008\n    Adelie\nBiscoe\n35.50\n16.20\n195.00\n3,350.00\nfemale\n2008\n    Adelie\nBiscoe\n41.10\n19.10\n188.00\n4,100.00\nmale\n2008\n    Adelie\nTorgersen\n35.90\n16.60\n190.00\n3,050.00\nfemale\n2008\n    Adelie\nTorgersen\n41.80\n19.40\n198.00\n4,450.00\nmale\n2008\n    Adelie\nTorgersen\n33.50\n19.00\n190.00\n3,600.00\nfemale\n2008\n    Adelie\nTorgersen\n39.70\n18.40\n190.00\n3,900.00\nmale\n2008\n    Adelie\nTorgersen\n39.60\n17.20\n196.00\n3,550.00\nfemale\n2008\n    Adelie\nTorgersen\n45.80\n18.90\n197.00\n4,150.00\nmale\n2008\n    Adelie\nTorgersen\n35.50\n17.50\n190.00\n3,700.00\nfemale\n2008\n    Adelie\nTorgersen\n42.80\n18.50\n195.00\n4,250.00\nmale\n2008\n    Adelie\nTorgersen\n40.90\n16.80\n191.00\n3,700.00\nfemale\n2008\n    Adelie\nTorgersen\n37.20\n19.40\n184.00\n3,900.00\nmale\n2008\n    Adelie\nTorgersen\n36.20\n16.10\n187.00\n3,550.00\nfemale\n2008\n    Adelie\nTorgersen\n42.10\n19.10\n195.00\n4,000.00\nmale\n2008\n    Adelie\nTorgersen\n34.60\n17.20\n189.00\n3,200.00\nfemale\n2008\n    Adelie\nTorgersen\n42.90\n17.60\n196.00\n4,700.00\nmale\n2008\n    Adelie\nTorgersen\n36.70\n18.80\n187.00\n3,800.00\nfemale\n2008\n    Adelie\nTorgersen\n35.10\n19.40\n193.00\n4,200.00\nmale\n2008\n    Adelie\nDream\n37.30\n17.80\n191.00\n3,350.00\nfemale\n2008\n    Adelie\nDream\n41.30\n20.30\n194.00\n3,550.00\nmale\n2008\n    Adelie\nDream\n36.30\n19.50\n190.00\n3,800.00\nmale\n2008\n    Adelie\nDream\n36.90\n18.60\n189.00\n3,500.00\nfemale\n2008\n    Adelie\nDream\n38.30\n19.20\n189.00\n3,950.00\nmale\n2008\n    Adelie\nDream\n38.90\n18.80\n190.00\n3,600.00\nfemale\n2008\n    Adelie\nDream\n35.70\n18.00\n202.00\n3,550.00\nfemale\n2008\n    Adelie\nDream\n41.10\n18.10\n205.00\n4,300.00\nmale\n2008\n    Adelie\nDream\n34.00\n17.10\n185.00\n3,400.00\nfemale\n2008\n    Adelie\nDream\n39.60\n18.10\n186.00\n4,450.00\nmale\n2008\n    Adelie\nDream\n36.20\n17.30\n187.00\n3,300.00\nfemale\n2008\n    Adelie\nDream\n40.80\n18.90\n208.00\n4,300.00\nmale\n2008\n    Adelie\nDream\n38.10\n18.60\n190.00\n3,700.00\nfemale\n2008\n    Adelie\nDream\n40.30\n18.50\n196.00\n4,350.00\nmale\n2008\n    Adelie\nDream\n33.10\n16.10\n178.00\n2,900.00\nfemale\n2008\n    Adelie\nDream\n43.20\n18.50\n192.00\n4,100.00\nmale\n2008\n    Adelie\nBiscoe\n35.00\n17.90\n192.00\n3,725.00\nfemale\n2009\n    Adelie\nBiscoe\n41.00\n20.00\n203.00\n4,725.00\nmale\n2009\n    Adelie\nBiscoe\n37.70\n16.00\n183.00\n3,075.00\nfemale\n2009\n    Adelie\nBiscoe\n37.80\n20.00\n190.00\n4,250.00\nmale\n2009\n    Adelie\nBiscoe\n37.90\n18.60\n193.00\n2,925.00\nfemale\n2009\n    Adelie\nBiscoe\n39.70\n18.90\n184.00\n3,550.00\nmale\n2009\n    Adelie\nBiscoe\n38.60\n17.20\n199.00\n3,750.00\nfemale\n2009\n    Adelie\nBiscoe\n38.20\n20.00\n190.00\n3,900.00\nmale\n2009\n    Adelie\nBiscoe\n38.10\n17.00\n181.00\n3,175.00\nfemale\n2009\n    Adelie\nBiscoe\n43.20\n19.00\n197.00\n4,775.00\nmale\n2009\n    Adelie\nBiscoe\n38.10\n16.50\n198.00\n3,825.00\nfemale\n2009\n    Adelie\nBiscoe\n45.60\n20.30\n191.00\n4,600.00\nmale\n2009\n    Adelie\nBiscoe\n39.70\n17.70\n193.00\n3,200.00\nfemale\n2009\n    Adelie\nBiscoe\n42.20\n19.50\n197.00\n4,275.00\nmale\n2009\n    Adelie\nBiscoe\n39.60\n20.70\n191.00\n3,900.00\nfemale\n2009\n    Adelie\nBiscoe\n42.70\n18.30\n196.00\n4,075.00\nmale\n2009\n    Adelie\nTorgersen\n38.60\n17.00\n188.00\n2,900.00\nfemale\n2009\n    Adelie\nTorgersen\n37.30\n20.50\n199.00\n3,775.00\nmale\n2009\n    Adelie\nTorgersen\n35.70\n17.00\n189.00\n3,350.00\nfemale\n2009\n    Adelie\nTorgersen\n41.10\n18.60\n189.00\n3,325.00\nmale\n2009\n    Adelie\nTorgersen\n36.20\n17.20\n187.00\n3,150.00\nfemale\n2009\n    Adelie\nTorgersen\n37.70\n19.80\n198.00\n3,500.00\nmale\n2009\n    Adelie\nTorgersen\n40.20\n17.00\n176.00\n3,450.00\nfemale\n2009\n    Adelie\nTorgersen\n41.40\n18.50\n202.00\n3,875.00\nmale\n2009\n    Adelie\nTorgersen\n35.20\n15.90\n186.00\n3,050.00\nfemale\n2009\n    Adelie\nTorgersen\n40.60\n19.00\n199.00\n4,000.00\nmale\n2009\n    Adelie\nTorgersen\n38.80\n17.60\n191.00\n3,275.00\nfemale\n2009\n    Adelie\nTorgersen\n41.50\n18.30\n195.00\n4,300.00\nmale\n2009\n    Adelie\nTorgersen\n39.00\n17.10\n191.00\n3,050.00\nfemale\n2009\n    Adelie\nTorgersen\n44.10\n18.00\n210.00\n4,000.00\nmale\n2009\n    Adelie\nTorgersen\n38.50\n17.90\n190.00\n3,325.00\nfemale\n2009\n    Adelie\nTorgersen\n43.10\n19.20\n197.00\n3,500.00\nmale\n2009\n    Adelie\nDream\n36.80\n18.50\n193.00\n3,500.00\nfemale\n2009\n    Adelie\nDream\n37.50\n18.50\n199.00\n4,475.00\nmale\n2009\n    Adelie\nDream\n38.10\n17.60\n187.00\n3,425.00\nfemale\n2009\n    Adelie\nDream\n41.10\n17.50\n190.00\n3,900.00\nmale\n2009\n    Adelie\nDream\n35.60\n17.50\n191.00\n3,175.00\nfemale\n2009\n    Adelie\nDream\n40.20\n20.10\n200.00\n3,975.00\nmale\n2009\n    Adelie\nDream\n37.00\n16.50\n185.00\n3,400.00\nfemale\n2009\n    Adelie\nDream\n39.70\n17.90\n193.00\n4,250.00\nmale\n2009\n    Adelie\nDream\n40.20\n17.10\n193.00\n3,400.00\nfemale\n2009\n    Adelie\nDream\n40.60\n17.20\n187.00\n3,475.00\nmale\n2009\n    Adelie\nDream\n32.10\n15.50\n188.00\n3,050.00\nfemale\n2009\n    Adelie\nDream\n40.70\n17.00\n190.00\n3,725.00\nmale\n2009\n    Adelie\nDream\n37.30\n16.80\n192.00\n3,000.00\nfemale\n2009\n    Adelie\nDream\n39.00\n18.70\n185.00\n3,650.00\nmale\n2009\n    Adelie\nDream\n39.20\n18.60\n190.00\n4,250.00\nmale\n2009\n    Adelie\nDream\n36.60\n18.40\n184.00\n3,475.00\nfemale\n2009\n    Adelie\nDream\n36.00\n17.80\n195.00\n3,450.00\nfemale\n2009\n    Adelie\nDream\n37.80\n18.10\n193.00\n3,750.00\nmale\n2009\n    Adelie\nDream\n36.00\n17.10\n187.00\n3,700.00\nfemale\n2009\n    Adelie\nDream\n41.50\n18.50\n201.00\n4,000.00\nmale\n2009\n    Gentoo\nBiscoe\n46.10\n13.20\n211.00\n4,500.00\nfemale\n2007\n    Gentoo\nBiscoe\n50.00\n16.30\n230.00\n5,700.00\nmale\n2007\n    Gentoo\nBiscoe\n48.70\n14.10\n210.00\n4,450.00\nfemale\n2007\n    Gentoo\nBiscoe\n50.00\n15.20\n218.00\n5,700.00\nmale\n2007\n    Gentoo\nBiscoe\n47.60\n14.50\n215.00\n5,400.00\nmale\n2007\n    Gentoo\nBiscoe\n46.50\n13.50\n210.00\n4,550.00\nfemale\n2007\n    Gentoo\nBiscoe\n45.40\n14.60\n211.00\n4,800.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.70\n15.30\n219.00\n5,200.00\nmale\n2007\n    Gentoo\nBiscoe\n43.30\n13.40\n209.00\n4,400.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.80\n15.40\n215.00\n5,150.00\nmale\n2007\n    Gentoo\nBiscoe\n40.90\n13.70\n214.00\n4,650.00\nfemale\n2007\n    Gentoo\nBiscoe\n49.00\n16.10\n216.00\n5,550.00\nmale\n2007\n    Gentoo\nBiscoe\n45.50\n13.70\n214.00\n4,650.00\nfemale\n2007\n    Gentoo\nBiscoe\n48.40\n14.60\n213.00\n5,850.00\nmale\n2007\n    Gentoo\nBiscoe\n45.80\n14.60\n210.00\n4,200.00\nfemale\n2007\n    Gentoo\nBiscoe\n49.30\n15.70\n217.00\n5,850.00\nmale\n2007\n    Gentoo\nBiscoe\n42.00\n13.50\n210.00\n4,150.00\nfemale\n2007\n    Gentoo\nBiscoe\n49.20\n15.20\n221.00\n6,300.00\nmale\n2007\n    Gentoo\nBiscoe\n46.20\n14.50\n209.00\n4,800.00\nfemale\n2007\n    Gentoo\nBiscoe\n48.70\n15.10\n222.00\n5,350.00\nmale\n2007\n    Gentoo\nBiscoe\n50.20\n14.30\n218.00\n5,700.00\nmale\n2007\n    Gentoo\nBiscoe\n45.10\n14.50\n215.00\n5,000.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.50\n14.50\n213.00\n4,400.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.30\n15.80\n215.00\n5,050.00\nmale\n2007\n    Gentoo\nBiscoe\n42.90\n13.10\n215.00\n5,000.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.10\n15.10\n215.00\n5,100.00\nmale\n2007\n    Gentoo\nBiscoe\n44.50\n14.30\n216.00\n4,100.00\nNA\n2007\n    Gentoo\nBiscoe\n47.80\n15.00\n215.00\n5,650.00\nmale\n2007\n    Gentoo\nBiscoe\n48.20\n14.30\n210.00\n4,600.00\nfemale\n2007\n    Gentoo\nBiscoe\n50.00\n15.30\n220.00\n5,550.00\nmale\n2007\n    Gentoo\nBiscoe\n47.30\n15.30\n222.00\n5,250.00\nmale\n2007\n    Gentoo\nBiscoe\n42.80\n14.20\n209.00\n4,700.00\nfemale\n2007\n    Gentoo\nBiscoe\n45.10\n14.50\n207.00\n5,050.00\nfemale\n2007\n    Gentoo\nBiscoe\n59.60\n17.00\n230.00\n6,050.00\nmale\n2007\n    Gentoo\nBiscoe\n49.10\n14.80\n220.00\n5,150.00\nfemale\n2008\n    Gentoo\nBiscoe\n48.40\n16.30\n220.00\n5,400.00\nmale\n2008\n    Gentoo\nBiscoe\n42.60\n13.70\n213.00\n4,950.00\nfemale\n2008\n    Gentoo\nBiscoe\n44.40\n17.30\n219.00\n5,250.00\nmale\n2008\n    Gentoo\nBiscoe\n44.00\n13.60\n208.00\n4,350.00\nfemale\n2008\n    Gentoo\nBiscoe\n48.70\n15.70\n208.00\n5,350.00\nmale\n2008\n    Gentoo\nBiscoe\n42.70\n13.70\n208.00\n3,950.00\nfemale\n2008\n    Gentoo\nBiscoe\n49.60\n16.00\n225.00\n5,700.00\nmale\n2008\n    Gentoo\nBiscoe\n45.30\n13.70\n210.00\n4,300.00\nfemale\n2008\n    Gentoo\nBiscoe\n49.60\n15.00\n216.00\n4,750.00\nmale\n2008\n    Gentoo\nBiscoe\n50.50\n15.90\n222.00\n5,550.00\nmale\n2008\n    Gentoo\nBiscoe\n43.60\n13.90\n217.00\n4,900.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.50\n13.90\n210.00\n4,200.00\nfemale\n2008\n    Gentoo\nBiscoe\n50.50\n15.90\n225.00\n5,400.00\nmale\n2008\n    Gentoo\nBiscoe\n44.90\n13.30\n213.00\n5,100.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.20\n15.80\n215.00\n5,300.00\nmale\n2008\n    Gentoo\nBiscoe\n46.60\n14.20\n210.00\n4,850.00\nfemale\n2008\n    Gentoo\nBiscoe\n48.50\n14.10\n220.00\n5,300.00\nmale\n2008\n    Gentoo\nBiscoe\n45.10\n14.40\n210.00\n4,400.00\nfemale\n2008\n    Gentoo\nBiscoe\n50.10\n15.00\n225.00\n5,000.00\nmale\n2008\n    Gentoo\nBiscoe\n46.50\n14.40\n217.00\n4,900.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.00\n15.40\n220.00\n5,050.00\nmale\n2008\n    Gentoo\nBiscoe\n43.80\n13.90\n208.00\n4,300.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.50\n15.00\n220.00\n5,000.00\nmale\n2008\n    Gentoo\nBiscoe\n43.20\n14.50\n208.00\n4,450.00\nfemale\n2008\n    Gentoo\nBiscoe\n50.40\n15.30\n224.00\n5,550.00\nmale\n2008\n    Gentoo\nBiscoe\n45.30\n13.80\n208.00\n4,200.00\nfemale\n2008\n    Gentoo\nBiscoe\n46.20\n14.90\n221.00\n5,300.00\nmale\n2008\n    Gentoo\nBiscoe\n45.70\n13.90\n214.00\n4,400.00\nfemale\n2008\n    Gentoo\nBiscoe\n54.30\n15.70\n231.00\n5,650.00\nmale\n2008\n    Gentoo\nBiscoe\n45.80\n14.20\n219.00\n4,700.00\nfemale\n2008\n    Gentoo\nBiscoe\n49.80\n16.80\n230.00\n5,700.00\nmale\n2008\n    Gentoo\nBiscoe\n46.20\n14.40\n214.00\n4,650.00\nNA\n2008\n    Gentoo\nBiscoe\n49.50\n16.20\n229.00\n5,800.00\nmale\n2008\n    Gentoo\nBiscoe\n43.50\n14.20\n220.00\n4,700.00\nfemale\n2008\n    Gentoo\nBiscoe\n50.70\n15.00\n223.00\n5,550.00\nmale\n2008\n    Gentoo\nBiscoe\n47.70\n15.00\n216.00\n4,750.00\nfemale\n2008\n    Gentoo\nBiscoe\n46.40\n15.60\n221.00\n5,000.00\nmale\n2008\n    Gentoo\nBiscoe\n48.20\n15.60\n221.00\n5,100.00\nmale\n2008\n    Gentoo\nBiscoe\n46.50\n14.80\n217.00\n5,200.00\nfemale\n2008\n    Gentoo\nBiscoe\n46.40\n15.00\n216.00\n4,700.00\nfemale\n2008\n    Gentoo\nBiscoe\n48.60\n16.00\n230.00\n5,800.00\nmale\n2008\n    Gentoo\nBiscoe\n47.50\n14.20\n209.00\n4,600.00\nfemale\n2008\n    Gentoo\nBiscoe\n51.10\n16.30\n220.00\n6,000.00\nmale\n2008\n    Gentoo\nBiscoe\n45.20\n13.80\n215.00\n4,750.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.20\n16.40\n223.00\n5,950.00\nmale\n2008\n    Gentoo\nBiscoe\n49.10\n14.50\n212.00\n4,625.00\nfemale\n2009\n    Gentoo\nBiscoe\n52.50\n15.60\n221.00\n5,450.00\nmale\n2009\n    Gentoo\nBiscoe\n47.40\n14.60\n212.00\n4,725.00\nfemale\n2009\n    Gentoo\nBiscoe\n50.00\n15.90\n224.00\n5,350.00\nmale\n2009\n    Gentoo\nBiscoe\n44.90\n13.80\n212.00\n4,750.00\nfemale\n2009\n    Gentoo\nBiscoe\n50.80\n17.30\n228.00\n5,600.00\nmale\n2009\n    Gentoo\nBiscoe\n43.40\n14.40\n218.00\n4,600.00\nfemale\n2009\n    Gentoo\nBiscoe\n51.30\n14.20\n218.00\n5,300.00\nmale\n2009\n    Gentoo\nBiscoe\n47.50\n14.00\n212.00\n4,875.00\nfemale\n2009\n    Gentoo\nBiscoe\n52.10\n17.00\n230.00\n5,550.00\nmale\n2009\n    Gentoo\nBiscoe\n47.50\n15.00\n218.00\n4,950.00\nfemale\n2009\n    Gentoo\nBiscoe\n52.20\n17.10\n228.00\n5,400.00\nmale\n2009\n    Gentoo\nBiscoe\n45.50\n14.50\n212.00\n4,750.00\nfemale\n2009\n    Gentoo\nBiscoe\n49.50\n16.10\n224.00\n5,650.00\nmale\n2009\n    Gentoo\nBiscoe\n44.50\n14.70\n214.00\n4,850.00\nfemale\n2009\n    Gentoo\nBiscoe\n50.80\n15.70\n226.00\n5,200.00\nmale\n2009\n    Gentoo\nBiscoe\n49.40\n15.80\n216.00\n4,925.00\nmale\n2009\n    Gentoo\nBiscoe\n46.90\n14.60\n222.00\n4,875.00\nfemale\n2009\n    Gentoo\nBiscoe\n48.40\n14.40\n203.00\n4,625.00\nfemale\n2009\n    Gentoo\nBiscoe\n51.10\n16.50\n225.00\n5,250.00\nmale\n2009\n    Gentoo\nBiscoe\n48.50\n15.00\n219.00\n4,850.00\nfemale\n2009\n    Gentoo\nBiscoe\n55.90\n17.00\n228.00\n5,600.00\nmale\n2009\n    Gentoo\nBiscoe\n47.20\n15.50\n215.00\n4,975.00\nfemale\n2009\n    Gentoo\nBiscoe\n49.10\n15.00\n228.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n47.30\n13.80\n216.00\n4,725.00\nNA\n2009\n    Gentoo\nBiscoe\n46.80\n16.10\n215.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n41.70\n14.70\n210.00\n4,700.00\nfemale\n2009\n    Gentoo\nBiscoe\n53.40\n15.80\n219.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n43.30\n14.00\n208.00\n4,575.00\nfemale\n2009\n    Gentoo\nBiscoe\n48.10\n15.10\n209.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n50.50\n15.20\n216.00\n5,000.00\nfemale\n2009\n    Gentoo\nBiscoe\n49.80\n15.90\n229.00\n5,950.00\nmale\n2009\n    Gentoo\nBiscoe\n43.50\n15.20\n213.00\n4,650.00\nfemale\n2009\n    Gentoo\nBiscoe\n51.50\n16.30\n230.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n46.20\n14.10\n217.00\n4,375.00\nfemale\n2009\n    Gentoo\nBiscoe\n55.10\n16.00\n230.00\n5,850.00\nmale\n2009\n    Gentoo\nBiscoe\n44.50\n15.70\n217.00\n4,875.00\nNA\n2009\n    Gentoo\nBiscoe\n48.80\n16.20\n222.00\n6,000.00\nmale\n2009\n    Gentoo\nBiscoe\n47.20\n13.70\n214.00\n4,925.00\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.80\n14.30\n215.00\n4,850.00\nfemale\n2009\n    Gentoo\nBiscoe\n50.40\n15.70\n222.00\n5,750.00\nmale\n2009\n    Gentoo\nBiscoe\n45.20\n14.80\n212.00\n5,200.00\nfemale\n2009\n    Gentoo\nBiscoe\n49.90\n16.10\n213.00\n5,400.00\nmale\n2009\n    Chinstrap\nDream\n46.50\n17.90\n192.00\n3,500.00\nfemale\n2007\n    Chinstrap\nDream\n50.00\n19.50\n196.00\n3,900.00\nmale\n2007\n    Chinstrap\nDream\n51.30\n19.20\n193.00\n3,650.00\nmale\n2007\n    Chinstrap\nDream\n45.40\n18.70\n188.00\n3,525.00\nfemale\n2007\n    Chinstrap\nDream\n52.70\n19.80\n197.00\n3,725.00\nmale\n2007\n    Chinstrap\nDream\n45.20\n17.80\n198.00\n3,950.00\nfemale\n2007\n    Chinstrap\nDream\n46.10\n18.20\n178.00\n3,250.00\nfemale\n2007\n    Chinstrap\nDream\n51.30\n18.20\n197.00\n3,750.00\nmale\n2007\n    Chinstrap\nDream\n46.00\n18.90\n195.00\n4,150.00\nfemale\n2007\n    Chinstrap\nDream\n51.30\n19.90\n198.00\n3,700.00\nmale\n2007\n    Chinstrap\nDream\n46.60\n17.80\n193.00\n3,800.00\nfemale\n2007\n    Chinstrap\nDream\n51.70\n20.30\n194.00\n3,775.00\nmale\n2007\n    Chinstrap\nDream\n47.00\n17.30\n185.00\n3,700.00\nfemale\n2007\n    Chinstrap\nDream\n52.00\n18.10\n201.00\n4,050.00\nmale\n2007\n    Chinstrap\nDream\n45.90\n17.10\n190.00\n3,575.00\nfemale\n2007\n    Chinstrap\nDream\n50.50\n19.60\n201.00\n4,050.00\nmale\n2007\n    Chinstrap\nDream\n50.30\n20.00\n197.00\n3,300.00\nmale\n2007\n    Chinstrap\nDream\n58.00\n17.80\n181.00\n3,700.00\nfemale\n2007\n    Chinstrap\nDream\n46.40\n18.60\n190.00\n3,450.00\nfemale\n2007\n    Chinstrap\nDream\n49.20\n18.20\n195.00\n4,400.00\nmale\n2007\n    Chinstrap\nDream\n42.40\n17.30\n181.00\n3,600.00\nfemale\n2007\n    Chinstrap\nDream\n48.50\n17.50\n191.00\n3,400.00\nmale\n2007\n    Chinstrap\nDream\n43.20\n16.60\n187.00\n2,900.00\nfemale\n2007\n    Chinstrap\nDream\n50.60\n19.40\n193.00\n3,800.00\nmale\n2007\n    Chinstrap\nDream\n46.70\n17.90\n195.00\n3,300.00\nfemale\n2007\n    Chinstrap\nDream\n52.00\n19.00\n197.00\n4,150.00\nmale\n2007\n    Chinstrap\nDream\n50.50\n18.40\n200.00\n3,400.00\nfemale\n2008\n    Chinstrap\nDream\n49.50\n19.00\n200.00\n3,800.00\nmale\n2008\n    Chinstrap\nDream\n46.40\n17.80\n191.00\n3,700.00\nfemale\n2008\n    Chinstrap\nDream\n52.80\n20.00\n205.00\n4,550.00\nmale\n2008\n    Chinstrap\nDream\n40.90\n16.60\n187.00\n3,200.00\nfemale\n2008\n    Chinstrap\nDream\n54.20\n20.80\n201.00\n4,300.00\nmale\n2008\n    Chinstrap\nDream\n42.50\n16.70\n187.00\n3,350.00\nfemale\n2008\n    Chinstrap\nDream\n51.00\n18.80\n203.00\n4,100.00\nmale\n2008\n    Chinstrap\nDream\n49.70\n18.60\n195.00\n3,600.00\nmale\n2008\n    Chinstrap\nDream\n47.50\n16.80\n199.00\n3,900.00\nfemale\n2008\n    Chinstrap\nDream\n47.60\n18.30\n195.00\n3,850.00\nfemale\n2008\n    Chinstrap\nDream\n52.00\n20.70\n210.00\n4,800.00\nmale\n2008\n    Chinstrap\nDream\n46.90\n16.60\n192.00\n2,700.00\nfemale\n2008\n    Chinstrap\nDream\n53.50\n19.90\n205.00\n4,500.00\nmale\n2008\n    Chinstrap\nDream\n49.00\n19.50\n210.00\n3,950.00\nmale\n2008\n    Chinstrap\nDream\n46.20\n17.50\n187.00\n3,650.00\nfemale\n2008\n    Chinstrap\nDream\n50.90\n19.10\n196.00\n3,550.00\nmale\n2008\n    Chinstrap\nDream\n45.50\n17.00\n196.00\n3,500.00\nfemale\n2008\n    Chinstrap\nDream\n50.90\n17.90\n196.00\n3,675.00\nfemale\n2009\n    Chinstrap\nDream\n50.80\n18.50\n201.00\n4,450.00\nmale\n2009\n    Chinstrap\nDream\n50.10\n17.90\n190.00\n3,400.00\nfemale\n2009\n    Chinstrap\nDream\n49.00\n19.60\n212.00\n4,300.00\nmale\n2009\n    Chinstrap\nDream\n51.50\n18.70\n187.00\n3,250.00\nmale\n2009\n    Chinstrap\nDream\n49.80\n17.30\n198.00\n3,675.00\nfemale\n2009\n    Chinstrap\nDream\n48.10\n16.40\n199.00\n3,325.00\nfemale\n2009\n    Chinstrap\nDream\n51.40\n19.00\n201.00\n3,950.00\nmale\n2009\n    Chinstrap\nDream\n45.70\n17.30\n193.00\n3,600.00\nfemale\n2009\n    Chinstrap\nDream\n50.70\n19.70\n203.00\n4,050.00\nmale\n2009\n    Chinstrap\nDream\n42.50\n17.30\n187.00\n3,350.00\nfemale\n2009\n    Chinstrap\nDream\n52.20\n18.80\n197.00\n3,450.00\nmale\n2009\n    Chinstrap\nDream\n45.20\n16.60\n191.00\n3,250.00\nfemale\n2009\n    Chinstrap\nDream\n49.30\n19.90\n203.00\n4,050.00\nmale\n2009\n    Chinstrap\nDream\n50.20\n18.80\n202.00\n3,800.00\nmale\n2009\n    Chinstrap\nDream\n45.60\n19.40\n194.00\n3,525.00\nfemale\n2009\n    Chinstrap\nDream\n51.90\n19.50\n206.00\n3,950.00\nmale\n2009\n    Chinstrap\nDream\n46.80\n16.50\n189.00\n3,650.00\nfemale\n2009\n    Chinstrap\nDream\n45.70\n17.00\n195.00\n3,650.00\nfemale\n2009\n    Chinstrap\nDream\n55.80\n19.80\n207.00\n4,000.00\nmale\n2009\n    Chinstrap\nDream\n43.50\n18.10\n202.00\n3,400.00\nfemale\n2009\n    Chinstrap\nDream\n49.60\n18.20\n193.00\n3,775.00\nmale\n2009\n    Chinstrap\nDream\n50.80\n19.00\n210.00\n4,100.00\nmale\n2009\n    Chinstrap\nDream\n50.20\n18.70\n198.00\n3,775.00\nfemale\n2009\n  \n  \n  \n    \n      1 Data collected by Dr. Kristen Gorman\n    \n  \n\n\n\n\n\n\n\n\n\n3.2 How can we customize our tables to include more advanced features?\n\nApply Conditional Formatting\nIn this section, we‚Äôll explore advanced features of the gt package to enhance your tables‚Äô functionality and visual appeal. We‚Äôll focus on conditional formatting and labeling columns, essential for creating informative and organized tables.\nConditional formatting highlights specific values based on criteria, drawing attention to crucial data points and enhancing readability. The tab_style function in the gt package allows you to apply styles to cells that meet certain conditions.\nFor example, you might want to highlight cells in the LifeExp column with a light blue background to emphasize these values:\n\n# Apply conditional formatting to highlight specific values\nsimple_table %&gt;% gt() %&gt;%\n  tab_style(\n    style = cell_fill(color = \"lightblue\"),\n    locations = cells_body(columns = vars(LifeExp))\n  )\n\n\n\n\n\n  \n    \n      Country\n      Capital\n      Continent\n      LifeExp\n    \n  \n  \n    Brazil\nBras√≠lia\nAmericas\n72.4\n    Italy\nRoma\nEurope\n80.5\n    Paraguay\nAsunci√≥n\nAmericas\n71.8\n    USA\nWashington D.C.\nAmericas\n78.2\n  \n  \n  \n\n\n\n\nIn this example, the tab_style function is used to apply a light blue fill to the cells in the LifeExp column. This visual cue helps to make the LifeExp stand out, making it easier for viewers to identify and compare these values.\n\n\nCustomize the column labels in your table\nThe cols_label function in the gt package allows you to customize the column labels in your table. This is particularly useful when you want to make your table more readable and user-friendly by providing descriptive names for your columns. Instead of using the default column names from your data frame, you can specify more meaningful labels that better convey the content of each column.\nFor example, you can rename columns in our simple_table data set to provide clearer descriptions:\n\n# Group rows by species\nsimple_table %&gt;%  gt() %&gt;%\n  cols_label(\n    LifeExp = \"Life Expectation\"\n  )\n\n\n\n\n\n  \n    \n      Country\n      Capital\n      Continent\n      Life Expectation\n    \n  \n  \n    Brazil\nBras√≠lia\nAmericas\n72.4\n    Italy\nRoma\nEurope\n80.5\n    Paraguay\nAsunci√≥n\nAmericas\n71.8\n    USA\nWashington D.C.\nAmericas\n78.2\n  \n  \n  \n\n\n\n\nIn this example, the cols_label function is used to change the column names to more descriptive labels. This helps viewers understand the measurements more easily, enhancing the overall clarity and effectiveness of the table.\nLet‚Äôs put into practice these new skills!\n\n\n\n Exercise 4\n\nIn this exercise, use the Penguins Palmer dataset and use the the tab_style function to apply a color fill to the cells in the bill_length_mm column.\n\n\n\nSolutions (click here)\n\n\n# Apply conditional formatting to highlight specific values\npenguins %&gt;% gt() %&gt;%\n  tab_style(\n    style = cell_fill(color = \"lightblue\"),\n    locations = cells_body(columns = vars(bill_length_mm))\n  )\n\n\n\n\n\n  \n    \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n      year\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n  \n  \n  \n\n\n\n\n\n\nAdditionally, re-label all columns with numeric values.\n\n\n\nSolutions (click here)\n\n\n# Apply conditional formatting to highlight specific values\npenguins %&gt;% gt() %&gt;%\n  tab_style(\n    style = cell_fill(color = \"lightblue\"),\n    locations = cells_body(columns = vars(bill_length_mm))\n  ) %&gt;% \n  cols_label(\n    bill_length_mm = \"Bill Length (mm)\",\n    bill_depth_mm = \"Bill Depth (mm)\",\n    flipper_length_mm = \"Flipper Length (mm)\",\n    body_mass_g = \"Body Mass (g)\"\n  )\n\n\n\n\n\n  \n    \n      species\n      island\n      Bill Length (mm)\n      Bill Depth (mm)\n      Flipper Length (mm)\n      Body Mass (g)\n      sex\n      year\n    \n  \n  \n    Adelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n    Adelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n    Adelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n    Adelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n    Adelie\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n2007\n    Adelie\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n2007\n    Adelie\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n2007\n    Adelie\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.1\n186\n3300\nNA\n2007\n    Adelie\nTorgersen\n37.8\n17.3\n180\n3700\nNA\n2007\n    Adelie\nTorgersen\n41.1\n17.6\n182\n3200\nfemale\n2007\n    Adelie\nTorgersen\n38.6\n21.2\n191\n3800\nmale\n2007\n    Adelie\nTorgersen\n34.6\n21.1\n198\n4400\nmale\n2007\n    Adelie\nTorgersen\n36.6\n17.8\n185\n3700\nfemale\n2007\n    Adelie\nTorgersen\n38.7\n19.0\n195\n3450\nfemale\n2007\n    Adelie\nTorgersen\n42.5\n20.7\n197\n4500\nmale\n2007\n    Adelie\nTorgersen\n34.4\n18.4\n184\n3325\nfemale\n2007\n    Adelie\nTorgersen\n46.0\n21.5\n194\n4200\nmale\n2007\n    Adelie\nBiscoe\n37.8\n18.3\n174\n3400\nfemale\n2007\n    Adelie\nBiscoe\n37.7\n18.7\n180\n3600\nmale\n2007\n    Adelie\nBiscoe\n35.9\n19.2\n189\n3800\nfemale\n2007\n    Adelie\nBiscoe\n38.2\n18.1\n185\n3950\nmale\n2007\n    Adelie\nBiscoe\n38.8\n17.2\n180\n3800\nmale\n2007\n    Adelie\nBiscoe\n35.3\n18.9\n187\n3800\nfemale\n2007\n    Adelie\nBiscoe\n40.6\n18.6\n183\n3550\nmale\n2007\n    Adelie\nBiscoe\n40.5\n17.9\n187\n3200\nfemale\n2007\n    Adelie\nBiscoe\n37.9\n18.6\n172\n3150\nfemale\n2007\n    Adelie\nBiscoe\n40.5\n18.9\n180\n3950\nmale\n2007\n    Adelie\nDream\n39.5\n16.7\n178\n3250\nfemale\n2007\n    Adelie\nDream\n37.2\n18.1\n178\n3900\nmale\n2007\n    Adelie\nDream\n39.5\n17.8\n188\n3300\nfemale\n2007\n    Adelie\nDream\n40.9\n18.9\n184\n3900\nmale\n2007\n    Adelie\nDream\n36.4\n17.0\n195\n3325\nfemale\n2007\n    Adelie\nDream\n39.2\n21.1\n196\n4150\nmale\n2007\n    Adelie\nDream\n38.8\n20.0\n190\n3950\nmale\n2007\n    Adelie\nDream\n42.2\n18.5\n180\n3550\nfemale\n2007\n    Adelie\nDream\n37.6\n19.3\n181\n3300\nfemale\n2007\n    Adelie\nDream\n39.8\n19.1\n184\n4650\nmale\n2007\n    Adelie\nDream\n36.5\n18.0\n182\n3150\nfemale\n2007\n    Adelie\nDream\n40.8\n18.4\n195\n3900\nmale\n2007\n    Adelie\nDream\n36.0\n18.5\n186\n3100\nfemale\n2007\n    Adelie\nDream\n44.1\n19.7\n196\n4400\nmale\n2007\n    Adelie\nDream\n37.0\n16.9\n185\n3000\nfemale\n2007\n    Adelie\nDream\n39.6\n18.8\n190\n4600\nmale\n2007\n    Adelie\nDream\n41.1\n19.0\n182\n3425\nmale\n2007\n    Adelie\nDream\n37.5\n18.9\n179\n2975\nNA\n2007\n    Adelie\nDream\n36.0\n17.9\n190\n3450\nfemale\n2007\n    Adelie\nDream\n42.3\n21.2\n191\n4150\nmale\n2007\n    Adelie\nBiscoe\n39.6\n17.7\n186\n3500\nfemale\n2008\n    Adelie\nBiscoe\n40.1\n18.9\n188\n4300\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n190\n3450\nfemale\n2008\n    Adelie\nBiscoe\n42.0\n19.5\n200\n4050\nmale\n2008\n    Adelie\nBiscoe\n34.5\n18.1\n187\n2900\nfemale\n2008\n    Adelie\nBiscoe\n41.4\n18.6\n191\n3700\nmale\n2008\n    Adelie\nBiscoe\n39.0\n17.5\n186\n3550\nfemale\n2008\n    Adelie\nBiscoe\n40.6\n18.8\n193\n3800\nmale\n2008\n    Adelie\nBiscoe\n36.5\n16.6\n181\n2850\nfemale\n2008\n    Adelie\nBiscoe\n37.6\n19.1\n194\n3750\nmale\n2008\n    Adelie\nBiscoe\n35.7\n16.9\n185\n3150\nfemale\n2008\n    Adelie\nBiscoe\n41.3\n21.1\n195\n4400\nmale\n2008\n    Adelie\nBiscoe\n37.6\n17.0\n185\n3600\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n18.2\n192\n4050\nmale\n2008\n    Adelie\nBiscoe\n36.4\n17.1\n184\n2850\nfemale\n2008\n    Adelie\nBiscoe\n41.6\n18.0\n192\n3950\nmale\n2008\n    Adelie\nBiscoe\n35.5\n16.2\n195\n3350\nfemale\n2008\n    Adelie\nBiscoe\n41.1\n19.1\n188\n4100\nmale\n2008\n    Adelie\nTorgersen\n35.9\n16.6\n190\n3050\nfemale\n2008\n    Adelie\nTorgersen\n41.8\n19.4\n198\n4450\nmale\n2008\n    Adelie\nTorgersen\n33.5\n19.0\n190\n3600\nfemale\n2008\n    Adelie\nTorgersen\n39.7\n18.4\n190\n3900\nmale\n2008\n    Adelie\nTorgersen\n39.6\n17.2\n196\n3550\nfemale\n2008\n    Adelie\nTorgersen\n45.8\n18.9\n197\n4150\nmale\n2008\n    Adelie\nTorgersen\n35.5\n17.5\n190\n3700\nfemale\n2008\n    Adelie\nTorgersen\n42.8\n18.5\n195\n4250\nmale\n2008\n    Adelie\nTorgersen\n40.9\n16.8\n191\n3700\nfemale\n2008\n    Adelie\nTorgersen\n37.2\n19.4\n184\n3900\nmale\n2008\n    Adelie\nTorgersen\n36.2\n16.1\n187\n3550\nfemale\n2008\n    Adelie\nTorgersen\n42.1\n19.1\n195\n4000\nmale\n2008\n    Adelie\nTorgersen\n34.6\n17.2\n189\n3200\nfemale\n2008\n    Adelie\nTorgersen\n42.9\n17.6\n196\n4700\nmale\n2008\n    Adelie\nTorgersen\n36.7\n18.8\n187\n3800\nfemale\n2008\n    Adelie\nTorgersen\n35.1\n19.4\n193\n4200\nmale\n2008\n    Adelie\nDream\n37.3\n17.8\n191\n3350\nfemale\n2008\n    Adelie\nDream\n41.3\n20.3\n194\n3550\nmale\n2008\n    Adelie\nDream\n36.3\n19.5\n190\n3800\nmale\n2008\n    Adelie\nDream\n36.9\n18.6\n189\n3500\nfemale\n2008\n    Adelie\nDream\n38.3\n19.2\n189\n3950\nmale\n2008\n    Adelie\nDream\n38.9\n18.8\n190\n3600\nfemale\n2008\n    Adelie\nDream\n35.7\n18.0\n202\n3550\nfemale\n2008\n    Adelie\nDream\n41.1\n18.1\n205\n4300\nmale\n2008\n    Adelie\nDream\n34.0\n17.1\n185\n3400\nfemale\n2008\n    Adelie\nDream\n39.6\n18.1\n186\n4450\nmale\n2008\n    Adelie\nDream\n36.2\n17.3\n187\n3300\nfemale\n2008\n    Adelie\nDream\n40.8\n18.9\n208\n4300\nmale\n2008\n    Adelie\nDream\n38.1\n18.6\n190\n3700\nfemale\n2008\n    Adelie\nDream\n40.3\n18.5\n196\n4350\nmale\n2008\n    Adelie\nDream\n33.1\n16.1\n178\n2900\nfemale\n2008\n    Adelie\nDream\n43.2\n18.5\n192\n4100\nmale\n2008\n    Adelie\nBiscoe\n35.0\n17.9\n192\n3725\nfemale\n2009\n    Adelie\nBiscoe\n41.0\n20.0\n203\n4725\nmale\n2009\n    Adelie\nBiscoe\n37.7\n16.0\n183\n3075\nfemale\n2009\n    Adelie\nBiscoe\n37.8\n20.0\n190\n4250\nmale\n2009\n    Adelie\nBiscoe\n37.9\n18.6\n193\n2925\nfemale\n2009\n    Adelie\nBiscoe\n39.7\n18.9\n184\n3550\nmale\n2009\n    Adelie\nBiscoe\n38.6\n17.2\n199\n3750\nfemale\n2009\n    Adelie\nBiscoe\n38.2\n20.0\n190\n3900\nmale\n2009\n    Adelie\nBiscoe\n38.1\n17.0\n181\n3175\nfemale\n2009\n    Adelie\nBiscoe\n43.2\n19.0\n197\n4775\nmale\n2009\n    Adelie\nBiscoe\n38.1\n16.5\n198\n3825\nfemale\n2009\n    Adelie\nBiscoe\n45.6\n20.3\n191\n4600\nmale\n2009\n    Adelie\nBiscoe\n39.7\n17.7\n193\n3200\nfemale\n2009\n    Adelie\nBiscoe\n42.2\n19.5\n197\n4275\nmale\n2009\n    Adelie\nBiscoe\n39.6\n20.7\n191\n3900\nfemale\n2009\n    Adelie\nBiscoe\n42.7\n18.3\n196\n4075\nmale\n2009\n    Adelie\nTorgersen\n38.6\n17.0\n188\n2900\nfemale\n2009\n    Adelie\nTorgersen\n37.3\n20.5\n199\n3775\nmale\n2009\n    Adelie\nTorgersen\n35.7\n17.0\n189\n3350\nfemale\n2009\n    Adelie\nTorgersen\n41.1\n18.6\n189\n3325\nmale\n2009\n    Adelie\nTorgersen\n36.2\n17.2\n187\n3150\nfemale\n2009\n    Adelie\nTorgersen\n37.7\n19.8\n198\n3500\nmale\n2009\n    Adelie\nTorgersen\n40.2\n17.0\n176\n3450\nfemale\n2009\n    Adelie\nTorgersen\n41.4\n18.5\n202\n3875\nmale\n2009\n    Adelie\nTorgersen\n35.2\n15.9\n186\n3050\nfemale\n2009\n    Adelie\nTorgersen\n40.6\n19.0\n199\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.8\n17.6\n191\n3275\nfemale\n2009\n    Adelie\nTorgersen\n41.5\n18.3\n195\n4300\nmale\n2009\n    Adelie\nTorgersen\n39.0\n17.1\n191\n3050\nfemale\n2009\n    Adelie\nTorgersen\n44.1\n18.0\n210\n4000\nmale\n2009\n    Adelie\nTorgersen\n38.5\n17.9\n190\n3325\nfemale\n2009\n    Adelie\nTorgersen\n43.1\n19.2\n197\n3500\nmale\n2009\n    Adelie\nDream\n36.8\n18.5\n193\n3500\nfemale\n2009\n    Adelie\nDream\n37.5\n18.5\n199\n4475\nmale\n2009\n    Adelie\nDream\n38.1\n17.6\n187\n3425\nfemale\n2009\n    Adelie\nDream\n41.1\n17.5\n190\n3900\nmale\n2009\n    Adelie\nDream\n35.6\n17.5\n191\n3175\nfemale\n2009\n    Adelie\nDream\n40.2\n20.1\n200\n3975\nmale\n2009\n    Adelie\nDream\n37.0\n16.5\n185\n3400\nfemale\n2009\n    Adelie\nDream\n39.7\n17.9\n193\n4250\nmale\n2009\n    Adelie\nDream\n40.2\n17.1\n193\n3400\nfemale\n2009\n    Adelie\nDream\n40.6\n17.2\n187\n3475\nmale\n2009\n    Adelie\nDream\n32.1\n15.5\n188\n3050\nfemale\n2009\n    Adelie\nDream\n40.7\n17.0\n190\n3725\nmale\n2009\n    Adelie\nDream\n37.3\n16.8\n192\n3000\nfemale\n2009\n    Adelie\nDream\n39.0\n18.7\n185\n3650\nmale\n2009\n    Adelie\nDream\n39.2\n18.6\n190\n4250\nmale\n2009\n    Adelie\nDream\n36.6\n18.4\n184\n3475\nfemale\n2009\n    Adelie\nDream\n36.0\n17.8\n195\n3450\nfemale\n2009\n    Adelie\nDream\n37.8\n18.1\n193\n3750\nmale\n2009\n    Adelie\nDream\n36.0\n17.1\n187\n3700\nfemale\n2009\n    Adelie\nDream\n41.5\n18.5\n201\n4000\nmale\n2009\n    Gentoo\nBiscoe\n46.1\n13.2\n211\n4500\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n16.3\n230\n5700\nmale\n2007\n    Gentoo\nBiscoe\n48.7\n14.1\n210\n4450\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.2\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n47.6\n14.5\n215\n5400\nmale\n2007\n    Gentoo\nBiscoe\n46.5\n13.5\n210\n4550\nfemale\n2007\n    Gentoo\nBiscoe\n45.4\n14.6\n211\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n46.7\n15.3\n219\n5200\nmale\n2007\n    Gentoo\nBiscoe\n43.3\n13.4\n209\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.8\n15.4\n215\n5150\nmale\n2007\n    Gentoo\nBiscoe\n40.9\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n49.0\n16.1\n216\n5550\nmale\n2007\n    Gentoo\nBiscoe\n45.5\n13.7\n214\n4650\nfemale\n2007\n    Gentoo\nBiscoe\n48.4\n14.6\n213\n5850\nmale\n2007\n    Gentoo\nBiscoe\n45.8\n14.6\n210\n4200\nfemale\n2007\n    Gentoo\nBiscoe\n49.3\n15.7\n217\n5850\nmale\n2007\n    Gentoo\nBiscoe\n42.0\n13.5\n210\n4150\nfemale\n2007\n    Gentoo\nBiscoe\n49.2\n15.2\n221\n6300\nmale\n2007\n    Gentoo\nBiscoe\n46.2\n14.5\n209\n4800\nfemale\n2007\n    Gentoo\nBiscoe\n48.7\n15.1\n222\n5350\nmale\n2007\n    Gentoo\nBiscoe\n50.2\n14.3\n218\n5700\nmale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.5\n14.5\n213\n4400\nfemale\n2007\n    Gentoo\nBiscoe\n46.3\n15.8\n215\n5050\nmale\n2007\n    Gentoo\nBiscoe\n42.9\n13.1\n215\n5000\nfemale\n2007\n    Gentoo\nBiscoe\n46.1\n15.1\n215\n5100\nmale\n2007\n    Gentoo\nBiscoe\n44.5\n14.3\n216\n4100\nNA\n2007\n    Gentoo\nBiscoe\n47.8\n15.0\n215\n5650\nmale\n2007\n    Gentoo\nBiscoe\n48.2\n14.3\n210\n4600\nfemale\n2007\n    Gentoo\nBiscoe\n50.0\n15.3\n220\n5550\nmale\n2007\n    Gentoo\nBiscoe\n47.3\n15.3\n222\n5250\nmale\n2007\n    Gentoo\nBiscoe\n42.8\n14.2\n209\n4700\nfemale\n2007\n    Gentoo\nBiscoe\n45.1\n14.5\n207\n5050\nfemale\n2007\n    Gentoo\nBiscoe\n59.6\n17.0\n230\n6050\nmale\n2007\n    Gentoo\nBiscoe\n49.1\n14.8\n220\n5150\nfemale\n2008\n    Gentoo\nBiscoe\n48.4\n16.3\n220\n5400\nmale\n2008\n    Gentoo\nBiscoe\n42.6\n13.7\n213\n4950\nfemale\n2008\n    Gentoo\nBiscoe\n44.4\n17.3\n219\n5250\nmale\n2008\n    Gentoo\nBiscoe\n44.0\n13.6\n208\n4350\nfemale\n2008\n    Gentoo\nBiscoe\n48.7\n15.7\n208\n5350\nmale\n2008\n    Gentoo\nBiscoe\n42.7\n13.7\n208\n3950\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n16.0\n225\n5700\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.7\n210\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n49.6\n15.0\n216\n4750\nmale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n222\n5550\nmale\n2008\n    Gentoo\nBiscoe\n43.6\n13.9\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n13.9\n210\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n50.5\n15.9\n225\n5400\nmale\n2008\n    Gentoo\nBiscoe\n44.9\n13.3\n213\n5100\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n15.8\n215\n5300\nmale\n2008\n    Gentoo\nBiscoe\n46.6\n14.2\n210\n4850\nfemale\n2008\n    Gentoo\nBiscoe\n48.5\n14.1\n220\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.1\n14.4\n210\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n50.1\n15.0\n225\n5000\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.4\n217\n4900\nfemale\n2008\n    Gentoo\nBiscoe\n45.0\n15.4\n220\n5050\nmale\n2008\n    Gentoo\nBiscoe\n43.8\n13.9\n208\n4300\nfemale\n2008\n    Gentoo\nBiscoe\n45.5\n15.0\n220\n5000\nmale\n2008\n    Gentoo\nBiscoe\n43.2\n14.5\n208\n4450\nfemale\n2008\n    Gentoo\nBiscoe\n50.4\n15.3\n224\n5550\nmale\n2008\n    Gentoo\nBiscoe\n45.3\n13.8\n208\n4200\nfemale\n2008\n    Gentoo\nBiscoe\n46.2\n14.9\n221\n5300\nmale\n2008\n    Gentoo\nBiscoe\n45.7\n13.9\n214\n4400\nfemale\n2008\n    Gentoo\nBiscoe\n54.3\n15.7\n231\n5650\nmale\n2008\n    Gentoo\nBiscoe\n45.8\n14.2\n219\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n49.8\n16.8\n230\n5700\nmale\n2008\n    Gentoo\nBiscoe\n46.2\n14.4\n214\n4650\nNA\n2008\n    Gentoo\nBiscoe\n49.5\n16.2\n229\n5800\nmale\n2008\n    Gentoo\nBiscoe\n43.5\n14.2\n220\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n50.7\n15.0\n223\n5550\nmale\n2008\n    Gentoo\nBiscoe\n47.7\n15.0\n216\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.6\n221\n5000\nmale\n2008\n    Gentoo\nBiscoe\n48.2\n15.6\n221\n5100\nmale\n2008\n    Gentoo\nBiscoe\n46.5\n14.8\n217\n5200\nfemale\n2008\n    Gentoo\nBiscoe\n46.4\n15.0\n216\n4700\nfemale\n2008\n    Gentoo\nBiscoe\n48.6\n16.0\n230\n5800\nmale\n2008\n    Gentoo\nBiscoe\n47.5\n14.2\n209\n4600\nfemale\n2008\n    Gentoo\nBiscoe\n51.1\n16.3\n220\n6000\nmale\n2008\n    Gentoo\nBiscoe\n45.2\n13.8\n215\n4750\nfemale\n2008\n    Gentoo\nBiscoe\n45.2\n16.4\n223\n5950\nmale\n2008\n    Gentoo\nBiscoe\n49.1\n14.5\n212\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n52.5\n15.6\n221\n5450\nmale\n2009\n    Gentoo\nBiscoe\n47.4\n14.6\n212\n4725\nfemale\n2009\n    Gentoo\nBiscoe\n50.0\n15.9\n224\n5350\nmale\n2009\n    Gentoo\nBiscoe\n44.9\n13.8\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n17.3\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n43.4\n14.4\n218\n4600\nfemale\n2009\n    Gentoo\nBiscoe\n51.3\n14.2\n218\n5300\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n14.0\n212\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n52.1\n17.0\n230\n5550\nmale\n2009\n    Gentoo\nBiscoe\n47.5\n15.0\n218\n4950\nfemale\n2009\n    Gentoo\nBiscoe\n52.2\n17.1\n228\n5400\nmale\n2009\n    Gentoo\nBiscoe\n45.5\n14.5\n212\n4750\nfemale\n2009\n    Gentoo\nBiscoe\n49.5\n16.1\n224\n5650\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n14.7\n214\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.8\n15.7\n226\n5200\nmale\n2009\n    Gentoo\nBiscoe\n49.4\n15.8\n216\n4925\nmale\n2009\n    Gentoo\nBiscoe\n46.9\n14.6\n222\n4875\nfemale\n2009\n    Gentoo\nBiscoe\n48.4\n14.4\n203\n4625\nfemale\n2009\n    Gentoo\nBiscoe\n51.1\n16.5\n225\n5250\nmale\n2009\n    Gentoo\nBiscoe\n48.5\n15.0\n219\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n55.9\n17.0\n228\n5600\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n15.5\n215\n4975\nfemale\n2009\n    Gentoo\nBiscoe\n49.1\n15.0\n228\n5500\nmale\n2009\n    Gentoo\nBiscoe\n47.3\n13.8\n216\n4725\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n16.1\n215\n5500\nmale\n2009\n    Gentoo\nBiscoe\n41.7\n14.7\n210\n4700\nfemale\n2009\n    Gentoo\nBiscoe\n53.4\n15.8\n219\n5500\nmale\n2009\n    Gentoo\nBiscoe\n43.3\n14.0\n208\n4575\nfemale\n2009\n    Gentoo\nBiscoe\n48.1\n15.1\n209\n5500\nmale\n2009\n    Gentoo\nBiscoe\n50.5\n15.2\n216\n5000\nfemale\n2009\n    Gentoo\nBiscoe\n49.8\n15.9\n229\n5950\nmale\n2009\n    Gentoo\nBiscoe\n43.5\n15.2\n213\n4650\nfemale\n2009\n    Gentoo\nBiscoe\n51.5\n16.3\n230\n5500\nmale\n2009\n    Gentoo\nBiscoe\n46.2\n14.1\n217\n4375\nfemale\n2009\n    Gentoo\nBiscoe\n55.1\n16.0\n230\n5850\nmale\n2009\n    Gentoo\nBiscoe\n44.5\n15.7\n217\n4875\nNA\n2009\n    Gentoo\nBiscoe\n48.8\n16.2\n222\n6000\nmale\n2009\n    Gentoo\nBiscoe\n47.2\n13.7\n214\n4925\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.8\n14.3\n215\n4850\nfemale\n2009\n    Gentoo\nBiscoe\n50.4\n15.7\n222\n5750\nmale\n2009\n    Gentoo\nBiscoe\n45.2\n14.8\n212\n5200\nfemale\n2009\n    Gentoo\nBiscoe\n49.9\n16.1\n213\n5400\nmale\n2009\n    Chinstrap\nDream\n46.5\n17.9\n192\n3500\nfemale\n2007\n    Chinstrap\nDream\n50.0\n19.5\n196\n3900\nmale\n2007\n    Chinstrap\nDream\n51.3\n19.2\n193\n3650\nmale\n2007\n    Chinstrap\nDream\n45.4\n18.7\n188\n3525\nfemale\n2007\n    Chinstrap\nDream\n52.7\n19.8\n197\n3725\nmale\n2007\n    Chinstrap\nDream\n45.2\n17.8\n198\n3950\nfemale\n2007\n    Chinstrap\nDream\n46.1\n18.2\n178\n3250\nfemale\n2007\n    Chinstrap\nDream\n51.3\n18.2\n197\n3750\nmale\n2007\n    Chinstrap\nDream\n46.0\n18.9\n195\n4150\nfemale\n2007\n    Chinstrap\nDream\n51.3\n19.9\n198\n3700\nmale\n2007\n    Chinstrap\nDream\n46.6\n17.8\n193\n3800\nfemale\n2007\n    Chinstrap\nDream\n51.7\n20.3\n194\n3775\nmale\n2007\n    Chinstrap\nDream\n47.0\n17.3\n185\n3700\nfemale\n2007\n    Chinstrap\nDream\n52.0\n18.1\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n45.9\n17.1\n190\n3575\nfemale\n2007\n    Chinstrap\nDream\n50.5\n19.6\n201\n4050\nmale\n2007\n    Chinstrap\nDream\n50.3\n20.0\n197\n3300\nmale\n2007\n    Chinstrap\nDream\n58.0\n17.8\n181\n3700\nfemale\n2007\n    Chinstrap\nDream\n46.4\n18.6\n190\n3450\nfemale\n2007\n    Chinstrap\nDream\n49.2\n18.2\n195\n4400\nmale\n2007\n    Chinstrap\nDream\n42.4\n17.3\n181\n3600\nfemale\n2007\n    Chinstrap\nDream\n48.5\n17.5\n191\n3400\nmale\n2007\n    Chinstrap\nDream\n43.2\n16.6\n187\n2900\nfemale\n2007\n    Chinstrap\nDream\n50.6\n19.4\n193\n3800\nmale\n2007\n    Chinstrap\nDream\n46.7\n17.9\n195\n3300\nfemale\n2007\n    Chinstrap\nDream\n52.0\n19.0\n197\n4150\nmale\n2007\n    Chinstrap\nDream\n50.5\n18.4\n200\n3400\nfemale\n2008\n    Chinstrap\nDream\n49.5\n19.0\n200\n3800\nmale\n2008\n    Chinstrap\nDream\n46.4\n17.8\n191\n3700\nfemale\n2008\n    Chinstrap\nDream\n52.8\n20.0\n205\n4550\nmale\n2008\n    Chinstrap\nDream\n40.9\n16.6\n187\n3200\nfemale\n2008\n    Chinstrap\nDream\n54.2\n20.8\n201\n4300\nmale\n2008\n    Chinstrap\nDream\n42.5\n16.7\n187\n3350\nfemale\n2008\n    Chinstrap\nDream\n51.0\n18.8\n203\n4100\nmale\n2008\n    Chinstrap\nDream\n49.7\n18.6\n195\n3600\nmale\n2008\n    Chinstrap\nDream\n47.5\n16.8\n199\n3900\nfemale\n2008\n    Chinstrap\nDream\n47.6\n18.3\n195\n3850\nfemale\n2008\n    Chinstrap\nDream\n52.0\n20.7\n210\n4800\nmale\n2008\n    Chinstrap\nDream\n46.9\n16.6\n192\n2700\nfemale\n2008\n    Chinstrap\nDream\n53.5\n19.9\n205\n4500\nmale\n2008\n    Chinstrap\nDream\n49.0\n19.5\n210\n3950\nmale\n2008\n    Chinstrap\nDream\n46.2\n17.5\n187\n3650\nfemale\n2008\n    Chinstrap\nDream\n50.9\n19.1\n196\n3550\nmale\n2008\n    Chinstrap\nDream\n45.5\n17.0\n196\n3500\nfemale\n2008\n    Chinstrap\nDream\n50.9\n17.9\n196\n3675\nfemale\n2009\n    Chinstrap\nDream\n50.8\n18.5\n201\n4450\nmale\n2009\n    Chinstrap\nDream\n50.1\n17.9\n190\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.0\n19.6\n212\n4300\nmale\n2009\n    Chinstrap\nDream\n51.5\n18.7\n187\n3250\nmale\n2009\n    Chinstrap\nDream\n49.8\n17.3\n198\n3675\nfemale\n2009\n    Chinstrap\nDream\n48.1\n16.4\n199\n3325\nfemale\n2009\n    Chinstrap\nDream\n51.4\n19.0\n201\n3950\nmale\n2009\n    Chinstrap\nDream\n45.7\n17.3\n193\n3600\nfemale\n2009\n    Chinstrap\nDream\n50.7\n19.7\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n42.5\n17.3\n187\n3350\nfemale\n2009\n    Chinstrap\nDream\n52.2\n18.8\n197\n3450\nmale\n2009\n    Chinstrap\nDream\n45.2\n16.6\n191\n3250\nfemale\n2009\n    Chinstrap\nDream\n49.3\n19.9\n203\n4050\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.8\n202\n3800\nmale\n2009\n    Chinstrap\nDream\n45.6\n19.4\n194\n3525\nfemale\n2009\n    Chinstrap\nDream\n51.9\n19.5\n206\n3950\nmale\n2009\n    Chinstrap\nDream\n46.8\n16.5\n189\n3650\nfemale\n2009\n    Chinstrap\nDream\n45.7\n17.0\n195\n3650\nfemale\n2009\n    Chinstrap\nDream\n55.8\n19.8\n207\n4000\nmale\n2009\n    Chinstrap\nDream\n43.5\n18.1\n202\n3400\nfemale\n2009\n    Chinstrap\nDream\n49.6\n18.2\n193\n3775\nmale\n2009\n    Chinstrap\nDream\n50.8\n19.0\n210\n4100\nmale\n2009\n    Chinstrap\nDream\n50.2\n18.7\n198\n3775\nfemale\n2009\n  \n  \n  \n\n\n\n\n\n\n\n\n\n Exercise 5\n\nCombine everything we learn today and create a complete and customized table using the Penguins Palmer data set.\n\n\n\nSolutions (click here)\n\n\n# Create a table with titles, subtitles, and footnote\npenguins %&gt;% gt() %&gt;%\n  tab_header(\n    title = \"Palmer Penguins Data\",\n    subtitle = \"Species, Island, and Measurements\"\n  ) %&gt;% \n  tab_footnote(\n    footnote = \"Data collected by Dr. Kristen Gorman\",\n    locations = cells_title(groups = \"title\")\n  ) %&gt;% \n  fmt_number(\n    columns = vars(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g),\n    decimals = 2\n  ) %&gt;% \n  tab_style(\n    style = cell_fill(color = \"lightblue\"),\n    locations = cells_body(columns = vars(bill_length_mm))\n  ) %&gt;% \n  cols_label(\n    bill_length_mm = \"Bill Length (mm)\",\n    bill_depth_mm = \"Bill Depth (mm)\",\n    flipper_length_mm = \"Flipper Length (mm)\",\n    body_mass_g = \"Body Mass (g)\"\n  )\n\n\n\n\n\n  \n    \n      Palmer Penguins Data1\n    \n    \n      Species, Island, and Measurements\n    \n    \n      species\n      island\n      Bill Length (mm)\n      Bill Depth (mm)\n      Flipper Length (mm)\n      Body Mass (g)\n      sex\n      year\n    \n  \n  \n    Adelie\nTorgersen\n39.10\n18.70\n181.00\n3,750.00\nmale\n2007\n    Adelie\nTorgersen\n39.50\n17.40\n186.00\n3,800.00\nfemale\n2007\n    Adelie\nTorgersen\n40.30\n18.00\n195.00\n3,250.00\nfemale\n2007\n    Adelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n    Adelie\nTorgersen\n36.70\n19.30\n193.00\n3,450.00\nfemale\n2007\n    Adelie\nTorgersen\n39.30\n20.60\n190.00\n3,650.00\nmale\n2007\n    Adelie\nTorgersen\n38.90\n17.80\n181.00\n3,625.00\nfemale\n2007\n    Adelie\nTorgersen\n39.20\n19.60\n195.00\n4,675.00\nmale\n2007\n    Adelie\nTorgersen\n34.10\n18.10\n193.00\n3,475.00\nNA\n2007\n    Adelie\nTorgersen\n42.00\n20.20\n190.00\n4,250.00\nNA\n2007\n    Adelie\nTorgersen\n37.80\n17.10\n186.00\n3,300.00\nNA\n2007\n    Adelie\nTorgersen\n37.80\n17.30\n180.00\n3,700.00\nNA\n2007\n    Adelie\nTorgersen\n41.10\n17.60\n182.00\n3,200.00\nfemale\n2007\n    Adelie\nTorgersen\n38.60\n21.20\n191.00\n3,800.00\nmale\n2007\n    Adelie\nTorgersen\n34.60\n21.10\n198.00\n4,400.00\nmale\n2007\n    Adelie\nTorgersen\n36.60\n17.80\n185.00\n3,700.00\nfemale\n2007\n    Adelie\nTorgersen\n38.70\n19.00\n195.00\n3,450.00\nfemale\n2007\n    Adelie\nTorgersen\n42.50\n20.70\n197.00\n4,500.00\nmale\n2007\n    Adelie\nTorgersen\n34.40\n18.40\n184.00\n3,325.00\nfemale\n2007\n    Adelie\nTorgersen\n46.00\n21.50\n194.00\n4,200.00\nmale\n2007\n    Adelie\nBiscoe\n37.80\n18.30\n174.00\n3,400.00\nfemale\n2007\n    Adelie\nBiscoe\n37.70\n18.70\n180.00\n3,600.00\nmale\n2007\n    Adelie\nBiscoe\n35.90\n19.20\n189.00\n3,800.00\nfemale\n2007\n    Adelie\nBiscoe\n38.20\n18.10\n185.00\n3,950.00\nmale\n2007\n    Adelie\nBiscoe\n38.80\n17.20\n180.00\n3,800.00\nmale\n2007\n    Adelie\nBiscoe\n35.30\n18.90\n187.00\n3,800.00\nfemale\n2007\n    Adelie\nBiscoe\n40.60\n18.60\n183.00\n3,550.00\nmale\n2007\n    Adelie\nBiscoe\n40.50\n17.90\n187.00\n3,200.00\nfemale\n2007\n    Adelie\nBiscoe\n37.90\n18.60\n172.00\n3,150.00\nfemale\n2007\n    Adelie\nBiscoe\n40.50\n18.90\n180.00\n3,950.00\nmale\n2007\n    Adelie\nDream\n39.50\n16.70\n178.00\n3,250.00\nfemale\n2007\n    Adelie\nDream\n37.20\n18.10\n178.00\n3,900.00\nmale\n2007\n    Adelie\nDream\n39.50\n17.80\n188.00\n3,300.00\nfemale\n2007\n    Adelie\nDream\n40.90\n18.90\n184.00\n3,900.00\nmale\n2007\n    Adelie\nDream\n36.40\n17.00\n195.00\n3,325.00\nfemale\n2007\n    Adelie\nDream\n39.20\n21.10\n196.00\n4,150.00\nmale\n2007\n    Adelie\nDream\n38.80\n20.00\n190.00\n3,950.00\nmale\n2007\n    Adelie\nDream\n42.20\n18.50\n180.00\n3,550.00\nfemale\n2007\n    Adelie\nDream\n37.60\n19.30\n181.00\n3,300.00\nfemale\n2007\n    Adelie\nDream\n39.80\n19.10\n184.00\n4,650.00\nmale\n2007\n    Adelie\nDream\n36.50\n18.00\n182.00\n3,150.00\nfemale\n2007\n    Adelie\nDream\n40.80\n18.40\n195.00\n3,900.00\nmale\n2007\n    Adelie\nDream\n36.00\n18.50\n186.00\n3,100.00\nfemale\n2007\n    Adelie\nDream\n44.10\n19.70\n196.00\n4,400.00\nmale\n2007\n    Adelie\nDream\n37.00\n16.90\n185.00\n3,000.00\nfemale\n2007\n    Adelie\nDream\n39.60\n18.80\n190.00\n4,600.00\nmale\n2007\n    Adelie\nDream\n41.10\n19.00\n182.00\n3,425.00\nmale\n2007\n    Adelie\nDream\n37.50\n18.90\n179.00\n2,975.00\nNA\n2007\n    Adelie\nDream\n36.00\n17.90\n190.00\n3,450.00\nfemale\n2007\n    Adelie\nDream\n42.30\n21.20\n191.00\n4,150.00\nmale\n2007\n    Adelie\nBiscoe\n39.60\n17.70\n186.00\n3,500.00\nfemale\n2008\n    Adelie\nBiscoe\n40.10\n18.90\n188.00\n4,300.00\nmale\n2008\n    Adelie\nBiscoe\n35.00\n17.90\n190.00\n3,450.00\nfemale\n2008\n    Adelie\nBiscoe\n42.00\n19.50\n200.00\n4,050.00\nmale\n2008\n    Adelie\nBiscoe\n34.50\n18.10\n187.00\n2,900.00\nfemale\n2008\n    Adelie\nBiscoe\n41.40\n18.60\n191.00\n3,700.00\nmale\n2008\n    Adelie\nBiscoe\n39.00\n17.50\n186.00\n3,550.00\nfemale\n2008\n    Adelie\nBiscoe\n40.60\n18.80\n193.00\n3,800.00\nmale\n2008\n    Adelie\nBiscoe\n36.50\n16.60\n181.00\n2,850.00\nfemale\n2008\n    Adelie\nBiscoe\n37.60\n19.10\n194.00\n3,750.00\nmale\n2008\n    Adelie\nBiscoe\n35.70\n16.90\n185.00\n3,150.00\nfemale\n2008\n    Adelie\nBiscoe\n41.30\n21.10\n195.00\n4,400.00\nmale\n2008\n    Adelie\nBiscoe\n37.60\n17.00\n185.00\n3,600.00\nfemale\n2008\n    Adelie\nBiscoe\n41.10\n18.20\n192.00\n4,050.00\nmale\n2008\n    Adelie\nBiscoe\n36.40\n17.10\n184.00\n2,850.00\nfemale\n2008\n    Adelie\nBiscoe\n41.60\n18.00\n192.00\n3,950.00\nmale\n2008\n    Adelie\nBiscoe\n35.50\n16.20\n195.00\n3,350.00\nfemale\n2008\n    Adelie\nBiscoe\n41.10\n19.10\n188.00\n4,100.00\nmale\n2008\n    Adelie\nTorgersen\n35.90\n16.60\n190.00\n3,050.00\nfemale\n2008\n    Adelie\nTorgersen\n41.80\n19.40\n198.00\n4,450.00\nmale\n2008\n    Adelie\nTorgersen\n33.50\n19.00\n190.00\n3,600.00\nfemale\n2008\n    Adelie\nTorgersen\n39.70\n18.40\n190.00\n3,900.00\nmale\n2008\n    Adelie\nTorgersen\n39.60\n17.20\n196.00\n3,550.00\nfemale\n2008\n    Adelie\nTorgersen\n45.80\n18.90\n197.00\n4,150.00\nmale\n2008\n    Adelie\nTorgersen\n35.50\n17.50\n190.00\n3,700.00\nfemale\n2008\n    Adelie\nTorgersen\n42.80\n18.50\n195.00\n4,250.00\nmale\n2008\n    Adelie\nTorgersen\n40.90\n16.80\n191.00\n3,700.00\nfemale\n2008\n    Adelie\nTorgersen\n37.20\n19.40\n184.00\n3,900.00\nmale\n2008\n    Adelie\nTorgersen\n36.20\n16.10\n187.00\n3,550.00\nfemale\n2008\n    Adelie\nTorgersen\n42.10\n19.10\n195.00\n4,000.00\nmale\n2008\n    Adelie\nTorgersen\n34.60\n17.20\n189.00\n3,200.00\nfemale\n2008\n    Adelie\nTorgersen\n42.90\n17.60\n196.00\n4,700.00\nmale\n2008\n    Adelie\nTorgersen\n36.70\n18.80\n187.00\n3,800.00\nfemale\n2008\n    Adelie\nTorgersen\n35.10\n19.40\n193.00\n4,200.00\nmale\n2008\n    Adelie\nDream\n37.30\n17.80\n191.00\n3,350.00\nfemale\n2008\n    Adelie\nDream\n41.30\n20.30\n194.00\n3,550.00\nmale\n2008\n    Adelie\nDream\n36.30\n19.50\n190.00\n3,800.00\nmale\n2008\n    Adelie\nDream\n36.90\n18.60\n189.00\n3,500.00\nfemale\n2008\n    Adelie\nDream\n38.30\n19.20\n189.00\n3,950.00\nmale\n2008\n    Adelie\nDream\n38.90\n18.80\n190.00\n3,600.00\nfemale\n2008\n    Adelie\nDream\n35.70\n18.00\n202.00\n3,550.00\nfemale\n2008\n    Adelie\nDream\n41.10\n18.10\n205.00\n4,300.00\nmale\n2008\n    Adelie\nDream\n34.00\n17.10\n185.00\n3,400.00\nfemale\n2008\n    Adelie\nDream\n39.60\n18.10\n186.00\n4,450.00\nmale\n2008\n    Adelie\nDream\n36.20\n17.30\n187.00\n3,300.00\nfemale\n2008\n    Adelie\nDream\n40.80\n18.90\n208.00\n4,300.00\nmale\n2008\n    Adelie\nDream\n38.10\n18.60\n190.00\n3,700.00\nfemale\n2008\n    Adelie\nDream\n40.30\n18.50\n196.00\n4,350.00\nmale\n2008\n    Adelie\nDream\n33.10\n16.10\n178.00\n2,900.00\nfemale\n2008\n    Adelie\nDream\n43.20\n18.50\n192.00\n4,100.00\nmale\n2008\n    Adelie\nBiscoe\n35.00\n17.90\n192.00\n3,725.00\nfemale\n2009\n    Adelie\nBiscoe\n41.00\n20.00\n203.00\n4,725.00\nmale\n2009\n    Adelie\nBiscoe\n37.70\n16.00\n183.00\n3,075.00\nfemale\n2009\n    Adelie\nBiscoe\n37.80\n20.00\n190.00\n4,250.00\nmale\n2009\n    Adelie\nBiscoe\n37.90\n18.60\n193.00\n2,925.00\nfemale\n2009\n    Adelie\nBiscoe\n39.70\n18.90\n184.00\n3,550.00\nmale\n2009\n    Adelie\nBiscoe\n38.60\n17.20\n199.00\n3,750.00\nfemale\n2009\n    Adelie\nBiscoe\n38.20\n20.00\n190.00\n3,900.00\nmale\n2009\n    Adelie\nBiscoe\n38.10\n17.00\n181.00\n3,175.00\nfemale\n2009\n    Adelie\nBiscoe\n43.20\n19.00\n197.00\n4,775.00\nmale\n2009\n    Adelie\nBiscoe\n38.10\n16.50\n198.00\n3,825.00\nfemale\n2009\n    Adelie\nBiscoe\n45.60\n20.30\n191.00\n4,600.00\nmale\n2009\n    Adelie\nBiscoe\n39.70\n17.70\n193.00\n3,200.00\nfemale\n2009\n    Adelie\nBiscoe\n42.20\n19.50\n197.00\n4,275.00\nmale\n2009\n    Adelie\nBiscoe\n39.60\n20.70\n191.00\n3,900.00\nfemale\n2009\n    Adelie\nBiscoe\n42.70\n18.30\n196.00\n4,075.00\nmale\n2009\n    Adelie\nTorgersen\n38.60\n17.00\n188.00\n2,900.00\nfemale\n2009\n    Adelie\nTorgersen\n37.30\n20.50\n199.00\n3,775.00\nmale\n2009\n    Adelie\nTorgersen\n35.70\n17.00\n189.00\n3,350.00\nfemale\n2009\n    Adelie\nTorgersen\n41.10\n18.60\n189.00\n3,325.00\nmale\n2009\n    Adelie\nTorgersen\n36.20\n17.20\n187.00\n3,150.00\nfemale\n2009\n    Adelie\nTorgersen\n37.70\n19.80\n198.00\n3,500.00\nmale\n2009\n    Adelie\nTorgersen\n40.20\n17.00\n176.00\n3,450.00\nfemale\n2009\n    Adelie\nTorgersen\n41.40\n18.50\n202.00\n3,875.00\nmale\n2009\n    Adelie\nTorgersen\n35.20\n15.90\n186.00\n3,050.00\nfemale\n2009\n    Adelie\nTorgersen\n40.60\n19.00\n199.00\n4,000.00\nmale\n2009\n    Adelie\nTorgersen\n38.80\n17.60\n191.00\n3,275.00\nfemale\n2009\n    Adelie\nTorgersen\n41.50\n18.30\n195.00\n4,300.00\nmale\n2009\n    Adelie\nTorgersen\n39.00\n17.10\n191.00\n3,050.00\nfemale\n2009\n    Adelie\nTorgersen\n44.10\n18.00\n210.00\n4,000.00\nmale\n2009\n    Adelie\nTorgersen\n38.50\n17.90\n190.00\n3,325.00\nfemale\n2009\n    Adelie\nTorgersen\n43.10\n19.20\n197.00\n3,500.00\nmale\n2009\n    Adelie\nDream\n36.80\n18.50\n193.00\n3,500.00\nfemale\n2009\n    Adelie\nDream\n37.50\n18.50\n199.00\n4,475.00\nmale\n2009\n    Adelie\nDream\n38.10\n17.60\n187.00\n3,425.00\nfemale\n2009\n    Adelie\nDream\n41.10\n17.50\n190.00\n3,900.00\nmale\n2009\n    Adelie\nDream\n35.60\n17.50\n191.00\n3,175.00\nfemale\n2009\n    Adelie\nDream\n40.20\n20.10\n200.00\n3,975.00\nmale\n2009\n    Adelie\nDream\n37.00\n16.50\n185.00\n3,400.00\nfemale\n2009\n    Adelie\nDream\n39.70\n17.90\n193.00\n4,250.00\nmale\n2009\n    Adelie\nDream\n40.20\n17.10\n193.00\n3,400.00\nfemale\n2009\n    Adelie\nDream\n40.60\n17.20\n187.00\n3,475.00\nmale\n2009\n    Adelie\nDream\n32.10\n15.50\n188.00\n3,050.00\nfemale\n2009\n    Adelie\nDream\n40.70\n17.00\n190.00\n3,725.00\nmale\n2009\n    Adelie\nDream\n37.30\n16.80\n192.00\n3,000.00\nfemale\n2009\n    Adelie\nDream\n39.00\n18.70\n185.00\n3,650.00\nmale\n2009\n    Adelie\nDream\n39.20\n18.60\n190.00\n4,250.00\nmale\n2009\n    Adelie\nDream\n36.60\n18.40\n184.00\n3,475.00\nfemale\n2009\n    Adelie\nDream\n36.00\n17.80\n195.00\n3,450.00\nfemale\n2009\n    Adelie\nDream\n37.80\n18.10\n193.00\n3,750.00\nmale\n2009\n    Adelie\nDream\n36.00\n17.10\n187.00\n3,700.00\nfemale\n2009\n    Adelie\nDream\n41.50\n18.50\n201.00\n4,000.00\nmale\n2009\n    Gentoo\nBiscoe\n46.10\n13.20\n211.00\n4,500.00\nfemale\n2007\n    Gentoo\nBiscoe\n50.00\n16.30\n230.00\n5,700.00\nmale\n2007\n    Gentoo\nBiscoe\n48.70\n14.10\n210.00\n4,450.00\nfemale\n2007\n    Gentoo\nBiscoe\n50.00\n15.20\n218.00\n5,700.00\nmale\n2007\n    Gentoo\nBiscoe\n47.60\n14.50\n215.00\n5,400.00\nmale\n2007\n    Gentoo\nBiscoe\n46.50\n13.50\n210.00\n4,550.00\nfemale\n2007\n    Gentoo\nBiscoe\n45.40\n14.60\n211.00\n4,800.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.70\n15.30\n219.00\n5,200.00\nmale\n2007\n    Gentoo\nBiscoe\n43.30\n13.40\n209.00\n4,400.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.80\n15.40\n215.00\n5,150.00\nmale\n2007\n    Gentoo\nBiscoe\n40.90\n13.70\n214.00\n4,650.00\nfemale\n2007\n    Gentoo\nBiscoe\n49.00\n16.10\n216.00\n5,550.00\nmale\n2007\n    Gentoo\nBiscoe\n45.50\n13.70\n214.00\n4,650.00\nfemale\n2007\n    Gentoo\nBiscoe\n48.40\n14.60\n213.00\n5,850.00\nmale\n2007\n    Gentoo\nBiscoe\n45.80\n14.60\n210.00\n4,200.00\nfemale\n2007\n    Gentoo\nBiscoe\n49.30\n15.70\n217.00\n5,850.00\nmale\n2007\n    Gentoo\nBiscoe\n42.00\n13.50\n210.00\n4,150.00\nfemale\n2007\n    Gentoo\nBiscoe\n49.20\n15.20\n221.00\n6,300.00\nmale\n2007\n    Gentoo\nBiscoe\n46.20\n14.50\n209.00\n4,800.00\nfemale\n2007\n    Gentoo\nBiscoe\n48.70\n15.10\n222.00\n5,350.00\nmale\n2007\n    Gentoo\nBiscoe\n50.20\n14.30\n218.00\n5,700.00\nmale\n2007\n    Gentoo\nBiscoe\n45.10\n14.50\n215.00\n5,000.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.50\n14.50\n213.00\n4,400.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.30\n15.80\n215.00\n5,050.00\nmale\n2007\n    Gentoo\nBiscoe\n42.90\n13.10\n215.00\n5,000.00\nfemale\n2007\n    Gentoo\nBiscoe\n46.10\n15.10\n215.00\n5,100.00\nmale\n2007\n    Gentoo\nBiscoe\n44.50\n14.30\n216.00\n4,100.00\nNA\n2007\n    Gentoo\nBiscoe\n47.80\n15.00\n215.00\n5,650.00\nmale\n2007\n    Gentoo\nBiscoe\n48.20\n14.30\n210.00\n4,600.00\nfemale\n2007\n    Gentoo\nBiscoe\n50.00\n15.30\n220.00\n5,550.00\nmale\n2007\n    Gentoo\nBiscoe\n47.30\n15.30\n222.00\n5,250.00\nmale\n2007\n    Gentoo\nBiscoe\n42.80\n14.20\n209.00\n4,700.00\nfemale\n2007\n    Gentoo\nBiscoe\n45.10\n14.50\n207.00\n5,050.00\nfemale\n2007\n    Gentoo\nBiscoe\n59.60\n17.00\n230.00\n6,050.00\nmale\n2007\n    Gentoo\nBiscoe\n49.10\n14.80\n220.00\n5,150.00\nfemale\n2008\n    Gentoo\nBiscoe\n48.40\n16.30\n220.00\n5,400.00\nmale\n2008\n    Gentoo\nBiscoe\n42.60\n13.70\n213.00\n4,950.00\nfemale\n2008\n    Gentoo\nBiscoe\n44.40\n17.30\n219.00\n5,250.00\nmale\n2008\n    Gentoo\nBiscoe\n44.00\n13.60\n208.00\n4,350.00\nfemale\n2008\n    Gentoo\nBiscoe\n48.70\n15.70\n208.00\n5,350.00\nmale\n2008\n    Gentoo\nBiscoe\n42.70\n13.70\n208.00\n3,950.00\nfemale\n2008\n    Gentoo\nBiscoe\n49.60\n16.00\n225.00\n5,700.00\nmale\n2008\n    Gentoo\nBiscoe\n45.30\n13.70\n210.00\n4,300.00\nfemale\n2008\n    Gentoo\nBiscoe\n49.60\n15.00\n216.00\n4,750.00\nmale\n2008\n    Gentoo\nBiscoe\n50.50\n15.90\n222.00\n5,550.00\nmale\n2008\n    Gentoo\nBiscoe\n43.60\n13.90\n217.00\n4,900.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.50\n13.90\n210.00\n4,200.00\nfemale\n2008\n    Gentoo\nBiscoe\n50.50\n15.90\n225.00\n5,400.00\nmale\n2008\n    Gentoo\nBiscoe\n44.90\n13.30\n213.00\n5,100.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.20\n15.80\n215.00\n5,300.00\nmale\n2008\n    Gentoo\nBiscoe\n46.60\n14.20\n210.00\n4,850.00\nfemale\n2008\n    Gentoo\nBiscoe\n48.50\n14.10\n220.00\n5,300.00\nmale\n2008\n    Gentoo\nBiscoe\n45.10\n14.40\n210.00\n4,400.00\nfemale\n2008\n    Gentoo\nBiscoe\n50.10\n15.00\n225.00\n5,000.00\nmale\n2008\n    Gentoo\nBiscoe\n46.50\n14.40\n217.00\n4,900.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.00\n15.40\n220.00\n5,050.00\nmale\n2008\n    Gentoo\nBiscoe\n43.80\n13.90\n208.00\n4,300.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.50\n15.00\n220.00\n5,000.00\nmale\n2008\n    Gentoo\nBiscoe\n43.20\n14.50\n208.00\n4,450.00\nfemale\n2008\n    Gentoo\nBiscoe\n50.40\n15.30\n224.00\n5,550.00\nmale\n2008\n    Gentoo\nBiscoe\n45.30\n13.80\n208.00\n4,200.00\nfemale\n2008\n    Gentoo\nBiscoe\n46.20\n14.90\n221.00\n5,300.00\nmale\n2008\n    Gentoo\nBiscoe\n45.70\n13.90\n214.00\n4,400.00\nfemale\n2008\n    Gentoo\nBiscoe\n54.30\n15.70\n231.00\n5,650.00\nmale\n2008\n    Gentoo\nBiscoe\n45.80\n14.20\n219.00\n4,700.00\nfemale\n2008\n    Gentoo\nBiscoe\n49.80\n16.80\n230.00\n5,700.00\nmale\n2008\n    Gentoo\nBiscoe\n46.20\n14.40\n214.00\n4,650.00\nNA\n2008\n    Gentoo\nBiscoe\n49.50\n16.20\n229.00\n5,800.00\nmale\n2008\n    Gentoo\nBiscoe\n43.50\n14.20\n220.00\n4,700.00\nfemale\n2008\n    Gentoo\nBiscoe\n50.70\n15.00\n223.00\n5,550.00\nmale\n2008\n    Gentoo\nBiscoe\n47.70\n15.00\n216.00\n4,750.00\nfemale\n2008\n    Gentoo\nBiscoe\n46.40\n15.60\n221.00\n5,000.00\nmale\n2008\n    Gentoo\nBiscoe\n48.20\n15.60\n221.00\n5,100.00\nmale\n2008\n    Gentoo\nBiscoe\n46.50\n14.80\n217.00\n5,200.00\nfemale\n2008\n    Gentoo\nBiscoe\n46.40\n15.00\n216.00\n4,700.00\nfemale\n2008\n    Gentoo\nBiscoe\n48.60\n16.00\n230.00\n5,800.00\nmale\n2008\n    Gentoo\nBiscoe\n47.50\n14.20\n209.00\n4,600.00\nfemale\n2008\n    Gentoo\nBiscoe\n51.10\n16.30\n220.00\n6,000.00\nmale\n2008\n    Gentoo\nBiscoe\n45.20\n13.80\n215.00\n4,750.00\nfemale\n2008\n    Gentoo\nBiscoe\n45.20\n16.40\n223.00\n5,950.00\nmale\n2008\n    Gentoo\nBiscoe\n49.10\n14.50\n212.00\n4,625.00\nfemale\n2009\n    Gentoo\nBiscoe\n52.50\n15.60\n221.00\n5,450.00\nmale\n2009\n    Gentoo\nBiscoe\n47.40\n14.60\n212.00\n4,725.00\nfemale\n2009\n    Gentoo\nBiscoe\n50.00\n15.90\n224.00\n5,350.00\nmale\n2009\n    Gentoo\nBiscoe\n44.90\n13.80\n212.00\n4,750.00\nfemale\n2009\n    Gentoo\nBiscoe\n50.80\n17.30\n228.00\n5,600.00\nmale\n2009\n    Gentoo\nBiscoe\n43.40\n14.40\n218.00\n4,600.00\nfemale\n2009\n    Gentoo\nBiscoe\n51.30\n14.20\n218.00\n5,300.00\nmale\n2009\n    Gentoo\nBiscoe\n47.50\n14.00\n212.00\n4,875.00\nfemale\n2009\n    Gentoo\nBiscoe\n52.10\n17.00\n230.00\n5,550.00\nmale\n2009\n    Gentoo\nBiscoe\n47.50\n15.00\n218.00\n4,950.00\nfemale\n2009\n    Gentoo\nBiscoe\n52.20\n17.10\n228.00\n5,400.00\nmale\n2009\n    Gentoo\nBiscoe\n45.50\n14.50\n212.00\n4,750.00\nfemale\n2009\n    Gentoo\nBiscoe\n49.50\n16.10\n224.00\n5,650.00\nmale\n2009\n    Gentoo\nBiscoe\n44.50\n14.70\n214.00\n4,850.00\nfemale\n2009\n    Gentoo\nBiscoe\n50.80\n15.70\n226.00\n5,200.00\nmale\n2009\n    Gentoo\nBiscoe\n49.40\n15.80\n216.00\n4,925.00\nmale\n2009\n    Gentoo\nBiscoe\n46.90\n14.60\n222.00\n4,875.00\nfemale\n2009\n    Gentoo\nBiscoe\n48.40\n14.40\n203.00\n4,625.00\nfemale\n2009\n    Gentoo\nBiscoe\n51.10\n16.50\n225.00\n5,250.00\nmale\n2009\n    Gentoo\nBiscoe\n48.50\n15.00\n219.00\n4,850.00\nfemale\n2009\n    Gentoo\nBiscoe\n55.90\n17.00\n228.00\n5,600.00\nmale\n2009\n    Gentoo\nBiscoe\n47.20\n15.50\n215.00\n4,975.00\nfemale\n2009\n    Gentoo\nBiscoe\n49.10\n15.00\n228.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n47.30\n13.80\n216.00\n4,725.00\nNA\n2009\n    Gentoo\nBiscoe\n46.80\n16.10\n215.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n41.70\n14.70\n210.00\n4,700.00\nfemale\n2009\n    Gentoo\nBiscoe\n53.40\n15.80\n219.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n43.30\n14.00\n208.00\n4,575.00\nfemale\n2009\n    Gentoo\nBiscoe\n48.10\n15.10\n209.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n50.50\n15.20\n216.00\n5,000.00\nfemale\n2009\n    Gentoo\nBiscoe\n49.80\n15.90\n229.00\n5,950.00\nmale\n2009\n    Gentoo\nBiscoe\n43.50\n15.20\n213.00\n4,650.00\nfemale\n2009\n    Gentoo\nBiscoe\n51.50\n16.30\n230.00\n5,500.00\nmale\n2009\n    Gentoo\nBiscoe\n46.20\n14.10\n217.00\n4,375.00\nfemale\n2009\n    Gentoo\nBiscoe\n55.10\n16.00\n230.00\n5,850.00\nmale\n2009\n    Gentoo\nBiscoe\n44.50\n15.70\n217.00\n4,875.00\nNA\n2009\n    Gentoo\nBiscoe\n48.80\n16.20\n222.00\n6,000.00\nmale\n2009\n    Gentoo\nBiscoe\n47.20\n13.70\n214.00\n4,925.00\nfemale\n2009\n    Gentoo\nBiscoe\nNA\nNA\nNA\nNA\nNA\n2009\n    Gentoo\nBiscoe\n46.80\n14.30\n215.00\n4,850.00\nfemale\n2009\n    Gentoo\nBiscoe\n50.40\n15.70\n222.00\n5,750.00\nmale\n2009\n    Gentoo\nBiscoe\n45.20\n14.80\n212.00\n5,200.00\nfemale\n2009\n    Gentoo\nBiscoe\n49.90\n16.10\n213.00\n5,400.00\nmale\n2009\n    Chinstrap\nDream\n46.50\n17.90\n192.00\n3,500.00\nfemale\n2007\n    Chinstrap\nDream\n50.00\n19.50\n196.00\n3,900.00\nmale\n2007\n    Chinstrap\nDream\n51.30\n19.20\n193.00\n3,650.00\nmale\n2007\n    Chinstrap\nDream\n45.40\n18.70\n188.00\n3,525.00\nfemale\n2007\n    Chinstrap\nDream\n52.70\n19.80\n197.00\n3,725.00\nmale\n2007\n    Chinstrap\nDream\n45.20\n17.80\n198.00\n3,950.00\nfemale\n2007\n    Chinstrap\nDream\n46.10\n18.20\n178.00\n3,250.00\nfemale\n2007\n    Chinstrap\nDream\n51.30\n18.20\n197.00\n3,750.00\nmale\n2007\n    Chinstrap\nDream\n46.00\n18.90\n195.00\n4,150.00\nfemale\n2007\n    Chinstrap\nDream\n51.30\n19.90\n198.00\n3,700.00\nmale\n2007\n    Chinstrap\nDream\n46.60\n17.80\n193.00\n3,800.00\nfemale\n2007\n    Chinstrap\nDream\n51.70\n20.30\n194.00\n3,775.00\nmale\n2007\n    Chinstrap\nDream\n47.00\n17.30\n185.00\n3,700.00\nfemale\n2007\n    Chinstrap\nDream\n52.00\n18.10\n201.00\n4,050.00\nmale\n2007\n    Chinstrap\nDream\n45.90\n17.10\n190.00\n3,575.00\nfemale\n2007\n    Chinstrap\nDream\n50.50\n19.60\n201.00\n4,050.00\nmale\n2007\n    Chinstrap\nDream\n50.30\n20.00\n197.00\n3,300.00\nmale\n2007\n    Chinstrap\nDream\n58.00\n17.80\n181.00\n3,700.00\nfemale\n2007\n    Chinstrap\nDream\n46.40\n18.60\n190.00\n3,450.00\nfemale\n2007\n    Chinstrap\nDream\n49.20\n18.20\n195.00\n4,400.00\nmale\n2007\n    Chinstrap\nDream\n42.40\n17.30\n181.00\n3,600.00\nfemale\n2007\n    Chinstrap\nDream\n48.50\n17.50\n191.00\n3,400.00\nmale\n2007\n    Chinstrap\nDream\n43.20\n16.60\n187.00\n2,900.00\nfemale\n2007\n    Chinstrap\nDream\n50.60\n19.40\n193.00\n3,800.00\nmale\n2007\n    Chinstrap\nDream\n46.70\n17.90\n195.00\n3,300.00\nfemale\n2007\n    Chinstrap\nDream\n52.00\n19.00\n197.00\n4,150.00\nmale\n2007\n    Chinstrap\nDream\n50.50\n18.40\n200.00\n3,400.00\nfemale\n2008\n    Chinstrap\nDream\n49.50\n19.00\n200.00\n3,800.00\nmale\n2008\n    Chinstrap\nDream\n46.40\n17.80\n191.00\n3,700.00\nfemale\n2008\n    Chinstrap\nDream\n52.80\n20.00\n205.00\n4,550.00\nmale\n2008\n    Chinstrap\nDream\n40.90\n16.60\n187.00\n3,200.00\nfemale\n2008\n    Chinstrap\nDream\n54.20\n20.80\n201.00\n4,300.00\nmale\n2008\n    Chinstrap\nDream\n42.50\n16.70\n187.00\n3,350.00\nfemale\n2008\n    Chinstrap\nDream\n51.00\n18.80\n203.00\n4,100.00\nmale\n2008\n    Chinstrap\nDream\n49.70\n18.60\n195.00\n3,600.00\nmale\n2008\n    Chinstrap\nDream\n47.50\n16.80\n199.00\n3,900.00\nfemale\n2008\n    Chinstrap\nDream\n47.60\n18.30\n195.00\n3,850.00\nfemale\n2008\n    Chinstrap\nDream\n52.00\n20.70\n210.00\n4,800.00\nmale\n2008\n    Chinstrap\nDream\n46.90\n16.60\n192.00\n2,700.00\nfemale\n2008\n    Chinstrap\nDream\n53.50\n19.90\n205.00\n4,500.00\nmale\n2008\n    Chinstrap\nDream\n49.00\n19.50\n210.00\n3,950.00\nmale\n2008\n    Chinstrap\nDream\n46.20\n17.50\n187.00\n3,650.00\nfemale\n2008\n    Chinstrap\nDream\n50.90\n19.10\n196.00\n3,550.00\nmale\n2008\n    Chinstrap\nDream\n45.50\n17.00\n196.00\n3,500.00\nfemale\n2008\n    Chinstrap\nDream\n50.90\n17.90\n196.00\n3,675.00\nfemale\n2009\n    Chinstrap\nDream\n50.80\n18.50\n201.00\n4,450.00\nmale\n2009\n    Chinstrap\nDream\n50.10\n17.90\n190.00\n3,400.00\nfemale\n2009\n    Chinstrap\nDream\n49.00\n19.60\n212.00\n4,300.00\nmale\n2009\n    Chinstrap\nDream\n51.50\n18.70\n187.00\n3,250.00\nmale\n2009\n    Chinstrap\nDream\n49.80\n17.30\n198.00\n3,675.00\nfemale\n2009\n    Chinstrap\nDream\n48.10\n16.40\n199.00\n3,325.00\nfemale\n2009\n    Chinstrap\nDream\n51.40\n19.00\n201.00\n3,950.00\nmale\n2009\n    Chinstrap\nDream\n45.70\n17.30\n193.00\n3,600.00\nfemale\n2009\n    Chinstrap\nDream\n50.70\n19.70\n203.00\n4,050.00\nmale\n2009\n    Chinstrap\nDream\n42.50\n17.30\n187.00\n3,350.00\nfemale\n2009\n    Chinstrap\nDream\n52.20\n18.80\n197.00\n3,450.00\nmale\n2009\n    Chinstrap\nDream\n45.20\n16.60\n191.00\n3,250.00\nfemale\n2009\n    Chinstrap\nDream\n49.30\n19.90\n203.00\n4,050.00\nmale\n2009\n    Chinstrap\nDream\n50.20\n18.80\n202.00\n3,800.00\nmale\n2009\n    Chinstrap\nDream\n45.60\n19.40\n194.00\n3,525.00\nfemale\n2009\n    Chinstrap\nDream\n51.90\n19.50\n206.00\n3,950.00\nmale\n2009\n    Chinstrap\nDream\n46.80\n16.50\n189.00\n3,650.00\nfemale\n2009\n    Chinstrap\nDream\n45.70\n17.00\n195.00\n3,650.00\nfemale\n2009\n    Chinstrap\nDream\n55.80\n19.80\n207.00\n4,000.00\nmale\n2009\n    Chinstrap\nDream\n43.50\n18.10\n202.00\n3,400.00\nfemale\n2009\n    Chinstrap\nDream\n49.60\n18.20\n193.00\n3,775.00\nmale\n2009\n    Chinstrap\nDream\n50.80\n19.00\n210.00\n4,100.00\nmale\n2009\n    Chinstrap\nDream\n50.20\n18.70\n198.00\n3,775.00\nfemale\n2009\n  \n  \n  \n    \n      1 Data collected by Dr. Kristen Gorman"
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#introduction",
    "href": "posts/S08E03_wrangling_03/index.html#introduction",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of the past two weeks\nIn the past two weeks, we‚Äôve been learning about the following functions from the dplyr package, a central workhorse of the tidyverse ecosystem, to manipulate data in data frames:\n\nfilter() to pick rows (which typically represent observations/samples/individuals)\nselect() to pick columns (which typically represent variables/properties)\narrange() to sort data frame rows\nmutate() to add and manipulate data frame columns\n\n\n\n\nLearning objectives for today\n\nOur main focus is another very useful dplyr function: summarize() to compute summaries across rows, typically across groups of rows.\nWe will start with an introduction to a new dataset, the count() function, and dealing with missing data.\nIf we manage to get to it, we will also learn about the slice_() family of functions, to pick rows in a different manner than with filter().\n\n\n\n\nSetting up\nLoad the tidyverse meta-package:\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\nStill need to install the tidyverse? Click here for instructions\n\n\n\n\n\n\ninstall.packages(\"tidyverse\")"
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#a-penguins-dataset",
    "href": "posts/S08E03_wrangling_03/index.html#a-penguins-dataset",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "2 A penguins dataset",
    "text": "2 A penguins dataset\nThe data set we will use today is from the palmerpenguins package, which contains a data set on üêß collected by Dr.¬†Kristen Gorman at the Palmer Station Antarctica.\nIt is a nice, relatively simple data set to practice data exploration and visualization in R.\n\n\n\nIllustration by Allison Horst\n\n\n\n\nInstalling and loading the package\nWe‚Äôll have to install that package first, which should be quick:\n\ninstall.packages(\"palmerpenguins\")\n\nNow we‚Äôre ready to load the package:\n\nlibrary(palmerpenguins)\n\n\n\n\nTaking a look at the data set\nOnce you‚Äôve loaded the palmerpenguins package, you will have a data frame called penguins at your disposal ‚Äî let‚Äôs take a look:\n\npenguins\n\n\n\n\n\n  \n\n\n\nIn this data set, each row represents an individual penguin for which we know the species, sex, island of origin, and for which, across several years, we have a set of size measurements:\n\nBill length in mm (bill_length_mm column)\nBill depth in mm (bill_depth_mm column)\nFlipper length in mm (flipper_length_mm column)\nBody mass in grams (body_mass_g column)\n\nHere‚Äôs a visual for what the two bill measurements represent:"
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#exploring-data-with-the-count-function",
    "href": "posts/S08E03_wrangling_03/index.html#exploring-data-with-the-count-function",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "3 Exploring data with the count() function",
    "text": "3 Exploring data with the count() function\nTo orient yourself a bit more to this dataset, you may want to see, for example, how many species and how many islands are in it, and how frequently each occur.\nIn other words, we may want to produce a few ‚Äúcount tables‚Äù, which is a common part of Exploratory Data Analysis (EDA). We can do this with the dplyr function count():\n\npenguins |&gt; count(species)\n\n# A tibble: 3 √ó 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\npenguins |&gt; count(island)\n\n# A tibble: 3 √ó 2\n  island        n\n  &lt;fct&gt;     &lt;int&gt;\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52\n\n\nOK, so we have penguins that belong to 3 different species occur on 3 different islands. Which species occur on which islands? We can answer this with count() simply by specifying both columns:\n\npenguins |&gt; count(species, island)\n\n# A tibble: 5 √ó 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\n\n\nWhy are not all possible combinations of species and island shown here?\n\nSome species do not appear to occur on (or at least haven‚Äôt been sampled on) certain islands. These zero-counts are not show, or ‚Äúdropped, by default.\n\n\nTo show zero-count combinations, add .drop = FALSE:\n\npenguins |&gt; count(species, island, .drop = FALSE)\n\n# A tibble: 9 √ó 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe        0\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen     0\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream         0\n9 Gentoo    Torgersen     0\n\n\n\n\n\n\n\n\n\nSide note: Base R‚Äôs table() function (Click to expand)\n\n\n\n\n\nAlso worth mentioning is the base R table() function, which is similar to count(). While its output format is unwieldy for follow-up analyses, you may prefer its formatting especially when wanting to glance at a 2-way count table to see patterns:\n\ntable(penguins$species, penguins$island)\n\n           \n            Biscoe Dream Torgersen\n  Adelie        44    56        52\n  Chinstrap      0    68         0\n  Gentoo       124     0         0\n\n\n\nAdditionally, as a dplyr function, count() only works with data frames. You may sometimes need to create a count table for a vector, and table() can do that:\n\nspecies_vector &lt;- penguins$species\ntable(species_vector)\n\nspecies_vector\n   Adelie Chinstrap    Gentoo \n      152        68       124"
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#missing-data",
    "href": "posts/S08E03_wrangling_03/index.html#missing-data",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "4 Missing data",
    "text": "4 Missing data\nLet‚Äôs compute the mean bill length across all penguins: we can do so by running the mean() function on the bill length column from the penguins data frame, which we can extract using the base R $ notation, penguins$bill_length_mm:\n\nmean(penguins$bill_length_mm)\n\n[1] NA\n\n\n\n\nWhat does NA mean and why are we getting this?\n\nNA means ‚Äúnot any‚Äù and is R‚Äôs way of representing missing data. When a computation in R returns NA, this means that some of the values used must themselves have been NA. In other words, one or more of the values in the bill_length_mm columns are NA: perhaps the penguin in question got away before its bill was measured.\n\n\nWe can overcome this issue, and compute the mean among the non-missing bill length values, by setting the argument na.rm (‚ÄúNA-remove‚Äù) to TRUE ‚Äì and note that this argument is available in many functions in R:\n\nmean(penguins$bill_length_mm, na.rm = TRUE)\n\n[1] 43.92193\n\n\n\nLet‚Äôs find the penguins with a missing bill length measurement using filter() in combination with the is.na() function, which tests whether a value is NA or not:\n\npenguins |&gt;\n  filter(is.na(bill_length_mm))"
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#exercises-i",
    "href": "posts/S08E03_wrangling_03/index.html#exercises-i",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "5 Exercises I",
    "text": "5 Exercises I\n\n5.1 count()\nA) Use count() to get the number of penguins for each combination of species, year and sex.\n\n\nSolution (click here)\n\n\npenguins |&gt; count(species, year, sex)\n\n# A tibble: 22 √ó 4\n   species    year sex        n\n   &lt;fct&gt;     &lt;int&gt; &lt;fct&gt;  &lt;int&gt;\n 1 Adelie     2007 female    22\n 2 Adelie     2007 male      22\n 3 Adelie     2007 &lt;NA&gt;       6\n 4 Adelie     2008 female    25\n 5 Adelie     2008 male      25\n 6 Adelie     2009 female    26\n 7 Adelie     2009 male      26\n 8 Chinstrap  2007 female    13\n 9 Chinstrap  2007 male      13\n10 Chinstrap  2008 female     9\n# ‚Ñπ 12 more rows\n\n\n\n\nB) What is the least common combination of species and sex for penguins weighing less than 4,000 grams?\n\n\nHint (click here)\n\nYou‚Äôll have to filter() first.\n\n\n\nSolution (click here)\n\nThe least common combination among such light-weight penguins is female Gentoo, of which there is only 1. Or you may also argue that the answer should be male Gentoo, of which there are none.\nIn the code below, I‚Äôm sorting the dataframe by the count (column n), so we‚Äôll see the least common combinations at the top:\n\npenguins |&gt;\n  filter(body_mass_g &lt; 4000) |&gt; \n  count(species, sex, .drop = FALSE) |&gt;\n  arrange(n)\n\n# A tibble: 7 √ó 3\n  species   sex        n\n  &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;\n1 Gentoo    male       0\n2 Gentoo    female     1\n3 Adelie    &lt;NA&gt;       4\n4 Chinstrap male      19\n5 Chinstrap female    33\n6 Adelie    male      35\n7 Adelie    female    73\n\n\nP.S.: count() does have a sort argument so you can omit the separate call to arrange(), though note that it can only sort descendingly:\n\npenguins |&gt;\n  filter(body_mass_g &lt; 4000) |&gt; \n  count(species, sex, .drop = FALSE, sort = TRUE)\n\n# A tibble: 7 √ó 3\n  species   sex        n\n  &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;\n1 Adelie    female    73\n2 Adelie    male      35\n3 Chinstrap female    33\n4 Chinstrap male      19\n5 Adelie    &lt;NA&gt;       4\n6 Gentoo    female     1\n7 Gentoo    male       0\n\n\n\n\n\n\n\n5.2 Removing rows with missing data\nFor the sake of convenience, we will here remove these two penguins that don‚Äôt seem to have had any measurements taken1.\nA) Do so by storing the output of an appropriate filter() operation in a new data frame penguins_noNA.\n\n\nHint (click here)\n\nThe code will be very similar to our is.na filtering operation above, except that you should negate this using a !: this will instead keep rows that are not NA.\n\n\n\nSolution (click here)\n\n\npenguins_noNA &lt;- penguins |&gt;\n  filter(!is.na(bill_length_mm))\n\n\nB) Check how many penguins (rows) were removed.\n\n\nSolution (click here)\n\n2 rows should have been removed.\nThere are many ways to check this! You can simply look for these objects in the Environment pane, print them to screen, or use the nrow() function:\n\nnrow(penguins)\n\n[1] 344\n\nnrow(penguins_noNA)\n\n[1] 342\n\nnrow(penguins) - nrow(penguins_noNA)\n\n[1] 2"
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#the-summarize-function",
    "href": "posts/S08E03_wrangling_03/index.html#the-summarize-function",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "6 The summarize() function",
    "text": "6 The summarize() function\nThe summarize() function from the dplyr package can compute across-row data summaries. As a first example, here‚Äôs how you can compute the overall mean bill length with this function:\n\npenguins_noNA |&gt;\n  summarize(mean(bill_length_mm))\n\n# A tibble: 1 √ó 1\n  `mean(bill_length_mm)`\n                   &lt;dbl&gt;\n1                   43.9\n\n\n(Note that we are now using penguins_noNA, which you created in the exercise above, and we will continue to do so during the rest of the session.)\nAs you can see, this function has quite a different output from the dplyr functions we‚Äôd seen so far. All of those returned a manipulated version of our original dataframe, whereas summarize() returns a ‚Äúcompletely new‚Äù dataframe with a summary of the original data.\nNote that the default summary column above is quite unwieldy, so we‚Äôll typically want to provide a column name for it ourselves:\n\npenguins_noNA |&gt;\n  summarize(bill_len_mean = mean(bill_length_mm))\n\n# A tibble: 1 √ó 1\n  bill_len_mean\n          &lt;dbl&gt;\n1          43.9\n\n\nAlso, summarizing across all rows at once with summarize(), like we just did, is much more verbose than the simple ‚Äúbase R‚Äù solution we saw earlier (mean(penguins_noNA$bill_length_mm)). Are we sure this function is useful?\n\n\nSummarizing by group\nThe real power of summarize() comes with its ability to easily compute group-wise summaries. For example, simply by adding .by = species, it will calculate the mean bill length separately for each species:\n\npenguins_noNA |&gt;\n  summarize(bill_len_mean = mean(bill_length_mm), .by = species)\n\n# A tibble: 3 √ó 2\n  species   bill_len_mean\n  &lt;fct&gt;             &lt;dbl&gt;\n1 Adelie             38.8\n2 Gentoo             47.5\n3 Chinstrap          48.8\n\n\nNice! We can also compute multiple summarized variables ‚Äî and use summarizing functions other than mean():\n\npenguins_noNA |&gt;\n  summarize(bill_len_mean = mean(bill_length_mm),\n            bill_len_max = max(bill_length_mm),\n            bill_len_min = min(bill_length_mm),\n            .by = species)\n\n# A tibble: 3 √ó 4\n  species   bill_len_mean bill_len_max bill_len_min\n  &lt;fct&gt;             &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 Adelie             38.8         46           32.1\n2 Gentoo             47.5         59.6         40.9\n3 Chinstrap          48.8         58           40.9\n\n\n\n\n\nIncluding group counts\nA handy helper function related to the count() function we used above is n(), which will compute the number of rows for each group (i.e.¬†the group sizes, which can be good to know, for example so you don‚Äôt make unfounded conclusions based on really small sample sizes):\n\npenguins_noNA |&gt;\n  summarize(bill_depth_mean = mean(bill_depth_mm),\n            n_penguins = n(),\n            .by = species)\n\n# A tibble: 3 √ó 3\n  species   bill_depth_mean n_penguins\n  &lt;fct&gt;               &lt;dbl&gt;      &lt;int&gt;\n1 Adelie               18.3        151\n2 Gentoo               15.0        123\n3 Chinstrap            18.4         68\n\n\n\n\n\nCommon summary statistic functions\nHere is an overview of the most commonly used functions to compute summaries:\n\nmean() & median()\nmin() & max()\nsum()\nsd(): standard deviation\nIQR(): interquartile range\nn(): counts the number of rows (observations)\nn_distinct(): counts the number of distinct (unique) values\n\n\nTwo final comments about summarize():\n\nYou can also ask summarize() to compute summaries by multiple columns, which will return separate summaries for each combination of the involved variables ‚Äî we‚Äôll see this in the exercises.\nThis may be obvious, but whatever column you are computing summaries by (using .by) should be a categorical variable. In our diamond examples, we‚Äôre only using columns that are factors, but ‚Äúregular‚Äù character columns will work just fine as well.\n\n\n\n\n\n\n\n\nSide note: group_by() (Click to expand)\n\n\n\n\n\nThe ‚Äúclassic‚Äù way of using summarize() with multiple groups is by preceding it with a group_by() call ‚Äî e.g., the code below is equivalent to our last example above:\n\npenguins_noNA |&gt;\n  group_by(species) |&gt; \n  summarize(bill_depth_mean = mean(bill_depth_mm),\n            n_penguins = n())\n\n# A tibble: 3 √ó 3\n  species   bill_depth_mean n_penguins\n  &lt;fct&gt;               &lt;dbl&gt;      &lt;int&gt;\n1 Adelie               18.3        151\n2 Chinstrap            18.4         68\n3 Gentoo               15.0        123\n\n\n\nThe .by argument to summarize() (and other functions!) is a rather recent addition, but I prefer it over group_by():\n\nIt is simpler, a bit less typing, and makes the summarize() call self-contained\nWhen grouping by multiple columns, group_by() has some odd, unhelpful behavior where it keeps some of the groupings, such that you likely need an ungroup() call as well."
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#exercises-ii",
    "href": "posts/S08E03_wrangling_03/index.html#exercises-ii",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "7 Exercises II",
    "text": "7 Exercises II\n\n7.1 Means across variables\nCompute the per-species means for all 4 size-related variables.\nDo all these variables co-vary, such that, for example, one species is the largest for each measurement?\n\n\nSolution (click here)\n\n\npenguins_noNA |&gt;\n  summarize(bill_len = mean(bill_length_mm),\n            bill_dep = mean(bill_depth_mm),\n            flip_len = mean(flipper_length_mm),\n            body_mass = mean(body_mass_g),\n            .by = species)\n\n# A tibble: 3 √ó 5\n  species   bill_len bill_dep flip_len body_mass\n  &lt;fct&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Adelie        38.8     18.3     190.     3701.\n2 Gentoo        47.5     15.0     217.     5076.\n3 Chinstrap     48.8     18.4     196.     3733.\n\n\nThe variables seem to largely co-vary across species, but bill depth stands out: the large Gentoo penguins have less deep bills than the other two species.\n\n\n\n\n\n\n7.2 Summaries across multiple groups\nFor Adelie penguins only, find the combination of island and year on which the lightest penguins were found, on average.\nFor this, you‚Äôll have to group by both abovementioned columns. See if you can figure this out by yourself first, but check out the grouping hint below if you can‚Äôt get that part to work.\n\n\nGrouping hint (click here)\n\n.by = c(island, year) will group by these 2 columns at once.\n\n\n\nMore hints (click here)\n\n\nfilter() before you summarize to only keep Adelie penguins.\narrange() after you summarize to see the lowest mean weights at the top.\n\n\n\n\nSolution (click here)\n\n\npenguins_noNA |&gt;\n  filter(species == \"Adelie\") |&gt; \n  summarize(mass_mean = mean(body_mass_g),\n            .by = c(island, year)) |&gt;\n  arrange(mass_mean)\n\n# A tibble: 9 √ó 3\n  island     year mass_mean\n  &lt;fct&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 Torgersen  2009     3489.\n2 Biscoe     2007     3620 \n3 Biscoe     2008     3628.\n4 Dream      2009     3651.\n5 Dream      2007     3671.\n6 Dream      2008     3756.\n7 Torgersen  2007     3763.\n8 Torgersen  2008     3856.\n9 Biscoe     2009     3858."
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#bonus-the-slice_-functions",
    "href": "posts/S08E03_wrangling_03/index.html#bonus-the-slice_-functions",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "8 Bonus: The slice_ functions",
    "text": "8 Bonus: The slice_ functions\nLike the filter() function, functions in the slice_ family select specific rows, but have some different functionality that‚Äôs quite handy ‚Äî especially in combination with grouping.\nLet‚Äôs say we wanted to only get, for each species, the lightest penguin. We can do this pretty easily with the slice_max() function, which will return the row(s) with the lowest value for a specified variable:\n\npenguins_noNA |&gt;\n  slice_min(body_mass_g, by = species)\n\n# A tibble: 4 √ó 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe           36.5          16.6               181        2850\n2 Adelie    Biscoe           36.4          17.1               184        2850\n3 Gentoo    Biscoe           42.7          13.7               208        3950\n4 Chinstrap Dream            46.9          16.6               192        2700\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nWhy are we getting more than one penguin per species in some cases? (Click to see the answer)\n\nBecause of ties in the body_mass_g value. (We‚Äôll get back to this in the next set of exercises.)\n\n\nYou can get more than just the single highest (slice_max()) / lowest (slice_min()) value per group with the n= argument, and can get a specific proportion of rows with prop=:\n\n# Get the 3 penguins with the longest flippers for each year:\npenguins_noNA |&gt;\n  slice_max(flipper_length_mm, by = year, n = 3)\n\n# A tibble: 10 √ó 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           50            16.3               230        5700\n 2 Gentoo  Biscoe           59.6          17                 230        6050\n 3 Gentoo  Biscoe           48.7          15.1               222        5350\n 4 Gentoo  Biscoe           47.3          15.3               222        5250\n 5 Gentoo  Biscoe           54.3          15.7               231        5650\n 6 Gentoo  Biscoe           49.8          16.8               230        5700\n 7 Gentoo  Biscoe           48.6          16                 230        5800\n 8 Gentoo  Biscoe           52.1          17                 230        5550\n 9 Gentoo  Biscoe           51.5          16.3               230        5500\n10 Gentoo  Biscoe           55.1          16                 230        5850\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n# Get the 2% narrowest-billed penguins for each sex\npenguins_noNA |&gt;\n  slice_min(bill_depth_mm, by = sex, prop = 0.02)\n\n# A tibble: 6 √ó 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Gentoo  Biscoe           48.5          14.1               220        5300\n2 Gentoo  Biscoe           51.3          14.2               218        5300\n3 Gentoo  Biscoe           50.2          14.3               218        5700\n4 Gentoo  Biscoe           42.9          13.1               215        5000\n5 Gentoo  Biscoe           46.1          13.2               211        4500\n6 Gentoo  Biscoe           44.9          13.3               213        5100\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n\nThe full set of slice_ functions\n\n\n\n\nslice_head(n = 1) takes the first row.\nslice_tail(n = 1) takes the last row\nslice_min(x, n = 1) takes the row with the smallest value in column x.\nslice_max(x, n = 1) takes the row with the largest value in column x.\nslice_sample(n = 1) takes one random row.\nslice(15) takes the 15th row."
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#exercises-iii",
    "href": "posts/S08E03_wrangling_03/index.html#exercises-iii",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "9 Exercises III",
    "text": "9 Exercises III\n\n9.1 No ties, please\nAbove, when we first used slice_min(), we got multiple rows for some groups. Check out the help for this function (?slice_min) and get it to print only one row per group, even in the case of ties.\n\n\nSolution (click here)\n\nThe with_ties argument controls this. The default is TRUE (do include ties), so we want to set it to FALSE (don‚Äôt include ties):\n\npenguins_noNA |&gt;\n  slice_min(body_mass_g, by = species, with_ties = FALSE)\n\n# A tibble: 3 √ó 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe           36.5          16.6               181        2850\n2 Gentoo    Biscoe           42.7          13.7               208        3950\n3 Chinstrap Dream            46.9          16.6               192        2700\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n9.2 Random penguins\nUse slice_sample() to get 5 random penguins for each combination of year and island.\n\n\nSolution (click here)\n\n\npenguins_noNA |&gt;\n  slice_sample(n = 5, by = c(year, island))\n\n# A tibble: 45 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           36.6          17.8               185        3700\n 2 Adelie  Torgersen           40.3          18                 195        3250\n 3 Adelie  Torgersen           42.5          20.7               197        4500\n 4 Adelie  Torgersen           38.9          17.8               181        3625\n 5 Adelie  Torgersen           46            21.5               194        4200\n 6 Gentoo  Biscoe              50.2          14.3               218        5700\n 7 Gentoo  Biscoe              42            13.5               210        4150\n 8 Gentoo  Biscoe              48.7          15.1               222        5350\n 9 Gentoo  Biscoe              45.1          14.5               207        5050\n10 Gentoo  Biscoe              46.1          13.2               211        4500\n# ‚Ñπ 35 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "posts/S08E03_wrangling_03/index.html#footnotes",
    "href": "posts/S08E03_wrangling_03/index.html#footnotes",
    "title": "Data Wrangling 3: Counting and Summarizing Data by Group",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n Removing rows with NAs may be appropriate for your own data too, but this will depend on the context!‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S08E04_wrangling_04/index.html#introduction",
    "href": "posts/S08E04_wrangling_04/index.html#introduction",
    "title": "Data Wrangling 4: Merging/Joining Data Frames",
    "section": "1 Introduction",
    "text": "1 Introduction\nIn the past two weeks, we‚Äôve been learning about several functions from the dplyr package, a central workhorse of the tidyverse ecosystem, to manipulate data in data frames.\nIn real-world data analysis, it‚Äôs uncommon to work with just a single data frame. More often than not, you will be dealing with multiple data frames that you need to combine to effectively address your analytical questions.\nIn this session, we will explore the essential techniques for merging data frames using the _join functions provided by the dplyr package.\n\n\nLearning objectives for today\n\nUnderstand Join Fundamentals:\n\nGrasp the basics of joins and their significance in merging datasets.\nLearn about keys and their use in linking different data frames.\n\nExplore Mutating Joins:\n\nGet acquainted with mutating join functions in dplyr, such as inner_join, left_join, right_join, and full_join.\nLearn how to add new columns to a data frame using matching records from another.\n\nDiscover Filtering Joins:\n\nLearn how to use filtering join functions like semi_join and anti_join.\nUnderstand how to retain or exclude records in one data frame based on matches with another data frame.\n\n\n\n\n\nSetting up\nLoad the tidyverse meta-package:\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/S08E04_wrangling_04/index.html#data-jazz-merging-with-dplyr-joins",
    "href": "posts/S08E04_wrangling_04/index.html#data-jazz-merging-with-dplyr-joins",
    "title": "Data Wrangling 4: Merging/Joining Data Frames",
    "section": "2 Data Jazz: Merging with dplyr Joins",
    "text": "2 Data Jazz: Merging with dplyr Joins\nJust as a jazz band brings together a variety of instruments to create a rich, spontaneous musical experience, data analysis often involves merging different data sets to form a coherent and insightful whole. Each data set can be thought of as an instrument in a jazz ensemble, contributing its unique timbre and melody to the overall composition.\nWhen you use join functions from the `dplyr` package in R Studio, it‚Äôs like orchestrating an improvisational jazz performance where the trumpet‚Äôs crisp notes (one data set) harmonize with the saxophone‚Äôs smooth riffs (another data set), underpinned by the piano‚Äôs rhythmic chords (yet another data set).\nBy cleverly combining these data sets through joins, you can produce an insightful and dynamic data analysis, much like a jazz composition that resonates on multiple levels.\n\n\n\nIllustration by Barandash Karandashich\n\n\n\n\n\n\n\n\n\nLooking to get excited about jazz? Click here for a book recommendation!\n\n\n\n\n\nBut Beautiful: A Book About Jazz by Geoff Dyer.\n\n\n\n\nTo explore the _join functions we will create our own data sets:\n\nMusicians data frame:\n\nmusicians &lt;- tibble(\n  musician_id = 1:5,\n  name = c(\"John Coltrane\", \"Miles Davis\", \"Thelonious Monk\", \"Ella Fitzgerald\", \"Louis Armstrong\"),\n  instrument = c(\"Saxophone\", \"Trumpet\", \"Piano\", \"Vocals\", \"Trumpet\"),\n  years_active = c(\"1945-1967\", \"1944-1975\", \"1934-1975\", \"1934-1993\", \"1919-1971\"),\n  genre = c(\"Jazz\", \"Jazz\", \"Bebop\", \"Swing\", \"Jazz\")\n)\n\n\n\n\n\n  \n\n\n\n\n\nAlbums data frame:\n\nalbums &lt;- tibble(\n  album_id = 1:6,\n  musician_id = c(1, 2, 3, 2, 4, 5),\n  album_title = c(\"Blue Train\", \"Kind of Blue\", \"Monk's Dream\", \"Bitches Brew\", \"Ella in Berlin\", \"Louis Armstrong Plays W.C. Handy\"),\n  release_year = c(1957, 1959, 1963, 1970, 1960, 1954),\n  genre = c(\"Hard Bop\", \"Modal Jazz\", \"Bebop\", \"Fusion\", \"Vocal Jazz\", \"Jazz\")\n)\n\n\n\n\n\n  \n\n\n\n\n\nAwards data frame:\n\nawards &lt;- tibble(\n  award_id = 1:5,\n  musician_id = c(1, 2, 4, 4, 5),\n  award_name = c(\"Grammy Hall of Fame\", \"Grammy Lifetime Achievement Award\", \"Grammy Hall of Fame\", \"National Medal of Arts\", \"Grammy Lifetime Achievement Award\"),\n  year = c(1999, 1990, 1999, 1987, 1972)\n)\n\n\n\n\n\n  \n\n\n\n\n\nGigs data frame:\n\ngigs &lt;- tibble(\n  gig_id = 1:6,\n  musician_id = c(1, 2, 2, 4, 1, 5),\n  venue = c(\"Blue Note\", \"Village Vanguard\", \"Birdland\", \"Newport Jazz Festival\", \"Montreux Jazz Festival\", \"Cotton Club\"),\n  date = as.Date(c(\"1961-11-18\", \"1961-03-21\", \"1961-04-12\", \"1962-07-11\", \"1965-03-10\", \"1937-06-26\")),\n  city = c(\"New York\", \"New York\", \"New York\", \"Newport\", \"Montreux\", \"Harlem\")\n)"
  },
  {
    "objectID": "posts/S08E04_wrangling_04/index.html#lets-explore-the-different-_join-funtions",
    "href": "posts/S08E04_wrangling_04/index.html#lets-explore-the-different-_join-funtions",
    "title": "Data Wrangling 4: Merging/Joining Data Frames",
    "section": "3 Let‚Äôs explore the different _join funtions",
    "text": "3 Let‚Äôs explore the different _join funtions\nWhen merging datasets, we typically integrate variables from one dataset into another using a specific ‚Äúkey‚Äù variable. Let‚Äôs examine our JAZZ datasets and explore the joining verbs:\n\n3.1 Setting the Stage\n\n\n\n\n\n\nKey variables\n\n\n\n\n\n\n\nSet up\n\n\n\n\n\n\n\n3.2 Mutating _join funtions:\n\n\n\nChapter 19: Joins [R4DS (2ed)]\n\n\n\nleft_join (and right_join)\n\n\n\n\n\n\nleft_join\n\n\n\n\n\n\n\nright_join\n\n\n\n\n\nLeft join: Musicians with all their gigs.\n\nmusicians |&gt; left_join(gigs, \n                       by = join_by(musician_id)) \n\n\n\n\n\n  \n\n\n\nRight join: All albums and related musicians.\n\nmusicians |&gt; right_join(albums, \n                        by = join_by(musician_id)) \n\n\n\n\n\n  \n\n\n\n\n\ninner_join (and full_join)\n\n\n\n\n\n\ninner_join\n\n\n\n\n\n\n\nfull_join\n\n\n\n\n\nInner join: Musicians and their albums.\n\nmusicians |&gt; inner_join(awards, \n                        by = join_by(musician_id)) \n\n\n\n\n\n  \n\n\n\nFull join: Complete overview of musicians and their awards.\n\nmusicians |&gt; full_join(awards, \n                        by = join_by(musician_id)) \n\n\n\n\n\n  \n\n\n\n\n\n\n3.3 Exercises I\nA) Find all albums by Miles Davis.\n\n\nHint (click here)\n\nUse an inner join to list all albums released by Miles Davis. Then use filter() to end up with a data set with information only for Miles Davis.\n\n\n\nSolution (click here)\n\n\nmusicians |&gt; inner_join(albums, by = join_by(musician_id)) |&gt;\n  filter(name == \"Miles Davis\")\n\n# A tibble: 2 √ó 9\n  musician_id name        instrument years_active genre.x album_id album_title \n        &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;       \n1           2 Miles Davis Trumpet    1944-1975    Jazz           2 Kind of Blue\n2           2 Miles Davis Trumpet    1944-1975    Jazz           4 Bitches Brew\n# ‚Ñπ 2 more variables: release_year &lt;dbl&gt;, genre.y &lt;chr&gt;\n\n\n\n\nB) Combine musicians, gigs, and awards information.\n\n\nHint (click here)\n\nPerform a left join to combine musicians with their gigs and awards information.\n\n\n\nSolution (click here)\n\n\nmusicians |&gt; left_join(gigs, by = join_by(musician_id)) |&gt;\n  left_join(awards, by = join_by(musician_id), relationship = \"many-to-many\")\n\n# A tibble: 8 √ó 12\n  musician_id name   instrument years_active genre gig_id venue date       city \n        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;  &lt;int&gt; &lt;chr&gt; &lt;date&gt;     &lt;chr&gt;\n1           1 John ‚Ä¶ Saxophone  1945-1967    Jazz       1 Blue‚Ä¶ 1961-11-18 New ‚Ä¶\n2           1 John ‚Ä¶ Saxophone  1945-1967    Jazz       5 Mont‚Ä¶ 1965-03-10 Mont‚Ä¶\n3           2 Miles‚Ä¶ Trumpet    1944-1975    Jazz       2 Vill‚Ä¶ 1961-03-21 New ‚Ä¶\n4           2 Miles‚Ä¶ Trumpet    1944-1975    Jazz       3 Bird‚Ä¶ 1961-04-12 New ‚Ä¶\n5           3 Thelo‚Ä¶ Piano      1934-1975    Bebop     NA &lt;NA&gt;  NA         &lt;NA&gt; \n6           4 Ella ‚Ä¶ Vocals     1934-1993    Swing      4 Newp‚Ä¶ 1962-07-11 Newp‚Ä¶\n7           4 Ella ‚Ä¶ Vocals     1934-1993    Swing      4 Newp‚Ä¶ 1962-07-11 Newp‚Ä¶\n8           5 Louis‚Ä¶ Trumpet    1919-1971    Jazz       6 Cott‚Ä¶ 1937-06-26 Harl‚Ä¶\n# ‚Ñπ 3 more variables: award_id &lt;int&gt;, award_name &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\nC) List of venues with musician information.\n\n\nHint (click here)\n\nPerform a right join to get a list of all gig venues and the associated musician details.\n\n\n\nSolution (click here)\n\n\nmusicians |&gt; right_join(gigs, by = join_by(musician_id))\n\n# A tibble: 6 √ó 9\n  musician_id name   instrument years_active genre gig_id venue date       city \n        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;  &lt;int&gt; &lt;chr&gt; &lt;date&gt;     &lt;chr&gt;\n1           1 John ‚Ä¶ Saxophone  1945-1967    Jazz       1 Blue‚Ä¶ 1961-11-18 New ‚Ä¶\n2           1 John ‚Ä¶ Saxophone  1945-1967    Jazz       5 Mont‚Ä¶ 1965-03-10 Mont‚Ä¶\n3           2 Miles‚Ä¶ Trumpet    1944-1975    Jazz       2 Vill‚Ä¶ 1961-03-21 New ‚Ä¶\n4           2 Miles‚Ä¶ Trumpet    1944-1975    Jazz       3 Bird‚Ä¶ 1961-04-12 New ‚Ä¶\n5           4 Ella ‚Ä¶ Vocals     1934-1993    Swing      4 Newp‚Ä¶ 1962-07-11 Newp‚Ä¶\n6           5 Louis‚Ä¶ Trumpet    1919-1971    Jazz       6 Cott‚Ä¶ 1937-06-26 Harl‚Ä¶\n\n\n\n\n\n\n3.4 Filtering _join funtions:\n\n\n\n\n\nAnti join\n\n\n\n\n\nSemi join\n\n\n\n\n\nanti_join (and semi_join)\n\n\n\n\n\n\nanti_join\n\n\n\n\n\n\n\nsemi_join\n\n\n\n\n\nSemi join: Musicians who have received awards.\n\nmusicians |&gt; semi_join(awards, \n                        by = join_by(musician_id)) \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nWhat is the difference between inner_join and semi_join ?\n\n\n\n\n\nNotice that the observations in both data frames are the similar, but that the inner join adds the variables from the data frame ‚Äúy‚Äù, whereas the semi join only uses the ‚Äúy‚Äù data frame to determine which observations to keep.\n\n\n\n\n\n\n3.5 Exercises II\nA) Find musicians without any gigs.\n\n\nHint (click here)\n\nUsing an anti join, find musicians who haven‚Äôt have any gigs in this period.\n\n\n\nSolution (click here)\n\n\nmusicians |&gt; anti_join(gigs, \n                        by = join_by(musician_id))"
  },
  {
    "objectID": "posts/S08E04_wrangling_04/index.html#merging-data-sets-in-base-r",
    "href": "posts/S08E04_wrangling_04/index.html#merging-data-sets-in-base-r",
    "title": "Data Wrangling 4: Merging/Joining Data Frames",
    "section": "4 Merging Data Sets in Base R",
    "text": "4 Merging Data Sets in Base R\nThe merge function in base R can perform inner joins, left joins, right joins, and full joins by specifying appropriate parameters.\nLeft join: Musicians with all their gigs.\n\nmerge(musicians, gigs, all.x = TRUE, by = \"musician_id\") \n\n\n\n\n\n  \n\n\n\nRight join: All albums and related musicians.\n\nmerge(musicians, albums, all.y = TRUE, by = \"musician_id\") \n\n\n\n\n\n  \n\n\n\nInner join: Musicians and their albums.\n\nmerge(musicians, awards, all = FALSE, by = \"musician_id\") \n\n\n\n\n\n  \n\n\n\nFull join: Complete overview of musicians and their awards.\n\nmerge(musicians, awards, all = TRUE, by = \"musician_id\") \n\n\n\n\n\n  \n\n\n\nWith merge(), you can achieve the same results as dplyr‚Äôs mutating joins, though dplyr provides a more explicit and often more readable syntax for many users. Both methods are powerful, and understanding both can be very useful in different contexts!"
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#introduction",
    "href": "posts/S07E01_basics_01/index.html#introduction",
    "title": "R Basics 1: Getting Started",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to begin this semester‚Äôs Code Club right from the beginning working in R. This session does not assume any prior knowledge of R or other programming languages.\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#why-use-r",
    "href": "posts/S07E01_basics_01/index.html#why-use-r",
    "title": "R Basics 1: Getting Started",
    "section": "2 Why use R?",
    "text": "2 Why use R?\nSince you‚Äôre here, I can assume you don‚Äôt need to be convinced that learning R is useful. R is a programming language that is used widely by data and other scientists. Most people get into R to conduct statistics, though its a top way to make data visualizations and do lots of other things. Since R is open source, there are endlessly available free resource to learn how to do practically whatever you want on the internet."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#installing-r-and-rstudio",
    "href": "posts/S07E01_basics_01/index.html#installing-r-and-rstudio",
    "title": "R Basics 1: Getting Started",
    "section": "3 Installing R and RStudio",
    "text": "3 Installing R and RStudio\nBut first, what is the difference between R and RStudio? R is a programming language while RStudio has a graphical user interface (GUI) that allows you to more easily use R. RStudio is an Integrated Development Environment (IDE), meaning its a separate program that has an interface designed for running R. You can run R just using the R console (i.e., standalone R) but it is really easier and you will find additional functionality if you use RStudio. We need to download both R and RStudio.\n\n3.1 Downloading/installing R\n\n\n\n\n\n\nIf you are using an Ohio State computer where you don‚Äôt have administrative access, R and RStudio are available to download through the Software Center (Windows) and Self Service (Mac).\n\n\n\n\n\n\nWe will download R first. At the time of me writing this (January 2024) the most updated version of R is R-4.3.2.\n\nYou can download R for Windows, Mac, or UNIX. https://www.r-project.org/\nPick your preferred CRAN mirror, I like to use the one from Case Western Reserve University since it‚Äôs the closest to us in Ohio I think it‚Äôs probably the fastest, though any mirror will work.\nDownload R for Linux, Windows, or Mac, depending on what type of operating system you are running. You can use these direct links to download 4.3.2.\n\nWindows\nM1/M2 Mac, requires Xquartz\nOlder Macs, requires Xquartz\n\n\nNavigate to where you‚Äôve downloaded your executable R file, and install it.\nYou can also use R and RStudio through the Ohio Supercomputing Center. If you want to do this, connect with Jelmer and he can add you to our Code Club project.\nAs of January 2024, the most recent version of R is 4.3.2. If you already have R and it is version &gt;4.2, no need to do anything.\n\nIf you‚Äôve already installed R and just need to update, and want to make sure you keep all your downloaded packages, follow these instructions. Updating only RStudio doesn‚Äôt do anything to your packages.\n\n\n\n3.2 Downloading/installing RStudio\nOnce you have R, you can download RStudio. Here you can download the version of RStudio\nNavigate to where you‚Äôve downloaded your executable RStudio file, and install it.\nOnce you‚Äôve downloaded both R and RStudio, you can open RStudio."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#orienting-to-rstudio",
    "href": "posts/S07E01_basics_01/index.html#orienting-to-rstudio",
    "title": "R Basics 1: Getting Started",
    "section": "4 Orienting to RStudio",
    "text": "4 Orienting to RStudio\nThe RStudio integrated development environment (IDE) has four quadrants.\n\n\n\nA screenshot of the RStudio IDE\n\n\n\nTop left: your source editor. Here you can open, edit, and send code to be executed from files like .R, .Rmd, .qmd or others.\nBottom left: by default this is your console. If you‚Äôve used standalone R, this is the same thing. It is here where your code will be actually executed. You can also type here directly to execute code. There are also two additional tabs, terminal and background jobs which we won‚Äôt talk about now.\nTop right: by default this is your environment. It will show you all the objects that are active in your R environment. Here, you can also see history, connections, build a website, use git, or open tutorials but we won‚Äôt talk about those now.\nBottom right: by default this shows the files in your working directory (more about that next). There are also additional tabs which show plots, packages, help, viewers, presentations but we won‚Äôt talk about those now.\n\nThere is an RStudio cheatsheet for the IDE which is very useful, and you can find it here."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#working-directories",
    "href": "posts/S07E01_basics_01/index.html#working-directories",
    "title": "R Basics 1: Getting Started",
    "section": "5 Working directories",
    "text": "5 Working directories\n\n5.1 What is a directory and a working directory?\nThe concept of a directories and your working directory is an important one when coding. You can think of a directory as a synonym for a folder. Each file is contained within a directory, these folders have physical locations on your computer, or a defined path. Directories are hierarchical, and slightly different on different operating systems (e.g., Mac, Windows, Linux). If you open up your Finder (Mac) or File Explorer (Windows), you can navigate around the different locations on your computer.\nYour working directory is just as it sounds - it‚Äôs the location/path on your computer where you are currently working. This is important as your files will be by default read in, stored, and saved to this location. This means you need to know where this is.\n\n\n5.2 Find your working directory\nWe can figure out where our working directory is by typing into the console the function:\n\ngetwd()\n\n[1] \"/Users/poelstra.1/Library/CloudStorage/Dropbox/mcic/teach/codeclub/codeclub-site/posts/S07E01_basics_01\"\n\n\nYou can see that the output path is MY working directory - yours will be different as the set up of your computer organization structure is different from mine. I am also using a Mac so you can see my path as forward slashes / while Windows machines will have backslashes\\.\nYou can also use the RStudio GUI to navigate to your working directory by going to the Files quadrant (bottom right), click the gear, and select Go To Working Directory.\n\n\n\nGo to your working directory by clicking\n\n\n\n\n5.3 Set your working directory\nIf your working directory is not where you want to store your files for code club, you can change it. We can do that using the function setwd().\n\nsetwd(\"/this/should/be/your/working-directory/path\")\n\nAlternatively, you can set your working directory by navigating in the Files (bottom right) quadrant to the location you want your working directory to be, then clicking the gear, and clicking Set As Working Directory.\n\n\n\nSet your working directory by clicking\n\n\n\n\n5.4 Avoid all working directory nonsense with a .RProj\n\n\n\nArtwork by @allison_horst\n\n\nUsing an Rproject (.RProj) will help you with working directory management. An Rproject allows you to keep all of the files associated with a particular project together - from input data, output data, code, resulting figures etc. What it does is set the location of the working directory to be the same place as where your Rproject is located.\nWe will make a new Rproject for all your code club files. You can create a project by navigating to File &gt; New Project. You can put your file in a New Directory (i.e., make a new folder where your code club files will live), or you can indicate an Existing Directory (i.e., the folder you already have where your code club files are located). I‚Äôm going to assume you don‚Äôt have already a code club folder, so we will pick: New Directory &gt; New Project. You can navigate to where you want the directory to be on your computer (best to put it somewhere static and not in your downloads or on your desktop), and give it a meaningful name, like code-club.\nNow, as long as I have the code-club Rproject open in RStudio, R knows to set the working directory to be the location you picked. This means if you want to load data, you should put it in that same folder, and when you write out results, they will also be by default in that same place."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#practice-1",
    "href": "posts/S07E01_basics_01/index.html#practice-1",
    "title": "R Basics 1: Getting Started",
    "section": "6 Practice #1",
    "text": "6 Practice #1\n\n\n\n\n\n\nCheck where the working directory is for your computer\n\n\n\n\n\nType the code below into your console (bottom left quadrant).\n\ngetwd()\n\n\n\n\n\n\n\n\n\n\nTry changing the working directory to your desktop\n\n\n\n\n\nIt‚Äôs important you know the path for your desktop. You can open your Finder or File Explorer, right click on Desktop and find the path.\n\nMac: Right click on Desktop in your Finder, click Get Info, and in General, copy the path listed next to Where. On my Mac, my Desktop path is \"/Users/jessicacooperstone/Desktop\".\nWindows: Right click on Desktop in your File Explorer, click Properties, and in Location you will see your path. On one of our lab computers, my Desktop path is \"C:Users\\cooperstone.1\\Desktop\".\n\n\nsetwd(\"path-to-your-desktop\")\n\n\n\n\n\n\n\n\n\n\nCreate yourself a new Rproject in a static location where your code club files will reside.\n\n\n\n\n\nUse the instructions here to create a Rproject."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#using-r-like-a-calculator",
    "href": "posts/S07E01_basics_01/index.html#using-r-like-a-calculator",
    "title": "R Basics 1: Getting Started",
    "section": "7 Using R like a calculator",
    "text": "7 Using R like a calculator\nNow that we are a bit oriented to RStudio, we can begin actually using it. We aren‚Äôt going to be using any scripts today, simply working in the console (bottom left quadrant).\nIn the bottom left part of the console you should see a greater than sign (&gt;). This is where you will start typing. If you don‚Äôt see this &gt; it means your console is not ready to receive commands. You can press Esc once or a couple times to get back to your &gt;.\nLet‚Äôs start by typing the following code into your console:\n\n2 + 5\n\n[1] 7\n\n\nWhen we ask R to calculate this sum we get the answer, 7. Note that this number is simply printed into our console. You‚Äôll also note that there is also a [1] next to the answer of 7 since R is telling us that 7 is the first value in our vector. More about this another time.\nWhat if now, instead of asking R to calculate what 2 + 5 is and print the result we want to save this output as a variable stored within R? We can do that by assigning it to a variable. Here, I am going to assign the output to x and do this using the assignment operator &lt;- which looks like an arrow pointing to the left.\n\nx &lt;- 2 + 5\n\nYou will see when you do this in your console, you no longer see the answer 7. You only see the code you typed in, and your &gt; indicating R is ready for more.\nThis is because we have asked R to store this output as the variable x and we have not asked R to show us what x is. We can do that by simply typing:\n\nx\n\n[1] 7\n\n\nNow we see the answer 7.\nWe can also now see that the variable x is stored in our Environment (top right quadrant). This is where all of the objects that are active in your environment will live.\n\n\n\nA screenshot of our Environment tab (top right quadrant) now that we have assigned the sum of 2 and 5 to x\n\n\n\n\n\n\n\n\nThere is a R shorthand to both assign an object and print it at the same time.\n\n\n\n\n\nIf you surround your code that is doing some assigning with parentheses, you will both assign the object and print it at the same time. Here‚Äôs an example:\n\n(j &lt;- 8 - 5)\n\n[1] 3\n\n\n\n\n\nIf we ask R for something that is not in our environment, like y we will get an error.\n\ny\n\n\nBut, now that we have x in our environment, we can use it to create new objects. If we wanted to create a new object y that was the result of x * 3, we could simply do:\n\ny &lt;- x * 3\n\nAnd if we want to see the answer, we type y.\n\ny\n\n[1] 21\n\n\n\nRemember that R uses classic mathematical order of operations, so do mind your parentheses."
  },
  {
    "objectID": "posts/S07E01_basics_01/index.html#practice-2",
    "href": "posts/S07E01_basics_01/index.html#practice-2",
    "title": "R Basics 1: Getting Started",
    "section": "8 Practice #2",
    "text": "8 Practice #2\n\n\n\n\n\n\nCreate a new variable z which has the result of 10 divided by 5. Print your answer.\n\n\n\n\n\nType the code below into your console (bottom left quadrant).\n\nz &lt;- 10 / 5\n\nz\n\n[1] 2\n\n\n\n\n\n\n\n\n\n\n\nMultiple the sum of 3 and 4 by the subtraction of 4 from 10. Don‚Äôt save it to a variable, just print it to your console.\n\n\n\n\n\nType the code below into your console (bottom left quadrant).\n\n(3 + 4) * (10 - 4)\n\n[1] 42\n\n\n\n\n\n\n\n\n\n\n\nTry setting the sum of 1 and 2 to x. What does this do to the value of x stored in your environment?.\n\n\n\n\n\nType the code below into your console (bottom left quadrant).\n\nx &lt;- 1 + 2\n\nx\n\n[1] 3\n\n\nBe careful about writing over variables!"
  },
  {
    "objectID": "posts/S09E08_functional-programming_01/index.html#introduction",
    "href": "posts/S09E08_functional-programming_01/index.html#introduction",
    "title": "Iterating part I: for loops",
    "section": "1 Introduction",
    "text": "1 Introduction\n\n\n\n\n\nCartoon from Allison Horst\n\n\n\n\nYou might find yourself in a situation where you are copying and pasting your code multiple times, changing a single variable. This could be situation where you want to run a series of statistical tests, each with a different response variable. Or, you want to make a series of plots, adjusting which variables are on the x-axis. This is generally not a good idea, as it is error prone and inefficient.\nWe are going to spend the next few sections of Code Club talking about things you can do to avoid copy and pasting your code. Today, we are going to talk about:\n\nfor loops\nwriting your own functions\n\nWe will start, like we typically do, by loading the packages we will use today.\n\nlibrary(tidyverse) # for wrangling and everything\nlibrary(palmerpenguins) # for penguins data\nlibrary(glue) # for easy pasting of names"
  },
  {
    "objectID": "posts/S09E08_functional-programming_01/index.html#for-loops",
    "href": "posts/S09E08_functional-programming_01/index.html#for-loops",
    "title": "Iterating part I: for loops",
    "section": "2 for loops",
    "text": "2 for loops\n\n2.1 for loops, the basics\nFor loops iterate over some kind of sequence, performing an action, one element at a time. The basic syntax is like this:\n\nfor (item in list_of_items) { # items to iterate over\n  # code that does something\n  do_something(item) # this is a made up function\n}\n\nLet‚Äôs go through a simple example:\n\nfor (some_value in 1:5) {\n  print(some_value * 2)\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nWhat is happening under the hood, is that your for loop is assigning each item in your vector (here, the integer values 1 through 5) to the object some_value, multiplying it by 2, and then printing it. If we want to be very explicit, this is exactly what is happening:\n\n# iteration 1\nsome_value &lt;- 1\nprint(some_value * 2)\n\n[1] 2\n\n# iteration 2\nsome_value &lt;- 2\nprint(some_value * 2)\n\n[1] 4\n\n# iteration 3\nsome_value &lt;- 3\nprint(some_value * 2)\n\n[1] 6\n\n# iteration 4\nsome_value &lt;- 4\nprint(some_value * 2)\n\n[1] 8\n\n# iteration 5\nsome_value &lt;- 5\nprint(some_value * 2)\n\n[1] 10\n\n\nIf we do this again in the loop:\n\nfor (some_value in 1:5) {\n  print(some_value * 2)\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nAnd check what some_value is at the end:\n\nsome_value\n\n[1] 5\n\n\nWe can see that the value 5 (last of some_value) is currently assigned. This is not totally intuitive - you might think that some_value would hold all of the values that we set to that object in our loop but this is not true. This is good to remember since this is now an object lingering in our environment.\nI have shown this use-case of a for loop because I think it helps you to see how it works - not because you would actually use it to do this task. Because R is a vectorized language, you don‚Äôt actually need a for loop to multiply every value by a number, we can do this task more simply below.\n\n# multiply each element of the vector 1:5 by 2\n1:5 * 2\n\n[1]  2  4  6  8 10\n\n\nLet‚Äôs do another example. I could create a for loop that simply prints something out for me. Here‚Äôs an example:\n\n# create a vector of the names of my special flowers\nmy_special_flowers &lt;- c(\"dahlias\", \"roses\", \"ranunculus\")\n\n# use a for loop to print this message for each flower\nfor (flower in my_special_flowers) {\n  print(glue(\"I really like {flower}\"))\n}\n\nI really like dahlias\nI really like roses\nI really like ranunculus\n\n\nYou can also make this conditional, meaning your for loop does one thing under certain conditions, and something else in another condition. We can accomplish this by nesting an if else statement within our for loop.\nWe are also making use of the function glue() (which we‚Äôve gone over before) which allows easy pasting, like this:\n\nmy_location &lt;- \"Code Club\"\nglue(\"Welcome to {my_location}\")\n\nWelcome to Code Club\n\n\n\n# a vector of solanaceous vegetables\nmy_vegetables &lt;- c(\"Tomato\", \"Potato\", \"Pepper\", \"Eggplant\")\n\nfor (vegetable in my_vegetables) {\n# if the vegetable is tomato, print this message  \n  if (vegetable == \"Tomato\") {\n    print(glue(\"{vegetable} is my favorite Solanaceae vegetable\"))\n  }\n# if the vegetable is anything else, print this message  \n  else {\n    print(glue(\"{vegetable} is a perfectly fine Solanaceae vegetable\"))\n  }\n}\n\nTomato is my favorite Solanaceae vegetable\nPotato is a perfectly fine Solanaceae vegetable\nPepper is a perfectly fine Solanaceae vegetable\nEggplant is a perfectly fine Solanaceae vegetable\n\n\n\n\n2.2 for loops basics practice\nWrite a for loop that takes the vector of numbers -5, -3, 2, 4, 7 and prints their absolute value.\n\n\nNeed a hint?\n\n The function for absolute value is abs().\n\n\n\nNeed another hint?\n\n First create a vector of your numbers, then iterate over it.\n\n\n\nClick for the solution\n\n\n# create your vector of numbers to iterate over\nmy_vector &lt;- c(-5, -3, 2, 4, 7)\n\n# use a for loop to do the iterating\nfor (number in my_vector) {\n  print(abs(number))\n}\n\n[1] 5\n[1] 3\n[1] 2\n[1] 4\n[1] 7\n\n\n\nWrite a for loop that, when given a number, will tell you whether an positive integer is odd or even. Don‚Äôt worry about negatives or zero here.\n\n\nNeed a hint?\n\n A function that would be useful here is the modulo, %%, where from the remainder, you can determine odd or even.\n\n\n\nNeed another hint?\n\n Create a vector of numbers you want to see if they are odd or even. Then write a for loop to print whether they are odd or even.\n\n\n\nClick for the solution\n\n\nsome_integers &lt;- c(1, 5, 12, 401, 1000)\n\nfor (number in some_integers) {\n# if the number is divisible by 2, print that its even \n  if (number %% 2 == 0) {\n    print(glue(\"{number} is an even number\"))\n  }\n# if the number is anything else, print that its odd \n  else {\n    print(glue(\"{number} is an odd number\"))\n  }\n}\n\n1 is an odd number\n5 is an odd number\n12 is an even number\n401 is an odd number\n1000 is an even number\n\n\n\n\n\n2.3 for loops, for plotting\nSo far, we have done things in a for loop do not really require a for loop to accomplish, though I want you to see how they work first with simpler examples. Making a bunch of plots at once is something that is really easier and less error prone with a for loop.\nFirst let‚Äôs revisit our penguins data to create a base plot, and then iterate it over a variable to make multiples.\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶\n\n\nWhat if we want to create a plot comparing the bill_length_mm vs.¬†bill_depth_mm for each species? We can:\n\ntake our penguins data\nfilter() for a single species\nmake our plot\n\n\npenguins |&gt; \n# select only the Adelie penguins  \n  filter(species == \"Adelie\") |&gt; \n# remove missing values for our variables of interest  \n  drop_na(bill_length_mm, bill_depth_mm, sex) |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = \"Adelie\", # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\") +\n    theme_classic() \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nNow we have a plot, if we want to create one per species (in this case there are 3), we can use a for loop to do this.\n\n# create a vector that has all the penguin species names\npenguin_species &lt;- unique(penguins$species)\n\n# use a for loop to iterate over the penguin species\nfor (focal_species in penguin_species) {\n# filter your df for each focal_species  \n  one_penguin_species &lt;- penguins |&gt; \n    filter(species == focal_species) |&gt; \n    drop_na(bill_length_mm, bill_depth_mm, sex) \n  \n# plot\n  plot &lt;- one_penguin_species |&gt;   \n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = focal_species, # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\") +\n    theme_classic() \n\n# print the plot\n  print(plot)\n}\n\n\n\n\n\n\n\n\n\n\nWe can also add to our for loop to save the plots in a location of our choosing. We can start by creating a new directory (in your working directory) called figs which is where we will store our figures.\n\n# write code to create a directory called \"figs\" in our working directory\ndir.create(path = \"figs\")\n\nInstead of printing the plot, we are going to save it.\n\nfor (focal_species in penguin_species) {\n# filter your df for each focal_species  \n  one_penguin_species &lt;- penguins |&gt; \n    filter(species == focal_species) |&gt; \n    drop_na(bill_length_mm, bill_depth_mm, sex) \n  \n# plot\n  plot &lt;- one_penguin_species |&gt;   \n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", # use a linear model\n                se = FALSE) + # turn off confidence interval\n    scale_color_brewer(palette = \"Dark2\") +\n    labs(title = focal_species, # put the species name as the title\n         x = \"Bill length (mm)\",\n         y = \"Bill depth (mm)\",\n         color = \"Sex\") +\n    theme_classic() \n\n# save the plots\n  filename &lt;- glue(\"figs/{focal_species}_bill-dimensions.png\") # create filename\n  ggsave(filename = filename, \n         plot = plot) # save the plot to file\n}\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nNow time to practice.\n\n\n2.4 for loops, for plotting practice\nWrite a for loop to make a series of boxplots that show the difference in body_mass_g between male and female penguins by species. Try both printing and saving the plots.\n\n\nNeed a hint?\n\n You are going to iterate over species.\n\n\n\nNeed another hint?\n\n Here is a sample little base plot:\n\npenguins |&gt; \n  filter(species == \"Adelie\") |&gt; \n  drop_na(body_mass_g, sex) |&gt; \n  ggplot(aes(x = sex, y = body_mass_g, color = sex)) +\n  geom_boxplot() +\n  theme_minimal() +\n  theme(legend.position = \"none\") + # don't need one bc duplicative with x-axis\n  labs(x = \"Sex\",\n        y = \"Body mass (grams)\",\n        title = \"Adelie\")\n\n\n\n\n\n\n\nClick for the solution\n\n\nfor (focal_species in penguin_species) {\n# filter your df for each focal_species  \n  one_penguin_species &lt;- penguins |&gt; \n    filter(species == focal_species) |&gt; \n    drop_na(bill_length_mm, bill_depth_mm, sex) \n  \n# plot\n  plot &lt;- one_penguin_species |&gt;   \n    ggplot(aes(x = sex, y = body_mass_g, color = sex)) +\n      geom_boxplot() +\n      theme_minimal() +\n      scale_color_brewer(palette = \"Dark2\") +\n      theme(legend.position = \"none\") + # don't need one bc duplicative with x-axis\n      labs(x = \"Sex\",\n        y = \"Body mass (grams)\",\n        title = \"Adelie\")\n\n# print the plots  \n  print(plot)\n\n# save the plots\n  filename &lt;- glue(\"figs/{focal_species}_body-mass-by-sex.png\") # create filename\n  ggsave(filename = filename, \n         plot = plot) # save the plot to file\n}\n\n\n\n\nSaving 7 x 5 in image\n\n\n\n\n\nSaving 7 x 5 in image\n\n\n\n\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "posts/S07E05_basics_05/index.html#introduction",
    "href": "posts/S07E05_basics_05/index.html#introduction",
    "title": "R Basics 5: Data Manipulation With Base R",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of last week\nLast week, we discussed vectorized operations and introduced the concept of a data frame. Furthermore, you successfully created a data frame containing multiple columns and rows.\nToday, we will explore data manipulation using base R syntax. It is important to note that there are countless ways to achieve the same objective, particularly in base R. Whenever possible, let us consider simpler syntax."
  },
  {
    "objectID": "posts/S07E05_basics_05/index.html#data-manipulation-with-base-r",
    "href": "posts/S07E05_basics_05/index.html#data-manipulation-with-base-r",
    "title": "R Basics 5: Data Manipulation With Base R",
    "section": "2 Data manipulation with (base) R",
    "text": "2 Data manipulation with (base) R\n\n2.1 Create a new dataset\n###\n\n\nPlease create a new data frame and name it df. This data frame should consist of three columns (Control, Trt1, and Trt2) with 50 observations each. The Control column should contain 50 data points that follow a normal distribution with a mean of 35 and a standard deviation of 10. Likewise, the Trt1 column should have a mean of 37 and a standard deviation of 10, and the Trt2 column should have a mean of 75 and a standard deviation of 10. Additionally, add five blocks (a, b, c, d, e), each repeating 10 times. Let‚Äôs use the function set.seed(1234) to work with the same values. (Click for the answer)\n\n\nset.seed(1234)\ndf &lt;- data.frame(Control = rnorm(50, 35, 10),\n                 Trt1 = rnorm(50, 37, 10),\n                 Trt2 = rnorm(50, 75, 10),\n                 Block = rep(c(\"a\", \"b\", \"c\", \"d\", \"e\"), 10))\n\n\n\n\nData mostly come in two shapes ‚Äì ‚Äúlong‚Äù format and ‚Äúwide‚Äù format.\nWhat type of data do you think is df? (Click for the answer)\n\nOur data frame df is in wide format.\n\n\n\n2.2 Extract variables (columns)\nThere are multiple ways to extract/select variables/columns. Here are two methods that we have previously used:\n\ndf[, c(\"Control\", \"Trt2\")] # by name\n\ndf[, c(1, 2)]  # by column index\n\n\n\n2.3 Make new variables (columns)\nLet‚Äôs create two new variables from existing ones:\n\ndf$Trt1.log &lt;- log(df$Trt1)\ndf$Trt2.log &lt;- log(df$Trt2)\n\n\n\n2.4 Extract observations (rows)\nThere are multiple ways to extract/filter observations/rows. Here are two ways we can do this:\n\n# Using [,]\ndf[df$Trt1.log &lt; 3.5, ]\n\ndf[df$Trt2.log &gt; 4.2 & df$Block == \"a\", ]\n\n# Using subset\nsubset(df, df$Trt2.log &gt; 4.2 & df$Block == \"a\")\n\n\n\n2.5 Arrange observations (rows)\nSorting is an operation that we typically perform when manipulating our dataset.\n\n# ascending order of Block (alphabetic) followed by ascending order of Trt2.log\ndf[order(df$Block, df$Trt2.log) , ]\n\n# descending order of Block (alphabetic) followed by ascending order of Trt2.log\ndf[order(rev(df$Block), df$Trt2.log) , ]\n\n\n\n2.6 Summarize observations (rows)\nThere are numerous ways to accomplish this task, and we will discover additional methods as we progress to the tidyverse package.\n\n# Manually create a data.frame\ndata.frame(Trt1.mean = mean(df$Trt1),\n           Trt1.sd = sd(df$Trt1),\n           Trt2.mean = mean(df$Trt2),\n           Trt2.sd = sd(df$Trt2))\n\n\n\n2.7 Summarize rows within groups\nTypically, our goal is to summarize data according to specific variables. Below is how we can achieve this:\n\n# First operate in the data.frame by group\ndf_by &lt;- by(df, \n   INDICES = list(df$Block),\n   FUN = function(x){\n     data.frame(Block = unique(x$Block),\n                Control.mean = mean(x$Control),\n                Control.sd = sd(x$Control),\n                Trt1.mean = mean(x$Trt1),\n                Trt1.sd = sd(x$Trt1),\n                Trt2.mean = mean(x$Trt2),\n                Trt2.sd = sd(x$Trt2))\n   })\n\n# Then combine the results into a data.frame\ndo.call(rbind, df_by)\n\nAlternatively, we can use the aggregate() function:\n\ndf.by &lt;- do.call(data.frame, aggregate(cbind(Control, Trt1, Trt2) ~ Block, data = df, FUN = function(x) c(mean = mean(x), sd = sd(x) ) ))\ndf.by\n\nLet‚Äôs take a look at each treatment graphically (we will do more data viz soon!):\n\nbarplot(df.by$Control.mean, names.arg =  paste(df.by$Block)) \n\nbarplot(df.by$Trt1.mean, names.arg =  paste(df.by$Block))\n\nbarplot(df.by$Trt2.mean, names.arg =  paste(df.by$Block))\n\n\n\n2.8 Reshape our data frame\nWide to long format:\nIn data analysis, the need to reshape the data frequently arises in order to enhance manageability and usefulness. Reshaping the data entails converting it from one format, such as wide, to another, like long, or vice versa. Such transformations aid in facilitating data accessibility, simplifying analysis, and providing more information.\n\nl &lt;- reshape(df, \n             varying = c(\"Control\", \"Trt1\", \"Trt2\", \"Trt1.log\", \"Trt2.log\"), \n             v.names = \"Yield\", \n             timevar = \"Treatment\", \n             times = c(\"Control\", \"Trt1\", \"Trt2\", \"Trt1.log\", \"Trt2.log\"), \n             new.row.names = 1:1000, \n             direction = \"long\")\n\nl"
  },
  {
    "objectID": "posts/S07E05_basics_05/index.html#practice",
    "href": "posts/S07E05_basics_05/index.html#practice",
    "title": "R Basics 5: Data Manipulation With Base R",
    "section": "3 Practice",
    "text": "3 Practice\nBefore seeking assistance from others, it is generally advisable for you to attempt to resolve the problem on your own. R provides comprehensive tools for accessing documentation and searching for help.\n\n3.1 Exercise 1\n\n\nLet‚Äôs use the same data frame df we created at the beginning of this session (Click for the answer)\n\nPlease go to the beginning of this session and re-run the code.\n\n\n\n3.2 Exercise 2\n\n\nA more informative variable could be one showing the difference between the treatment and the control. Create two new variables: Trt1.Delta and Trt2.Delta. (Click for the answer)\n\n\ndf$Trt1.Delta &lt;- df$Trt1 - df$Control\ndf$Trt2.Delta &lt;- df$Trt2 - df$Control\n\n\n\n\n3.3 Exercise 3\n\n\nCreate a new data frame df_delta containing the following variables (columns): Block, Trt1.Delta, and Trt2.Delta. (Click for the answer)\n\n\ndf_delta &lt;- df[, c(\"Block\", \"Trt1.Delta\", \"Trt2.Delta\")]\n\n\n\n\n3.4 Exercise 4\n\n\nSummarize Trt1.Delta and Trt2.Delta by Block. Produce the mean and standard deviation for each variable. (Click for the answer)\n\n\ndf.by &lt;- do.call(data.frame, aggregate(cbind(Trt1.Delta, Trt2.Delta) ~ Block, data = df, FUN = function(x) c(mean = mean(x), sd = sd(x) ) ))\ndf.by\n\n\n\n\n3.5 Exercise 5\n\n\nIn the end, our goal is to conduct statistical analysis to assess the impact of the treatment. However, the current data format does not allow us to proceed with our analysis. To fix this, please transform the data frame df_delta from a wide format to a long format. Please name this new data frame as long_delta. (Click for the answer)\n\n\nl &lt;- reshape(df_delta, \n             varying = c(\"Trt1.Delta\", \"Trt2.Delta\"), \n             v.names = \"Yield\", \n             timevar = \"Treatment\", \n             times = c(\"Trt1.Delta\", \"Trt2.Delta\"), \n             new.row.names = 1:1000, \n             direction = \"long\")"
  },
  {
    "objectID": "posts/S08E08_reprod_03/index.html#rendering-to-other-formats",
    "href": "posts/S08E08_reprod_03/index.html#rendering-to-other-formats",
    "title": "Reproducibility 3: More about Quarto",
    "section": "2.1 Rendering to other formats",
    "text": "2.1 Rendering to other formats\nWe‚Äôve been practicing by rendering to a .htmlfile, but you can render your .qmd document to other formats, including PDFs, Microsoft Word, Markdown, and a special one that we will talk about in the coming weeks called Github (or Github Flavored Markdown (GFM)). Here is an example of what some code that comes from my team that you push to Github could look like, and could serve as supplementary material for a paper, for example.\nYou can see all the different formats you can render a Quarto document to here."
  },
  {
    "objectID": "posts/S08E08_reprod_03/index.html#themes",
    "href": "posts/S08E08_reprod_03/index.html#themes",
    "title": "Reproducibility 3: More about Quarto",
    "section": "2.2 Themes",
    "text": "2.2 Themes\nYou can also change the theming of your document to make it look very pretty. Quarto comes with some complete themes, which we can look at here with Bootswatch. You can see the full list of complete themes here.\nThis website for example, uses the theme flatly (and darkly if you are a dark mode afficionado). The Quarto website uses the theme cosmo.\nYou can set your theme in your YAML like this:\n---\ntitle: \"My document\"\nformat:\n  html: # set parameters under the html category\n    theme: litera\n---"
  },
  {
    "objectID": "posts/S08E08_reprod_03/index.html#practice",
    "href": "posts/S08E08_reprod_03/index.html#practice",
    "title": "Reproducibility 3: More about Quarto",
    "section": "2.3 Practice",
    "text": "2.3 Practice\n\nTry adding a theme to your .qmd\nAdd a new parameter to your YAML - you can pick one from here and see how that goes."
  },
  {
    "objectID": "posts/S08E08_reprod_03/index.html#code-chunk-options",
    "href": "posts/S08E08_reprod_03/index.html#code-chunk-options",
    "title": "Reproducibility 3: More about Quarto",
    "section": "4.1 Code chunk options",
    "text": "4.1 Code chunk options\nWe can set different options for our code chunks to adjust if/how they are run. Here are some that we can set.\n\necho: FALSE runs your code chunk, displays output, but does not display code in your final doc (this is useful if you want to show a figure but not the code used to create it)\neval: FALSE does not run your code, but does display it in your final doc\ninclude: FALSE runs your code but does not display the code or its output in your final doc\nmessage: FALSE prevents messages from showing up in your final doc\nwarning: FALSE prevents earnings from showing up in your final doc\nfig.height: X and fig.width: Y will allow you to specify the dimensions of your figures (in inches)\nfig.align: can be set to ‚Äúleft‚Äù, ‚Äúright‚Äù, or ‚Äúcenter‚Äù\nfig.cap: \"Your figure caption\" will allow you to set a figure caption\nfig.alt: \"Your alt text\" will allow you to set alt text for screen readers\ncache: TRUE will cache results, meaning if you have a chunk that takes a long time to run, if you haven‚Äôt changed anything and you knit again, the code won‚Äôt run again but access the cache.\n\nYou can find a long list of code chunk options here.\nWe can set the code chunk options 3 ways:\n\nby using the syntax |# within the chunk, like this:\n\n{r}\n#| echo: TRUE \n#| warning: FALSE\n\nby clicking on the gear icon in the top right corner of a code chunk.\n\n\n\n\n\n\n\nwithin the {r} of a chunk\n\n{r, echo = TRUE, fig.width = 6}\nThe options can be very useful to get your document to render exactly how you want it."
  },
  {
    "objectID": "posts/S08E08_reprod_03/index.html#practice-1",
    "href": "posts/S08E08_reprod_03/index.html#practice-1",
    "title": "Reproducibility 3: More about Quarto",
    "section": "4.2 Practice",
    "text": "4.2 Practice\n\nTry adjusting your code chunk options and see how that affects the rendering of your document.\nNotice what gets printed after you load the tidyverse with library(tidyverse) - can you get that to go away?"
  },
  {
    "objectID": "posts/S08E08_reprod_03/index.html#prep-for-next-week",
    "href": "posts/S08E08_reprod_03/index.html#prep-for-next-week",
    "title": "Reproducibility 3: More about Quarto",
    "section": "4.3 Prep for next week",
    "text": "4.3 Prep for next week\nWe are going to render our .qmd file to GitHub Flavored Markdown (GFM) to prepare to push it to GitHub next week. Let‚Äôs do that by adjusting our YAML and rendering our document.\n---\ntitle: \"My first GitHub document\"\nauthor: \"Jessica Cooperstone\"\ndate: \"October 28, 2024\"\nformat: gfm\n---"
  },
  {
    "objectID": "posts/S08E05_wrangling_05/index.html#starting-note",
    "href": "posts/S08E05_wrangling_05/index.html#starting-note",
    "title": "Data Wrangling 5: Tidy Data and Pivoting",
    "section": "1.1 Starting note",
    "text": "1.1 Starting note\nMuch of this page is inspired from and has examples from - Hadley Wickam‚Äôs Tidy Data - R for Data Science"
  },
  {
    "objectID": "posts/S08E05_wrangling_05/index.html#set-up",
    "href": "posts/S08E05_wrangling_05/index.html#set-up",
    "title": "Data Wrangling 5: Tidy Data and Pivoting",
    "section": "2.1 Set up",
    "text": "2.1 Set up\nLets get our favorite library loaded up\n\n#install.packages(\"tidyverse\") # delete first hash and run to install if you havent already\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.4     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/S08E05_wrangling_05/index.html#data-structure",
    "href": "posts/S08E05_wrangling_05/index.html#data-structure",
    "title": "Data Wrangling 5: Tidy Data and Pivoting",
    "section": "3.1 Data Structure",
    "text": "3.1 Data Structure\nMost datasets we work with in R are organized in a roughly rectangular grid-like format made up of rows and columns that contain some values.\nEach value in a dataset belongs to some variable and some observation.\n\nA variable contains values of an attribute that was measured (i.e., length, sex, pH, color)\nAn observation contains all the values measured on the same thing (unit) (i.e., person, sample, day)\n\nExamples:\n\nIf I‚Äôm measuring the height of a population each person will be one observation and the variable I am measuring is height\n\n\n\nheight &lt;- tibble(\n height_in = c(rnorm(43, m=67, sd=8))\n )\n\nheight\n\n# A tibble: 43 √ó 1\n   height_in\n       &lt;dbl&gt;\n 1      55.1\n 2      70.2\n 3      60.9\n 4      60.0\n 5      68.1\n 6      76.8\n 7      51.8\n 8      61.3\n 9      64.5\n10      76.5\n# ‚Ñπ 33 more rows\n\n\n\n\nIf I‚Äôm counting the number of geese I see on campus throughout the year every day, the variables will be number of geese I see, and the day I count them on. The observation will be one instance of me counting geese on a specific day\n\n\n\ngeese &lt;- tibble(\n day = seq(1:365),\n geese_number = c(trunc(rnorm(365, m=24, sd=10)))\n )\n\ngeese\n\n# A tibble: 365 √ó 2\n     day geese_number\n   &lt;int&gt;        &lt;dbl&gt;\n 1     1           19\n 2     2           14\n 3     3           23\n 4     4           17\n 5     5           25\n 6     6           31\n 7     7           49\n 8     8            7\n 9     9           33\n10    10           50\n# ‚Ñπ 355 more rows\n\n\n\nThis may sound like review, but in practice can be somewhat tricky\n\n\n\n\n\n\nQuestion\n\n\n\nLooking at the diamonds dataset, what is the observation and variable of the the value diamonds[5,7] ?\n\n\nSolution (click here)\n\n\ndiamonds[5,7]\n\n# A tibble: 1 √ó 1\n  price\n  &lt;int&gt;\n1   335\n\n\nThe observation here is the 5th diamond and the variable we are measuring is price"
  },
  {
    "objectID": "posts/S08E05_wrangling_05/index.html#pre-tidy-date",
    "href": "posts/S08E05_wrangling_05/index.html#pre-tidy-date",
    "title": "Data Wrangling 5: Tidy Data and Pivoting",
    "section": "3.2 Pre-Tidy Date",
    "text": "3.2 Pre-Tidy Date\n\n‚ÄúAll tidy data sets are alike. Each messy dataset is messy in its own way‚Äù - Hadley Wickham.\n\nAt risk of stating the obvious, organizing values in datasets can be accomplished in many ways\nHere with an example of table of student grades on several assignments adapted from Hadley Wickam‚Äôs Tidy Data\n\nclassroom &lt;- tribble(\n  ~name,    ~quiz1, ~quiz2, ~test1,\n  \"Billy\",  NA,     \"67\",    \"75\",\n  \"Suzy\",   \"44\",    NA,     NA,\n  \"Lionel\", \"86\",    \"74\",    \"84\",\n  \"Jenny\",  \"94\",    \"98\",    \"88\"\n  )\n\nclassroom\n\n# A tibble: 4 √ó 4\n  name   quiz1 quiz2 test1\n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 Billy  &lt;NA&gt;  67    75   \n2 Suzy   44    &lt;NA&gt;  &lt;NA&gt; \n3 Lionel 86    74    84   \n4 Jenny  94    98    88   \n\n\nThere is more than one way to organize this information in a table - for instance here we can flip (transpose) the table to have student names in columns and assessments in rows\n\ntribble(\n  ~assessment, ~Billy, ~Suzy, ~Lionel, ~Jenny,\n  \"quiz1\",     NA,     \"44\",   \"86\",     \"94\",\n  \"quiz2\",     \"67\",    NA,    \"74\",     \"98\",\n  \"test1\",     \"75\",    NA,    \"84\",     \"88\"\n  )\n\n# A tibble: 3 √ó 5\n  assessment Billy Suzy  Lionel Jenny\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;\n1 quiz1      &lt;NA&gt;  44    86     94   \n2 quiz2      67    &lt;NA&gt;  74     98   \n3 test1      75    &lt;NA&gt;  84     88   \n\n\nThis data isn‚Äôt tidy data yet though.\n\n\n\n\n\n\nSIde Note: Different Organizations Serve Different Purposes\n\n\n\n\n\nDifferent ways of organizing data can serve different purposes - some ways of organizing data are great for collecting data, some good for analyzing data, some both, and some neither.\n\n\n\n\n3.2.1 The look of tidy data\nRoughly speaking, in tidy data columns contain variables and rows contain observations\nHere‚Äôs the dataset manually remade in a tidy format\n\ntidy_classroom &lt;- tibble( name = c( rep( \"Billy\", 3), rep( \"Jenny\", 3), rep(\"Lionel\", 3), rep(\"Suzy\", 3)),\n        assessment = c( rep(c(\"quiz1\", \"quiz2\", \"test1\"), 4)),\n        grade = c(NA, \"67\", \"75\", \"94\", \"98\", \"88\", \"86\", \"74\", \"84\", \"44\", NA, NA))\n\n\ntidy_classroom\n\n# A tibble: 12 √ó 3\n   name   assessment grade\n   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;\n 1 Billy  quiz1      &lt;NA&gt; \n 2 Billy  quiz2      67   \n 3 Billy  test1      75   \n 4 Jenny  quiz1      94   \n 5 Jenny  quiz2      98   \n 6 Jenny  test1      88   \n 7 Lionel quiz1      86   \n 8 Lionel quiz2      74   \n 9 Lionel test1      84   \n10 Suzy   quiz1      44   \n11 Suzy   quiz2      &lt;NA&gt; \n12 Suzy   test1      &lt;NA&gt; \n\n\nHere, the values, variables, and observations are more clear\nThe variables are\n\nthe names of the students (in the name column)\nthe assessments (in the assessment column)\nthe grades (in the grade column)\n\nEach observation here is a particular grade, on each assessmnet, for each student.\n\n\n\n\n\n\nNote\n\n\n\n\n\nLook at the dimensions of this table. From this, we can immediatly tell the number of variables, and the number of observations in this dataset"
  },
  {
    "objectID": "posts/S08E05_wrangling_05/index.html#tidy-data-definition",
    "href": "posts/S08E05_wrangling_05/index.html#tidy-data-definition",
    "title": "Data Wrangling 5: Tidy Data and Pivoting",
    "section": "3.3 Tidy data definition",
    "text": "3.3 Tidy data definition\nTidy data is a standard way of organizing data, and is defined by 3 things\nIn tidy data\n\nEach variable is one column; columns are single variables\nEach observation is one row; rows are single observations\nEach value is a cell; cells are values\n\nMessy data is defined as any data organization that is not tidy data\n\nWhy use tidy data?\n\nHaving data structured as tidy data makes it easier to manipulate and analyze data in tidy R - in fact, most of the functions we have been learning up to now have been preformed on tidy data - this is the tidyverse after all\nSome functions require tidy data, and most operations on data in the tidyverse are made significantly easier by having your data as tidy data (i.e., data visualization, statistics)\nHaving data in a standardized format makes it easier to collaborate on\n\n\n\n\n\n\n\nOrder of Columns\n\n\n\n\n\nA note on ordering of columns : While order of columns doesn‚Äôt really matter for data to be considered tidy, it is standard and common practice to put meta data (aka fixed or random variables) first, followed by the columns for measured data (i.e., sample name columns go first)"
  },
  {
    "objectID": "posts/S08E05_wrangling_05/index.html#pivoting-longer",
    "href": "posts/S08E05_wrangling_05/index.html#pivoting-longer",
    "title": "Data Wrangling 5: Tidy Data and Pivoting",
    "section": "4.1 Pivoting Longer",
    "text": "4.1 Pivoting Longer\nOne common problem mentioned in R for data science and by Hadley Wickham is when you have column names that are actually variable values (when a single variable is spread across multiple columns)\n\n\n\n\n\n\nSidenote\n\n\n\n\n\nHaving a set of columns with variable values for names is actually very common in metabomolics or genomics data, where column titles are metabolites, genes, taxa, etc.\n\n\n\nHere is a dataset with this issue - This data denotes the population of Afghanistan, Brazil, and China for the years 1999 and 2000\n\ntable4b\n\n# A tibble: 3 √ó 3\n  country         `1999`     `2000`\n  &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat are the variables in the table4b data?\n\n\nSolution (click here)\n\nThe variables are\n\ncountry\nyear\npopulation\n\n\n\n\nThis format of data is sometimes called wide data, where the row of column names (the very first row) actually contains variable values.\nIn this data it doesn‚Äôt look very wide, but imagine how much wider if data was taken every year up to or past this year. Wide data tends to get wide very quickly.\n\nFor an example of very wide data, look at the who dataset\n\ndata(who)\n who\n\n# A tibble: 7,240 √ó 60\n   country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544\n   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 Afghani‚Ä¶ AF    AFG    1980          NA           NA           NA           NA\n 2 Afghani‚Ä¶ AF    AFG    1981          NA           NA           NA           NA\n 3 Afghani‚Ä¶ AF    AFG    1982          NA           NA           NA           NA\n 4 Afghani‚Ä¶ AF    AFG    1983          NA           NA           NA           NA\n 5 Afghani‚Ä¶ AF    AFG    1984          NA           NA           NA           NA\n 6 Afghani‚Ä¶ AF    AFG    1985          NA           NA           NA           NA\n 7 Afghani‚Ä¶ AF    AFG    1986          NA           NA           NA           NA\n 8 Afghani‚Ä¶ AF    AFG    1987          NA           NA           NA           NA\n 9 Afghani‚Ä¶ AF    AFG    1988          NA           NA           NA           NA\n10 Afghani‚Ä¶ AF    AFG    1989          NA           NA           NA           NA\n# ‚Ñπ 7,230 more rows\n# ‚Ñπ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,\n#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,\n#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,\n#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,\n#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,\n#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;, ‚Ä¶\n\n\n\nTo make this data tidy, we need to the the column names (the year variable) and turn it into its own column (called year), and take all of the population data and put that into a second variable column (called population)\nPreviously with the classroom data we did this manually, but there is a much better way to pivot from wide messy data, to longer tidy data with the function pivot_longer\nLets look at the help file for it\n\n?pivot_longer\n\nFrom this, we see that the pivot_longer function can take a lot of aruguments, but there are only a few important ones\n\ncols, in which we select the columns to pivot (i.e., the columns whos names contain a variable)\nnames_to, in which we create a new column for where our old column names are to be put into\nvalues_to, in which we create a second new column for the values to be put into\n\nHere‚Äôs what that looks like in our example\n\ntidy_table4b &lt;- table4b |&gt; \n  pivot_longer(cols = `1999`:`2000`, \n               names_to = \"year\", \n               values_to = \"population\") \n\n# note here the numbers are in backticks. This is because R treats column names as characters, and calling a name as number data won't work here. \n\n# the new column names also need to be in quotes here\n\ntidy_table4b\n\n# A tibble: 6 √ó 3\n  country     year  population\n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;\n1 Afghanistan 1999    19987071\n2 Afghanistan 2000    20595360\n3 Brazil      1999   172006362\n4 Brazil      2000   174504898\n5 China       1999  1272915272\n6 China       2000  1280428583\n\n\nusing pivot_longer we turned a 3x3 table where the column names stored variable values into a 6x3 table where each column contains a single variable, and each row a single observation - and presto, tidy data!\nOne other thing to note here is that we are not pivoting every column. In some datasets you may only have a few columns that you would like to be longer\n\n4.1.1 More examples and uses of pivot\nPivoting isn‚Äôt just for cleaning up! When combined with other functions, pivoting can also be a very useful way to manipulate data to make it easier to analyze\nLast week, we used the summary function to find the mean height, width and depth of diamonds in the diamonds dataset\n\ndata(diamonds)\n\n\ndiamonds |&gt; \n  summarise(mean_x = mean(x),\n            mean_y = mean(y),\n            mean_z = mean(z))\n\n# A tibble: 1 √ó 3\n  mean_x mean_y mean_z\n   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1   5.73   5.73   3.54\n\n\nFor this we had to create a new column for every dimensional mean, which a.) takes a while to type, especially if we wanted to find the mean of further values and b.) comes out to not be tidy data\nAnother way to find the means for these columns is to use the pivot_longer function to make another column which we can group the values by\n\ndiamonds |&gt; \npivot_longer(cols = c(x:z), \n             names_to = \"dimension\", \n             values_to = \"value\") |&gt; \n  summarise(mean_value = mean(value),\n            .by = dimension)\n\n# A tibble: 3 √ó 2\n  dimension mean_value\n  &lt;chr&gt;          &lt;dbl&gt;\n1 x               5.73\n2 y               5.73\n3 z               3.54\n\n# note in cols, I'm not specifying x, y, and z individually. In the dataset they are all next to each other, so I can use the : operator to signify that I want columns x through z. This can be really helpful on wider datasets. \n\nHere we only have three values, but for wider datasets this can be a very powerful tool\n\n\n4.1.2 Pivot longer problems\n\n\n\n\n\n\nQuestion 1\n\n\n\nMake the classroom data from earlier into a tidy format using pivot_longer\n\nclassroom &lt;- tribble(\n  ~name,    ~quiz1, ~quiz2, ~test1,\n  \"Billy\",  NA,     \"D\",    \"C\",\n  \"Suzy\",   \"F\",    NA,     NA,\n  \"Lionel\", \"B\",    \"C\",    \"B\",\n  \"Jenny\",  \"A\",    \"A\",    \"B\"\n  )\n\n\n\nSolution (click here)\n\n\nclassroom |&gt; \n  pivot_longer(cols = c(quiz1,quiz2, test1), \n               names_to = \"assesment\", \n               values_to = \"grade\")\n\n# A tibble: 12 √ó 3\n   name   assesment grade\n   &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;\n 1 Billy  quiz1     &lt;NA&gt; \n 2 Billy  quiz2     D    \n 3 Billy  test1     C    \n 4 Suzy   quiz1     F    \n 5 Suzy   quiz2     &lt;NA&gt; \n 6 Suzy   test1     &lt;NA&gt; \n 7 Lionel quiz1     B    \n 8 Lionel quiz2     C    \n 9 Lionel test1     B    \n10 Jenny  quiz1     A    \n11 Jenny  quiz2     A    \n12 Jenny  test1     B    \n\n\n\n\n\n\n\n\n\n\n\nQuestion 2\n\n\n\nFind the means, minimum values, maximum values, and standard deviations of all of the numeric columns in the diamonds dataset using pivot_longer followed by summarise\n\n\nHint (click here)\n\nWhich are the numeric columns?\n\nstr(diamonds)\n\ntibble [53,940 √ó 10] (S3: tbl_df/tbl/data.frame)\n $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n $ cut    : Ord.factor w/ 5 levels \"Fair\"&lt;\"Good\"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...\n $ color  : Ord.factor w/ 7 levels \"D\"&lt;\"E\"&lt;\"F\"&lt;\"G\"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...\n $ clarity: Ord.factor w/ 8 levels \"I1\"&lt;\"SI2\"&lt;\"SI1\"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...\n $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n\n\n\n\n\nSolution (click here)\n\n\ndiamonds |&gt; \n  pivot_longer(cols = c(carat,depth:z), \n               names_to = \"parameter\", \n               values_to = \"value\") |&gt; \n  summarise(mean = mean(value),\n            min = min(value),\n            max = max(value),\n            sd = sd(value),\n            .by = parameter)\n\n# A tibble: 7 √ó 5\n  parameter     mean   min      max       sd\n  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 carat        0.798   0.2     5.01    0.474\n2 depth       61.7    43      79       1.43 \n3 table       57.5    43      95       2.23 \n4 price     3933.    326   18823    3989.   \n5 x            5.73    0      10.7     1.12 \n6 y            5.73    0      58.9     1.14 \n7 z            3.54    0      31.8     0.706\n\n\n\n\n\n\n\n\n\n\n\nQuestion 3 - Challange\n\n\n\nTake a look at the very wide dataset who\n\ndata(who)\n\nhead(who)\n\n# A tibble: 6 √ó 60\n  country   iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544\n  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 Afghanis‚Ä¶ AF    AFG    1980          NA           NA           NA           NA\n2 Afghanis‚Ä¶ AF    AFG    1981          NA           NA           NA           NA\n3 Afghanis‚Ä¶ AF    AFG    1982          NA           NA           NA           NA\n4 Afghanis‚Ä¶ AF    AFG    1983          NA           NA           NA           NA\n5 Afghanis‚Ä¶ AF    AFG    1984          NA           NA           NA           NA\n6 Afghanis‚Ä¶ AF    AFG    1985          NA           NA           NA           NA\n# ‚Ñπ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,\n#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,\n#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,\n#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,\n#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,\n#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;,\n#   new_sn_f014 &lt;dbl&gt;, new_sn_f1524 &lt;dbl&gt;, new_sn_f2534 &lt;dbl&gt;, ‚Ä¶\n\n\nThis data contains records of the counts of confirmed tuberculosis cases by country, year, and demographic group. The demographic groups are broken down by sex (m, f) and age (0-14, 15-25, 25-34, 35-44, 45-54, 55-64, unknown).\nAfter using pivot_longer, find the country with the most cases of tb in 2011.\nNote: The first four columns (country, iso2, iso3, and year) are already properly formatted and do not need to be pivoted here.\n\n\nHint (click here)\n\nNA values are liekly to mess up your analysis here - check the pivot_longer() help file to see what arguments are available to remove NA values\n\n\n\nSolution (click here)\n\n\nwho |&gt; \n  pivot_longer(cols = !c(country:year), \n               names_to = \"demographic\", \n               values_to = \"tb_counts\", \n               values_drop_na = TRUE) |&gt; \n  summarise(count = sum(tb_counts),\n            .by = c(country,year)) |&gt; \n  filter(year=='2011') |&gt; \n  arrange(desc(count))\n\n# A tibble: 210 √ó 3\n   country                                year  count\n   &lt;chr&gt;                                 &lt;dbl&gt;  &lt;dbl&gt;\n 1 China                                  2011 865059\n 2 India                                  2011 642311\n 3 Indonesia                              2011 313601\n 4 South Africa                           2011 289111\n 5 Bangladesh                             2011 148198\n 6 Pakistan                               2011 127571\n 7 Russian Federation                     2011 104320\n 8 Philippines                            2011  93580\n 9 Democratic People's Republic of Korea  2011  85564\n10 Kenya                                  2011  84548\n# ‚Ñπ 200 more rows\n\n\nChina is our winner with a sum of 865059 cases in 2011"
  },
  {
    "objectID": "posts/S08E05_wrangling_05/index.html#pivoting-wider",
    "href": "posts/S08E05_wrangling_05/index.html#pivoting-wider",
    "title": "Data Wrangling 5: Tidy Data and Pivoting",
    "section": "4.2 Pivoting Wider",
    "text": "4.2 Pivoting Wider\nThe other function of the day here is pivot_wider\npivot_wider , as the name might imply, is the inverse of pivot_longer and creates columns from from values stored in another column\n\n4.2.1 Uses of pivot_wider()\nYou may be thinking, ‚Äúwhy would I ever need this? I thought the whole point was to avoid having columns of variable values‚Äù\npivot_wider is an especially useful function in many situations. Here are only a few:\n\npivot_wider is useful where we have the opposite problem as we saw when learning pivot_longer - when a multiple variables are stored in a single column (single observation is scattered across more than one row)\npivot_wider can be useful when we want to make calculations across columns\nNot every function in R accepts tidy data, sometimes we do need wide data! (e.g., anything that requires a matrix, PCA)\n\n\n\n4.2.2 Using pivot_wider()\nLets see how pivot_wider() is used\nThis is a dataset containing population data and the number of cases of some disease in Afghanistan, Brazil, and China for the years 1999 and 2000\n\ntable2\n\n# A tibble: 12 √ó 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\nHere, we have columns containing more than one variable this time (type has both cases and population).\nLets check out pivot_wider to see how we can undo this and make our data tidy again\n\n?pivot_wider\n\nAgain, pivot_wider has a bunch of arguments, but this time there are really only two essential ones\n\nnames_from which denotes the column in which our new column names are stored\nvalues_from which denotes the column in which the values we will be filling our new columns with are stored\n\n\n\n\n\n\n\nNote:\n\n\n\n\n\nThere are fewer important arguments in pivot_wider - which one is missing its inverse from pivot_longer?\n\n\n\nLets see it in action\n\ntable2 |&gt; \n  pivot_wider(names_from = type, values_from = count)\n\n# A tibble: 6 √ó 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\nWe have now seperated our variables into seperate columns, and now our rows each contain only one observation. Tidy data!\n\n\n4.2.3 Pivot Wider Problems\n\n\n\n\n\n\nQuestion 1\n\n\n\nUndo the tidy_classroom and make it look like one of its untidy form using pivot_wider\n\ntidy_classroom &lt;- tibble( name = c( rep( \"Billy\", 3), rep( \"Jenny\", 3), rep(\"Lionel\", 3), rep(\"Suzy\", 3)),\n        assessment = c( rep(c(\"quiz1\", \"quiz2\", \"test1\"), 4)),\n        grade = c(NA, \"67\", \"75\", \"94\", \"98\", \"88\", \"86\", \"74\", \"84\", \"44\", NA, NA))\n\n\n\nSolution (click here)\n\n\ntidy_classroom |&gt; \n  pivot_wider(names_from = assessment, values_from = grade)\n\n# A tibble: 4 √ó 4\n  name   quiz1 quiz2 test1\n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 Billy  &lt;NA&gt;  67    75   \n2 Jenny  94    98    88   \n3 Lionel 86    74    84   \n4 Suzy   44    &lt;NA&gt;  &lt;NA&gt; \n\n\n\n\n\n\n\n\n\n\n\nQuestion 2\n\n\n\nIn one of the questions from using pivot_longer, we put all of the numeric variables into two columns, here named parameter and value. Can you return the data tampered_diamonds to its original state?\n\ntampered_diamonds &lt;- diamonds |&gt; \n  pivot_longer(cols = c(carat, depth:z), names_to = \"parameter\", values_to = \"value\")\n\nnote : if you encounter an error, be sure to check the hint\n\n\nHint (click here)\n\n\ntampered_diamonds |&gt; \n  pivot_wider(names_from = parameter, values_from = value)\n\nWarning: Values from `value` are not uniquely identified; output will contain list-cols.\n‚Ä¢ Use `values_fn = list` to suppress this warning.\n‚Ä¢ Use `values_fn = {summary_fun}` to summarise duplicates.\n‚Ä¢ Use the following dplyr code to identify duplicates.\n  {data} |&gt;\n  dplyr::summarise(n = dplyr::n(), .by = c(cut, color, clarity, parameter)) |&gt;\n  dplyr::filter(n &gt; 1L)\n\n\n# A tibble: 276 √ó 10\n   cut       color clarity carat       depth       table price x     y     z    \n   &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;list&gt;      &lt;list&gt;      &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;\n 1 Ideal     E     SI2     &lt;dbl [469]&gt; &lt;dbl [469]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 2 Premium   E     SI1     &lt;dbl [614]&gt; &lt;dbl [614]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 3 Good      E     VS1     &lt;dbl [89]&gt;  &lt;dbl [89]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 4 Premium   I     VS2     &lt;dbl [315]&gt; &lt;dbl [315]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 5 Good      J     SI2     &lt;dbl [53]&gt;  &lt;dbl [53]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 6 Very Good J     VVS2    &lt;dbl [29]&gt;  &lt;dbl [29]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 7 Very Good I     VVS1    &lt;dbl [69]&gt;  &lt;dbl [69]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 8 Very Good H     SI1     &lt;dbl [547]&gt; &lt;dbl [547]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 9 Fair      E     VS2     &lt;dbl [42]&gt;  &lt;dbl [42]&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n10 Very Good H     VS1     &lt;dbl [257]&gt; &lt;dbl [257]&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n# ‚Ñπ 266 more rows\n\n\nUh-oh! Uh-oh! With what we have learned so far, we cant undo pivot_longer with pivot_wider here! Can you figure out why?\n\n\n\nSolution (click here)\n\n\n# code from the error read out\ntampered_diamonds %&gt;%\n  dplyr::group_by(cut, color, clarity, parameter) %&gt;%\n  dplyr::summarise(n = dplyr::n(), .groups = \"drop\")  %&gt;%\n  dplyr::filter(n &gt; 1L)\n\n# A tibble: 1,897 √ó 5\n   cut   color clarity parameter     n\n   &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;     &lt;int&gt;\n 1 Fair  D     I1      carat         4\n 2 Fair  D     I1      depth         4\n 3 Fair  D     I1      price         4\n 4 Fair  D     I1      table         4\n 5 Fair  D     I1      x             4\n 6 Fair  D     I1      y             4\n 7 Fair  D     I1      z             4\n 8 Fair  D     SI2     carat        56\n 9 Fair  D     SI2     depth        56\n10 Fair  D     SI2     price        56\n# ‚Ñπ 1,887 more rows\n\n# example of multiple replicates\ntampered_diamonds |&gt; \n  filter(cut==\"Premium\", color == \"D\", clarity==\"VS2\")\n\n# A tibble: 2,373 √ó 5\n   cut     color clarity parameter  value\n   &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;chr&gt;      &lt;dbl&gt;\n 1 Premium D     VS2     carat       0.22\n 2 Premium D     VS2     depth      59.3 \n 3 Premium D     VS2     table      62   \n 4 Premium D     VS2     price     404   \n 5 Premium D     VS2     x           3.91\n 6 Premium D     VS2     y           3.88\n 7 Premium D     VS2     z           2.31\n 8 Premium D     VS2     carat       0.71\n 9 Premium D     VS2     depth      62.5 \n10 Premium D     VS2     table      60   \n# ‚Ñπ 2,363 more rows\n\n\nmultiple values for each ‚Äútype‚Äù of diamond - not uniquely identifiable, thus we can‚Äôt get to the original dataset"
  },
  {
    "objectID": "posts/S08E11_OSC/index.html#todays-content",
    "href": "posts/S08E11_OSC/index.html#todays-content",
    "title": "Accessing and using R at the Ohio Supercomputer Center (OSC)",
    "section": "1 Today‚Äôs content",
    "text": "1 Today‚Äôs content\nToday, I will show you how to access resources such as R and RStudio through the Ohio Supercomputer Center (OSC). To give some context, I will start with a brief general introduction to high-performance computing and OSC.\nSince this is the last Code CLub session of the semester, we will also leave for more general questions and comments and ask for suggestions for content for the next semester of Code Club."
  },
  {
    "objectID": "posts/S08E11_OSC/index.html#high-performance-computing-and-osc",
    "href": "posts/S08E11_OSC/index.html#high-performance-computing-and-osc",
    "title": "Accessing and using R at the Ohio Supercomputer Center (OSC)",
    "section": "2 High-performance computing and OSC",
    "text": "2 High-performance computing and OSC\n\nA supercomputer (also known as a ‚Äúcompute cluster‚Äù or simply a ‚Äúcluster‚Äù) consists of many computers that are connected by a high-speed network, and that can be accessed remotely by its users. In more general terms, supercomputers provide high-performance computing (HPC) resources.\nThis is what Owens, one of the OSC supercomputers, physically looks like:\n\n\n\n\n\nHere are some possible reasons to use a supercomputer instead of your own laptop or desktop:\n\nYour analyses take a long time to run, need large numbers of CPUs, or a large amount of memory.\nYou need to run some analyses many times.\nYou need to store a lot of data.\nYour analyses require specialized hardware, such as GPUs (Graphical Processing Units).\nYour analyses require software available only for the Linux operating system, but you use Windows.\n\n\nThe Ohio Supercomputer Center (OSC) is a facility provided by the state of Ohio. It has three supercomputers, lots of storage space, and an excellent infrastructure for accessing these resources.\n\n\n\n\n\n\n\nOSC websites and ‚ÄúProjects‚Äù\n\n\n\nOSC has three main websites ‚Äî we will mostly or only use the first:\n\nhttps://ondemand.osc.edu: A web portal to use OSC resources through your browser (login needed).\nhttps://my.osc.edu: Account and project management (login needed).\nhttps://osc.edu: General website with information about the supercomputers, installed software, and usage.\n\n\nAccess to OSC‚Äôs computing power and storage space goes through OSC ‚ÄúProjects‚Äù:\n\nA project can be tied to a research project or lab, or be educational like Code Club‚Äôs project, PAS1838.\nEach project has a budget in terms of ‚Äúcompute hours‚Äù and storage space1.\nAs a user, it‚Äôs possible to be a member of multiple different projects."
  },
  {
    "objectID": "posts/S08E11_OSC/index.html#the-structure-of-a-supercomputer-center",
    "href": "posts/S08E11_OSC/index.html#the-structure-of-a-supercomputer-center",
    "title": "Accessing and using R at the Ohio Supercomputer Center (OSC)",
    "section": "3 The structure of a supercomputer center",
    "text": "3 The structure of a supercomputer center\n\nTerminology\nLet‚Äôs start with some (super)computing terminology, going from smaller things to bigger things:\n\nNode\nA single computer that is a part of a supercomputer.\nSupercomputer / Cluster\nA collection of computers connected by a high-speed network. OSC currently has three: ‚ÄúPitzer‚Äù, ‚ÄúOwens‚Äù, and ‚ÄúCardinal‚Äù.\nSupercomputer Center\nA facility like OSC that has one or more supercomputers.\n\n\n\nSupercomputer components\nWe can think of a supercomputer as having three main parts:\n\nFile Systems: Where files are stored (these are shared between the two OSC supercomputers!)\nLogin Nodes: The handful of computers everyone shares after logging in\nCompute Nodes: The many computers you can reserve to run your analyses\n\n\n\n\n\n\n\nLogin Nodes\nLogin nodes are set aside as an initial landing spot for everyone who logs in to a supercomputer. There are only a handful of them on each supercomputer, they are shared among everyone, and cannot be ‚Äúreserved‚Äù.\nAs such, login nodes are meant only to do things like organizing your files and creating scripts for compute jobs, and are not meant for any serious computing, which should be done on the compute nodes.\n\n\nCompute Nodes\nData processing and analysis is done on compute nodes. You can only use compute nodes after putting in a request for resources (a ‚Äújob‚Äù). (The Slurm job scheduler, will then assign resources to your request.)\n\n\n\n\n\n\nWhat works differently on a supercomputer like at OSC? (Click to expand)\n\n\n\n\n\nCompared to command-line computing on a laptop or desktop, a number of aspects are different when working on a supercomputer like at OSC. We‚Äôll learn much more about these later on in the course, but here is an overview:\n\n‚ÄúNon-interactive‚Äù computing is common\nIt is common to write and ‚Äúsubmit‚Äù scripts to a queue instead of running programs interactively.\nSoftware\nYou generally can‚Äôt install ‚Äúthe regular way‚Äù, and a lot of installed software needs to be ‚Äúloaded‚Äù.\nOperating system\nSupercomputers run on the Linux operating system.\nLogin versus compute nodes\nAs mentioned, the nodes you end up on after logging in are not meant for heavy computing and you have to request access to ‚Äúcompute nodes‚Äù to run most analyses.\n\n\n\n\n\n\n\n\n\n\n\nOSC file systems (Click to expand)\n\n\n\n\n\nOSC has several distinct file systems:\n\n\n\n\n\n\n\n\n\n\n\nFile system\nLocated within\nQuota\nBacked up?\nAuto-purged?\nOne for each‚Ä¶\n\n\n\n\nHome\n/users/\n500 GB / 1 M files\nYes\nNo\nUser\n\n\nProject\n/fs/ess/\nFlexible\nYes\nNo\nOSC Project\n\n\nScratch\n/fs/scratch/\n100 TB\nNo\nAfter 90 days\nOSC Project\n\n\n\n(Directory is just another word for folder, often written as ‚Äúdir‚Äù for short.)"
  },
  {
    "objectID": "posts/S08E11_OSC/index.html#osc-ondemand",
    "href": "posts/S08E11_OSC/index.html#osc-ondemand",
    "title": "Accessing and using R at the Ohio Supercomputer Center (OSC)",
    "section": "4 OSC OnDemand",
    "text": "4 OSC OnDemand\nThe OSC OnDemand web portal allows you to use a web browser to access OSC resources such as:\n\nA file browser where you can also create and rename folders and files, etc.\nA Unix shell\n‚ÄúInteractive Apps‚Äù: programs such as RStudio, Jupyter, VS Code and QGIS.\n\n Go to https://ondemand.osc.edu and log in (use the boxes on the left-hand side)\nYou should see a landing page similar to the one below:\n\n\n\nWe will now go through some of the dropdown menus in the blue bar along the top.\n\n\nFiles: File system access\nHovering over the Files dropdown menu gives a list of directories that you have access to. If your account is brand new, and you were added to PAS1838, you should only have three directories listed:\n\nA Home directory (starts with /users/)\nThe PAS1838 project‚Äôs ‚Äúscratch‚Äù directory for temporary project-related storage (/fs/scratch/PAS1838)\nThe PAS1838 project‚Äôs ‚Äúproject‚Äù directory for permanent project-related storage (/fs/ess/PAS1838)\n\nYou will only ever have one Home directory at OSC, but for every additional project you are a member of, you should usually see additional /fs/ess and /fs/scratch directories appear.\n Click on your Home directory.\nOnce there, you should see whichever directories and files are present at the selected location, and you can click on the directories to explore the contents further:\n\n\n\n\n\nThis interface is much like the file browser on your own computer, so you can also create, delete, move and copy files and folders, and even upload (from your computer to OSC) and download (from OSC your computer) files2 ‚Äî see the buttons across the top.\n\n\n\nClusters: Unix shell access\nInteracting with a supercomputer is most commonly done using a Unix shell. Under the Clusters dropdown menu, you can access a Unix shell either on Owens or Pitzer:\n\n\n\n\n\nI‚Äôm selecting a shell on the Pitzer supercomputer (‚ÄúPitzer Shell Access‚Äù), which will open a new browser tab, where the bottom of the page looks like this:\n\n\n\n\n\nThe ‚ÄúClusters‚Äù dropdown menu also has item ‚ÄúSystem Status‚Äù. When you click on that, a new browser tab will open with a page that shows an overview of the live, current usage of the clusters ‚Äî this can be useful to get an idea of the scale of the supercomputer center, which cluster is being used more, and so on:\n\n\n\n\n\n\n\n\nInteractive Apps\nWe can access programs with Graphical User Interfaces (GUIs; point-and-click interfaces) via the Interactive Apps dropdown menu:"
  },
  {
    "objectID": "posts/S08E11_OSC/index.html#rstudio-at-osc-rstudio-server",
    "href": "posts/S08E11_OSC/index.html#rstudio-at-osc-rstudio-server",
    "title": "Accessing and using R at the Ohio Supercomputer Center (OSC)",
    "section": "5 RStudio at OSC (RStudio Server)",
    "text": "5 RStudio at OSC (RStudio Server)\nFrom within our browser, we can access a version of RStudio (‚ÄúRStudio Sever‚Äù) that will be running on OSC‚Äôs computers.\nSome potential advantages of doing this are:\n\nYou can access multiple different versions of R!\nYou have access to OSC‚Äôs compute power and could easily request say 20 cores or 100 GB of memory (RAM)\nYou have large amounts of data that are stored on OSC anyway, or are best stored there\n\n\nStarting an RStudio Server session\n\nClick on Interactive Apps (top bar) and then RStudio Server (all the way at the bottom)\nFill out the form as follows:\n\nCluster: Pitzer\nR version: 4.4.0\nProject: PAS1838\nNumber of hours: 1\nNode type: any\nNumber of cores: 1\n\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nClick the big blue Launch button at the bottom\nNow, you should be sent to a new page with a box at the top for your RStudio Server ‚Äújob‚Äù, which should initially be ‚ÄúQueued‚Äù (waiting to start).\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nYour job should start running very soon, with the top bar of the box turning green and saying ‚ÄúRunning‚Äù.\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nClick Connect to RStudio Server at the bottom of the box, and an RStudio Server instance will open in a new browser tab. You‚Äôre ready to go!\n\n\n\nInstalling R packages\nYou can install R packages as usual with install.packages() and related functions: these will automatically be installed in your default personal library somewhere in your Home directory."
  },
  {
    "objectID": "posts/S08E11_OSC/index.html#footnotes",
    "href": "posts/S08E11_OSC/index.html#footnotes",
    "title": "Accessing and using R at the Ohio Supercomputer Center (OSC)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n But we don‚Äôt have to pay anything for educational projects like this one. Otherwise, for OSC‚Äôs rates for academic research, see this page.‚Ü©Ô∏é\nThough this is not meant for large (&gt;1 GB) transfers. Different methods are available ‚Äî we‚Äôll talk about those later on.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#introduction",
    "href": "posts/S06E06_website_06/index.html#introduction",
    "title": "Quarto website 6: Quarto features",
    "section": "1 Introduction",
    "text": "1 Introduction\nThe source documents for your website‚Äôs pages are in the Quarto (.qmd) format. Today, we will learn more about options to format Quarto documents, and to include code and its output.\nAs we have mentioned before, Quarto is a type of Markdown format (and essentially the successor to ‚ÄúR Markdown‚Äù) with extensions such as:\n\nMaking it possible to include executable code and its results. This code will typically be R code, but Quarto also supports Python, for instance.\nA more extensive set of built-in formatting options, like ‚Äúcallout boxes‚Äù and ‚Äútabsets‚Äù, which we‚Äôll see today.\n\nYour website‚Äôs Quarto documents will all produce HTML output, and this is also the default (and generally preferred) output format for stand-alone Quarto documents, but it is also possible to output to Word and PDF formats.\nA common use case for stand-alone Quarto documents is a digital notebook or report that includes results produced by R code. If you use R to produce some results and/or figures that you need to share or compile with accompanying notes, then using Quarto to do so is a lot easier, more robust, and reproducible than copying and pasting figures into (e.g.) a Powerpoint document.\nBecause it‚Äôs straightforward to make the output look polished, and because you can include citations too, it is also a good option for more formal reports and even manuscripts. As mentioned last week, you can also output a slide deck, and it is even possible to include these directly on your website since the output format for slides can be HTML.\nWe will continue to use RStudio‚Äôs Visual Editor, and will basically make our way through the options in the bar that is right above your main editor window (but only when you‚Äôre in ‚ÄúVisual‚Äù mode):\n\n\n\n\n\n\n1.1 Creating a document for practice\nI will start by creating a new Quarto document to practice using these features. If you want to follow along:\n\nIn RStudio, click ‚ÄúFile‚Äù =&gt; ‚ÄúNew File‚Äù =&gt; ‚ÄúQuarto Document‚Äù.\nCheck the box ‚ÄúUse visual markdown editor‚Äù, and optionally add a Title and an Author."
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#sec-introduction",
    "href": "posts/S06E06_website_06/index.html#sec-introduction",
    "title": "Quarto website 6: Quarto features",
    "section": "2 Basic formatting",
    "text": "2 Basic formatting\n\n2.1 Options from the ‚ÄúFormat‚Äù dropdown menu\nThe following options are available under the ‚ÄúFormat‚Äù dropdown:\n\n‚ÄúCode‚Äù formatting looks like this and can be used for e.g.¬†code snippets, file names, and software names.\nBold, italic, underlined, Strikeout, superscript, subscript , small caps (some of these are under the ‚ÄúText‚Äù subheading)\nBullet lists and numbered lists, which can optionally be in a ‚Äútight‚Äù layout: press the ‚Ä¶ at the top-right.\n\nWithin a list, you can have an ‚ÄúItem Checkbox‚Äù to make a checklist‚Ä¶\n‚Ä¶and these boxes can be checked.\n\n‚ÄúBlockquotes‚Äù, which can be used to provide a quote or even to highlight a bit of text in a different format:\n\n\n‚ÄúBlockquotes are great‚Äù ‚Äî J. Doe\n\nSeveral of these items are also present as separate buttons directly in the top bar.\n\n\n\n2.2 Headers\nThe dropdown menu to the left of the bullet list icon (it will say ‚ÄúNormal‚Äù unless you‚Äôre cursor is on a header line) allows you to pick a header level as opposed to the default, ‚ÄúNormal‚Äù formatting for your focal paragraph. Recall that headers will:\n\nBe numbered if you use the YAML option number-sections: true either site-wide (in _quarto.yml) or at the top of your focal document\nShow up in a Table of Contents if you use the YAML option toc: true.\nBy default have ‚Äúanchors‚Äù that you can see when you hover over or near them in the output. Clicking on an anchor will give you a direct link to this section in your document.\n\n\n\n\n\n\n\nCross-references\n\n\n\nYou can use regular hyperlinks (see below) to refer to different pages and specific headers on your website. Additionally, it is possible to insert clickable cross-references to e.g.¬†figures and tables ‚Äî see these Quarto docs.\n\n\n\n\n\n2.3 Options from the ‚ÄúInsert‚Äù dropdown\n\n‚ÄúLink‚Äù to include a clickable link with custom text.\nFootnote1, which shows up as a superscripted number in the main text, with the full footnote printed at the bottom of the page. Best of all, you can also hover over the superscripted number to see the footnote text.\n‚ÄúSpecial characters‚Äù =&gt; ‚ÄúInsert Emoji‚Äù =&gt; ü§ì.\n‚ÄúHorizontal rule‚Äù, which can be nice to break up your content:"
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#citations",
    "href": "posts/S06E06_website_06/index.html#citations",
    "title": "Quarto website 6: Quarto features",
    "section": "3 Citations",
    "text": "3 Citations\nAddings citations is also possible via the ‚ÄúInsert‚Äù drop-down menu. Any citation you add will be automatically included in a reference list at the bottom of the document! In the text, the citation will show up as a link to the reference list and you can also hover over the link to see the full reference: (M. Horst, Presmanes Hill, and B. Gorman 2022).\n\n\n\nA reference list is automatically added to the end of the document\n\n\nThis is a really nice feature that benefits a lot from the RStudio Visual Editor. Without the Visual Editor, you‚Äôll have to make a text file yourself with all the information for each reference (a bibliography in BibTex (.bib) format) ‚Äî this can be exported from your reference manager, but that‚Äôs still a hassle because you often add citations one-by-one to a piece of text. With the Visual Editor, you can search for references online and when you include a reference:\n\nIt will be automatically saved in a bibliography file.\nWhen adding your first citation, the following line will be automatically added to the YAML header of your Quarto document: bibliography: references.bib. This line will make sure a reference list is added to the end of the document.\n\nIf you have Zotero installed on your computer, then your Zotero library will be automatically available. Otherwise, you can search for references in several ways, as shown by the following screenshots:\n\nCrossRef searchDOI searchZotero library\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo format your citations, both in terms of how they appear in the text and in your reference list, see this Quarto documentation page.\n\n\nYour turn: Try to use some of the features discussed above\n\nIf you didn‚Äôt already do so, it probably makes sense to create a new Quarto document for this experimentation.\nAfter you‚Äôve used a couple of features, switch from ‚ÄúVisual‚Äù to ‚ÄúSource‚Äù editor mode, and check what the syntax is for these features!"
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#sec-chunks",
    "href": "posts/S06E06_website_06/index.html#sec-chunks",
    "title": "Quarto website 6: Quarto features",
    "section": "4 Code blocks and chunks",
    "text": "4 Code blocks and chunks\nBoth under the ‚ÄúFormat‚Äù and ‚ÄúInsert‚Äù drop-down menus, you can find the ‚ÄúCode block‚Äù item, which will insert a block (one or more lines) of code-formatted text ‚Äî but code in this type of block will not be executed. When the pop-up window asks you to type the name of a language, you can type ‚ÄúR‚Äù, but this information is only used for code formatting purposes. These kind of blocks can be useful if you just want to demonstrate/explain some code:\nx &lt;- 5\nx * 6\nBy contrast, the ‚ÄúExecutable Cell‚Äù item (again, choose ‚ÄúR‚Äù as the language) will produce blocks also known as ‚ÄúCode Chunks‚Äù, which contain code that can be executed. By default, the code will in fact be executed and its results (if any) will be printed below the code chunk:\n\nx &lt;- 5\nx * 6\n\n[1] 30\n\n\nBecause code output consisting of just a number is a little boring, let‚Äôs insert a chunk with the following code, which will produce a plot ‚Äî and that plot will similarly be shown below the code as follows:\n\nlibrary(ggplot2)\nggplot(data = iris,\n       mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_point()\n\n\n\n\n‚Ä¶Or a chunk that produces a simple table: in this case, simply the first lines of the iris dataframe. This dataframe output will display as shown below (which is a little nicer than the default formatting) when you include a line df-print: kable in the YAML header of your document:\n\nhead(iris)\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguring code chunk behavior\n\n\n\nDefault behaviors for code chunks are to print the code (echo: true), to execute the code (eval: true), and to show the output produced by the code (output: true), including any warnings produced by the code (warning: true).\nAny of these can be changed both at a website-wide or document-wide level, as well as at the level of individual code chunks (the latter would override the former).\nTo change settings at the site or document-level, use the execute key in your YAML file or header (see these Quarto docs) ‚Äî in the example below, we turn off printing of the code itself as well of any warnings that the code might produce:\nexecute:\n  echo: false\n  warning: false\nTo change settings for an individual chunk, the same YAML keys like echo can be used, but in special comment lines (with #| prefixes) at the start of a code chunk:\n\n\n\n\n\nA really useful option is to ‚Äúfold‚Äù the code by using code-fold: true in the YAML header. That way, code will not be shown by default, but can be shown for each individual code chunk by unfolding it. This is great when you want to emphasize your results, but do want make the underlying code available to anyone who might be interested.\nFor example, for the plot we produced above, if we set code-folding to true, it would produce a box like this above the plot ‚Äî and clicking on that box would then show the code:"
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#figures-and-tables",
    "href": "posts/S06E06_website_06/index.html#figures-and-tables",
    "title": "Quarto website 6: Quarto features",
    "section": "5 Figures and Tables",
    "text": "5 Figures and Tables\n\n5.1 Figures / images\nAbove, we saw that we can create plots and include them in the document. Of course, we can also include figures made elsewhere, or photos, etc ‚Äî and you have probably already done this for your website. When inserting a figure (e.g.¬†by clicking the picture icon in the top bar), you can for example include a caption and specify how you want it aligned:\n\n\n\n\n\nSomewhat oddly, the options for the figure size only show up once you‚Äôve clicked OK to insert the figure ‚Äî you‚Äôll see this box below the figure:\n\n\n\n\n\nThere are different ways/units to size the figure: I prefer ‚Äú%‚Äù, which will allow you to specify the width in percentage of the total page (or focal box) width, as shown above.\n\n\n5.2 Tables\nWhen Clicking ‚ÄúInsert Table‚Äù in the ‚ÄúTable‚Äù dropdown menu in the top bar, you‚Äôll get a pop-up to create a table, similar to how this works in Word:\n\n\n\n\n\nThis will produce a table skeleton like the one shown below, which you can then fill out:\n\n\n\n\n\nHere is an example of what a rendered table will look like, with previous Code Club sessions this semester:\n\nTable 1: Previous Code Club sessions\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS06E01\nAug 28\nJess\nQuarto website 1: Initiating a website\n\n\nS06E02\nSep 11\nJelmer\nQuarto website 2: Adding a page & YAML formatting\n\n\nS06E03\nSept 18\nJess\nQuarto website 3: Deploying to GitHub\n\n\nS06E04\nSept 25\nJelmer\nQuarto website 4: Interacting with your repository\n\n\nS06E05\nOct 2\nJess\nQuarto website 5: Modifying your site\n\n\n\nThese tables are fairly basic in their appearance and there aren‚Äôt many simple formatting options. If you‚Äôd like fancy or even interactive tables, you are better off creating them in R with packages like gt, and then including them like we included part of the iris dataframe above."
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#other-options",
    "href": "posts/S06E06_website_06/index.html#other-options",
    "title": "Quarto website 6: Quarto features",
    "section": "6 Other options",
    "text": "6 Other options\n\n6.1 Tabsets\n‚ÄúTabsets‚Äù create a section with content spread across different ‚Äútabs‚Äù, kind of like tabs in your browser; you saw an example above, in the Citations section. Tabsets can help keep your document clear when you have many outputs, especially when there are alternative or mutually exclusive ways of showing something, like results from alternative statistical models you ran on your data, alternative ways of visualizing the same data, or installation instructions for different operating systems.\nWhen you click ‚ÄúInsert‚Äù =&gt; ‚ÄúTabset‚Ä¶‚Äù, you can first enter names for two or more tabs, and doing this will also determine how many tabs you‚Äôll get (up to 6):\n\n\n\n\n\nThen, inside the gray box, below each header that was created for each tab name, you can enter any content that will show up in each tab:\n\n\n\n\n\nAnd here is what the output for the above setup would look like:\n\nSepal length vs sepal widthSepal length vs petal length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.2 Callouts\nSo-called ‚ÄúCallouts blocks‚Äù are boxes that we regularly use on the Code Club website, like the ones shown below:\n\n\n\n\n\n\nExample of a ‚Äútip‚Äù callout box\n\n\n\nThis tip will help you make the most of your life\n\n\n\n\n\n\n\n\nExample of a ‚Äúwarning‚Äù callout box\n\n\n\nThis warning will help you avoid blowing up your computer\n\n\nWhen you click ‚ÄúInsert‚Äù =&gt; ‚ÄúCallout..‚Äù, you can select one of the five types of available Callouts, which only differ in their colors and the symbol in the header (see these Quarto docs).\n\n\n\n6.3 Miscellaneous\n\nIn your Quarto document, rather than finding a formatting feature in the top bar, you can press / to see a list of features you can insert, which you can subset by typing some text:\n\n\n\n\n\n\n\nAs is true for any Markdown format, you can directly include any HTML code/tags, like &lt;br&gt; to insert an empty line (i.e., to add vertical white space ‚Äî see the box below) or &lt;kbd&gt;Enter&lt;/kbd&gt; to make text appear formatted as keyboard keys.\n\n\n\n\n\n\n\nWhitespace in Markdown\n\n\n\nIn all Markdown flavors, including Quarto, whitespace is dealt with differently than you may be used to:\n\nIf you leave multiple spaces between words, those will be collapsed to a single space.\nIf you type on a new line without creating a new paragraph (in the Visual Editor, that would actually require you to use Shift+Enter, since Enter will start a new paragraph), the output would still be on the same line.\nIf you leave multiple blank lines between paragraphs, these will be collapsed to a single blank (half-)line. Therefore, if you want to add additional vertical whitespace, use the HTML tag &lt;br&gt;.\n\n\n\n\n\nYour turn: Again, try to use some of the features discussed above\n\nIf you have time after trying some of the features we discussed, then read about ways of manipulating code chunk behavior in the box at the end of Section¬†4, and try some of them."
  },
  {
    "objectID": "posts/S06E06_website_06/index.html#footnotes",
    "href": "posts/S06E06_website_06/index.html#footnotes",
    "title": "Quarto website 6: Quarto features",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAfter reading this footnote, you‚Äôll be exceptionally well-informed‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#introduction",
    "href": "posts/S07E07_tidy_02/index.html#introduction",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of last week\nLast week, Jess introduced us to to the tidyverse, a collection of packages to facilitate doing data science with R, including data manipulation and visualization.\nWe saw two general properties of the tidyverse: that it has a strong focus on data frames and that operations are usually connected using the ‚Äúpipe‚Äù (|&gt;) operator.\nWe also learned about two key functions from the tidyverse‚Äôs dplyr package:\n\nfilter() to pick rows (which typically represent observations/samples/individuals)\nselect() to pick columns (which typically represent variables/properties)\n\n\n\nLearning objectives for today\nWe will continue learning about dplyr:\n\nAn overview of key dplyr functionality\nSorting data frame rows with arrange()\nRenaming data frame columns with rename()\nAdding and manipulating data frame columns with mutate()\n\nLike last week, we will practice with the diamonds dataframe that is automatically loaded along with the tidyverse.\n\n\nSetting up\nLoad the tidyverse:\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.3     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.4     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\nStill need to install the tidyverse? Click here for instructions\n\n\n\n\n\n\ninstall.packages(\"tidyverse\")"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#overview-of-key-dplyr-functionality",
    "href": "posts/S07E07_tidy_02/index.html#overview-of-key-dplyr-functionality",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "2 Overview of key dplyr functionality",
    "text": "2 Overview of key dplyr functionality\nFunctions from the dplyr package have the following commonalities:\n\nThe first argument is always a data frame (this makes them pipe-friendly)\nSubsequent arguments typically describe which columns to operate on\nThe output is always a data frame\n\n\nKey functions for row-wise operations include:\n\nfilter() ‚Äî picks rows based on values in one or more columns (last week)\narrange() ‚Äî orders rows based on values in selected columns (this week)\n\nKey functions for column-wise operations include:\n\nselect() ‚Äî picks columns (last week)\nrename() ‚Äî changes column names (this week)\nmutate() ‚Äî creates new columns and changes the values of columns (this week)\n\nKey functions for groups of rows include:\n\nsummarise() ‚Äî collapses a group into a single row with the purpose of summarizing data\n\nFinally, there are functions to combine multiple data frames (joins, with for example inner_join()).\n\nThis week, we will cover the remaining functions listed above for row- and column-wise operations. In subsequent sessions, we will cover the more complex summarizing and joining functions.\n\n\n\n\n\n\nThe tidyr package contains additional data wrangling functions\n\n\n\nThere is a separate core tidyverse package (tidyr) with closely related functions that can ‚Äúreshape‚Äù (‚Äúpivot‚Äù) data frames between wider and longer formats ‚Äî we will also cover those in a later dedicated Code Club session."
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#sorting-with-arrange",
    "href": "posts/S07E07_tidy_02/index.html#sorting-with-arrange",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "3 Sorting with arrange()",
    "text": "3 Sorting with arrange()\nThe arrange() function is like the sort function in Excel: it changes the order of the rows based on the values in one or more columns. For example, you might want to sort entries by their cost or size, or by their names in alphabetical order.\nWe‚Äôll see a first example using the diamonds data frame. Keep in mind that in this data frame, each row represents a single diamond, and the columns provide different pieces of information about a diamond:\n\n# Note the initial order in the 'carat' column:\nhead(diamonds)\n\n# A tibble: 6 √ó 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n\n\nTherefore, sorting this data frame means rearranging the order of the diamonds based on their properties ‚Äî in the example below, based on the carat of the diamond:\n\n# Now, we'll sort by the values in the 'carat' column:\ndiamonds |&gt;\n  arrange(carat)\n\n# A tibble: 53,940 √ó 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n 2   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26\n 3   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24\n 4   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32\n 5   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28\n 6   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 \n 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33\n 8   0.2 Ideal     D     VS2      61.5    57   367  3.81  3.77  2.33\n 9   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36\n10   0.2 Ideal     E     VS2      62.2    57   367  3.76  3.73  2.33\n# ‚Ñπ 53,930 more rows\n\n\n\nAs you can see, there are many rows with the same, smallest value of carat, so we may be interested in sorting by an additional column, which will break the ties in our first sorting column:\n\n# Sort first by carat, then by cut:\ndiamonds |&gt;\n  arrange(carat, cut)\n\n# A tibble: 53,940 √ó 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1   0.2 Very Good E     VS2      63.4    59   367  3.74  3.71  2.36\n 2   0.2 Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n 3   0.2 Premium   E     VS2      59.8    62   367  3.79  3.77  2.26\n 4   0.2 Premium   E     VS2      59      60   367  3.81  3.78  2.24\n 5   0.2 Premium   E     VS2      61.1    59   367  3.81  3.78  2.32\n 6   0.2 Premium   E     VS2      59.7    62   367  3.84  3.8   2.28\n 7   0.2 Premium   F     VS2      62.6    59   367  3.73  3.71  2.33\n 8   0.2 Premium   D     VS2      62.3    60   367  3.73  3.68  2.31\n 9   0.2 Premium   D     VS2      61.7    60   367  3.77  3.72  2.31\n10   0.2 Ideal     E     VS2      59.7    55   367  3.86  3.84  2.3 \n# ‚Ñπ 53,930 more rows\n\n\n\n\n\nQuestion: Does the resulting order of entries in the cut column make sense to you? If not, what might be going on? (Click to see the solution)\n\nClearly, the order is not alphabetical, but it could be so in descending order ‚Äî though this is not in fact the case.\nAs we briefly saw last week, the cut column (as well as the color and clarity columns) are of the ‚Äúordered factor‚Äù type: therefore, when we sort by this column, the order as initially defined by whoever created this data frame will be respected:\n\nhead(diamonds$cut)\n\n[1] Ideal     Premium   Good      Premium   Good      Very Good\nLevels: Fair &lt; Good &lt; Very Good &lt; Premium &lt; Ideal\n\n\nThis also implies that there are no 0.2-carat (the lowest value) diamonds with Fair or Good cuts, because the first-listed and therefore lowest cut was Very Good.\n\n\nBy default, the sorting is done in ascending order (small-to-big), as you probably expected. But of course we may sometimes want to sort in descending (big-to-small) order, which we can do with the desc() helper function:\n\n# Sort first by carat, then by price:\ndiamonds |&gt;\n  arrange(desc(carat))\n\n# A tibble: 53,940 √ó 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  5.01 Fair      J     I1       65.5    59 18018 10.7  10.5   6.98\n 2  4.5  Fair      J     I1       65.8    58 18531 10.2  10.2   6.72\n 3  4.13 Fair      H     I1       64.8    61 17329 10     9.85  6.43\n 4  4.01 Premium   I     I1       61      61 15223 10.1  10.1   6.17\n 5  4.01 Premium   J     I1       62.5    62 15223 10.0   9.94  6.24\n 6  4    Very Good I     I1       63.3    58 15984 10.0   9.94  6.31\n 7  3.67 Premium   I     I1       62.4    56 16193  9.86  9.81  6.13\n 8  3.65 Fair      H     I1       67.1    53 11668  9.53  9.48  6.38\n 9  3.51 Premium   J     VS2      62.5    59 18701  9.66  9.63  6.03\n10  3.5  Ideal     H     I1       62.8    57 12587  9.65  9.59  6.03\n# ‚Ñπ 53,930 more rows\n\n\n\n\n\n\n\n\nSaving the output?\n\n\n\nIn the examples above, and in all of today‚Äôs examples and exercises, we are simply printing the output data frame. This means that we are leaving the original data frame diamonds unchanged and that we are not storing our results elsewhere either.\nRecall that you can assign to a new dataframe as one way to store your results:\n\ndiamonds_sorted &lt;- diamonds |&gt;\n  arrange(carat)"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#renaming-columns-with-rename-and-select",
    "href": "posts/S07E07_tidy_02/index.html#renaming-columns-with-rename-and-select",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "4 Renaming columns with rename() (and select())",
    "text": "4 Renaming columns with rename() (and select())\nIt is pretty common that you are not happy with the names of columns in your data frame and want to rename one or more. This can be done with the rename() function, which uses the syntax &lt;new-name&gt; = &lt;old-name&gt;:\n\n# Below, we rename the 'x' column to 'length', and the 'y' column to 'width':\ndiamonds |&gt;\n  rename(length = x, width = y)\n\n# A tibble: 53,940 √ó 10\n   carat cut       color clarity depth table price length width     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326   3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326   3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327   4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334   4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335   4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336   3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336   3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337   4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337   3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338   4     4.05  2.39\n# ‚Ñπ 53,930 more rows\n\n\nAs an aside, it is also possible rename the columns that you pick with the select() function:\n\ndiamonds |&gt;\n  select(length = x, width = y, z)\n\n# A tibble: 53,940 √ó 3\n   length width     z\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1   3.95  3.98  2.43\n 2   3.89  3.84  2.31\n 3   4.05  4.07  2.31\n 4   4.2   4.23  2.63\n 5   4.34  4.35  2.75\n 6   3.94  3.96  2.48\n 7   3.95  3.98  2.47\n 8   4.07  4.11  2.53\n 9   3.87  3.78  2.49\n10   4     4.05  2.39\n# ‚Ñπ 53,930 more rows\n\n\n\n\n\n\n\n\n\nNeed to rename many columns?\n\n\n\nIf your data frame has many columns that need to be renamed, the janitor::clean_names() function provides automated column name cleaning that can be extremely handy.\nFor example, you might read in an Excel sheet with 20 columms, many of which have spaces in their names, and some of which have other special characters like % or &. Those kinds of column names don‚Äôt play well with R, and clean_names() would automatically replace such characters with (by default) underscores (_).\nYou can try this function in the last Bonus exercise."
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#exercises-i",
    "href": "posts/S07E07_tidy_02/index.html#exercises-i",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "5 Exercises I",
    "text": "5 Exercises I\n\n5.1 Renaming\nAbove, we renamed the cryptically named x and y columns, but there‚Äôs a third single-letter column name: z.\n\nCheck the help for this data frame by typing ?diamonds, and figure out what the z column represents.\nRename the z column to give it a more descriptive name like we did above for x and y. (You may run into a problem here! If so, try to understand and resolve it.)\n\n\n\nSolution (click here)\n\n\nThe z column represents the depth of the diamond in mm:\n\n\n?diamonds\n\n# The output will include:\n\nz\n    depth in mm (0‚Äì31.8)\n\ndepth\n    total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43‚Äì79)\n\n\nSo let‚Äôs try to rename it to depth:\n\n\ndiamonds |&gt;\n  rename(depth = z)\n\nError in `rename()`:\n! Names must be unique.\n‚úñ These names are duplicated:\n  * \"depth\" at locations 5 and 10.\n\n\nOuch! That didn‚Äôt work, because a column named depth already exists, and column names must be unique. That other depth column is the diamond‚Äôs ‚Äútotal depth percentage‚Äù rather than the raw depth.\nThere‚Äôs no one right way to resolve this (and of course one option would be to refrain from renaming z altogether), but we could for example use depth_mm etc. notations for these columns:\n\ndiamonds |&gt;\n  rename(length_mm = x, width_mm = y, depth_mm = z)\n\n# A tibble: 53,940 √ó 10\n   carat cut       color clarity depth table price length_mm width_mm depth_mm\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43\n 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31\n 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31\n 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63\n 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47\n 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53\n 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49\n10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39\n# ‚Ñπ 53,930 more rows\n\n\n\n\n\n\n5.2 Arranging\nSee the prices (and other properties) of the most expensive diamonds in the data frame by using the arrange() function like we did above.\n\n\nSolution (click here)\n\nTo see the most expensive (highest-priced) diamond first, we‚Äôll have to arrange by the price column in descending order:\n\ndiamonds |&gt;\n  arrange(desc(price))\n\n# A tibble: 53,940 √ó 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16\n 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04\n 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56\n 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11\n 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01\n 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24\n 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84\n 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91\n 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 \n10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21\n# ‚Ñπ 53,930 more rows"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#manipulating-with-mutate",
    "href": "posts/S07E07_tidy_02/index.html#manipulating-with-mutate",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "6 Manipulating with mutate()",
    "text": "6 Manipulating with mutate()\nLet‚Äôs take a look at the official mutate() documentation figure (üòõ):\n\n\n\nIllustration by Allison Horst\n\n\nIt says ‚Äúadd column(s), keep existing‚Äù and shows that a third column, C, is being added to a data frame.\n\n\nWhat do the values in column C appear to represent (compare with A and B)? (Click for the solution)\n\nColumn C appears to be columns A + B, e.g in the first row, 1 + 2 = 3.\n\nLet‚Äôs try to do something similar ‚Äìcreating a new column that is based on the values of other columns‚Äì with diamond dimensions. We‚Äôll add a column named volume that is generated by multiplying the length, width, and depth columns:\n\n# (I'm first using select just to limit the output that is printed)\ndiamonds |&gt;\n  select(x, y, z) |&gt;\n  mutate(volume = x * y * z)\n\n# A tibble: 53,940 √ó 4\n       x     y     z volume\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1  3.95  3.98  2.43   38.2\n 2  3.89  3.84  2.31   34.5\n 3  4.05  4.07  2.31   38.1\n 4  4.2   4.23  2.63   46.7\n 5  4.34  4.35  2.75   51.9\n 6  3.94  3.96  2.48   38.7\n 7  3.95  3.98  2.47   38.8\n 8  4.07  4.11  2.53   42.3\n 9  3.87  3.78  2.49   36.4\n10  4     4.05  2.39   38.7\n# ‚Ñπ 53,930 more rows\n\n\nAs you could see in above examples, the operation is executed in a (vectorized) row-wise fashion: the volume that we see in the first row was created by multiplying x, y and z in the first row, and so on.\nAlso note that the new column created by mutate() is (by default) added as the last column.\n\n\nInstead of creating a new column with mutate(), it is also possible to simply change the values in a column (without creating a new column) by assigning back to the same column name. For example, say that we wanted diamond length to be in cm instead of in mm:\n\ndiamonds |&gt;\n  select(x, y, z) |&gt;\n  mutate(x = x / 10)\n\n# A tibble: 53,940 √ó 3\n       x     y     z\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 0.395  3.98  2.43\n 2 0.389  3.84  2.31\n 3 0.405  4.07  2.31\n 4 0.42   4.23  2.63\n 5 0.434  4.35  2.75\n 6 0.394  3.96  2.48\n 7 0.395  3.98  2.47\n 8 0.407  4.11  2.53\n 9 0.387  3.78  2.49\n10 0.4    4.05  2.39\n# ‚Ñπ 53,930 more rows"
  },
  {
    "objectID": "posts/S07E07_tidy_02/index.html#exercises-ii",
    "href": "posts/S07E07_tidy_02/index.html#exercises-ii",
    "title": "Tidyverse 2: More dplyr Data Wrangling",
    "section": "7 Exercises II",
    "text": "7 Exercises II\n\n7.1 More unit conversion\nAbove, we converted the diamond lengths (column x) from mm to cm.\n\nExpand on that code to convert all three dimension columns (x, y, and, z).\nAlso give the converted columns names that indicate the measurements are in cm.\n\n\n\nSolution so far (click here)\n\nSeveral naming schemes are reasonable, but I will use length_cm etc:\n\ndiamonds |&gt;\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10)\n\n# A tibble: 53,940 √ó 13\n   carat cut       color clarity depth table price     x     y     z length_cm\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43     0.395\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31     0.389\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31     0.405\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63     0.42 \n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75     0.434\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48     0.394\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47     0.395\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53     0.407\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49     0.387\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39     0.4  \n# ‚Ñπ 53,930 more rows\n# ‚Ñπ 2 more variables: width_cm &lt;dbl&gt;, depth_cm &lt;dbl&gt;\n\n\n\n\n\nNext, expand your ‚Äúpipeline‚Äù to either remove the columns with mm measurements, or rename the original x, y, and z columns to clarify that those are in mm.\n\n\n\nHint: how to remove specific columns with select() (click here)\n\nIf you just want to remove one or a few columns from a data frame with many columns, you‚Äôd want to be able to directly mark them for removal (rather than listing all columns you want to keep), which you can do as follows:\n\n# This will remove the carat and cut columns:\ndiamonds |&gt;\n  select(-carat, -cut)\n\n# A tibble: 53,940 √ó 8\n   color clarity depth table price     x     y     z\n   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 E     SI2      61.5    55   326  3.95  3.98  2.43\n 2 E     SI1      59.8    61   326  3.89  3.84  2.31\n 3 E     VS1      56.9    65   327  4.05  4.07  2.31\n 4 I     VS2      62.4    58   334  4.2   4.23  2.63\n 5 J     SI2      63.3    58   335  4.34  4.35  2.75\n 6 J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7 I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8 H     SI1      61.9    55   337  4.07  4.11  2.53\n 9 E     VS2      65.1    61   337  3.87  3.78  2.49\n10 H     VS1      59.4    61   338  4     4.05  2.39\n# ‚Ñπ 53,930 more rows\n\n\n\n\n\nFull solution (click here)\n\n\nOption 1 ‚Äî remove the columns with mm measurements:\n\n\n# (Note that the final 2 added columns are hidden in the output!)\ndiamonds |&gt;\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10) |&gt;\n  select(-x, -y, -z)\n\n# A tibble: 53,940 √ó 10\n   carat cut       color clarity depth table price length_cm width_cm depth_cm\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326     0.395    0.398    0.243\n 2  0.21 Premium   E     SI1      59.8    61   326     0.389    0.384    0.231\n 3  0.23 Good      E     VS1      56.9    65   327     0.405    0.407    0.231\n 4  0.29 Premium   I     VS2      62.4    58   334     0.42     0.423    0.263\n 5  0.31 Good      J     SI2      63.3    58   335     0.434    0.435    0.275\n 6  0.24 Very Good J     VVS2     62.8    57   336     0.394    0.396    0.248\n 7  0.24 Very Good I     VVS1     62.3    57   336     0.395    0.398    0.247\n 8  0.26 Very Good H     SI1      61.9    55   337     0.407    0.411    0.253\n 9  0.22 Fair      E     VS2      65.1    61   337     0.387    0.378    0.249\n10  0.23 Very Good H     VS1      59.4    61   338     0.4      0.405    0.239\n# ‚Ñπ 53,930 more rows\n\n\n\nOption 2 ‚Äî also keep the cm columns, but rename them:\n\n\ndiamonds |&gt;\n  mutate(length_cm = x / 10,\n         width_cm = y / 10,\n         depth_cm = z / 10) |&gt;\n  rename(length_mm = x,\n         width_mm = y,\n         depth_mm = z)\n\n# A tibble: 53,940 √ó 13\n   carat cut       color clarity depth table price length_mm width_mm depth_mm\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326      3.95     3.98     2.43\n 2  0.21 Premium   E     SI1      59.8    61   326      3.89     3.84     2.31\n 3  0.23 Good      E     VS1      56.9    65   327      4.05     4.07     2.31\n 4  0.29 Premium   I     VS2      62.4    58   334      4.2      4.23     2.63\n 5  0.31 Good      J     SI2      63.3    58   335      4.34     4.35     2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336      3.94     3.96     2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336      3.95     3.98     2.47\n 8  0.26 Very Good H     SI1      61.9    55   337      4.07     4.11     2.53\n 9  0.22 Fair      E     VS2      65.1    61   337      3.87     3.78     2.49\n10  0.23 Very Good H     VS1      59.4    61   338      4        4.05     2.39\n# ‚Ñπ 53,930 more rows\n# ‚Ñπ 3 more variables: length_cm &lt;dbl&gt;, width_cm &lt;dbl&gt;, depth_cm &lt;dbl&gt;\n\n\n\n\n\n\n7.2 Price per carat\nInclude the following steps in a single ‚Äúpipeline‚Äù:\n\nAdd a new column with the price per carat, rounded to whole dollars.\nSort by price per carat in descending order\nOnly keep diamonds with a price per carat above $5,000.\n\nWhat is the highest price per carat, and how many diamonds are you left with?\n\n\nSolution (click here)\n\nWe are left with 13,115 rows and the highest price per carat is $17,829:\n\ndiamonds |&gt;\n  mutate(price_per_carat = round(price / carat)) |&gt;\n  arrange(desc(price_per_carat)) |&gt; \n  filter(price_per_carat &gt; 5000)\n\n# A tibble: 13,115 √ó 11\n   carat cut   color clarity depth table price     x     y     z price_per_carat\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;\n 1  1.04 Very‚Ä¶ D     IF       61.3    56 18542  6.53  6.55  4.01           17829\n 2  1.07 Prem‚Ä¶ D     IF       60.9    58 18279  6.67  6.57  4.03           17083\n 3  1.03 Ideal D     IF       62      56 17590  6.55  6.44  4.03           17078\n 4  1.07 Very‚Ä¶ D     IF       60.9    58 18114  6.57  6.67  4.03           16929\n 5  1.02 Very‚Ä¶ D     IF       61.7    59 17100  6.42  6.52  3.99           16765\n 6  1.07 Very‚Ä¶ D     IF       59      59 17909  6.63  6.72  3.94           16737\n 7  1.09 Very‚Ä¶ D     IF       61.7    58 18231  6.55  6.65  4.07           16726\n 8  1    Ideal D     IF       60.7    57 16469  6.44  6.48  3.92           16469\n 9  1    Very‚Ä¶ D     IF       63.3    59 16073  6.37  6.33  4.02           16073\n10  1.01 Prem‚Ä¶ D     IF       61.6    56 16234  6.46  6.43  3.97           16073\n# ‚Ñπ 13,105 more rows\n\n\n\n\n\n\n7.3 Bonus: Renaming columns with janitor::clean_names()\n\nInstall and then load the package janitor.\n\n\n\nSolution (click here)\n\n\nInstall:\n\n\ninstall.packages(\"janitor\")\n\n\nLoad:\n\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\n\nRun the following code to create a ‚Äútibble‚Äù (tidyverse-style dataframe) with poor column names:\n\n\n# (The backticks ` around the column names are necessary to assign such unwieldy names)\nsale_stats &lt;- tibble(\n  `Abbreviated ID` = c(\"DZ\", \"GA\", \"PT\"),\n  `% Sold` = c(62, 98, 18),\n  `Nr Stored` = c(372, 13, 175),\n  `Lost&Found` = c(0, 0, 2)\n)\n\n\nPrint the sale_stats data frame and take a look at how the column names are shown.\n\n\n\nSolution (click here)\n\n\nsale_stats\n\n# A tibble: 3 √ó 4\n  `Abbreviated ID` `% Sold` `Nr Stored` `Lost&Found`\n  &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n1 DZ                     62         372            0\n2 GA                     98          13            0\n3 PT                     18         175            2\n\n\n\n\nRun the clean_names() function on the sale_stats data frame. (It will take a data frame as its first argument and return a dataframe, much like the dplyr functions we‚Äôve seen). Take a close look at the output ‚Äî can you spot at least 3 types of changes that it made?\n\n\n\nSolution (click here)\n\n\nsale_stats |&gt; clean_names()\n\n# A tibble: 3 √ó 4\n  abbreviated_id percent_sold nr_stored lost_found\n  &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 DZ                       62       372          0\n2 GA                       98        13          0\n3 PT                       18       175          2\n\n\nOr equivalently (output not shown):\n\nclean_names(sale_stats)\n\nThe clean_names() function made the following changes to the column names:\n\nSpaces were converted to underscores\nThe & was converted to an underscore\nThe % was converted to percent (!)\nUppercase (capital) letters were converted to lowercase"
  },
  {
    "objectID": "posts/S06E02_website_02/index.html",
    "href": "posts/S06E02_website_02/index.html",
    "title": "Quarto website 2",
    "section": "",
    "text": "In today‚Äôs session, you will add a new page to the website that you created in the first session.\nThen, we will talk about the ‚ÄúYAML‚Äù markup mini-language that is used to configure your website, and will make some changes to the YAML header for your new page and the YAML in the _quarto.yml file with site-wide settings."
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#adding-a-new-page-to-your-site",
    "href": "posts/S06E02_website_02/index.html#adding-a-new-page-to-your-site",
    "title": "Quarto website 2",
    "section": "1 Adding a new page to your site",
    "text": "1 Adding a new page to your site\nLet‚Äôs create a new page for your site. If you already have an idea for a page that you would like to add to your site, you can go with that. Otherwise, you can follow along with my example, which will be a page about research projects on a personal website.\nEach page on your website has a corresponding .qmd source document. Currently, we just have two pages:\n\nA home page, for which index.qmd is the source.\nAn ‚Äúabout page‚Äù, for which about.qmd is the source.\n\nSo, to create a new page, we will create a new Quarto document ‚Äî in RStudio, click File =&gt; New File =&gt; Quarto Document:\n\n\n\nThe window to create a new Quarto document\n\n\nUnlike last week, make sure the ‚ÄúUse visual markdown editor‚Äù box is checked, and then click the ‚ÄúCreate Empty Document‚Äù button in the bottom left.\nOnce the file has been created, let‚Äôs save it straight away: press Ctrl/Cmd+S. Save it in the top-level folder for your website, i.e.¬†the same folder that contains index.qmd and about.qmd. If you‚Äôre making a page for which you have your own ideas, you can name it accordingly ‚Äî otherwise, save it as research.qmd.\n\n\n\nYour near-empty document should look something like this\n\n\nThe newly created document will only contain a few lines, as shown in the screenshot above. This is the so-called ‚ÄúYAML header‚Äù.\nWe talked a bit about the YAML ‚Äúmarkup language‚Äù last week, mostly in the context of the _quarto.yml file, which consists only of YAML content, unlike this .qmd file. Let‚Äôs dive a little deeper into YAML, because it‚Äôs one of the key components of your website‚Äôs source."
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#a-little-more-about-yaml",
    "href": "posts/S06E02_website_02/index.html#a-little-more-about-yaml",
    "title": "Quarto website 2",
    "section": "2 A little more about YAML",
    "text": "2 A little more about YAML\nYAML (‚ÄúYAML Ain‚Äôt Markup Language‚Äù, a silly joke of a name) is a simple format commonly used for configuration. In the source files for your website, there is a lot of YAML content straight away.\nFirst, you have the _quarto.yml file that configures your website, including its navigation elements that are visible on every page of the site, like the ‚Äúnavbar‚Äù at the top. But there is also YAML in the headers of all .qmd files. For example, the top of our newly created research.qmd should read:\n---\ntitle: \"Untitled\"\n---\nAs opposed to the _quarto.yml file, this YAML header:\n\nIs surrounded by lines that only contain three dashes ---, that mark the beginning and the end of this YAML header.\nConfigures just this individual page, whereas the YAML in _quarto.yml specifies site-wide configurations.\n\n\nYAML consists of entries of key-value pairs: in the example above, title is the key that determines what the document‚Äôs title will be, and \"Untitled\" is the current value.\nValid YAML keys are limited to what has been pre-defined by others (i.e., in this case, the developers of Quarto), and the list of possible keys depends on the document type. The Quarto website has a full list of valid YAML keys for the _quarto.yml file as well as a a list for HTML pages, which is the kind of output that your .qmd files will produce when rendered.\nDepending on the key, the value can be:\n\nA ‚Äúfree-form string‚Äù of text, like for a title\nConstrained to a series of possible values, like for the theme key, which can set the overall look of a page to one of a few dozen available ‚Äúthemes‚Äù\nAn on/off switch using true/false, like whether to show a Table of Contents using the toc key.\n\n\n\n2.1 YAML‚Äôs structure\nYAML‚Äôs structure is quite simple, but it does have a few rules. Each entry is generally on its own line. It has a hierarchical structure in that many values can itself be given key-value pairs to specify additional options. For example, see this section from your _quarto.yml file:\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\nNote how the values for keys that simply take a value (above: theme, css, and toc) and have no ‚Äúchild keys‚Äù are on the same line as the key.\nIn contrast, keys whose values are really ‚Äúchild keys‚Äù (above: format and html):\n\nAre followed by a colon :\nAre on a line by themselves\nHave their child keys on the next line(s), indented one more level.\n\nIndentation in YAML has to use either two or four spaces (no tabs!) per indentation level, and YAML is sensitive to indentation errors. (Note that RStudio will by default insert multiple spaces instead of a true tab when you press the Tab key, so you can still use that just fine.)\n\n\n\n\n\n\n\nSite-wide vs.¬†page-specific configuration\n\n\n\nThis format =&gt; html section in the _quarto.yml file will set defaults for the formatting of individual pages on your website. You can use the same keys (e.g.¬†theme, css, and toc shown above) in the YAML header of your qmd files, which would override these site-wide settings.\n\n\n\nA final component of YAML syntax, with lists of entries, is used in the website section of _quarto.yml:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nHere, each entry (= each page on your website) is preceded by a dash -, and:\n\nThe top entry, for the homepage, has an href key pointing to the relevant file, as well as a text key (note: same indentation level, no additional dash) that will set what text is being displayed for this link.\nThe bottom entry uses an alternative specification method, with just a pointer to the file. When you do this, the displayed test on the website would be the same as the file name without the .qmd extension, namely ‚ÄúAbout‚Äù.\n\n\n\n\n\n\n\nYAML errors (Click to expand)\n\n\n\n\n\nIf you made a mistake in the YAML, you will see an ominous-looking box like this pop up:\n\n\n\nYou‚Äôll see this error if you specified an invalid key in your YAML. Don‚Äôt panic! If you don‚Äôt already know what‚Äôs wrong, carefully read the error which is quite informative."
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#modifying-the-yaml-header-of-our-new-page",
    "href": "posts/S06E02_website_02/index.html#modifying-the-yaml-header-of-our-new-page",
    "title": "Quarto website 2",
    "section": "3 Modifying the YAML header of our new page",
    "text": "3 Modifying the YAML header of our new page\nLet‚Äôs start by changing the page‚Äôs title to title: \"My Research\".\nThen, we can add a few new YAML entries to further populate the ‚Äútitle block‚Äù (top part) of your page:\n\nsubtitle: \"These are my ongoing and past research projects\"\ndate: 2023-09-11\nauthor: \"Lucy T. Hedgehog\", or for multiple authors, use the following syntax:\nauthor:\n  - Lucy T. Hedgehog\n  - Lucy T. Hedgehog's advisor \n\n\n\n\n\n\n\nYAML auto-complete and quoting (Click to expand)\n\n\n\n\n\n\nNote that when you type a new entry in the YAML header, RStudio will have an auto-completion feature with information boxes:\n\n\n\n\n\n\n\nIn the examples above, we have double-quoted (‚Äú‚Ä¶‚Äù) free-form YAML values like title. This is optional: as long as your title doesn‚Äôt contain any special characters, it would also work without quotes.\n\n\n\n\n\nHere are a few of the many other possible HTML page YAML keys that are particularly useful:\n\ndate-modified: If you wrote a page originally on a certain date, but made some modifications afterwards, you can get a separate date entry for the modifications. Useful for e.g.¬†blog posts and reports.\ntitle-block-banner: true: Put the title block (title and subtitle) in a ‚Äúbanner‚Äù by adding a background color.\nnumber-sections: true: Number sections (as determined using headers and their levels) hierarchically.\ntoc-location: Where the Table of Contents should show up ‚Äî one of left, right (default), or body"
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#exercises-i",
    "href": "posts/S06E02_website_02/index.html#exercises-i",
    "title": "Quarto website 2",
    "section": "4 Exercises I",
    "text": "4 Exercises I\n\nExperiment with YAML header options\n\nOn your new page:\n\nTry adding the title-block-banner and see if you like that kind of format.\nAdd a few headers of different levels (start with ‚ÄúHeader 2‚Äù, the title is basically the one level 1 header) ‚Äî you can do so by clicking the dropdown menu that will say Normal:\n\n\n\n\n\nTry turning on number-sections and play around with the toc-location (Your _quarto.yml has an entry toc: true, so a table of contents will by default be shown on very page)."
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#modifying-the-_quarto.yml-file",
    "href": "posts/S06E02_website_02/index.html#modifying-the-_quarto.yml-file",
    "title": "Quarto website 2",
    "section": "5 Modifying the _quarto.yml file",
    "text": "5 Modifying the _quarto.yml file\nAs mentioned above, the _quarto.yml file solely consists of YAML configurations, and these settings apply to the entire website.\nThe two most important ‚Äúsections‚Äù in this file are:\n\nwebsite, where we can control things like the site‚Äôs navigation elements that will show up on every page\nformat =&gt; html, where we can specify page-level formatting settings. Here, we can use the same YAML keys that we could use in the YAML header of our new page (and any other page), except that the settings will be applied across all pages on the site.\n\n\n\n5.1 The website section\nIn my example, this section currently reads as follows ‚Äì yours should be the same except for the title unless you did some customization yourself already:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nThe navbar key represents a navigation bar that is always shown across the top of the site, which should be a good default for most websites. But if you want a website navigation bar on the side, or combined top and side navigation (the latter is useful for sites with a lot of contents, and is used for example on Quarto‚Äôs own documentation website), this is possible: see Quarto‚Äôs Website Navigation docs.\nAny entries under the left key will be left-aligned on the navbar, i.e.¬†consecutive entries start on the left-hand side of the navbar, moving rightward with every added entry. We could also add right-aligned entries with a right key (see the exercise below).\n\n\n\n\n\n\nNavbar auto-collapse (Click to expand)\n\n\n\n\n\nIf the width of your viewing window is narrow (like it often is in RStudio‚Äôs ‚ÄúViewer‚Äù, as well as on phones), the navbar will be automatically collapsed into a ‚ÄúHamburger menu:‚Äù\n\n\n\n\n\n\n\n\n\nIf we want our new page to show up in the navbar, we‚Äôll have to add it as a new entry:\nwebsite:\n  title: \"Lucy's adventures in science\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n      - href: research.qmd\n        text: My Research\n\nSome other useful keys for the website section include (see this Quarto docs page for a full list):\n\nback-to-top-navigation (a child key of website): When set to true, this will show a ‚ÄúBack to top‚Äù button once you reach the bottom of a page.\nfavicon (a child key of website): A favicon is an icon or small image that shows up in your browser next to the name of the website, see the icons shown in screenshot:\n\n\n\n\n\n\n\nicon (a navbar entry like href and text): This will allow you to show an icon instead of (default for external links) or in addition to text (default for internal links) for a link in your navbar. See here for a list of available icons. For example:\n\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n        icon: house\n\n\n\n\n\n\n\n\n5.2 The html format section\nHere is what the format section of your _quarto.yaml should look like:\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nAs mentioned before, the configuration done in this section can use the same keys as those in the YAML header for individual pages, but the settings done in _quarto.yaml will apply across the entire website.\nFor now, we‚Äôll only talk about one key: theme. This will change the overall look of your website to a number of preset themes, each with different fonts and colors. While you can also completely customize your website‚Äôs look yourself, using one of these themes should work well for most of us.\nYou can see a visual list of available themes at https://bootswatch.com/. The default theme is cosmo, as you can see above. As an example, if we change Lucie‚Äôs website theme to lux:"
  },
  {
    "objectID": "posts/S06E02_website_02/index.html#exercises-ii",
    "href": "posts/S06E02_website_02/index.html#exercises-ii",
    "title": "Quarto website 2",
    "section": "6 Exercises II",
    "text": "6 Exercises II\n\nSite-wide configuration\n\nModify your _quarto.yml to configure your website. You can play around with whatever you prefer, but here are some suggestions:\n\nTry several different themes and pick one for your website.\nMove the navbar entry for the about.qmd page to the right-hand side.\nAdd one more icons to the Navbar, for example:\n\nAdd a link to your Twitter account and use the twitter icon\nIf you have one, add a link to your GitHub account and use the github icon\nAdd e.g.¬†a question mark icon to your About page link (search for one here).\nTake a look at the visual list of possible icons and see if there are some that you‚Äôd like to use.\n\nAdd a favicon for your website."
  },
  {
    "objectID": "posts/S09E07_maps_03/index.html",
    "href": "posts/S09E07_maps_03/index.html",
    "title": "Making maps in R: part III",
    "section": "",
    "text": "Today is the third and last of a series of Code Club sessions on making maps with R.\nIn the first session, we learned the basics of making and formatting maps with ggplot functions.\nIn the second session, we learned how to add markers/points and text to maps.\nToday, we will learn how to make maps‚Ä¶\n(While exploring this topic, I ended up making more material than we can cover so there is also some at-home reading bonus content covering detailed map backgrounds with ggmap, and county-level choropleth maps.)"
  },
  {
    "objectID": "posts/S09E07_maps_03/index.html#setting-up",
    "href": "posts/S09E07_maps_03/index.html#setting-up",
    "title": "Making maps in R: part III",
    "section": "1 Setting up",
    "text": "1 Setting up\n\nInstalling and loading R packages\nWe will start by loading (and if necessary, first installing) the packages that we also used in the past two weeks.\nRecall that we are using ggplot2 from the tidyverse to make maps, but that we also needs the maps and sf packages for some of the geospatial functions in ggplot2 to work ‚Äî and the maps package also contains some base maps data that we‚Äôve been using.\n\nif (! require(tidyverse)) install.packages(\"tidyverse\")\nif (! require(maps)) install.packages(\"maps\")\nif (! require(sf)) install.packages(\"sf\")\n\n\nlibrary(maps)\nlibrary(sf)\nlibrary(tidyverse)\n\nToday, we will additionally use:\n\nState-level statistics from the usdata (as in: US data) package\nThe mapview package to make interactive maps\nThe scico package for some new color palettes\nThe rebird package to access recent bird sightings from Ebird\n\n\nif (! require(scico)) install.packages(\"scico\")\nif (! require(usdata)) install.packages(\"usdata\")\nif (! require(mapview)) install.packages(\"mapview\")\nif (! require(rebird)) install.packages(\"rebird\")\n\n\nlibrary(scico)\nlibrary(usdata)\nlibrary(mapview)\nlibrary(rebird)\n\n\n\n\n\n\n\nNot shown above are start-up messages you‚Äôll get when loading several of these packages, and installation progress info.\n\n\n\n\n\n\nSetting a plot theme\nLike in the past two weeks, we‚Äôll set a ggplot theme for all our plots:\n\ntheme_set(theme_void())\ntheme_update(legend.position = \"top\")"
  },
  {
    "objectID": "posts/S09E07_maps_03/index.html#a-first-choropleth-map",
    "href": "posts/S09E07_maps_03/index.html#a-first-choropleth-map",
    "title": "Making maps in R: part III",
    "section": "2 A first choropleth map",
    "text": "2 A first choropleth map\nIn choropleth maps, the fill color of a geographic area is based on the value of a variable ‚Äî think of, for example, population density, median income, mean temperature, or biodiversity.\nFor example, the map below shows median annual income across states (we will make this one in a few minutes):\n\n\n\n\n\nIn ggplot-speak, to do this, we will be mapping the fill aesthetic to this variable of interest, which should represent a column in our input dataframe.\nTo get started, we‚Äôll get the state-level base map dataframe we‚Äôve used before, and make some slight modifications:\n\nstate_map &lt;- map_data(map = \"state\") |&gt;\n  # Rename the 'region' column to 'state' for clarity:\n  rename(state = region) |&gt;\n  # Capitalize the first letter of state names:\n  mutate(state = tools::toTitleCase(state)) |&gt;\n  # Turn into a tibble for better printing:\n  tibble()\n\nhead(state_map)\n\n# A tibble: 6 √ó 6\n   long   lat group order state   subregion\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;    \n1 -87.5  30.4     1     1 Alabama &lt;NA&gt;     \n2 -87.5  30.4     1     2 Alabama &lt;NA&gt;     \n3 -87.5  30.4     1     3 Alabama &lt;NA&gt;     \n4 -87.5  30.3     1     4 Alabama &lt;NA&gt;     \n5 -87.6  30.3     1     5 Alabama &lt;NA&gt;     \n6 -87.6  30.3     1     6 Alabama &lt;NA&gt;     \n\n\nFor our first choropleth map, we will only use the above base map dataframe, which does not contain additional data about states. But we can simply give each state a unique color by mapping the fill aesthetic to region, the column that contains the state names:\n\n# We'll just plot 3 states and pre-filter the dataset:\nthree_state_map &lt;- state_map |&gt;\n  filter(state %in% c(\"Ohio\", \"Indiana\", \"Michigan\"))\n\nggplot(three_state_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = state)) +\n  coord_sf()\n\n\n\n\nWhile this map is not too interesting, for some maps, showing the names of regions in this way can be a useful alternative to adding text labels in the map itself.\nIn the next sections, we‚Äôll pull in some data to make more interesting choropleth maps."
  },
  {
    "objectID": "posts/S09E07_maps_03/index.html#state-level-choropleth-maps",
    "href": "posts/S09E07_maps_03/index.html#state-level-choropleth-maps",
    "title": "Making maps in R: part III",
    "section": "3 State-level choropleth maps",
    "text": "3 State-level choropleth maps\n\nThe state_stats dataset\nWe‚Äôll use the state_stats dataframe that is available after loading the usdata package ‚Äî let‚Äôs take a look at that:\n\nhead(state_stats)\n\n# A tibble: 6 √ó 24\n  state    abbr   fips pop2010 pop2000 homeownership multiunit income med_income\n  &lt;fct&gt;    &lt;fct&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Alabama  AL        1  4.78e6  4.45e6          71.1      15.5  22984      42081\n2 Alaska   AK        2  7.10e5  6.27e5          64.7      24.6  30726      66521\n3 Arizona  AZ        4  6.39e6  5.13e6          67.4      20.7  25680      50448\n4 Arkansas AR        5  2.92e6  2.67e6          67.7      15.2  21274      39267\n5 Califor‚Ä¶ CA        6  3.73e7  3.39e7          57.4      30.7  29188      60883\n6 Colorado CO        8  5.03e6  4.30e6          67.6      25.6  30151      56456\n# ‚Ñπ 15 more variables: poverty &lt;dbl&gt;, fed_spend &lt;dbl&gt;, land_area &lt;dbl&gt;,\n#   smoke &lt;dbl&gt;, murder &lt;dbl&gt;, robbery &lt;dbl&gt;, agg_assault &lt;dbl&gt;, larceny &lt;dbl&gt;,\n#   motor_theft &lt;dbl&gt;, soc_sec &lt;dbl&gt;, nuclear &lt;dbl&gt;, coal &lt;dbl&gt;,\n#   tr_deaths &lt;dbl&gt;, tr_deaths_no_alc &lt;dbl&gt;, unempl &lt;dbl&gt;\n\n\nThat‚Äôs a lot of columns with data! For such wide dataframes, the View() function is particularly useful to explore the data:\n\n# [The output is not shown on the website,\n#  but this will open a spreadsheet-like tab in RStudio with the data]\nView(state_stats)\n\nAnd if you‚Äôre wondering what some of these columns mean, we can check the help page for this data set as follows:\n\n# [The output is not shown on the website,\n#  but this will open a help page in the Help tab.]\n?state_stats\n\n\n\n\nMerging the data with our base map data\nNext, we will merge our base map dataframe (state_map) with the state_stats dataframe.\nSpecifically, we‚Äôll want to add the state_stats dataframe‚Äôs columns (which has 1 row per state) to each row of our state_map dataframe (which has multiple rows per state, all of which we‚Äôll need to keep) for the appropriate state. That is, the Ohio statistics from state_stats should be added to each row of state_map, and so on for each state.\nCombining dataframes using a shared column (or ‚Äúkey‚Äù) can be done with the _join() family of functions. Let‚Äôs first make sure that the state names are styled the same way in both dataframes:\n\nhead(state_stats$state)\n\n[1] Alabama    Alaska     Arizona    Arkansas   California Colorado  \n52 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\n# (Use unique() for this dataframe since state names are repeated:)\nhead(unique(state_map$state))\n\n[1] \"Alabama\"     \"Arizona\"     \"Arkansas\"    \"California\"  \"Colorado\"   \n[6] \"Connecticut\"\n\n\n\n\n\n\n\n\n\nWant to check if both data sets contain the exact same set of states? (Click to expand)\n\n\n\n\n\nYou may want to more carefully check that your datasets match ‚Äî the setequal() function will test whether two vectors contain the exact same unique set of values (regardless of the order of appearance, or of repeated values):\n\nsetequal(state_map$state, state_stats$state)\n\n[1] FALSE\n\n\nHmmm ‚Ä¶ so these two data frames somehow do not contain the same set of states (or perhaps there‚Äôs a spelling difference somewhere).\nWe can use the setdiff() function to let us know which values (in our case, state names) are present in a first vector but not in a second ‚Äî this is one-directional/asymmetric, so we‚Äôll want to check both directions like so:\n\n# Are any states only present in `state_map`? \nsetdiff(state_map$state, state_stats$state)\n\ncharacter(0)\n\n# Are any states only present in `state_stats`?\nsetdiff(state_stats$state, state_map$state)\n\n[1] \"Alaska\" \"Hawaii\"\n\n\nIt turns out that the state_stats dataframe contains Alaska and Hawaii while our state_map, as we‚Äôve seen before, only contain the Lower 48 set of states.\n\n\n\nThat looks good ‚Äî you‚Äôll notice that one is a factor and the other of type character, but this will not pose a problem. We‚Äôll therefore proceed to combine the dataframes, using the left_join() function with state_map as the focal (left-hand side) dataframe, so that all its rows will be kept:\n\nstate_map_with_stats &lt;- state_map |&gt;\n  left_join(state_stats, by = \"state\")\n\nhead(state_map_with_stats)\n\n# A tibble: 6 √ó 29\n   long   lat group order state   subregion abbr   fips pop2010 pop2000\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;fct&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 -87.5  30.4     1     1 Alabama &lt;NA&gt;      AL        1 4779736 4447100\n2 -87.5  30.4     1     2 Alabama &lt;NA&gt;      AL        1 4779736 4447100\n3 -87.5  30.4     1     3 Alabama &lt;NA&gt;      AL        1 4779736 4447100\n4 -87.5  30.3     1     4 Alabama &lt;NA&gt;      AL        1 4779736 4447100\n5 -87.6  30.3     1     5 Alabama &lt;NA&gt;      AL        1 4779736 4447100\n6 -87.6  30.3     1     6 Alabama &lt;NA&gt;      AL        1 4779736 4447100\n# ‚Ñπ 19 more variables: homeownership &lt;dbl&gt;, multiunit &lt;dbl&gt;, income &lt;dbl&gt;,\n#   med_income &lt;dbl&gt;, poverty &lt;dbl&gt;, fed_spend &lt;dbl&gt;, land_area &lt;dbl&gt;,\n#   smoke &lt;dbl&gt;, murder &lt;dbl&gt;, robbery &lt;dbl&gt;, agg_assault &lt;dbl&gt;, larceny &lt;dbl&gt;,\n#   motor_theft &lt;dbl&gt;, soc_sec &lt;dbl&gt;, nuclear &lt;dbl&gt;, coal &lt;dbl&gt;,\n#   tr_deaths &lt;dbl&gt;, tr_deaths_no_alc &lt;dbl&gt;, unempl &lt;dbl&gt;\n\n\nGreat! We can see that the data from state_stats has been added to our base map dataframe. Now, we can use this dataframe to plot the states along with this data.\n\n\n\nA choropleth map showing median income across states\nThere are a number of variables (statistics) in our dataframe that we may want to visualize. Let‚Äôs start with the med_income column, which is median annual income:\n\nggplot(state_map_with_stats) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = med_income)) +\n  coord_sf(crs = 5070, default_crs = 4326)\n\n\n\n\nWe can make some improvements in the formatting of this map:\n\np_income &lt;- ggplot(state_map_with_stats) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group, fill = med_income),\n    # We'll use black state outlines with thine lines:\n    color = \"black\",\n    linewidth = 0.1,\n  ) +\n  # The 'viridis' continuous ('_c') color schemes often look good:\n  scale_fill_viridis_c(\n    # You can include a line break in the legend title with '\\n':\n    name = \"Median annual  \\nincome\",\n    # You can use include $ signs in the legend labels like so: \n    labels = scales::label_currency(),\n    # We'll use fewer breaks to avoid label overlap:\n    breaks = c(40, 55, 70) * 1000\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)\n\np_income\n\n\n\n\nOr how about this color palette from the scico package?\n\np_income +\n  scale_fill_scico(\n    palette = \"batlow\",\n    name = \"Median annual  \\nincome\",\n    labels = scales::label_currency(),\n    breaks = c(40, 55, 70) * 1000\n    )\n\nScale for fill is already present.\nAdding another scale for fill, which will replace the existing scale.\n\n\n\n\n\n\n\n Exercise 1\nCreate one or more maps similar to the map above showing median income, showing a different variable from the state_stats data. Pick one or more variables that look worth plotting to you, and let us know if you‚Äôve found an surprising or otherwise interesting pattern!\nYou can also play around with data transformations, color schemes, etc., to make your map look better.\n\n\nClick here for some hints\n\n\nRelative to the code for the previous map, you‚Äôll want to change what‚Äôs being mapped to the fill aesthetic.\nYou‚Äôll also want to change the name of the legend.\n\n\n\n\nClick here for an example\n\nAn example with the unemployment rate, which is in the column unempl.\n\nggplot(state_map_with_stats) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group, fill = unempl),\n    color = \"black\",\n    linewidth = 0.1,\n  ) +\n  scale_fill_scico(\n    palette = \"davos\",\n    name = \"Unemployment\\nrate\",\n    # We can use `scales::label_percent()` to show % signs in the legend,\n    # but we need to set its `scale` to 1 or values will be multiplied by 100:\n    labels = scales::label_percent(scale = 1),\n    # This is how we can draw a box around the legend color bar,\n    # which is useful here because the scale goes into white: \n    guide = guide_colorbar(frame.colour = \"grey50\")\n    ) +\n  coord_sf(crs = 5070, default_crs = 4326)"
  },
  {
    "objectID": "posts/S09E07_maps_03/index.html#interactive-zoomable-maps-with-mapview",
    "href": "posts/S09E07_maps_03/index.html#interactive-zoomable-maps-with-mapview",
    "title": "Making maps in R: part III",
    "section": "4 Interactive, zoomable maps with mapview",
    "text": "4 Interactive, zoomable maps with mapview\nThe mapview package allows you to easily make interactive maps where you can zoom in and out, turn layers on and off, and change the background map for the rendered map!\nIt is a more user-friendly but also more limited alternative to the leaflet package.\n\nUsing the example data from the package\nFor our first maps, let‚Äôs make use of breweries, an example dataset included with the package. This has the locations and some data about 224 breweries in the Bavaria region in Germany:\n\nhead(breweries)\n\nSimple feature collection with 6 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 9.97323 ymin: 49.4208 xmax: 11.23872 ymax: 50.16198\nGeodetic CRS:  WGS 84\n                                                brewery                 address\n1                                    Brauerei Rittmayer  Aischer Hauptstrasse 5\n2                                      Brauhaus Leikeim         Gewerbegebiet 4\n3 Ammerndorfer Bier Dorn-Braeu H. Murmann GmbH & Co. KG          Marktplatz 1-2\n4                         Wittelsbacher Turm Braeu GmbH    Wittelsbacher Turm 1\n5                                   Arnsteiner Brauerei Schweinfurter Strasse 9\n6                                    Aufsesser Brauerei              Im Tal 70b\n  zipcode       village  state founded number.of.types number.seasonal.beers\n1   91325     Adelsdorf Bayern    1422               2                     1\n2   96264 Altenkunstadt Bayern    1887              11                     1\n3   90614    Ammerndorf Bayern    1730              10                     0\n4   97688 Bad Kissingen Bayern      NA               6                     0\n5   97450      Arnstein Bayern    1885               5                     0\n6   91347       Aufsess Bayern    1886               7                     0\n                   geometry\n1 POINT (10.88922 49.71979)\n2 POINT (11.23873 50.12579)\n3  POINT (10.85194 49.4208)\n4 POINT (10.07837 50.16197)\n5   POINT (9.97323 49.9772)\n6 POINT (11.22899 49.88405)\n\n\nNote that the format is different than what we‚Äôre used to. This is a so-called sf (short for Simple Features) geospatial object that is more advanced than the regular dataframes we‚Äôve been working with (though note that ggplot can also plot these with several specialized geoms!).\nTo make our first map, we can simply run the mapview() function with the breweries object as input:\n\nmapview(breweries)\n\n\n\n\n\n\n\nIn the map above, let‚Äôs try to:\n\nZoom in and out (+ and - buttons in the top left)\nChange the background map layer (layer button below the zoom buttons)\nHover over one or more brewery points\n\nThe default information that is shown upon hovering over a point seems to be the row number, but we can change that using the label argument. Additionally, we can make point color differ by some variable, such as the founding year of the brewery (founded):\n\nmapview(breweries, zcol = \"founded\", label = \"brewery\")\n\n\n\n\n\n\n\nNote that this is not ggplot at all, or even based on ggplot, so the syntax is completely different. To explore your options, take a look at the help page (?mapview) or perhaps more usefully, the examples on the mapview webpage.\n\n\n\nUsing recent sightings data of Bald Eagles around Columbus\nWe can use the rebird package to download recent bird sightings that were submitted to Cornell‚Äôs Ebird citizen science project ‚Äî for example, around Columbus in the last month:\n\nsightings &lt;- ebirdgeo(\n  species = species_code(\"haliaeetus leucocephalus\"),\n  lat = 39.99,    # Get sightings centered around the latitude\n  lng = -82.99,   # Get sightings centered around the longitude\n  back = 30,      # Get sightings from now to 30 days back\n  dist = 50,      # Get sightings in a ration of 50 km around the coords\n  key = REPLACE_THIS_WITH_API_KEY\n)\n\n\n\nBald Eagle (Haliaeetus leucocephalus): baleag\n\n\n\n\n\n\n\n\nIn the code above, you‚Äôll need to replace REPLACE_THIS_WITH_API_KEY with an actual Ebird API key. You can get one from Ebird but will need to create an account and fill out a form. During this Code Club session, I will provide you with my API key.\n\n\n\nLet‚Äôs take a look at the dataset:\n\nhead(sightings)\n\n# A tibble: 6 √ó 13\n  speciesCode comName   sciName locId locName obsDt howMany   lat   lng obsValid\n  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;   \n1 baleag      Bald Eag‚Ä¶ Haliae‚Ä¶ L629‚Ä¶ Prairi‚Ä¶ 2025‚Ä¶       1  40.0 -83.3 TRUE    \n2 baleag      Bald Eag‚Ä¶ Haliae‚Ä¶ L407‚Ä¶ 7714 S‚Ä¶ 2025‚Ä¶       2  40.1 -82.9 TRUE    \n3 baleag      Bald Eag‚Ä¶ Haliae‚Ä¶ L353‚Ä¶ Scioto‚Ä¶ 2025‚Ä¶       1  39.9 -83.0 TRUE    \n4 baleag      Bald Eag‚Ä¶ Haliae‚Ä¶ L870‚Ä¶ McKinl‚Ä¶ 2025‚Ä¶       1  40.0 -83.1 TRUE    \n5 baleag      Bald Eag‚Ä¶ Haliae‚Ä¶ L407‚Ä¶ 13639 ‚Ä¶ 2025‚Ä¶       1  39.9 -82.5 TRUE    \n6 baleag      Bald Eag‚Ä¶ Haliae‚Ä¶ L801‚Ä¶ Hoover‚Ä¶ 2025‚Ä¶       2  40.2 -82.9 TRUE    \n# ‚Ñπ 3 more variables: obsReviewed &lt;lgl&gt;, locationPrivate &lt;lgl&gt;, subId &lt;chr&gt;\n\n\nTo use this data with mapview(), the best course of action is to transform our ‚Äúregular‚Äù dataframe to a geospatial sf object type with st_as_sf() like so (in which we pass the names of the longitude and latitude columns to coords):\n\nsightings_sf &lt;- st_as_sf(sightings, coords = c(\"lng\", \"lat\"), crs = 4326)\n\nNow, we can make our map, and we‚Äôll color points by the number of eagles seen in a single observation (howMany column) and label the points (when hovering over them) with the observation date (obsDt column):\n\nmapview(\n  sightings_sf,\n  zcol = \"howMany\",\n  label = \"obsDt\"\n)\n\n\n\n\n\n\n\n\n\n Exercise 2\nA) Can you figure out how to create a map like the one shown below, where the point size is also based on the number of birds seen?\nAs mentioned above, you can take a look at the help page (?mapview) and/or the examples on the mapview webpage.\n\n\n\n\n\n\n\n\n\n\nClick here for some hints\n\nThis section on the mapview website shows an example of varying point size by a variable.\n\n\n\n\nClick here for the solution\n\nTo make points vary in size by a certain variable (column in your dataframe), you can use the cex argument in the same way as we‚Äôve used the zcol and label arguments:\n\nmapview(\n  sightings_sf,\n  zcol = \"howMany\",\n  cex = \"howMany\",\n  label = \"obsDt\"\n)\n\n\n\n\n\n\n\nB) (Bonus) Perhaps for a map like this, it would make sense to have satellite imagery as the default/only background, since it makes it easier to orient yourself on the landscape to figure out how you, too, may be able to see these eagles. Can you make such a map? You‚Äôll also need to adjust the point colors or dark points will become nearly invisible.\n\n\nClick here for an example solution\n\n\nmapview(\n  sightings_sf,\n  cex = \"howMany\",\n  label = \"obsDt\",\n  map.types = \"Esri.WorldImagery\",\n  # I'm chosing to use a single color for all points:\n  col.regions = \"cyan2\"\n)"
  },
  {
    "objectID": "posts/S09E07_maps_03/index.html#bonus-content-at-home-reading",
    "href": "posts/S09E07_maps_03/index.html#bonus-content-at-home-reading",
    "title": "Making maps in R: part III",
    "section": "5 Bonus content (at-home reading)",
    "text": "5 Bonus content (at-home reading)\n\nDetailed map backgrounds on static maps with ggmap\nThe ggmap package allows you to use base/background maps from sources like Google Maps and Stadia Maps in static (non-interactive) maps. Let‚Äôs install and load it first:\n\nif (! require(ggmap)) install.packages(\"ggmap\")\n\nLoading required package: ggmap\n\n\n‚Ñπ Google's Terms of Service: &lt;https://mapsplatform.google.com&gt;\n  Stadia Maps' Terms of Service: &lt;https://stadiamaps.com/terms-of-service/&gt;\n  OpenStreetMap's Tile Usage Policy: &lt;https://operations.osmfoundation.org/policies/tiles/&gt;\n‚Ñπ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details.\n\nlibrary(ggmap)\n\nUnfortunately, API keys are needed nowadays for any of the map sources. Google Maps would probably be the most interesting to use, but to obtain an API key from them, you need to provide credit card details (even if low-level usage is free).\nInstead, we‚Äôll use Stadia Maps ‚Äî you‚Äôll still need to create an account and then generate your own API key, but you won‚Äôt need to provide credit card details. For information on generating the API key, see this Stadia Maps page and this info from ggmap:\n\n?ggmap::register_stadiamaps\n\nOnce you have your API key, ‚Äúregister‚Äù it as follows:\n\napi_key &lt;- \"REPLACE_THIS_WITH_YOUR_API_KEY\"\nregister_stadiamaps(api_key, write = TRUE)\n\nNow, we can obtain Stadia Maps base maps using the get_stadiamap() function. We first have to define a ‚Äúbounding box‚Äù (bbox =) with the coordinates that make up the corners of the rectangle containing the area you want to plot:\n\nus_coords &lt;- c(left = -125, bottom = 25.75, right = -67, top = 49)\n\nThen, we can obtain the map, and plot it:\n\nbase_states &lt;- get_stadiamap(bbox = us_coords, zoom = 5, maptype = \"outdoors\")\n\n‚Ñπ ¬© Stadia Maps ¬© Stamen Design ¬© OpenMapTiles ¬© OpenStreetMap contributors.\n\nggmap(base_states) \n\n\n\n\nIt makes sense to have plotting panel borders around these kinds of maps, so let‚Äôs update our theme:\n\ntheme_update(panel.border = element_rect(color = \"grey20\", fill = NA))\n\n\nOhio map and maptype\nAs another example, let‚Äôs create a base map for Ohio ‚Äî note that I am increasing the zoom level, which means we get a more detailed map and this is appropriate because we are now plotting a smaller area:\n\nbbox_ohio &lt;- c(left = -85, bottom = 38.3, right = -80.5, top = 42.2)\n\nbase_ohio &lt;- get_stadiamap(bbox = bbox_ohio, zoom = 8, maptype = \"outdoors\")\n\n‚Ñπ ¬© Stadia Maps ¬© Stamen Design ¬© OpenMapTiles ¬© OpenStreetMap contributors.\n\nggmap(base_ohio)\n\n\n\n\n\nYou can also play around with the maptype argument:\n\nbase_ohio &lt;- get_stadiamap(bbox = bbox_ohio, zoom = 8, maptype = \"stamen_toner_lite\")\n\n‚Ñπ ¬© Stadia Maps ¬© Stamen Design ¬© OpenMapTiles ¬© OpenStreetMap contributors.\n\nggmap(base_ohio)\n\n\n\n\n\n\n\nAdding points\nTo practice with adding points to such a map, let‚Äôs try to plot the Bald Eagle sightings data.\nFirst, we‚Äôll get a base map for the just area around Columbus (note the again increased zoom level):\n\nbbox_columbus &lt;- c(left = -83.6, bottom = 39.5, right = -82.1, top = 40.5)\nbase_columbus &lt;- get_stadiamap(bbox = bbox_columbus, zoom = 9, maptype = \"outdoors\")\n\n‚Ñπ ¬© Stadia Maps ¬© Stamen Design ¬© OpenMapTiles ¬© OpenStreetMap contributors.\n\n\nThen, we can add the points like we have before:\n\nggmap(base_columbus) +\n  geom_point(\n    data = sightings,\n    aes(x = lng, y = lat, fill = howMany, size = howMany),\n    shape = 21,\n    ) +\n  scale_fill_viridis_c(name = \"Number of Bald\\nEagles observed\") +\n  guides(size = \"none\")\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCounty-level choropleth maps\n\nBase map\nTo plot some county-level maps for Ohio, we‚Äôll grab the same county-level base map as last week using the map_data() function. We‚Äôll also do some pre-processing so the column names are more intuitive, the county names are capitalized, and we only keep data for Ohio:\n\n# County-level base map, filtered to just keep Ohio counties:\nohio_map &lt;- map_data(map = \"county\") |&gt;\n  rename(state = region, county = subregion) |&gt;\n  mutate(county = tools::toTitleCase(county)) |&gt;\n  filter(state == \"ohio\") |&gt;\n  tibble()\n\nhead(ohio_map)\n\n# A tibble: 6 √ó 6\n   long   lat group order state county\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 -83.7  39.0  2012 59960 ohio  Adams \n2 -83.6  39.0  2012 59961 ohio  Adams \n3 -83.4  39.1  2012 59962 ohio  Adams \n4 -83.3  39.1  2012 59963 ohio  Adams \n5 -83.3  39.1  2012 59964 ohio  Adams \n6 -83.3  39.0  2012 59965 ohio  Adams \n\n\n\n\n\nAdd county-level statistics\nWe‚Äôll also use another dataset from the usdata package, this one is countywise and simply called county:\n\nhead(county)\n\n# A tibble: 6 √ó 15\n  name           state  pop2000 pop2010 pop2017 pop_change poverty homeownership\n  &lt;chr&gt;          &lt;fct&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;int&gt;      &lt;dbl&gt;   &lt;dbl&gt;         &lt;dbl&gt;\n1 Autauga County Alaba‚Ä¶   43671   54571   55504       1.48    13.7          77.5\n2 Baldwin County Alaba‚Ä¶  140415  182265  212628       9.19    11.8          76.7\n3 Barbour County Alaba‚Ä¶   29038   27457   25270      -6.22    27.2          68  \n4 Bibb County    Alaba‚Ä¶   20826   22915   22668       0.73    15.2          82.9\n5 Blount County  Alaba‚Ä¶   51024   57322   58013       0.68    15.6          82  \n6 Bullock County Alaba‚Ä¶   11714   10914   10309      -2.28    28.5          76.9\n# ‚Ñπ 7 more variables: multi_unit &lt;dbl&gt;, unemployment_rate &lt;dbl&gt;, metro &lt;fct&gt;,\n#   median_edu &lt;fct&gt;, per_capita_income &lt;dbl&gt;, median_hh_income &lt;int&gt;,\n#   smoking_ban &lt;fct&gt;\n\n\n\nView(county)\n\n\n?county\n\nWe can filter this dataset to only keep Ohio data, and get rid of the County suffices to the county names:\n\nohio_data &lt;- county |&gt;\n  filter(state == \"Ohio\") |&gt;\n  rename(county = name) |&gt; \n  mutate(county = sub(\" County\", \"\", county))\n\nLet‚Äôs test whether the exact same set of counties is present in both dataframes using the setequal() function:\n\nsetequal(ohio_map$county, ohio_data$county)\n\n[1] TRUE\n\n\nGood! Then we‚Äôre ready to merge the dataframes, and we‚Äôll do so in the same way as for the statewise data:\n\nohio_map_with_stats &lt;- left_join(ohio_map, ohio_data, by = \"county\")\n\nhead(ohio_map_with_stats)\n\n# A tibble: 6 √ó 20\n   long   lat group order state.x county state.y pop2000 pop2010 pop2017\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  &lt;fct&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;int&gt;\n1 -83.7  39.0  2012 59960 ohio    Adams  Ohio      27330   28550   27726\n2 -83.6  39.0  2012 59961 ohio    Adams  Ohio      27330   28550   27726\n3 -83.4  39.1  2012 59962 ohio    Adams  Ohio      27330   28550   27726\n4 -83.3  39.1  2012 59963 ohio    Adams  Ohio      27330   28550   27726\n5 -83.3  39.1  2012 59964 ohio    Adams  Ohio      27330   28550   27726\n6 -83.3  39.0  2012 59965 ohio    Adams  Ohio      27330   28550   27726\n# ‚Ñπ 10 more variables: pop_change &lt;dbl&gt;, poverty &lt;dbl&gt;, homeownership &lt;dbl&gt;,\n#   multi_unit &lt;dbl&gt;, unemployment_rate &lt;dbl&gt;, metro &lt;fct&gt;, median_edu &lt;fct&gt;,\n#   per_capita_income &lt;dbl&gt;, median_hh_income &lt;int&gt;, smoking_ban &lt;fct&gt;\n\n\n\n\n\nExample maps\nPopulation change from 2010 to 2017:\n\n\n\n\n\n\nDiverging color scales\n\n\n\nWith a statistic like population change, which can take on both positive and negative values (and indeed does so in this particular case!), a ‚Äúdiverging‚Äù color scale can be useful. These have a ‚Äúneutral‚Äù midpoint color and different colors for negative versus positive values.\nSee the example below, where I also set the midpoint to 0, because otherwise the scale centers around the midpoint in the data, which in this case was well above 0.\n\n\n\nggplot(ohio_map_with_stats) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group, fill = pop_change),\n    color = \"black\",\n    linewidth = 0.2,\n  ) +\n  scale_fill_scico(\n    palette = \"bam\",\n    name = \"Population\\nchange\",\n    labels = scales::label_percent(scale = 1),\n    breaks = c(-3, 0, 3, 6),\n    midpoint = 0,\n    guide = guide_colorbar(frame.colour = \"grey50\")\n    ) +\n  coord_sf()\n\n\n\n\nMedian household income:\n\nggplot(ohio_map_with_stats) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group, fill = median_hh_income),\n    color = \"black\",\n    linewidth = 0.2,\n  ) +\n  scale_fill_scico(\n    palette = \"imola\",\n    name = \"Median house-  \\nhold income\",\n    labels = scales::label_currency(),\n    breaks = c(40, 70, 100) * 1000\n    ) +\n  coord_sf()\n\n\n\n\nWhether the county contains a metropolitan area:\n\nggplot(ohio_map_with_stats) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group, fill = metro),\n    color = \"black\",\n    linewidth = 0.2,\n  ) +\n  scale_fill_manual(\n    values = c(\"olivedrab4\", \"violetred\"),\n    name = \"County contains a\\nmetro area\"\n    ) +\n  coord_sf()"
  },
  {
    "objectID": "posts/S08E10_reprod_05/index.html#practice",
    "href": "posts/S08E10_reprod_05/index.html#practice",
    "title": "Reproducibility 05: Making Changes with Git and GitHub üê±",
    "section": "2.1 Practice",
    "text": "2.1 Practice\nTry making a change to your README and preview the change."
  },
  {
    "objectID": "posts/S08E10_reprod_05/index.html#push-your-changes-to-github",
    "href": "posts/S08E10_reprod_05/index.html#push-your-changes-to-github",
    "title": "Reproducibility 05: Making Changes with Git and GitHub üê±",
    "section": "2.2 Push your changes to GitHub",
    "text": "2.2 Push your changes to GitHub\nNow that we‚Äôve made a change to our README.md, let‚Äôs push that change to GitHub. Start by opening GitHub Desktop. Make sure your repo is selected in the top right corner.\nWe now see something we didn‚Äôt see before.\n\nAll of the changes we made are now tracked and specified in GitHub Desktop. We can see that two files have changed (our README.md and README.html). If you click on README.md you can see the changes we just made. These changes look more chaotic because they‚Äôre rendered in html.\nTo send these changes to GitHub, we can enter a commit message, and click Commit to main.\n\nThen we will click Push origin (either as the blue button or on the top right). Note that in the bottom right corner, we can see what our commit was (here, mine was ‚ÄúUpdating to a more descriptive readme‚Äù).\n\nOnce we have done that, we are now ‚Äúworking clean,‚Äù meaning we have made no new changes to our files being tracked by git, and what is present locally will be the same as what is on GitHub.\n\nWe can look online to see how our repo looks now, a few things to notice:\n\nOur README has changed - we can now see the changes we made reflected in the README that populates on the home page of our repo. If we click on README.md, we can also see those changes.\nWe have a new most recent commit message (here, ‚ÄúUpdating to a more descriptive readme‚Äù), and we can also see when this commit was made (here, 4 min ago)\nWe see now that our repo has a total of 2 commits."
  },
  {
    "objectID": "posts/S08E10_reprod_05/index.html#practice-1",
    "href": "posts/S08E10_reprod_05/index.html#practice-1",
    "title": "Reproducibility 05: Making Changes with Git and GitHub üê±",
    "section": "3.1 Practice",
    "text": "3.1 Practice\nTry removing files that you don‚Äôt want tracked with git."
  },
  {
    "objectID": "posts/S08E10_reprod_05/index.html#push-our-.gitignore-changes-to-github",
    "href": "posts/S08E10_reprod_05/index.html#push-our-.gitignore-changes-to-github",
    "title": "Reproducibility 05: Making Changes with Git and GitHub üê±",
    "section": "3.2 Push our .gitignore changes to GitHub",
    "text": "3.2 Push our .gitignore changes to GitHub\nNow that we‚Äôve removed the files we want, we can push our changes to GitHub. If you look at your GitHub Desktop, you should now see something like this:\n\nWe can make another commit, and push that change to main.\n\n\nNow, if we look on GitHub, we can see those files are now gone.\n\nDo keep in mind that those files are not totally gone ‚Äì if we go back to our original commit, we will see those files again. Keep this in mind, that once something is committed, it is really tracked. You can see this by clicking on ‚Äúcommits‚Äù in the top right corner of your repo. When you do this, you can see the whole commit history of this repo.\n\nAnd if we click on our original commit, we can see those files we added to our .gitignore and their contents."
  },
  {
    "objectID": "posts/S08E09_reprod_04/index.html#what-is-git",
    "href": "posts/S08E09_reprod_04/index.html#what-is-git",
    "title": "Reproducibility 04: Getting started with Git and GitHub üê±",
    "section": "1.1 What is Git?",
    "text": "1.1 What is Git?\nGit is a version control system that allows materials (mostly code) to be tracked in an organized way. Every time any changes to the files that are being monitored by Git are changed, that change is tracked. You can think of it as combining the tracked changes capabilities of Word, with the file sharing from OneDrive.\nWe are going to use Git (combined with GitHub, more on that in a second) to take the information embedded within our Quarto document and make it available on GitHub. You could opt use Git for just yourself because it would allow you to always revert back to a previous version of any of your files in case you make a big mistake.\nHere is a nice illustration by Allison Horst that shows the basics of git (at least the basics of what we will be using).\n\n\n\n\n\nFigure from Allison Horst"
  },
  {
    "objectID": "posts/S08E09_reprod_04/index.html#what-is-github",
    "href": "posts/S08E09_reprod_04/index.html#what-is-github",
    "title": "Reproducibility 04: Getting started with Git and GitHub üê±",
    "section": "1.2 What is GitHub?",
    "text": "1.2 What is GitHub?\nGitHub hosts Git-based projects. GitHub can be free (especially for academic projects), and is where we house all our Code Club content. I additionally use GitHub in my lab for creating code repositories that go along with our publications."
  },
  {
    "objectID": "posts/S08E09_reprod_04/index.html#what-is-github-desktop",
    "href": "posts/S08E09_reprod_04/index.html#what-is-github-desktop",
    "title": "Reproducibility 04: Getting started with Git and GitHub üê±",
    "section": "1.3 What is GitHub Desktop?",
    "text": "1.3 What is GitHub Desktop?\nGitHub Desktop is a application that lets you use Git and GitHub in a less-scary-than-working-in-your-terminal way. Here is a longer tutorial on how to use GitHub desktop."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#introduction",
    "href": "posts/S07E04_basics_04/index.html#introduction",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to continue our discussion about vectors that Horacio started last week and talk about vectorized operations. It‚Äôs fine if you don‚Äôt know what this means, you will by the end of today‚Äôs session. We are also going to introduce the idea of a data frame."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#what-are-vectorized-operations",
    "href": "posts/S07E04_basics_04/index.html#what-are-vectorized-operations",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "2 What are vectorized operations?",
    "text": "2 What are vectorized operations?\nI think its easier to see üëÄ an example of a vectorized operation, and then we can explain what is happening under the hood.\nLet‚Äôs create a vector of high temperatures for the weather in Columbus OH in Fahrenheit from the last 7 days. I took this data from January 19 to 25, 2024.\n\ntemps_F &lt;- c(26, 21, 24, 32, 33, 41, 51)\n\nWe can call our vector to see what it contains.\n\ntemps_F\n\n[1] 26 21 24 32 33 41 51\n\n\nA reminder that:\n\\[\n¬∞F = 1.8 * ¬∞C + 32\n\\]\nWith some light rearrangement, we can write the code below so we can plug in a temp in Fahrenheit, and get out one in Celsius.\n\ntemps_C &lt;- (temps_F - 32)/1.8\n\ntemps_C\n\n[1] -3.3333333 -6.1111111 -4.4444444  0.0000000  0.5555556  5.0000000 10.5555556\n\n\nHere, we simply use the vector temps_F as we would any single number in a smple mathematical operation, and we convert each element or number in our our entire vector using the formula we provide. As a result, we can convert every element of our vector from Fahrenheit to Celsius.\n\nIt is worth mentioning that this is unique in R - many other programming languages would require a for loop or similar to do this operation, but because R is a vectorized language, this works easily and simply.\n\nHere is another example. Imagine you have a vector of values and you want to calculate the log base 2 value for each element.\n\nraw &lt;- c(20, 36, 42, 53)\n\nlog2 &lt;- log2(raw)\n\nlog2\n\n[1] 4.321928 5.169925 5.392317 5.727920\n\n\nThis is an example where we apply a formula transformation to a vector, but we can also use vectorized operations with two vectors."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#vector-by-vector-operations",
    "href": "posts/S07E04_basics_04/index.html#vector-by-vector-operations",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "3 Vector by vector operations",
    "text": "3 Vector by vector operations\nLet‚Äôs create some vectors. Note I am not using the c() function to create the vector - since I am using the : to indicate a string of integers from number 1 to number 2, under the hood, R automatically makes this a vector. If you were to use the c() function though you would get the same result.\n\n# create a vector with the values from 1 to 10, incrementing by 1\n# vector_1to10 &lt;- c(1:10) would also work\nvector_1to10 &lt;- 1:10\n\nvector_1to5 &lt;- 1:5\n\nvector_1to3 &lt;- 1:3\n\nvector_0to4 &lt;- 0:4\n\n\n\n\n\n\n\nWhat do you think will happen if we try and add vector_1to10 and vector_1to5?\n\n\n\n\n\n\n# a vector reminder\nvector_1to10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nvector_1to5\n\n[1] 1 2 3 4 5\n\n# adding\nvector_1to10 + vector_1to5\n\n [1]  2  4  6  8 10  7  9 11 13 15\n\n\nWe see that vector_1to5 gets recycled, meaning once the 5 elements in the vector have been used, the addition starts back from the beginning again. If we want to be explicit:\n\nElement 1 of vector_1to10 gets added to element 1 of vector_1to5\nElement 2 of vector_1to10 gets added to element 2 of vector_1to5\nElement 3 of vector_1to10 gets added to element 3 of vector_1to5\nElement 4 of vector_1to10 gets added to element 4 of vector_1to5\nElement 5 of vector_1to10 gets added to element 5 of vector_1to5.\nElement 6 of vector_1to10 gets added to element 1 of vector_1to5\n\nand so on‚Ä¶\n‚ö†Ô∏è This happens without R explicitly telling you this is happening. We do not get a warning.\n\n\n\n\n\n\n\n\n\nWhat do you think will happen if we try and add vector_1to10 and vector_1to3?\n\n\n\n\n\n\n# a vector reminder\nvector_1to10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nvector_1to3\n\n[1] 1 2 3\n\n# adding\nvector_1to10 + vector_1to3\n\nWarning in vector_1to10 + vector_1to3: longer object length is not a multiple\nof shorter object length\n\n\n [1]  2  4  6  5  7  9  8 10 12 11\n\n\n‚ö†Ô∏è We see that vector_1to3 gets recycled, but now we have a warning. We get this because the vector lengths are not divisible by each other to produce an integer. R still will perform our operation, but it tells us hey this might not be exactly what you want.\n\n\n\n\n\n\n\n\n\nWhat do you think will happen if we try and divide vector_1to10 by vector_0to4?\n\n\n\n\n\n\nvector_1to10 / vector_0to4\n\n [1]      Inf 2.000000 1.500000 1.333333 1.250000      Inf 7.000000 4.000000\n [9] 3.000000 2.500000\n\n\nWe see that vector_0to4 gets recycled, but now we have a new output we haven‚Äôt seen before, Inf which stands for infinity/infinite.\nIf we are then to try and sum this vector:\n\nsum(vector_1to10 / vector_0to4)\n\n[1] Inf\n\n\nWe get an answer of infinite. This is because we have at least one infinite value, so including it as part of a sum makes that sum infinite too.\n‚ö†Ô∏è Think about how this might work if you have NAs in your vector"
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#filtering-vectors",
    "href": "posts/S07E04_basics_04/index.html#filtering-vectors",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "4 Filtering vectors",
    "text": "4 Filtering vectors\nWe can also write code that allows us to filter our vector based on certain conditions. What if we wanted to know which observations had data where the temperature was above freezing? We could use a mathematical operator (in this case, &gt;) to find instances when the statement we provide is true.\n\ntemps_C &gt; 0\n\n[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\n\nWhen we run this code, we get a series of values corresponding to each element of the vector, and whether or not the statement we have prompted with (temps_C &gt; 0) is true or false.\nIf we wanted to see how many observations meet these criteria, we can take advantage of the fact that TRUE is coded as 1, and FALSE and 0.\n\nsum(temps_C &gt; 0)\n\n[1] 3\n\n\nWe know then that there are 3 observations where the temperature is above freezing.\nIf we want to know which observations are above freezing, we can use the function which() which shows us the indices of the elements in our vector for which our code evaluates to TRUE.\n\nwhich(temps_C &gt; 0)\n\n[1] 5 6 7\n\n\nThis tells us that the 5th, 6th, and 7th elements in our data have temperatures higher than freezing. In our vector we don‚Äôt have the specific days associated with each temperature embedded. We can assign meta-data to our values by using the function names() for our vector. I‚Äôll show you how to do that below.\n\n# create a new vector that has the dates we want to assign\ndates &lt;- c(\"1/19\", \"1/20\", \"1/21\", \"1/22\", \"1/23\", \"1/24\", \"1/25\")\n\n# we can assign these dates as the \"names\" of our vector temps_C\nnames(temps_C) &lt;- dates\n\n# now our temps have dates associated with them\ntemps_C\n\n      1/19       1/20       1/21       1/22       1/23       1/24       1/25 \n-3.3333333 -6.1111111 -4.4444444  0.0000000  0.5555556  5.0000000 10.5555556 \n\n\nIf you knew you wanted to do this at the outset, you could create the vector along with its names all at once using the handy function structure().\n\n(temps_F_names &lt;- structure(temps_F,\n                           names = dates))\n\n1/19 1/20 1/21 1/22 1/23 1/24 1/25 \n  26   21   24   32   33   41   51 \n\n\n\nYou can also set other attributes using the function structure().\n\nYou might use the sometimes, but more likely you would want to work using a data frame."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#practice",
    "href": "posts/S07E04_basics_04/index.html#practice",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "5 Practice",
    "text": "5 Practice\n\n\n\n\n\n\nCreate a vector of 10 numbers, beginning at 2, incrementing by 11. Remember, if you call help() or put a ? before a function, you can learn more about its arguments and use. You might want to look back to last week‚Äôs Code Club if you don‚Äôt remember the simplified function for doing this.\n\n\n\n\n\n\na_vector &lt;- seq(from = 2, by = 11, length.out = 10)\n\na_vector\n\n [1]   2  13  24  35  46  57  68  79  90 101\n\n\n\n\n\n\n\n\n\n\n\nHow many of these values are even? Yes I know that I haven‚Äôt showed you how to do this but I am confident you can figure out how to :)\n\n\n\n\n\nA zero remainder means the number is even.\n\n# use modulo operator %% to see if a number is even\n# if the remainer is 0, it is even\na_vector %% 2\n\n [1] 0 1 0 1 0 1 0 1 0 1\n\n# how many are even?\n10 - sum(a_vector %% 2)\n\n[1] 5"
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#what-is-a-data-frame",
    "href": "posts/S07E04_basics_04/index.html#what-is-a-data-frame",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "6 What is a data frame?",
    "text": "6 What is a data frame?\n\n\n\n\n\nBelow I am creating a simple data frame, this is a rectangular data object with rows and columns. In reality, you will probably be reading your data in from a .csv or .xlsx file, but you can also construct a data frame directly in R. We are doing this with the function data.frame() which is a part of base R.\n\n# create a simple 3 by 4 data frame called small_df\n# columns are a, b, and c\n# values are numbers from 1 to 4, 5 to 8, and 9 to 12\nsmall_df &lt;- data.frame(a = 1:4, \n                       b = 5:8, \n                       c = 9:12)\n\nLet‚Äôs look at small_df.\n\nsmall_df\n\n  a b  c\n1 1 5  9\n2 2 6 10\n3 3 7 11\n4 4 8 12\n\n\nWe can think about a data frame as being composed of a series of vectors (as columns) squished together. In the case above, each column is of the same type, integer or numeric but this doesn‚Äôt have to be true. Note the first column of 1:4 is actually the row index - you can tell this as it doesn‚Äôt have a column name.\n\nVectors all must be of the same object type (i.e., character, numeric, logical). In a data frame, each column can be a different object type. This is very useful especially when you have to have meta-data combined with numeric data.\n\nWe call use some new functions to look more at our data frame.\nView() will open our data frame like you might be used to looking at a spreadsheet in Excel.\n\nView(small_df)\n\nstr() gives us the structure of the object x.\n\nstr(small_df)\n\n'data.frame':   4 obs. of  3 variables:\n $ a: int  1 2 3 4\n $ b: int  5 6 7 8\n $ c: int  9 10 11 12\n\n\ndim() gives us the dimensions of x.\n\ndim(small_df)\n\n[1] 4 3\n\n\n\n\n\n\n\n\nNote that when referring to a two-dimensional piece of data, R uses the syntax [rows, columns]\n\n\n\n\n\n\nNote, that if you use dim() on a vector (which has only one dimension), you will get something unexpected.\n\n# this doesn't work\ndim(temps_C)\n\nNULL\n\n\nFor a vector, instead you should use the function length() to figure out how many elements are in the vector.\n\n# this does work\nlength(temps_C)\n\n[1] 7"
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#performing-operations-on-a-data-frame",
    "href": "posts/S07E04_basics_04/index.html#performing-operations-on-a-data-frame",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "7 Performing operations on a data frame",
    "text": "7 Performing operations on a data frame\nNow that we have our small_df we can try performing some operations on it.\nWhat if you wanted to take the log base 2 for every value in small_df? Just like we did for a vector, we can simply use the function log2() on small_df. Here I am assigning the output of this to a new data frame called small_df_log2.\n\n(small_df_log2 &lt;- log2(small_df))\n\n         a        b        c\n1 0.000000 2.321928 3.169925\n2 1.000000 2.584963 3.321928\n3 1.584963 2.807355 3.459432\n4 2.000000 3.000000 3.584963\n\n\nRemember, if you assign something to an object, but also want it to print at the same time, just surround the whole thing in parentheses.\nWhat if I wanted to take the log base 2 of only column a? There are a few ways I can do that.\n\n7.1 By indexing\nI can use the square brackets [] to access certain parts of my data frame. Remember for data frames, the syntax is [rows, columns]. Let‚Äôs try some example where we access by using indices (i.e., the position of the row, column, or the combination) to grab different parts of our data frame.\n\n# first row, second column\nsmall_df[1,2]\n\n[1] 5\n\n# all rows, second column\nsmall_df[,2]\n\n[1] 5 6 7 8\n\n# third row, all columns\nsmall_df[3,]\n\n  a b  c\n3 3 7 11\n\n\nIs there any difference as to the types of objects we get when doing these different types of selection? We can use the function str() to see what type of R object we have in the different scenarios.\n\n# first row, second column\nstr(small_df[1,2])\n\n int 5\n\n# all rows, second column\nstr(small_df[,2])\n\n int [1:4] 5 6 7 8\n\n# third row, all columns\nstr(small_df[3,])\n\n'data.frame':   1 obs. of  3 variables:\n $ a: int 3\n $ b: int 7\n $ c: int 11\n\n\nBack to the original idea - how would we take the data only from column a and log base 2 transform it, but leave the rest of small_df as it is?\n\n# first save our df with a new name\n# this is like doing a \"save as\" for an existing df\nsmall_df_log2_a &lt;- small_df\n\n# log2 transform the first column, and then assign that back to the first column\nsmall_df_log2_a[,1] &lt;- log2(small_df[,1])\n\n# check to see if it worked\nsmall_df_log2_a\n\n         a b  c\n1 0.000000 5  9\n2 1.000000 6 10\n3 1.584963 7 11\n4 2.000000 8 12\n\n\nNote that column a now is the object type ‚Äúdbl‚Äù or numeric, instead of ‚Äúint‚Äù or integer, since our log2 transformation has made our values no longer integers.\n\n\n7.2 By name\nWe can also index by providing column names - this is a nice approach since when going back to read code, a column name is often more informative than a column index/number. Note that in this case the column name a is in quotes since it is a character string.\n\n# all rows, the column \"a\"\nsmall_df[,\"a\"]\n\n[1] 1 2 3 4\n\n\nWe can also use the dollar sign accessor $ to extract an element in a data frame or list. In the case of a data frame, you are accessing a column (though you could be accessing something else if a different type of object). Note that when you type the name of a data frame, and then the $, R will prompt you with some possible column names.\n\n\nsmall_df$a\n\n[1] 1 2 3 4\n\n\nBy using this syntax, you are turning your data frame into a vector. This may or may not be what you want to do, so just be aware.\n\n\n\n\n\n\nAccessing certain observations can also be performed using the tidyverse functions select() and filter(). If you don‚Äôt know what I‚Äôm talking about simply ignore this, we will go over it in a future Code Club."
  },
  {
    "objectID": "posts/S07E04_basics_04/index.html#practice-1",
    "href": "posts/S07E04_basics_04/index.html#practice-1",
    "title": "R Basics 4: Vectorized Operations and Data Frames",
    "section": "8 Practice",
    "text": "8 Practice\n\n\n\n\n\n\nCreate a new data frame and assign it to the variable df. Give is 5 columns and 3 rows, and add some numbers in each of the cells, it doesn‚Äôt matter what they are.\n\n\n\n\n\n\n# i'm just using different ways to creating strings of numbers \ndf &lt;- data.frame(col_1 = c(2, 3, 4),\n                 col_2 = seq(from = 5, to = 10, by = 2.5),\n                 col_3 = 4:6,\n                 col_4 = rnorm(3, mean = 10, sd = 2),\n                 col_5 = rep(x = 6, times = 3))\n\n\ndf\n\n  col_1 col_2 col_3     col_4 col_5\n1     2   5.0     4  8.706182     6\n2     3   7.5     5 13.453908     6\n3     4  10.0     6  7.366212     6\n\n\n\n\n\n\n\n\n\n\n\nMultiply all of column 1 by column 2.\n\n\n\n\n\nHere are some different ways to do this.\n\ndf$col_1 * df$col_2\n\n[1] 10.0 22.5 40.0\n\n\n\ndf[,1] * df[,2]\n\n[1] 10.0 22.5 40.0\n\n\n\ndf[,\"col_1\"] * df[,\"col_2\"]\n\n[1] 10.0 22.5 40.0\n\n\n\n\n\n\n\n\n\n\n\nCreate a sixth column that is the result of the addition of columns 3 and 4.\n\n\n\n\n\n\ncol_6 &lt;- df$col_3 + df$col_4\n\nnew_df &lt;- data.frame(df,\n                     col_6)\n\n\nnew_df\n\n  col_1 col_2 col_3     col_4 col_5    col_6\n1     2   5.0     4  8.706182     6 12.70618\n2     3   7.5     5 13.453908     6 18.45391\n3     4  10.0     6  7.366212     6 13.36621\n\n\n\n\n\n\n\n\n\n\n\nHow does having NAs in a vector change the class of your vector?\n\n\n\n\n\n\ntest_NA_1 &lt;- c(1, 2, 3, 4, NA)\n\nclass(test_NA_1)\n\n[1] \"numeric\"\n\ntest_NA_2 &lt;- c(1, 2, 3, 4, \"NA\")\n\nclass(test_NA_2)\n\n[1] \"character\""
  },
  {
    "objectID": "posts/S08E01_wrangling_01/index.html#load-libraries",
    "href": "posts/S08E01_wrangling_01/index.html#load-libraries",
    "title": "Data wrangling: more on filter() and select()",
    "section": "1.1 Load libraries",
    "text": "1.1 Load libraries\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.3     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.4     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/S08E01_wrangling_01/index.html#data",
    "href": "posts/S08E01_wrangling_01/index.html#data",
    "title": "Data wrangling: more on filter() and select()",
    "section": "1.2 Data",
    "text": "1.2 Data\nWe are going to use data from The World Factbook, put together by the CIA to ‚Äúprovides basic intelligence on the history, people, government, economy, energy, geography, environment, communications, transportation, military, terrorism, and transnational issues for 265 world entities.‚Äù I thought this data would give us some opportunities to flex our R skills, and learn a bit about the world.\nThe data we are going to download can be found here, though I have saved the file, added it to our Code Club Github, and included some code below for you to download it.\n\ndownload.file(\n  url = \"https://raw.githubusercontent.com/osu-codeclub/osu-codeclub.github.io/main/posts/S08E01_wrangling_01/data/factbook-2015.csv\",\n  destfile = \"factbook_download_2015.csv\"\n)\n\nYou should now see the file ‚Äúfactbook_download_2015.csv‚Äù in your working directory.\nWe can read it in using the tidyverse function from the readr package called read_csv().\n\nfactbook_2015 &lt;- read_csv(\"factbook_download_2015.csv\")\n\nRows: 217 Columns: 53\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (2): Country Name, Country Code\ndbl (51): Population, total, Population growth (annual %), Surface area (sq....\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet‚Äôs get a better handle on this data. We can use the function glimpse() to get a ‚Äúglimpse‚Äù at our data.\n\nglimpse(factbook_2015)\n\nRows: 217\nColumns: 53\n$ `Country Name`                                                                                     &lt;chr&gt; ‚Ä¶\n$ `Country Code`                                                                                     &lt;chr&gt; ‚Ä¶\n$ `Population, total`                                                                                &lt;dbl&gt; ‚Ä¶\n$ `Population growth (annual %)`                                                                     &lt;dbl&gt; ‚Ä¶\n$ `Surface area (sq. km)`                                                                            &lt;dbl&gt; ‚Ä¶\n$ `Poverty headcount ratio at national poverty lines (% of population)`                              &lt;dbl&gt; ‚Ä¶\n$ `GNI, Atlas method (current US$)`                                                                  &lt;dbl&gt; ‚Ä¶\n$ `GNI per capita, Atlas method (current US$)`                                                       &lt;dbl&gt; ‚Ä¶\n$ `GNI, PPP (current international $)`                                                               &lt;dbl&gt; ‚Ä¶\n$ `GNI per capita, PPP (current international $)`                                                    &lt;dbl&gt; ‚Ä¶\n$ `Income share held by lowest 20%`                                                                  &lt;dbl&gt; ‚Ä¶\n$ `Life expectancy at birth, total (years)`                                                          &lt;dbl&gt; ‚Ä¶\n$ `Fertility rate, total (births per woman)`                                                         &lt;dbl&gt; ‚Ä¶\n$ `Adolescent fertility rate (births per 1,000 women ages 15-19)`                                    &lt;dbl&gt; ‚Ä¶\n$ `Contraceptive prevalence, any method (% of married women ages 15-49)`                             &lt;dbl&gt; ‚Ä¶\n$ `Births attended by skilled health staff (% of total)`                                             &lt;dbl&gt; ‚Ä¶\n$ `Mortality rate, under-5 (per 1,000 live births)`                                                  &lt;dbl&gt; ‚Ä¶\n$ `Prevalence of underweight, weight for age (% of children under 5)`                                &lt;dbl&gt; ‚Ä¶\n$ `Immunization, measles (% of children ages 12-23 months)`                                          &lt;dbl&gt; ‚Ä¶\n$ `Primary completion rate, total (% of relevant age group)`                                         &lt;dbl&gt; ‚Ä¶\n$ `School enrollment, secondary (% gross)`                                                           &lt;dbl&gt; ‚Ä¶\n$ `School enrollment, primary and secondary (gross), gender parity index (GPI)`                      &lt;dbl&gt; ‚Ä¶\n$ `Prevalence of HIV, total (% of population ages 15-49)`                                            &lt;dbl&gt; ‚Ä¶\n$ `Forest area (sq. km)`                                                                             &lt;dbl&gt; ‚Ä¶\n$ `Water productivity, total (constant 2015 US$ GDP per cubic meter of total freshwater withdrawal)` &lt;dbl&gt; ‚Ä¶\n$ `Energy use (kg of oil equivalent per capita)`                                                     &lt;dbl&gt; ‚Ä¶\n$ `CO2 emissions (metric tons per capita)`                                                           &lt;dbl&gt; ‚Ä¶\n$ `Electric power consumption (kWh per capita)`                                                      &lt;dbl&gt; ‚Ä¶\n$ `GDP (current US$)`                                                                                &lt;dbl&gt; ‚Ä¶\n$ `GDP growth (annual %)`                                                                            &lt;dbl&gt; ‚Ä¶\n$ `Inflation, GDP deflator (annual %)`                                                               &lt;dbl&gt; ‚Ä¶\n$ `Agriculture, forestry, and fishing, value added (% of GDP)`                                       &lt;dbl&gt; ‚Ä¶\n$ `Industry (including construction), value added (% of GDP)`                                        &lt;dbl&gt; ‚Ä¶\n$ `Exports of goods and services (% of GDP)`                                                         &lt;dbl&gt; ‚Ä¶\n$ `Imports of goods and services (% of GDP)`                                                         &lt;dbl&gt; ‚Ä¶\n$ `Gross capital formation (% of GDP)`                                                               &lt;dbl&gt; ‚Ä¶\n$ `Revenue, excluding grants (% of GDP)`                                                             &lt;dbl&gt; ‚Ä¶\n$ `Start-up procedures to register a business (number)`                                              &lt;dbl&gt; ‚Ä¶\n$ `Market capitalization of listed domestic companies (% of GDP)`                                    &lt;dbl&gt; ‚Ä¶\n$ `Military expenditure (% of GDP)`                                                                  &lt;dbl&gt; ‚Ä¶\n$ `Mobile cellular subscriptions (per 100 people)`                                                   &lt;dbl&gt; ‚Ä¶\n$ `High-technology exports (% of manufactured exports)`                                              &lt;dbl&gt; ‚Ä¶\n$ `Merchandise trade (% of GDP)`                                                                     &lt;dbl&gt; ‚Ä¶\n$ `Net barter terms of trade index (2015 = 100)`                                                     &lt;dbl&gt; ‚Ä¶\n$ `External debt stocks, total (DOD, current US$)`                                                   &lt;dbl&gt; ‚Ä¶\n$ `Total debt service (% of GNI)`                                                                    &lt;dbl&gt; ‚Ä¶\n$ `Net migration`                                                                                    &lt;dbl&gt; ‚Ä¶\n$ `Personal remittances, paid (current US$)`                                                         &lt;dbl&gt; ‚Ä¶\n$ `Foreign direct investment, net inflows (BoP, current US$)`                                        &lt;dbl&gt; ‚Ä¶\n$ `Net ODA received per capita (current US$)`                                                        &lt;dbl&gt; ‚Ä¶\n$ `GDP per capita (current US$)`                                                                     &lt;dbl&gt; ‚Ä¶\n$ `Foreign direct investment, net (BoP, current US$)`                                                &lt;dbl&gt; ‚Ä¶\n$ `Inflation, consumer prices (annual %)`                                                            &lt;dbl&gt; ‚Ä¶\n\n\nWe see that Country Name and Country Code are character columns while the others are numeric (i.e., dbl).\nWe can look at this data another way, using the function head() to look at the first six rows, and every column.\n\nhead(factbook_2015)\n\n# A tibble: 6 √ó 53\n  `Country Name` `Country Code` `Population, total` Population growth (annual ‚Ä¶¬π\n  &lt;chr&gt;          &lt;chr&gt;                        &lt;dbl&gt;                        &lt;dbl&gt;\n1 Afghanistan    AFG                       33753499                        3.12 \n2 Albania        ALB                        2880703                       -0.291\n3 Algeria        DZA                       39543154                        2.00 \n4 American Samoa ASM                          51368                       -1.64 \n5 Andorra        AND                          71746                        0.174\n6 Angola         AGO                       28127721                        3.62 \n# ‚Ñπ abbreviated name: ¬π‚Äã`Population growth (annual %)`\n# ‚Ñπ 49 more variables: `Surface area (sq. km)` &lt;dbl&gt;,\n#   `Poverty headcount ratio at national poverty lines (% of population)` &lt;dbl&gt;,\n#   `GNI, Atlas method (current US$)` &lt;dbl&gt;,\n#   `GNI per capita, Atlas method (current US$)` &lt;dbl&gt;,\n#   `GNI, PPP (current international $)` &lt;dbl&gt;,\n#   `GNI per capita, PPP (current international $)` &lt;dbl&gt;, ‚Ä¶\n\n\n\n1.2.1 Cleaning column names\nIt looks like we have some column names that don‚Äôt use standard R practices (i.e., they have spaces, start with numbers). This isn‚Äôt a critical problem (meaning you can use column names like this - we know that because we have them here!) but it does make things slightly more difficult. The main difficulty is that you will have to refer to column names surrounded in back ticks and this can be annoying.\n\nfactbook_2015$`Country Name`\n\nLet‚Äôs use the function clean_names() from the janitor package to clean those names up.\nFirst, install the package janitor if you don‚Äôt have it.\n\ninstall.packages(\"janitor\")\n\nThen we can load the package and clean up our column names.\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\n# old column names\ncolnames(factbook_2015)\n\n [1] \"Country Name\"                                                                                    \n [2] \"Country Code\"                                                                                    \n [3] \"Population, total\"                                                                               \n [4] \"Population growth (annual %)\"                                                                    \n [5] \"Surface area (sq. km)\"                                                                           \n [6] \"Poverty headcount ratio at national poverty lines (% of population)\"                             \n [7] \"GNI, Atlas method (current US$)\"                                                                 \n [8] \"GNI per capita, Atlas method (current US$)\"                                                      \n [9] \"GNI, PPP (current international $)\"                                                              \n[10] \"GNI per capita, PPP (current international $)\"                                                   \n[11] \"Income share held by lowest 20%\"                                                                 \n[12] \"Life expectancy at birth, total (years)\"                                                         \n[13] \"Fertility rate, total (births per woman)\"                                                        \n[14] \"Adolescent fertility rate (births per 1,000 women ages 15-19)\"                                   \n[15] \"Contraceptive prevalence, any method (% of married women ages 15-49)\"                            \n[16] \"Births attended by skilled health staff (% of total)\"                                            \n[17] \"Mortality rate, under-5 (per 1,000 live births)\"                                                 \n[18] \"Prevalence of underweight, weight for age (% of children under 5)\"                               \n[19] \"Immunization, measles (% of children ages 12-23 months)\"                                         \n[20] \"Primary completion rate, total (% of relevant age group)\"                                        \n[21] \"School enrollment, secondary (% gross)\"                                                          \n[22] \"School enrollment, primary and secondary (gross), gender parity index (GPI)\"                     \n[23] \"Prevalence of HIV, total (% of population ages 15-49)\"                                           \n[24] \"Forest area (sq. km)\"                                                                            \n[25] \"Water productivity, total (constant 2015 US$ GDP per cubic meter of total freshwater withdrawal)\"\n[26] \"Energy use (kg of oil equivalent per capita)\"                                                    \n[27] \"CO2 emissions (metric tons per capita)\"                                                          \n[28] \"Electric power consumption (kWh per capita)\"                                                     \n[29] \"GDP (current US$)\"                                                                               \n[30] \"GDP growth (annual %)\"                                                                           \n[31] \"Inflation, GDP deflator (annual %)\"                                                              \n[32] \"Agriculture, forestry, and fishing, value added (% of GDP)\"                                      \n[33] \"Industry (including construction), value added (% of GDP)\"                                       \n[34] \"Exports of goods and services (% of GDP)\"                                                        \n[35] \"Imports of goods and services (% of GDP)\"                                                        \n[36] \"Gross capital formation (% of GDP)\"                                                              \n[37] \"Revenue, excluding grants (% of GDP)\"                                                            \n[38] \"Start-up procedures to register a business (number)\"                                             \n[39] \"Market capitalization of listed domestic companies (% of GDP)\"                                   \n[40] \"Military expenditure (% of GDP)\"                                                                 \n[41] \"Mobile cellular subscriptions (per 100 people)\"                                                  \n[42] \"High-technology exports (% of manufactured exports)\"                                             \n[43] \"Merchandise trade (% of GDP)\"                                                                    \n[44] \"Net barter terms of trade index (2015 = 100)\"                                                    \n[45] \"External debt stocks, total (DOD, current US$)\"                                                  \n[46] \"Total debt service (% of GNI)\"                                                                   \n[47] \"Net migration\"                                                                                   \n[48] \"Personal remittances, paid (current US$)\"                                                        \n[49] \"Foreign direct investment, net inflows (BoP, current US$)\"                                       \n[50] \"Net ODA received per capita (current US$)\"                                                       \n[51] \"GDP per capita (current US$)\"                                                                    \n[52] \"Foreign direct investment, net (BoP, current US$)\"                                               \n[53] \"Inflation, consumer prices (annual %)\"                                                           \n\n# use clean_names and save over the current df factbook_2015\nfactbook_2015 &lt;- clean_names(factbook_2015)\n\n# new column names\ncolnames(factbook_2015)\n\n [1] \"country_name\"                                                                                \n [2] \"country_code\"                                                                                \n [3] \"population_total\"                                                                            \n [4] \"population_growth_annual_percent\"                                                            \n [5] \"surface_area_sq_km\"                                                                          \n [6] \"poverty_headcount_ratio_at_national_poverty_lines_percent_of_population\"                     \n [7] \"gni_atlas_method_current_us\"                                                                 \n [8] \"gni_per_capita_atlas_method_current_us\"                                                      \n [9] \"gni_ppp_current_international\"                                                               \n[10] \"gni_per_capita_ppp_current_international\"                                                    \n[11] \"income_share_held_by_lowest_20_percent\"                                                      \n[12] \"life_expectancy_at_birth_total_years\"                                                        \n[13] \"fertility_rate_total_births_per_woman\"                                                       \n[14] \"adolescent_fertility_rate_births_per_1_000_women_ages_15_19\"                                 \n[15] \"contraceptive_prevalence_any_method_percent_of_married_women_ages_15_49\"                     \n[16] \"births_attended_by_skilled_health_staff_percent_of_total\"                                    \n[17] \"mortality_rate_under_5_per_1_000_live_births\"                                                \n[18] \"prevalence_of_underweight_weight_for_age_percent_of_children_under_5\"                        \n[19] \"immunization_measles_percent_of_children_ages_12_23_months\"                                  \n[20] \"primary_completion_rate_total_percent_of_relevant_age_group\"                                 \n[21] \"school_enrollment_secondary_percent_gross\"                                                   \n[22] \"school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi\"                       \n[23] \"prevalence_of_hiv_total_percent_of_population_ages_15_49\"                                    \n[24] \"forest_area_sq_km\"                                                                           \n[25] \"water_productivity_total_constant_2015_us_gdp_per_cubic_meter_of_total_freshwater_withdrawal\"\n[26] \"energy_use_kg_of_oil_equivalent_per_capita\"                                                  \n[27] \"co2_emissions_metric_tons_per_capita\"                                                        \n[28] \"electric_power_consumption_k_wh_per_capita\"                                                  \n[29] \"gdp_current_us\"                                                                              \n[30] \"gdp_growth_annual_percent\"                                                                   \n[31] \"inflation_gdp_deflator_annual_percent\"                                                       \n[32] \"agriculture_forestry_and_fishing_value_added_percent_of_gdp\"                                 \n[33] \"industry_including_construction_value_added_percent_of_gdp\"                                  \n[34] \"exports_of_goods_and_services_percent_of_gdp\"                                                \n[35] \"imports_of_goods_and_services_percent_of_gdp\"                                                \n[36] \"gross_capital_formation_percent_of_gdp\"                                                      \n[37] \"revenue_excluding_grants_percent_of_gdp\"                                                     \n[38] \"start_up_procedures_to_register_a_business_number\"                                           \n[39] \"market_capitalization_of_listed_domestic_companies_percent_of_gdp\"                           \n[40] \"military_expenditure_percent_of_gdp\"                                                         \n[41] \"mobile_cellular_subscriptions_per_100_people\"                                                \n[42] \"high_technology_exports_percent_of_manufactured_exports\"                                     \n[43] \"merchandise_trade_percent_of_gdp\"                                                            \n[44] \"net_barter_terms_of_trade_index_2015_100\"                                                    \n[45] \"external_debt_stocks_total_dod_current_us\"                                                   \n[46] \"total_debt_service_percent_of_gni\"                                                           \n[47] \"net_migration\"                                                                               \n[48] \"personal_remittances_paid_current_us\"                                                        \n[49] \"foreign_direct_investment_net_inflows_bo_p_current_us\"                                       \n[50] \"net_oda_received_per_capita_current_us\"                                                      \n[51] \"gdp_per_capita_current_us\"                                                                   \n[52] \"foreign_direct_investment_net_bo_p_current_us\"                                               \n[53] \"inflation_consumer_prices_annual_percent\"                                                    \n\n\nBy default, clean_names() converst to ‚Äúsnake_case‚Äù (where words are separated by an underscore instead of a space).\n\n\n\nExploring Programming Naming Styles by Kiran Vajrapu\n\n\n\n\n\n\n\n\nNote\n\n\n\nHaving spaces, starting with numbers, or have unallowable characters (e.g., %, ?, !) is only a problem for column names not for cell contents.\n\n\nWhat if we want to see a complete list of our countries? We could run the following code to see that:\n\nfactbook_2015$country_name\n\n  [1] \"Afghanistan\"                    \"Albania\"                       \n  [3] \"Algeria\"                        \"American Samoa\"                \n  [5] \"Andorra\"                        \"Angola\"                        \n  [7] \"Antigua and Barbuda\"            \"Argentina\"                     \n  [9] \"Armenia\"                        \"Aruba\"                         \n [11] \"Australia\"                      \"Austria\"                       \n [13] \"Azerbaijan\"                     \"Bahamas, The\"                  \n [15] \"Bahrain\"                        \"Bangladesh\"                    \n [17] \"Barbados\"                       \"Belarus\"                       \n [19] \"Belgium\"                        \"Belize\"                        \n [21] \"Benin\"                          \"Bermuda\"                       \n [23] \"Bhutan\"                         \"Bolivia\"                       \n [25] \"Bosnia and Herzegovina\"         \"Botswana\"                      \n [27] \"Brazil\"                         \"British Virgin Islands\"        \n [29] \"Brunei Darussalam\"              \"Bulgaria\"                      \n [31] \"Burkina Faso\"                   \"Burundi\"                       \n [33] \"Cabo Verde\"                     \"Cambodia\"                      \n [35] \"Cameroon\"                       \"Canada\"                        \n [37] \"Cayman Islands\"                 \"Central African Republic\"      \n [39] \"Chad\"                           \"Channel Islands\"               \n [41] \"Chile\"                          \"China\"                         \n [43] \"Colombia\"                       \"Comoros\"                       \n [45] \"Congo, Dem. Rep.\"               \"Congo, Rep.\"                   \n [47] \"Costa Rica\"                     \"Cote d'Ivoire\"                 \n [49] \"Croatia\"                        \"Cuba\"                          \n [51] \"Curacao\"                        \"Cyprus\"                        \n [53] \"Czechia\"                        \"Denmark\"                       \n [55] \"Djibouti\"                       \"Dominica\"                      \n [57] \"Dominican Republic\"             \"Ecuador\"                       \n [59] \"Egypt, Arab Rep.\"               \"El Salvador\"                   \n [61] \"Equatorial Guinea\"              \"Eritrea\"                       \n [63] \"Estonia\"                        \"Ethiopia\"                      \n [65] \"Faroe Islands\"                  \"Fiji\"                          \n [67] \"Finland\"                        \"France\"                        \n [69] \"French Polynesia\"               \"Gabon\"                         \n [71] \"Gambia, The\"                    \"Georgia\"                       \n [73] \"Germany\"                        \"Ghana\"                         \n [75] \"Gibraltar\"                      \"Greece\"                        \n [77] \"Greenland\"                      \"Grenada\"                       \n [79] \"Guam\"                           \"Guatemala\"                     \n [81] \"Guinea\"                         \"Guinea-Bissau\"                 \n [83] \"Guyana\"                         \"Haiti\"                         \n [85] \"Honduras\"                       \"Hong Kong SAR, China\"          \n [87] \"Hungary\"                        \"Iceland\"                       \n [89] \"India\"                          \"Indonesia\"                     \n [91] \"Iran, Islamic Rep.\"             \"Iraq\"                          \n [93] \"Ireland\"                        \"Isle of Man\"                   \n [95] \"Israel\"                         \"Italy\"                         \n [97] \"Jamaica\"                        \"Japan\"                         \n [99] \"Jordan\"                         \"Kazakhstan\"                    \n[101] \"Kenya\"                          \"Kiribati\"                      \n[103] \"Korea, Dem. People's Rep.\"      \"Korea, Rep.\"                   \n[105] \"Kosovo\"                         \"Kuwait\"                        \n[107] \"Kyrgyz Republic\"                \"Lao PDR\"                       \n[109] \"Latvia\"                         \"Lebanon\"                       \n[111] \"Lesotho\"                        \"Liberia\"                       \n[113] \"Libya\"                          \"Liechtenstein\"                 \n[115] \"Lithuania\"                      \"Luxembourg\"                    \n[117] \"Macao SAR, China\"               \"North Macedonia\"               \n[119] \"Madagascar\"                     \"Malawi\"                        \n[121] \"Malaysia\"                       \"Maldives\"                      \n[123] \"Mali\"                           \"Malta\"                         \n[125] \"Marshall Islands\"               \"Mauritania\"                    \n[127] \"Mauritius\"                      \"Mexico\"                        \n[129] \"Micronesia, Fed. Sts.\"          \"Moldova\"                       \n[131] \"Monaco\"                         \"Mongolia\"                      \n[133] \"Montenegro\"                     \"Morocco\"                       \n[135] \"Mozambique\"                     \"Myanmar\"                       \n[137] \"Namibia\"                        \"Nauru\"                         \n[139] \"Nepal\"                          \"Netherlands\"                   \n[141] \"New Caledonia\"                  \"New Zealand\"                   \n[143] \"Nicaragua\"                      \"Niger\"                         \n[145] \"Nigeria\"                        \"Northern Mariana Islands\"      \n[147] \"Norway\"                         \"Oman\"                          \n[149] \"Pakistan\"                       \"Palau\"                         \n[151] \"Panama\"                         \"Papua New Guinea\"              \n[153] \"Paraguay\"                       \"Peru\"                          \n[155] \"Philippines\"                    \"Poland\"                        \n[157] \"Portugal\"                       \"Puerto Rico\"                   \n[159] \"Qatar\"                          \"Romania\"                       \n[161] \"Russian Federation\"             \"Rwanda\"                        \n[163] \"Samoa\"                          \"San Marino\"                    \n[165] \"Sao Tome and Principe\"          \"Saudi Arabia\"                  \n[167] \"Senegal\"                        \"Serbia\"                        \n[169] \"Seychelles\"                     \"Sierra Leone\"                  \n[171] \"Singapore\"                      \"Sint Maarten (Dutch part)\"     \n[173] \"Slovak Republic\"                \"Slovenia\"                      \n[175] \"Solomon Islands\"                \"Somalia\"                       \n[177] \"South Africa\"                   \"South Sudan\"                   \n[179] \"Spain\"                          \"Sri Lanka\"                     \n[181] \"St. Kitts and Nevis\"            \"St. Lucia\"                     \n[183] \"St. Martin (French part)\"       \"St. Vincent and the Grenadines\"\n[185] \"Sudan\"                          \"Suriname\"                      \n[187] \"Eswatini\"                       \"Sweden\"                        \n[189] \"Switzerland\"                    \"Syrian Arab Republic\"          \n[191] \"Tajikistan\"                     \"Tanzania\"                      \n[193] \"Thailand\"                       \"Timor-Leste\"                   \n[195] \"Togo\"                           \"Tonga\"                         \n[197] \"Trinidad and Tobago\"            \"Tunisia\"                       \n[199] \"Turkiye\"                        \"Turkmenistan\"                  \n[201] \"Turks and Caicos Islands\"       \"Tuvalu\"                        \n[203] \"Uganda\"                         \"Ukraine\"                       \n[205] \"United Arab Emirates\"           \"United Kingdom\"                \n[207] \"United States\"                  \"Uruguay\"                       \n[209] \"Uzbekistan\"                     \"Vanuatu\"                       \n[211] \"Venezuela, RB\"                  \"Viet Nam\"                      \n[213] \"Virgin Islands (U.S.)\"          \"West Bank and Gaza\"            \n[215] \"Yemen, Rep.\"                    \"Zambia\"                        \n[217] \"Zimbabwe\""
  },
  {
    "objectID": "posts/S08E01_wrangling_01/index.html#practice",
    "href": "posts/S08E01_wrangling_01/index.html#practice",
    "title": "Data wrangling: more on filter() and select()",
    "section": "2.1 Practice",
    "text": "2.1 Practice\nHow many countries have negative annual population growth? This variable is called population_growth_annual_percent.\n\n\nNeed a hint?\n\nTry to filter for population_growth_annual_percent &lt; 0.\n\n\n\nClick for the solution\n\n\nfactbook_2015 |&gt; \n  filter(population_growth_annual_percent &lt; 0)\n\n# A tibble: 34 √ó 53\n   country_name           country_code population_total population_growth_annu‚Ä¶¬π\n   &lt;chr&gt;                  &lt;chr&gt;                   &lt;dbl&gt;                    &lt;dbl&gt;\n 1 Albania                ALB                   2880703                   -0.291\n 2 American Samoa         ASM                     51368                   -1.64 \n 3 Armenia                ARM                   2878595                   -0.393\n 4 Bosnia and Herzegovina BIH                   3524324                   -1.32 \n 5 Bulgaria               BGR                   7177991                   -0.638\n 6 Croatia                HRV                   4203604                   -0.824\n 7 Greece                 GRC                  10820883                   -0.659\n 8 Greenland              GRL                     56114                   -0.322\n 9 Hungary                HUN                   9843028                   -0.238\n10 Isle of Man            IMN                     83593                   -0.362\n# ‚Ñπ 24 more rows\n# ‚Ñπ abbreviated name: ¬π‚Äãpopulation_growth_annual_percent\n# ‚Ñπ 49 more variables: surface_area_sq_km &lt;dbl&gt;,\n#   poverty_headcount_ratio_at_national_poverty_lines_percent_of_population &lt;dbl&gt;,\n#   gni_atlas_method_current_us &lt;dbl&gt;,\n#   gni_per_capita_atlas_method_current_us &lt;dbl&gt;,\n#   gni_ppp_current_international &lt;dbl&gt;, ‚Ä¶\n\n\nThere are 34 countries that have a negative annual growth rate in 2015."
  },
  {
    "objectID": "posts/S08E01_wrangling_01/index.html#practice-1",
    "href": "posts/S08E01_wrangling_01/index.html#practice-1",
    "title": "Data wrangling: more on filter() and select()",
    "section": "3.1 Practice",
    "text": "3.1 Practice\nCome up with 3 different ways to select the columns about children, and make sure you also include a country column so you know what you‚Äôre looking at.\n\n\nNeed a hint?\n\nHere are the columns that I‚Äôm considering to be about children:\n[1] ‚Äúcountry_name‚Äù\n[17] ‚Äúmortality_rate_under_5_per_1_000_live_births‚Äù\n[18] ‚Äúprevalence_of_underweight_weight_for_age_percent_of_children_under_5‚Äù\n[19] ‚Äúimmunization_measles_percent_of_children_ages_12_23_months‚Äù\n[20] ‚Äúprimary_completion_rate_total_percent_of_relevant_age_group‚Äù\n[21] ‚Äúschool_enrollment_secondary_percent_gross‚Äù\n[22] ‚Äúschool_enrollment_primary_and_secondary_gross_gender_parity_index_gpi‚Äù\n\n\n\nClick for the solution\n\nBy name and for columns in a row, using the :.\n\nfactbook_2015 |&gt; \n  select(country_name, \n         mortality_rate_under_5_per_1_000_live_births:\n         school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi)\n\n# A tibble: 217 √ó 7\n   country_name        mortality_rate_under_5_per_1_000‚Ä¶¬π prevalence_of_underw‚Ä¶¬≤\n   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ‚Ñπ 207 more rows\n# ‚Ñπ abbreviated names: ¬π‚Äãmortality_rate_under_5_per_1_000_live_births,\n#   ¬≤‚Äãprevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ‚Ñπ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,\n#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,\n#   school_enrollment_secondary_percent_gross &lt;dbl&gt;, ‚Ä¶\n\n\nBy index:\n\nfactbook_2015 |&gt; \n  select(1, 17:22) \n\n# A tibble: 217 √ó 7\n   country_name        mortality_rate_under_5_per_1_000‚Ä¶¬π prevalence_of_underw‚Ä¶¬≤\n   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ‚Ñπ 207 more rows\n# ‚Ñπ abbreviated names: ¬π‚Äãmortality_rate_under_5_per_1_000_live_births,\n#   ¬≤‚Äãprevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ‚Ñπ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,\n#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,\n#   school_enrollment_secondary_percent_gross &lt;dbl&gt;, ‚Ä¶\n\n\nBy name characteristics:\n\nfactbook_2015 |&gt; \n  select(country_name, contains(\"under_5\"), contains(\"children\"),\n         contains(\"primary\"), contains(\"school\"))\n\n# A tibble: 217 √ó 7\n   country_name        mortality_rate_under_5_per_1_000‚Ä¶¬π prevalence_of_underw‚Ä¶¬≤\n   &lt;chr&gt;                                            &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Afghanistan                                       72.7                     NA\n 2 Albania                                            9.6                     NA\n 3 Algeria                                           25.3                     NA\n 4 American Samoa                                    NA                       NA\n 5 Andorra                                            3.6                     NA\n 6 Angola                                            87.9                     19\n 7 Antigua and Barbuda                               10.9                     NA\n 8 Argentina                                         11.8                     NA\n 9 Armenia                                           14.5                     NA\n10 Aruba                                             NA                       NA\n# ‚Ñπ 207 more rows\n# ‚Ñπ abbreviated names: ¬π‚Äãmortality_rate_under_5_per_1_000_live_births,\n#   ¬≤‚Äãprevalence_of_underweight_weight_for_age_percent_of_children_under_5\n# ‚Ñπ 4 more variables:\n#   immunization_measles_percent_of_children_ages_12_23_months &lt;dbl&gt;,\n#   primary_completion_rate_total_percent_of_relevant_age_group &lt;dbl&gt;,\n#   school_enrollment_primary_and_secondary_gross_gender_parity_index_gpi &lt;dbl&gt;, ‚Ä¶\n\n\nThese are just some ways!"
  },
  {
    "objectID": "posts/S08E01_wrangling_01/index.html#practice-2",
    "href": "posts/S08E01_wrangling_01/index.html#practice-2",
    "title": "Data wrangling: more on filter() and select()",
    "section": "4.1 Practice",
    "text": "4.1 Practice\nWhich countries have the lowest cell phone subscriptions? mobile_cellular_subscriptions_per_100_people\n\n\nNeed a hint?\n\nYou can use the function arrange() to sort your columns. The default arranging is from low to high, so if you want to go from high to low, you can set arrange(desc()).\n\n\n\nClick for the solution\n\n\nfactbook_2015 |&gt; \n  select(country_name, mobile_cellular_subscriptions_per_100_people) |&gt; \n  arrange(mobile_cellular_subscriptions_per_100_people)\n\n# A tibble: 217 √ó 2\n   country_name              mobile_cellular_subscriptions_per_100_people\n   &lt;chr&gt;                                                            &lt;dbl&gt;\n 1 Korea, Dem. People's Rep.                                         12.8\n 2 Eritrea                                                           14.2\n 3 Micronesia, Fed. Sts.                                             20.6\n 4 Central African Republic                                          25.8\n 5 South Sudan                                                       25.9\n 6 Cuba                                                              29.4\n 7 Djibouti                                                          31.2\n 8 Marshall Islands                                                  31.4\n 9 Kiribati                                                          35.1\n10 Chad                                                              38.7\n# ‚Ñπ 207 more rows"
  },
  {
    "objectID": "posts/S07E14_ggplot_04/index.html#introduction",
    "href": "posts/S07E14_ggplot_04/index.html#introduction",
    "title": "Plotting 4: Faceting and multi-panel figures",
    "section": "1 Introduction",
    "text": "1 Introduction\nIn this last session of the semester, we‚Äôll cap off our series on ggplot2 basics with a focus on:\n\nFaceting plots: splitting plots into subplots based on one or more variables\nCombining plots into multi-panel figures with the patchwork package\n\nAnd two useful side-notes:\n\nSetting a plotting theme for your entire R session\nSaving plots to file with ggsave()\n\nLike in previous sessions, we‚Äôll start by loading the tidyverse and palmerpenguins packages:\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "posts/S07E14_ggplot_04/index.html#setting-a-theme-for-all-plots-in-the-session",
    "href": "posts/S07E14_ggplot_04/index.html#setting-a-theme-for-all-plots-in-the-session",
    "title": "Plotting 4: Faceting and multi-panel figures",
    "section": "2 Setting a theme for all plots in the session",
    "text": "2 Setting a theme for all plots in the session\nWe‚Äôve seen that you can change the ‚Äútheme‚Äù (overall look) of a ggplot plot by adding a layer like theme_bw(). If you‚Äôre making a bunch of plots, and want all them to have a specific theme, it can be more convenient to set the plotting theme upfront for all plots in your current R session ‚Äî you can do so with the theme_set() function:\n\ntheme_set(theme_bw())\n\nOne other tidbit worth pointing out is that you can set the ‚Äúbase size‚Äù for a theme, which is the relative size of the text and lines. You may have noticed that the ggplot‚Äôs font size of e.g.¬†axis labels and titles is relatively small. Instead of changing all of these individually with arguments to theme(), you can use the base_size argument when specifying the overall theme:\n\n# (The default base_size is 11)\ntheme_set(theme_bw(base_size = 12))\n\nFinally, you can set any theme() arguments for all plots in the R session with theme_update() ‚Äî for example, we may want to turn off the minor grid lines:\n\ntheme_update(panel.grid.minor = element_blank())\n\nAfter doing this, as you‚Äôll see, all plots in this session will feature theme_bw without minor grid lines."
  },
  {
    "objectID": "posts/S07E14_ggplot_04/index.html#faceting-intro-and-facet_wrap",
    "href": "posts/S07E14_ggplot_04/index.html#faceting-intro-and-facet_wrap",
    "title": "Plotting 4: Faceting and multi-panel figures",
    "section": "3 Faceting: intro and facet_wrap()",
    "text": "3 Faceting: intro and facet_wrap()\n\nAn example with one variable\nLet‚Äôs start by revisiting the following plot you made in the exercises a couple of weeks ago:\n\npenguins |&gt; \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWe‚Äôve used the color aesthetic to distinguish species, but because of the overlap between Adelie (red) and Chinstrap (green) penguins, it‚Äôs not that easy to see the relationship between body mass and flipper length for these two species.\nAn alternative to using aesthetics such as color or shape to distinguish between levels of categorical variables is to split the plot into subplots/panels. In ggplot, such subplots are called ‚Äúfacets‚Äù, and there are two functions to split a plot into facets: facet_wrap() and facet_grid().\nLet‚Äôs start with facet_wrap(). Facets are added as an additional layer to the plot, and in the faceting function, you specify one or more variables to split the plot into separate panels by. Here, we want to facet by species:\n\npenguins |&gt; \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  # Add the facet_wrap layer:\n  facet_wrap(~species) +\n  # We still color by species to make the plot look nicer, but no longer need a legend:\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet_wrap() syntax\n\n\n\nNote how the variable to facet by is specified: with a tilde (~) in front, which is R‚Äôs way of specifying formulas. We‚Äôre basically saying to split the plot ‚Äúas a function of‚Äù (by) species. An alternative way of specifying the variable is by wrapping the variable name in vars(), e.g.¬†facet_wrap(vars(species)).\n\n\n\n\n\nAn example with two variables\nIn the above example, you may reasonably prefer either of the two plots we made. For example, perhaps you aren‚Äôt convinced by the faceting solution because you thought the overlapping points in the first plot were useful to make clear how similar Adelie and Chinstrap penguins are in body mass and flipper length.\nWhat may be a more straightforward example of the usefulness of faceting is a situation in which we want to show two or more categorical variables in a plot, like species and island below:\n\npenguins |&gt; \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm,\n             color = species, shape = island)) +\n  geom_point()\n\n\n\n\n\n\n\n\nThis plot isn‚Äôt clear at all! Let‚Äôs facet by island to get a much better plot:\n\npenguins |&gt; \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  facet_wrap(~island) +\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\n\n Exercise 1\nA) Create a scatter plot of bill length vs.¬†bill depth with points colored by sex, and the plot faceted by species.\n\n\n(Click for the answer)\n\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_wrap(~species) +\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\nB) Say that you didn‚Äôt want the species side-by-side (1 row, 3 columns), but stacked vertically (3 rows, 1 column). Take a look at the help page for facet_wrap() (type ?facet_wrap) and try to figure out how you can do this.\n\n\n(Click for the answer)\n\nYou can use the ncol and/or nrow arguments to force a specific number of rows and or columns. The easiest solution here is to merely set the number of columns to 1, which will make facet_wrap() use multiple columns instead:\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +\n  geom_point() +\n  facet_wrap(~species, ncol = 1)\n\n\n\n\n\n\n\n\n\n\n\n Exercise 2\nIn our first example, we faceted because there was too much overlap between points. You may also want to facet for the opposite reason, when differences by some variable are so large that the plot suffers from it. Let‚Äôs artificially create such a situation by increasing the bill lengths for Chinstrap penguins by 100 mm each:\n\npenguins_ed &lt;- penguins |&gt;\n  mutate(bill_length_mm = ifelse(species == \"Chinstrap\",\n                                 bill_length_mm + 100,\n                                 bill_length_mm))\n\nAnd plot this modified data:\n\npenguins_ed |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n\nAbove, the spread along the x axis (bill length) is so large that it has become hard to see the relationship between bill length and bill depth. Let‚Äôs facet:\n\npenguins_ed |&gt;\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  facet_wrap(~species) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nThat didn‚Äôt solve anything yet! But when you facet, you can have the axis ranges (‚Äúscales‚Äù) vary independently between facets. This can be done with the scales argument to facet_wrap(). Take a look at the help page and try to get the x-axis range to be able to differ between the facets.\n\n\n(Click for the answer)\n\nYou‚Äôll want to set scales to free_x:\n\npenguins |&gt;\n  mutate(bill_length_mm = ifelse(species == \"Chinstrap\",\n                                 bill_length_mm + 100,\n                                 bill_length_mm)) |&gt;\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  facet_wrap(~species, scales = \"free_x\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n Exercise 3\nIn your theme_set() call, vary the value of base_size and take a look at its effect by recreating the plots you made above a few times."
  },
  {
    "objectID": "posts/S07E14_ggplot_04/index.html#facet_grid",
    "href": "posts/S07E14_ggplot_04/index.html#facet_grid",
    "title": "Plotting 4: Faceting and multi-panel figures",
    "section": "4 facet_grid()",
    "text": "4 facet_grid()\nIf you would like to split your plot by two variables, use the facet_grid() function, which will create a grid with the levels of one variable across rows and of the other variable across columns.\nThe formula-style syntax now uses row-variable ~ column-variable:\n\npenguins |&gt;\n  filter(!is.na(sex)) |&gt; \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  facet_grid(island ~ sex) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet_wrap() vs.¬†facet_grid() (Click to expand)\n\n\n\n\n\nNote that you can also tell facet_grid() to facet only by one variable, either across rows or across columns. With that in mind, you may wonder why there even is a separate facet_wrap() function.\nWell, one feature of facet_wrap() that we haven‚Äôt yet seen is that it can ‚Äúwrap‚Äù a single variable across both rows and columns. Here is an example with the mpg data set, which has a categorical value cyl with 4 levels, enough to make facet_wrap() spread these across 2 rows and 2 columns:\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_wrap(~cyl)\n\n\n\n\n\n\n\n\n\n\n\n\n Exercise 4\nCreate a scatter plot of bill length vs.¬†bill depth and facet in a grid with the variables species and year.\n\n\n(Click for the answer)\n\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  facet_grid(species~year) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/S07E14_ggplot_04/index.html#multi-panel-figures-with-patchwork",
    "href": "posts/S07E14_ggplot_04/index.html#multi-panel-figures-with-patchwork",
    "title": "Plotting 4: Faceting and multi-panel figures",
    "section": "5 Multi-panel figures with patchwork",
    "text": "5 Multi-panel figures with patchwork\nThe patchwork package allows you to combine multiple plots into a single multi-panel figure.\nThis is something you might be used to doing with programs like Powerpoint or Illustrator. But certainly if all the individual plots that should make up a figure are made with R, it is highly beneficial to combine them in R as well. One of the advantages of using R is that you can easily rerun your code to recreate plots with some modifications, but if after any change, you have to put plots together in another program, you lose some of the advantages related to automation and reproducibility.\nLet‚Äôs install and then load the package:\n\ninstall.packages(\"patchwork\")\n\n\nlibrary(patchwork)\n\nPatchwork assumes that you have created and saved the individual plots as separate R objects. Then, you tell patchwork how to arrange these plots, and the syntax to define the layout is based on common mathematical operators. Some examples, where plot1, plot2, and plot3 represent plots that have been saved as objects with those names:\n\nplot1 | plot2 puts two plots side-by-side\nplot1 / plot2 stacks two plots vertically\nplot1 / (plot2 | plot3) gives plot1 on a top row, and plots 2 and 3 on a bottom row\n\nBelow is an example from palmerpenguins. First we create the plots, saving each as a new object:\n\np_scatter &lt;- penguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point() +\n  facet_wrap(\"species\")\np_scatter\n\n\n\n\n\n\n\n\n\np_bar &lt;- penguins |&gt; \n  summarize(bill_length = mean(bill_length_mm, na.rm = TRUE), .by = island) |&gt;\n  ggplot(aes(x = island, y = bill_length)) +\n  geom_col()\np_bar\n\n\n\n\n\n\n\n\n\np_box &lt;- penguins |&gt; \n  drop_na() |&gt; \n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot()\np_box\n\n\n\n\n\n\n\n\nThen we simply use the patchwork syntax to define how these 3 plots will be arranged. In this case, the first (faceted) plot on top, with the other two side-by-side below it:\n\np_scatter / (p_bar | p_box)\n\n\n\n\n\n\n\n\nPatchwork has quite a lot more functionality, and this is very well explained in various vignettes/tutorials on its website. Here, we‚Äôll just try one more feature, adding tags for the individual plots ‚Äî where we tell patchwork about the type of numbering we would like (e.g.¬†A-B-C vs.¬†1-2-3) by specifying the first character:\n\np_scatter / (p_bar | p_box) +\n  plot_annotation(tag_levels = \"A\")\n\n\n\n\n\n\n\n\n\n Exercise 5\nUse the palmerpenguins data to try to create the plot below:\n\n\n\n\n\n\n\n\n\n\n\n(Click for the answer)\n\n\np_bill_flipper &lt;- penguins |&gt;\n  ggplot(aes(x = bill_length_mm, y = flipper_length_mm)) +\n  geom_point() +\n  facet_wrap(~species) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Bill Length (mm)\", y = \"Flipper Length (mm)\")\n  \np_mass_yr &lt;- penguins |&gt;\n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_boxplot() + \n  labs(x = \"Species\", y = \"Body Mass (g)\")\n\np_bill_flipper / p_mass_yr + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n\n5.1 Saving plots\nIf you hadn‚Äôt already, now that you‚Äôve learned to create publication-ready multi-panel figures, you are probably wondering how you can save these plots.\nPerhaps you‚Äôve seen the ‚ÄúExport‚Äù button in the plotting pane, which can can do this. However, a better and more flexible way is to use the ggsave() function. By default, it will save the last plot you produced to the specified file:\n\nggsave(\"test_plot.png\")\n\nIf you do need to specify the plot object explicitly, you can pass it as the second argument:\n\nggsave(\"test_plot2.png\", p_bill_flipper)\n\nSome notes:\n\nYou can specify the file/image type (PNG, JPEG, SVG, PDF, etc.) simply by providing the appropriate file extension.\nUse the height and width arguments to specify both the aspect ratio and the absolute size. Larger sizes will lead to relatively smaller text and points, which can be a convenient way to customize this!\nFor raster graphic formats like PNG, you can specify the resolution with the dpi argument.\n\n\n Exercise 6\nSave one or more of your previously produced plots as PNG images, and vary:\n\nThe aspect ratio and asbolute size with height and width\nThe resolution with dpi"
  },
  {
    "objectID": "posts/S06E04_website_04/index.html",
    "href": "posts/S06E04_website_04/index.html",
    "title": "Quarto website 4",
    "section": "",
    "text": "We are continuing this semester‚Äôs Code Club series on making yourself a website. So far, we have gone through:\nToday, we are going to focus on interacting with our GitHub repository (or ‚Äúrepo‚Äù for short):"
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#git-and-github-repository-recap",
    "href": "posts/S06E04_website_04/index.html#git-and-github-repository-recap",
    "title": "Quarto website 4",
    "section": "1 Git and GitHub repository recap",
    "text": "1 Git and GitHub repository recap\nNow that you have actually created a local Git and a remote GitHub repository for your website, let‚Äôs revisit this illustration that Jess explained last week:\n\n\n\n\n\nFigure by Allison Horst\n\n\n\n\nAnd here is a graphic depicting our workflow more specifically, where we basically have a fourth area: the actual website.\n\n\n\n\n\n\n\n\n\nLet‚Äôs go through the four different ‚Äúareas‚Äù in this illustration and how they interact:\n\nYour working directory1 (bottom right in the illustration) is the folder on your computer that contains all the files for your website. Within that folder:\n\nThe docs folder contains HTML and other files representing your rendered website\nEverything else (.qmd, .yml etc.) is the source code for your website\n\nIn the workflow we are showing you here, you‚Äôre modifying the files in your working directory predominantly using RStudio.\n\n\nYour local Git repo (bottom left in the illustration) contains one or more saved snapshots (versions through time) of your working directory.\nThe most recent snapshot of the local repo does not necessarily correspond to the state of your working directory: there is purposefully no auto-saving, so saving a snapshot (i.e.¬†commiting) is something you always have to actively do2.\nSaving a snapshot of the current state of your working dir can be done in a number of ways, such as using Git commands in a terminal (the add and commit verbs in the illustration) or using the Git pane in RStudio, but the method we have shown you here uses the GitHub Desktop app.\n\n\nYour remote GitHub repo (top in the illustration) is simply the online counterpart of your local repo.\nJust like changes to your working dir aren‚Äôt automatically saved to your local repo, new snapshots in your local repo aren‚Äôt automatically published to your remote repo: to do so, we have to push our changes online. (The counterpart to push is pull, which we won‚Äôt talk more about here, will pull in changes from the online repo to your local repo.3)\nJust like for committing, we will use GitHub Desktop to push our changes online.\nWe ‚Äúactivated‚Äù the website area last week using some settings for the online repo. Therefore, we don‚Äôt have to think much about this aspect ‚Äì there basically is an automatic connection between the remote repo and the website: GitHub will detect whenever we‚Äôve changed our online repo, and will update the website for us.\n\nIn summary, when you have made changes to your website that you would like to put online, go to GitHub Desktop to save a snapshot to your local repo (i.e., to commit) and then push those changes to your remote (online) repo. GitHub will then detect the changes to your online repo and update your website.\nWe will practice this routine today."
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#changing-the-url-to-your-website",
    "href": "posts/S06E04_website_04/index.html#changing-the-url-to-your-website",
    "title": "Quarto website 4",
    "section": "2 Changing the URL to your website",
    "text": "2 Changing the URL to your website\nThe URLs to your repository and website are automatically determined based on your GitHub username and repo name as follows:\n\nWebsite: https://&lt;github-username&gt;.github.io/&lt;github-repo-name&gt;\nGitHub repo: https://github.com/&lt;github-username&gt;/&lt;github-repo-name&gt;\n\nFor instance, the Code Club practice website is under the GitHub username osu-codeclub and the repository name practice-website, and therefore, it has the following URLs:\n\nGitHub repo: https://github.com/osu-codeclub/practice-website\nWebsite: https://osu-codeclub.github.io/practice-website\n\nHowever, the main Code Club website has a shorter URL that only contains the GitHub username: https://osu-codeclub.github.io. You, too, can change your website‚Äôs URL so that it only contains your GitHub username.\n\nIf you‚Äôre making a personal website, you‚Äôll likely want to make this change.\nIf you‚Äôre making a website covering a specific topic or project, and could see yourself making other similar websites, this URL change doesn‚Äôt make as much sense.\n\nHow can you get such an URL for your website? You can do so by giving your GitHub repo the name &lt;github-username&gt;.github.io.\n So, for whoever would like to have the shorter URL format, let‚Äôs change the GitHub repo name to your GitHub username. In your GitHub repository, click ‚ÄúSettings‚Äù:\n\n\n\n\n\n\n\n\n\nThen, right at the top of the General page (the one that should open by default), click inside the ‚ÄúRepository name‚Äù box, and you‚Äôll notice that you can type to change the name. The new name of the repo should by your GitHub username (which should e.g.¬†show in the URL to your repo) followed by .github.io. For example, if your username is lucy, your new repo name should be lucy.github.io. After you‚Äôve typed the new name, click the ‚ÄúRename‚Äù button:xxx\n\n\n\n\n\nYou can type directly in the box to change the repo‚Äôs name\n\n\n\n\nThat should send you back to your repository‚Äôs main page, and if all went well, your URL should have been updated immediately. To check this, you can go back to your repo‚Äôs settings and then click on ‚ÄúPages‚Äù on the left-hand side, as shown below:\n\n\n\n\n\nOn the GitHub Pages page, you can check the URL to your site"
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#adding-about-info-and-a-readme",
    "href": "posts/S06E04_website_04/index.html#adding-about-info-and-a-readme",
    "title": "Quarto website 4",
    "section": "3 Adding About info and a README",
    "text": "3 Adding About info and a README\n\n3.1 About\nWhile we‚Äôre making edits on GitHub, let‚Äôs first add a very brief description of our repo, and the URL to the website, to the ‚ÄúAbout‚Äù section on the main page of your repo.\n Click the cog wheel icon shown below, and then:\n\n\n\n\n\n\n\n\n\n\nEnter a one-sentence description of your repo in the ‚ÄúDescription‚Äù box.\nBelow ‚ÄúWebsite‚Äù, you can simply check the box ‚ÄúUse your GitHub Pages website‚Äù to add your website‚Äôs URL to this About section.\n\n\n\n\n\n\n\n\n\n\nNow, your About section should look something like this:\n\n\n\n\n\n\n\n\n\n\n\n\n3.2 README\nNext, let‚Äôs add a README file to our repo.\nIf we create a file that is called e.g.¬†README or README.md in the top-level folder of our repo, GitHub will automatically show it (in rendered form, if the file is written in Markdown) on the main page of our repository. Besides the About section, this is another customary way you can make it clear to people that visit your repo on GitHub, what this repo is all about.\nUnlike the changes we made so far today (our website URL, the About info), creating a README file will actually modify the contents of our repo. Therefore, it will be easiest to create this file on our own computer, commit it to our local repo, and push the changes to the remote repo4.\n\nYour turn: Create a README file for your website‚Äôs repo\n\nSwitch to your RStudio window with your website RStudio project open, then click on ‚ÄúFile‚Äù =&gt; ‚ÄúNew File‚Äù =&gt; ‚ÄúMarkdown File‚Äù (halfway down).\nIf the new file doesn‚Äôt automatically open in ‚ÄúVisual‚Äù mode, you can click the ‚ÄúVisual‚Äù button to do so, unless you would like to practice with Markdown syntax.\nSave the file straight away as README.md, in the top-level folder where you also have, e.g., the _quarto.yml file.\nAdd some text to the file, which can be as long or short as you want; you‚Äôll mostly just want to make it clear (again) that this repo is the source for your website. For example, I‚Äôll add for this practice website:\n\n## This is the repository for a practice website part of OSU's Code Club\n\n- OSU Code Club: &lt;https://osu-codeclub.github.io&gt;\n\n- OSU Code Club practice website: &lt;https://osu-codeclub.github.io/practice-website&gt;\n\n\n\n\n\n\n\n\nYour README plain Markdown file\n\n\n\n\nThe ‚ÄúREADME‚Äù in the filename doesn‚Äôt have to be in all-caps, but this is customary.\nThe .md extension stands for (plain) Markdown, as opposed to Quarto Markdown (.qmd) or R Markdown (.Rmd). The difference between plain Markfown and Quarto/R Markdown files is that the latter can execute code (usually but not limited to R code).\nAn interesting side note is that the conversion of a .qmd/.Rmd file to the final output file (HTML in our case, could e.g.¬†also be PDF) takes place in two steps: first, it is rendered to .md, which is then rendered to the final output format."
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#updating-the-online-repo",
    "href": "posts/S06E04_website_04/index.html#updating-the-online-repo",
    "title": "Quarto website 4",
    "section": "4 Updating the online repo",
    "text": "4 Updating the online repo\nNow that we have made changes to our ‚Äúworking directory‚Äù by adding a README file, we should commit these changes to our local repo and then push them to the remote repo. For that, we‚Äôll switch to GitHub Desktop.\n When you open GitHub Desktop, it should automatically focus on your website‚Äôs repo, and you should see a bunch of changes listed in the left-hand panel.\nTo commit all of these changes at once, focus on the bottom-left part, where you can leave the ‚ÄúDescription‚Äù box empty, but you have to fill out something in the ‚ÄúSummary (required)‚Äù box, which should ideally summarize the changes you just made, e.g.:\n\n\n\n\n\nAfter entering something in the Summary box, click ‚ÄòCommit to main‚Äô\n\n\n\n\nThen, click on the large blue ‚ÄúCommit to main‚Äù button (this button may also say ‚ÄúCommit to master‚Äù) to commit your changes to your local repo.\nNext, the following should appear in the main GitHub Desktop pane, and you can click ‚ÄúPush origin‚Äù:\n\n\n\n\n\nClick ‚ÄòPush origin‚Äô to push your local repo changes to remote\n\n\n\n\n\n\n\n\n\n\nGit terminology\n\n\n\n\nThe ‚Äúmaster‚Äù or ‚Äúmain‚Äù in e.g.¬†‚ÄúCommit to main‚Äù refers to a specific so-called branch of your repository. With Git version control, it is for example common to work on experimental changes in your code in a separate (non-main) branch, so that your code in main keeps working in the meantime.\n‚ÄúOrigin‚Äù is the default name that is given to the default connection with your remote repo, so ‚ÄúPush origin‚Äù means push to the default remote repo.\n\n\n\n\n\nLet‚Äôs switch to our repo page on GitHub in our browser, where we should immediately see our new commit referenced at the top:\n\n\n\n\n\nYou should see your changes referred to in the online repo\n\n\n\n\nAnd if you scroll down, the README.md should appear in rendered form below the file listing:\n\n\n\n\n\nGitHub will render and display a README file in your repo automatically\n\n\n\n\nFinally, a couple of things to note about what we just did:\n\nUnlike most changes you‚Äôll make to your repo, this change did not affect our website at all.\nWe can freely change our GitHub repo name without having to change the name of our folder with the website: these two can be the same, but they can also differ."
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#referencing-our-repo-on-the-website",
    "href": "posts/S06E04_website_04/index.html#referencing-our-repo-on-the-website",
    "title": "Quarto website 4",
    "section": "5 Referencing our repo on the website",
    "text": "5 Referencing our repo on the website\nFinally, we can reference our GitHub repo on our website in two ways, by making changes in our _quarto.yml.\nFirst, we can add a GitHub icon to the right-hand end of our top navigation bar, which will link to our GitHub repom as follows:\nwebsite:\n  navbar:\n    right:\n      - href: \"https://github.com/osu-codeclub/practice-website\"\n        icon: github\n\n\n\n\n\nMaking the change above should produce this icon in the navbar on your website\n\n\n\n\nSecond, we can add one or two ‚Äúrepo actions‚Äù links to the Table of Contents that on each page on our website, which will allow people to:\n\nAction issue: Report an ‚Äúissue‚Äù on GitHub, e.g.¬†report that a link on your site is broken. This will open a new so-called issue for your repo ‚Äì you should get an email when this happens.\nAction edit: Make a suggestion for a change (‚ÄúEdit this page‚Äù), e.g.¬†fix the broken link. This will open a new so-called pull request for your repo, and you can choose whether you want to accept this request, in which case it should automatically update your repo and website.\n\nIf you want both of these type of links, you should add the following to your _quarto.yml:\nwebsite:\n  repo-url: https://github.com/osu-codeclub/osu-codeclub.github.io\n  repo-actions: [edit, issue]\n\n\n\n\n\nMaking the change above should produce these entries in the TOC of every page on your website\n\n\n\n\n\nYour turn: update _quarto.yml and get the changes to your website\n\nMake some or all of the suggested changes to your _quarto.yml file.\nRender your entire website, so the changes will be included in the website‚Äôs HTML files in your docs folder. (Recall that to render your full website, as opposed to a single document, click the ‚ÄúRender Website‚Äù button in RStudio‚Äôs ‚ÄúBuild‚Äù Tab.)\nGo to GitHub Desktop and commit the changes to your local repo.\nStill in GitHub Desktop, push the changes to your remote repo.\nGo to you GitHub repo, and check that you see your most recent push.\nGo to / refresh your website, and see if the changes are there. (You may have to wait a minute or so.)"
  },
  {
    "objectID": "posts/S06E04_website_04/index.html#footnotes",
    "href": "posts/S06E04_website_04/index.html#footnotes",
    "title": "Quarto website 4",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDirectory (or ‚Äúdir‚Äù for short) is just another word for a folder on your computer.‚Ü©Ô∏é\nIt is also possible to save to a snapshot with only some of the changes that you‚Äôve made to your working dir: you can add changed files individually rather than all at once, too.‚Ü©Ô∏é\nPulling in changes from the online repo is only relevant either when you are collaborating with others on a repo, such that sharing of changes happens via the online repo, or when you have made changes directly to the online repo (this is possible but generally not recommended).‚Ü©Ô∏é\nAlternatively, we could create and write this file directly on the GitHub website, but if we would do this, we would need to ‚Äúpull‚Äù in these changes from remote, which is something we won‚Äôt cover here.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S07E12_ggplot_02/index.html#introduction",
    "href": "posts/S07E12_ggplot_02/index.html#introduction",
    "title": "Plotting 2: aesthetics, violin, and boxplots",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of the past session\nLast week‚Äôs session marked the beginning of our data visualization journey with ggplot2. We explored the philosophy of coding graphics, created a versatile ggplot template for various charts, and discovered how to add visual elements using aesthetics and layers. Exciting times ahead!\n\n\nSession Goals\n\nLet‚Äôs pick up on aesthetics and learn some more about it. Furthermore, let‚Äôs introduce the theme() function.\nLearn the basic of other geom_boxplot(), geom_violin(), stat_summary."
  },
  {
    "objectID": "posts/S07E12_ggplot_02/index.html#our-data-set",
    "href": "posts/S07E12_ggplot_02/index.html#our-data-set",
    "title": "Plotting 2: aesthetics, violin, and boxplots",
    "section": "2 Our data set",
    "text": "2 Our data set\n\n\n\nIllustration by Allison Horst\n\n\nWe are going to continue using our üêß data set from the package palmerpenguins. If you haven‚Äôt done so, please install that package first:\n\ninstall.packages(\"palmerpenguins\")\n\npalmerpenguins is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.¬†Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.\nWe‚Äôll now load the package, along with the tidyverse (which includes ggplot2):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.4     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nOnce you‚Äôve loaded that package you will have a data frame called penguins at your disposal ‚Äî let‚Äôs take a look:\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ‚Ñπ 334 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S07E12_ggplot_02/index.html#the-absolute-power-of-aesthetics",
    "href": "posts/S07E12_ggplot_02/index.html#the-absolute-power-of-aesthetics",
    "title": "Plotting 2: aesthetics, violin, and boxplots",
    "section": "3 The Absolute Power of Aesthetics",
    "text": "3 The Absolute Power of Aesthetics\n\n\n\nAesthetics enable us to showcase multiple dimensions of our dataset in a single plot by modifying elements such as color, shape, size, labels, and transparency.\n\n\n\n\n3.1 Last week‚Äôs example on ‚ÄúThe power of aesthetics‚Äù\nLast week we added a third aesthetic to our graph, color. Our current plot mapped bill_length_mm to the x aesthetic, and bill_depth_mm to the y aesthetic ‚Äî , we then added a mapping of species to the color aesthetic:\n\np &lt;- ggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species))\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease note that we begin by using our data set to create a plot object with the function ggplot(). We then assign this object to the variable p. From this point forward, we can add layers by using the + operator.\n\n\n\n\n\n\n\n\n3.2 What if we want to customize our plot?\nWe can do this using theme(). There are several options of themes which control all non-data display. Use theme() if you just need to tweak the display of an existing theme.\nFor this session, let‚Äôs utilize theme_bw().\n\np &lt;- ggplot(data = penguins) + theme_bw() +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species))\np\n\n\n\n\n\n\n\n\n\n\n3.3 What if we want to change colors?\nWe can manually change colors.\n\n# Manual color change\n# By using scale_colour_manual(),\n# we can specify the exact colours we want to use\np + \nscale_color_manual(\n  # Note that the color order will correspond to\n  # the order of the species given in the legend\n  values = c(\"grey55\", \"orange\", \"skyblue\"))\n\n\n\n\n\n\n\n\nBy using the colors() function, you can explore numerous color options that are available for selection.\n\n\n3.4 Using a different color palette: RColorBrewer\nThere is a wide variety of R color packages specifically designed to offer a range of color palette options, each evoking a distinct mood. For instance, the RColorBrewer package provides a choice of 35 palettes!\nAt this point, you have become an expert in the fundamentals of R. Installing packages and loading them with library() is now second nature to you.\nNow, we can install RColorBrewer and choose one from the many palettes it offers.\n\nRColorBrewer::display.brewer.all(type = \"qual\")\n\n\n\n\n\n\n\n\nAbove, you can observe the organization of the colors into distinct groups based on their sequential, diverging, or mixed characteristics. It is important to note that varied palettes are advantageous for varying data types.\nLet‚Äôs use these palettes with our original penguin graph. Here is an example demonstrating how the Set1 palette is utilized to group data points with the function scale_color_brewer() and the palette argument.\n\np + \nscale_color_brewer(palette = \"Set1\")\n\n\n\n\n\n\n\n\nIn addition, the ggplot2 package offers other functions. Two such functions are scale_color_viridis() and scale_color_grey(), which allows us to convert colors to grayscale without sacrificing information. This is especially important for individuals with colorblindness.\n\np + \nscale_color_viridis_d()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease note that when using scale_color_viridis() to color data points, we need to specify whether our variable is continuous [using scale_color_viridis_c()] or discrete [using scale_color_viridis_d()]. In this case, the variable species is discrete.\n\n\n\n\n\n\n\n\n Exercise 1\n\nLet us revisit the scatter plot depicting the correlation between bill length and depth, distinguished by different species using colored data points.\nWhat if we want to use only a grayscale palette for publication purposes?\n\n\n\nHints (click here)\n\nWe can use the scale_color_grey() function to color our grouped data points.\n\n\n\nSolutions (click here)\n\n\np + \nscale_color_grey()\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5 Colorblind-friendly palettes\nHave you ever contemplated how your figure might appear when viewed by individuals with different types of color blindness? We can utilize the colorBlindness package to explore this aspect.\nLet‚Äôs install the colorBlindness package and load it.\n\n# Let's install the colorBlindness package\ninstall.packages(\"colorBlindness\")\nlibrary(colorBlindness)\n\nTo begin with, let‚Äôs test out various colors using the cvdPlot() function. This will demonstrate how our current plot appears to individuals with different types of color blindness.\n\ncolorBlindness::cvdPlot(p)\n\n\n\n\n\n\n\n\nOur current color palette is not accessible, as can be observed. However, by using viridis palettes, we can ensure that our plots consistently convey the same information, regardless of the audience.\nLet‚Äôs use the same viridis palette we used above to make our plot more accessible.\n\np_viridis &lt;- p + \nscale_color_viridis_d()\n\nWere we successful? Let‚Äôs use cvdPlot() to check again.\n\ncolorBlindness::cvdPlot(p_viridis)\n\n\n\n\n\n\n\n\n\n\n3.6 Providing transparency with alpha\nHow can we incorporate transparency into the data points in our graph? One way to achieve this is by utilizing the alpha feature.\n\nggplot(data = penguins) +\n  geom_point(alpha = 0.5, mapping = aes(x = bill_length_mm, \n                                        y = bill_depth_mm, \n                                        color = species))\n\n\n\n\n\n\n\n\nHere, we present an example of how to utilize the alpha function to incorporate transparency into our data points. By doing so, we are able to exhibit four variables within a single graph.\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species,\n                           alpha = flipper_length_mm))\n\n\n\n\n\n\n\n\n\n Exercise 2\n\nWe like the graph we produced above. We want, however, to also display body_mass_g.\nHow can we add this additional variable to our graph?\n\n\n\nHints (click here)\n\nWe can use the size function within aes().\n\n\n\nSolutions (click here)\n\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species,\n                           alpha = flipper_length_mm,\n                           size = body_mass_g))"
  },
  {
    "objectID": "posts/S07E12_ggplot_02/index.html#boxplot-geom_boxplot",
    "href": "posts/S07E12_ggplot_02/index.html#boxplot-geom_boxplot",
    "title": "Plotting 2: aesthetics, violin, and boxplots",
    "section": "4 Boxplot: geom_boxplot()",
    "text": "4 Boxplot: geom_boxplot()\nA boxplot gives a nice summary of one or more numeric variables. A boxplot is composed of several elements:\n\n\n\nAnatomy of a boxplot.\n\n\nLet‚Äôs use geom_boxplot to explore the bill_length_mm for the penguien species.\n\nggplot(data = penguins, \n       aes(x = species, \n           y = bill_length_mm,\n           fill = species)) + # specify species as a grouping variable\n  geom_boxplot() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease note that we add color to the boxplot by applying the fill option. You may want to experiment with using the color option to observe the differences.\n\n\n\n\n\n\n\n Challenge - Let‚Äôs work together!\nLet‚Äôs consider using a different color palette for the boxplot. Additionally, we might prefer to show the mean value instead of the median value and add some transparency. Lastly, we would like to display our data points to provide information on the sample size for each species.\n\n\nHints (click here)\n\nTo change the color palette for the boxplot, we can utilize the scale_fill_brewer() function. To include the mean value, we can employ the stat_summary() function. If we want to add transparency, we can use the alpha parameter. Lastly, to overlay the data points, we can utilize the geom_jitter() function.\n\n\n\nSolutions (click here)\n\n\nggplot(data = penguins, \n       aes(x = species, \n           y = bill_length_mm,\n           fill = species)) + # specify species as a grouping variable\n  geom_boxplot(alpha = 0.5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  stat_summary(fun = \"mean\", color = \"red3\") + \n  geom_jitter(alpha = .5)"
  },
  {
    "objectID": "posts/S07E12_ggplot_02/index.html#violin-plot-geom_violin",
    "href": "posts/S07E12_ggplot_02/index.html#violin-plot-geom_violin",
    "title": "Plotting 2: aesthetics, violin, and boxplots",
    "section": "5 Violin plot: geom_violin()",
    "text": "5 Violin plot: geom_violin()\nSimilar to boxplots, violin plots visualize the distribution of a numerical variable for one or multiple groups. However, the shape of a violin graphically represents the distribution of data points that is not easily visible in a boxplot‚Äôs summary, leading to a more precise representation of the data (Data-to-Viz).\n\nggplot(data = penguins, \n       aes(x = species, \n           y = bill_length_mm,\n           fill = species)) + # specify species as a grouping variable\n  geom_violin(alpha = 0.5) + \n  scale_fill_brewer(palette = \"Dark2\") + \n  stat_summary(fun = \"mean\", color = \"red3\") + \n  geom_jitter(alpha = .5) \n\n\n\n\n\n\n\n\n\n Exercise 3\n\nTo keep only the Gentoo data, pipe your dataset into the filter() function.\nCreate a boxplot examining bill_length_mm by sex by piping the filtered data into ggplot().\nEnsure that the points with unknown sex (NA) are removed.\nInclude the mean value of bill_length_mm in the boxplots.\nDisplay all data points on top of the boxplot.\nLastly, display the distribution of each dataset.\nTo achieve the graph displaying all the above requirements, you will need to add transparency.\n\n\n\nSolutions (click here)\n\n\npenguins |&gt; \n  filter(species == \"Gentoo\", !is.na(sex)) |&gt; \n  ggplot(aes(x = sex, y = bill_length_mm, color = sex)) + \n  geom_boxplot() + \n  scale_color_brewer(palette = \"Dark2\") + \n  stat_summary(fun = \"mean\", color = \"red3\") + \n  geom_jitter(alpha = .5) + \n  geom_violin(alpha = .1)"
  },
  {
    "objectID": "posts/S09E02_ggplot_02/index.html#introduction",
    "href": "posts/S09E02_ggplot_02/index.html#introduction",
    "title": "Introduction to ggplot2 - 02",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nRecap of the past session\nLast week‚Äôs session marked the beginning of our data visualization journey with ggplot2. We explored the philosophy of coding graphics, created a versatile ggplot template for various charts, and discovered how to add visual elements using aesthetics and layers. Exciting times ahead!\n\n\nSession Goals\n\nLet‚Äôs pick up on aesthetics and learn some more about it. Furthermore, let‚Äôs introduce the theme() function.\nLearn the basic of theme, scale, color, transparency, size, and more!"
  },
  {
    "objectID": "posts/S09E02_ggplot_02/index.html#our-data-set",
    "href": "posts/S09E02_ggplot_02/index.html#our-data-set",
    "title": "Introduction to ggplot2 - 02",
    "section": "2 Our data set",
    "text": "2 Our data set\n\n\n\nIllustration by Allison Horst\n\n\nWe are going to continue using our üêß data set from the package palmerpenguins. If you haven‚Äôt done so, please install that package first:\n\ninstall.packages(\"palmerpenguins\")\n\npalmerpenguins is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.¬†Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.\nWe‚Äôll now load the package, along with the tidyverse (which includes ggplot2):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nOnce you‚Äôve loaded that package you will have a data frame called penguins at your disposal ‚Äî let‚Äôs take a look:\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ‚Ñπ 334 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S09E02_ggplot_02/index.html#the-absolute-power-of-aesthetics",
    "href": "posts/S09E02_ggplot_02/index.html#the-absolute-power-of-aesthetics",
    "title": "Introduction to ggplot2 - 02",
    "section": "3 The Absolute Power of Aesthetics",
    "text": "3 The Absolute Power of Aesthetics\n\n\n\nAesthetics enable us to showcase multiple dimensions of our dataset in a single plot by modifying elements such as color, shape, size, labels, and transparency.\n\n\n\n\n3.1 Last week‚Äôs example on ‚ÄúThe power of aesthetics‚Äù\nLast week we added a third aesthetic to our graph, color. Our current plot mapped bill_length_mm to the x aesthetic, and bill_depth_mm to the y aesthetic ‚Äî , we then added a mapping of species to the color aesthetic:\n\np &lt;- ggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species))\np\n\n\n\n\n\n\n\n\n\n\nPlease note that we begin by using our data set to create a plot object with the function ggplot(). We then assign this object to the variable p. From this point forward, we can add layers by using the + operator.\n\n\n\n\n\n\n\n\n3.2 What if we want to customize our plot?\nWe can do this using theme(). There are several options of themes which control all non-data display. Use theme() if you just need to tweak the display of an existing theme.\nFor this session, let‚Äôs utilize theme_bw().\n\np &lt;- ggplot(data = penguins) + theme_bw() +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species))\np\n\n\n\n\n\n\n3.3 What if we want to change colors?\nWe can manually change colors.\n\n# Manual color change\n# By using scale_colour_manual(),\n# we can specify the exact colours we want to use\np + \nscale_color_manual(\n  # Note that the color order will correspond to\n  # the order of the species given in the legend\n  values = c(\"grey55\", \"orange\", \"skyblue\"))\n\n\n\n\nBy using the colors() function, you can explore numerous color options that are available for selection.\n\n\n3.4 Using a different color palette: RColorBrewer\nThere is a wide variety of R color packages specifically designed to offer a range of color palette options, each evoking a distinct mood. For instance, the RColorBrewer package provides a choice of 35 palettes!\nAt this point, you have become an expert in the fundamentals of R. Installing packages and loading them with library() is now second nature to you.\nNow, we can install RColorBrewer and choose one from the many palettes it offers.\n\nRColorBrewer::display.brewer.all(type = \"qual\")\n\n\n\n\nAbove, you can observe the organization of the colors into distinct groups based on their sequential, diverging, or mixed characteristics. It is important to note that varied palettes are advantageous for varying data types.\nLet‚Äôs use these palettes with our original penguin graph. Here is an example demonstrating how the Set1 palette is utilized to group data points with the function scale_color_brewer() and the palette argument.\n\np + \nscale_color_brewer(palette = \"Set1\")\n\n\n\n\nIn addition, the ggplot2 package offers other functions. Two such functions are scale_color_viridis() and scale_color_grey(), which allows us to convert colors to grayscale without sacrificing information. This is especially important for individuals with colorblindness.\n\np + \nscale_color_viridis_d()\n\n\n\n\n\n\n\n\n\n\nPlease note that when using scale_color_viridis() to color data points, we need to specify whether our variable is continuous [using scale_color_viridis_c()] or discrete [using scale_color_viridis_d()]. In this case, the variable species is discrete.\n\n\n\n\n\n\n\n\n Exercise 1\n\nLet us revisit the scatter plot depicting the correlation between bill length and depth, distinguished by different species using colored data points.\nWhat if we want to use only a grayscale palette for publication purposes?\n\n\n\nHints (click here)\n\nWe can use the scale_color_grey() function to color our grouped data points.\n\n\n\nSolutions (click here)\n\n\np + \nscale_color_grey()\n\n\n\n\n\n\n\n\n\n3.5 Colorblind-friendly palettes\nHave you ever contemplated how your figure might appear when viewed by individuals with different types of color blindness? We can utilize the colorBlindness package to explore this aspect.\nLet‚Äôs install the colorBlindness package and load it.\n\n# Let's install the colorBlindness package\ninstall.packages(\"colorBlindness\")\nlibrary(colorBlindness)\n\nTo begin with, let‚Äôs test out various colors using the cvdPlot() function. This will demonstrate how our current plot appears to individuals with different types of color blindness.\n\ncolorBlindness::cvdPlot(p)\n\n\n\n\nOur current color palette is not accessible, as can be observed. However, by using viridis palettes, we can ensure that our plots consistently convey the same information, regardless of the audience.\nLet‚Äôs use the same viridis palette we used above to make our plot more accessible.\n\np_viridis &lt;- p + \nscale_color_viridis_d()\n\nWere we successful? Let‚Äôs use cvdPlot() to check again.\n\ncolorBlindness::cvdPlot(p_viridis)\n\n\n\n\n\n\n3.6 Providing transparency with alpha\nHow can we incorporate transparency into the data points in our graph? One way to achieve this is by utilizing the alpha feature.\n\nggplot(data = penguins) +\n  geom_point(alpha = 0.5, mapping = aes(x = bill_length_mm, \n                                        y = bill_depth_mm, \n                                        color = species))\n\n\n\n\nHere, we present an example of how to utilize the alpha function to incorporate transparency into our data points. By doing so, we are able to exhibit four variables within a single graph.\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species,\n                           alpha = flipper_length_mm))\n\n\n\n\n\n Exercise 2\n\nWe like the graph we produced above. We want, however, to also display body_mass_g.\nHow can we add this additional variable to our graph?\n\n\n\nHints (click here)\n\nWe can use the size function within aes().\n\n\n\nSolutions (click here)\n\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species,\n                           alpha = flipper_length_mm,\n                           size = body_mass_g))"
  },
  {
    "objectID": "posts/S09E10_functional-programming_03/index.html#intro-and-getting-started",
    "href": "posts/S09E10_functional-programming_03/index.html#intro-and-getting-started",
    "title": "Iterating part III: purrr‚Äôs map() function",
    "section": "1 Intro and getting started",
    "text": "1 Intro and getting started\nIn the last two weeks, you‚Äôve learned about a couple of effective coding strategies for situations where you need to repeat an operation, for example across different subsets of your data. Instead of copy-pasting your code and making small edits for every copy, you can use for loops and functions like map().\nToday, we will start with a recap of these approaches and then dive deeper into the map() function (and the very similar map_vec()).\nThe map() function is part of the purrr package, one of the core tidyverse packages that can be loaded with library(tidyverse). We will also load the familiar palmerpenguins dataset for a couple of examples.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.4     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/S09E10_functional-programming_03/index.html#iteration-recap",
    "href": "posts/S09E10_functional-programming_03/index.html#iteration-recap",
    "title": "Iterating part III: purrr‚Äôs map() function",
    "section": "2 Iteration recap",
    "text": "2 Iteration recap\nWhen we iterate, we repeat a procedure for each value/element in a certain collection.\nLet‚Äôs say we have three sets of measurements (each stored in a vector):\n\nvec1 &lt;- c(3, 74, 18)\nvec2 &lt;- c(33, 14, 25)\nvec3 &lt;- c(10, 88, 47)\n\nWe want to compute the mean value for each of these. The simplest approach would be to just repeat the code to do so three times, changing only the identity of the vector that we operate on:\n\nmean(vec1)\n\n[1] 31.66667\n\nmean(vec2)\n\n[1] 24\n\nmean(vec3)\n\n[1] 48.33333\n\n\nBut we‚Äôd like to be able to avoid such code repetition. First, we may run into situations where we have many more than three collections. Second, the code that we need repeat may be much longer than just a call to mean(). All in all, the copy-and-paste routine can get very tedious, is error-prone, and would also make it more difficult to edit the repeated code.\nIn the previous two sessions, Jess has shown us two different ways of avoiding code repetition. The first is the for loop, which is a very widely used technique in programming, though is not nearly as common in R as in many other languages. We can iterate over our vectors with a for loop as follows ‚Äî note that I am putting them together in a list to do so:\n\nfor (vec in list(vec1, vec2, vec3)) {\n  print(mean(vec))\n}\n\n[1] 31.66667\n[1] 24\n[1] 48.33333\n\n\nA more compact and elegant way of iterating is using functional programming, where a function does the iteration ‚Äî here, the map() function:\n\nmap(.x = list(vec1, vec2, vec3), .f = mean)\n\n[[1]]\n[1] 31.66667\n\n[[2]]\n[1] 24\n\n[[3]]\n[1] 48.33333\n\n\nSome notes on the syntax of the map() function:\n\nThe first argument (.x) is the collection you want to iterate over, which can be a vector, list, or dataframe.\nThe second argument (.f) is the function that you want to apply to each element of the collection.\nThe name of that function is written without parentheses: mean and not mean()!\n\nUnder the hood, the function mean() will be run three times, each time with one of the vectors as its argument."
  },
  {
    "objectID": "posts/S09E10_functional-programming_03/index.html#beyond-the-basics-of-map",
    "href": "posts/S09E10_functional-programming_03/index.html#beyond-the-basics-of-map",
    "title": "Iterating part III: purrr‚Äôs map() function",
    "section": "3 Beyond the basics of map()",
    "text": "3 Beyond the basics of map()\n\nReturning vectors\nBy default, map() will return a list. But in some cases, like here, we may prefer to get a vector instead. We can do this with a slight variant on map(), map_vec():\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = mean)\n\n[1] 31.66667 24.00000 48.33333\n\n\n\n\n\nHow to handle additional arguments?\nWhat if we need to pass additional arguments to the function that map() calls for us?\nFor example, let‚Äôs say we had an NA in our data, which means that by default, mean() will return NA:\n\n# Change the second element of vec1 to 2\nvec1[2] &lt;- NA\nvec1\n\n[1]  3 NA 18\n\n\n\nmean(vec1)\n\n[1] NA\n\n\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = mean)\n\n[1]       NA 24.00000 48.33333\n\n\n\nWe can avoid this by using na.rm = TRUE in a stand-alone call to mean()‚Ä¶\n\nmean(vec1, na.rm = TRUE)\n\n[1] 10.5\n\n\n‚Ä¶but how can we do that with the map() function? The below doesn‚Äôt work:\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = mean(na.rm = TRUE))\n\nError in mean.default(na.rm = TRUE): argument \"x\" is missing, with no default\n\n\n\nInstead, we need to pass any additional arguments separately, basically as if they were arguments of map():\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = mean, na.rm = TRUE)\n\n[1] 10.50000 24.00000 48.33333\n\n\n\n\n\nDefining an anonymous function within map()\nIt is possible to write the function call within map() using parentheses ‚Äî but this would essentially entail defining a function on the fly, which you can do as follows:\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = function(x) mean(x, na.rm = TRUE))\n\n[1] 10.50000 24.00000 48.33333\n\n\nIn practice, the above syntax is most commonly used in slighly more complex situations. For example, you may want to count the number of NAs in the following way, where the is.na() function is nested within the sum() function:\n\nsum(is.na(vec1))\n\n[1] 1\n\n\nThis poses a challenge to the standard map() syntax, but can be easily achieved with the anonymous function syntax shown above:\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = function(x) sum(is.na(x)))\n\n[1] 1 0 0\n\n\n\n\n\n Exercise 1\nA) Once again compute the mean of the three sets of measurements with map(), but now also pass the argument trim = 0.1 to the mean() function (If you‚Äôre interested, type ?mean for some information about what this argument does.)\n\n\nClick here for the solution\n\n\nArguments are added as if they were arguments of map() / map_vec(), so you simply add trim = 0.1 after a comma and don‚Äôt use additional parentheses:\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = mean, na.rm = TRUE, trim = 0.1)\n\n[1] 10.50000 24.00000 48.33333\n\n\nWhich runs the following under the hood:\n\nmean(vec1, na.rm = TRUE, trim = 0.1)\nmean(vec2, na.rm = TRUE, trim = 0.1)\nmean(vec3, na.rm = TRUE, trim = 0.1)\n\n\n\nB) Now use map_vec() with the length() function to compute the length of each of our vectors.\n\n\nClick here for the solution\n\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = length)\n\n[1] 3 3 3\n\n\n\n\n\n\n Exercise 2\nA) R does not have a built-in function to compute the standard error. Here is how we can do so ‚Äî by taking the standard deviation using the sd() function and dividing it by the square root (sqrt()) of the number of observations (length()):\n\nsd(vec1, na.rm = TRUE) / sqrt(length(vec1))\n\n[1] 6.123724\n\n\n\nBased on the above code, define your own function that computes the standard error. For a refresher on defining your own functions, see this section from last week‚Äôs material.\nThen, use your custom function inside map_vec() to compute the standard error for our data.\n\n\n\nClick here for the solution for the custom function\n\n\nse &lt;- function(x) {\n  sd(x, na.rm = TRUE) / sqrt(length((x)))\n}\n\n\n\n\nClick here for the full solution\n\n\nse &lt;- function(x) {\n  sd(x, na.rm = TRUE) / sqrt(length((x)))\n}\n\nmap_vec(.x = list(vec1, vec2, vec3), .f = se)\n\n[1]  6.123724  5.507571 22.526528\n\n\n\n\nB) Now, restructure your code to compute the standard error with an anonymous function inside map_vec().\n\n\nClick here for the solution\n\n\nmap_vec(\n  .x = list(vec1, vec2, vec3),\n  .f = function(x) sd(x, na.rm = TRUE) / sqrt(length((x)))\n)\n\n[1]  6.123724  5.507571 22.526528"
  },
  {
    "objectID": "posts/S09E10_functional-programming_03/index.html#automaticimplicit-iteration-in-r",
    "href": "posts/S09E10_functional-programming_03/index.html#automaticimplicit-iteration-in-r",
    "title": "Iterating part III: purrr‚Äôs map() function",
    "section": "4 Automatic/implicit iteration in R",
    "text": "4 Automatic/implicit iteration in R\nThe example we used above with the three sets of vectors is rather contrived. This speaks to the fact that in R, we don‚Äôt have to explicitly iterate with for loops or map() except in more complex situations.\nThis is because first, iteration is in many cases ‚Äúautomagic‚Äù in R due to vectorization, so we don‚Äôt have to iterate over the values in vectors:\n\nmeasurements_inch &lt;- c(3, 74, 18)\n\n# Multiply each value in the vector with 2.54 :\n2.54 * measurements_inch\n\n[1]   7.62 187.96  45.72\n\n\nAlso, we usually have (or can put) our data in data frames, where vectorization across rows applies as well:\n\ndata.frame(measurements_inch) |&gt;\n  # Multiply each value in the vector with 2.54 :\n  mutate(measurements_cm = 2.54 * measurements_inch)\n\n  measurements_inch measurements_cm\n1                 3            7.62\n2                74          187.96\n3                18           45.72\n\n\n\n\n\n\n\n\n\nIterate across groups with summarize() and .by (Click to expand)\n\n\n\n\n\nSpeaking of implicit iteration in data frames, dplyr has functionality to repeat operations across subsets of the data without having to explicitly iterate over these subsets. For example, once the data from the above three-vector example is in a data frame‚Ä¶\n\nall &lt;- data.frame(\n  value = c(vec1, vec2, vec3),\n  group = rep(c(\"vec1\", \"vec2\",  \"vec3\"), each = 3) \n)\n\nall\n\n  value group\n1     3  vec1\n2    NA  vec1\n3    18  vec1\n4    33  vec2\n5    14  vec2\n6    25  vec2\n7    10  vec3\n8    88  vec3\n9    47  vec3\n\n\n\n‚Ä¶we can use summarize() with .by to repeat computations across our sets:\n\nall |&gt; summarize(mean = mean(value, na.rm = TRUE), .by = group)\n\n  group     mean\n1  vec1 10.50000\n2  vec2 24.00000\n3  vec3 48.33333\n\n\n\n\n\nHowever, operating across multiple columns of a dataframe is a bit more challenging, and in the final section below, we‚Äôll see how to do this with map()."
  },
  {
    "objectID": "posts/S09E10_functional-programming_03/index.html#using-map-to-iterate-across-columns-of-a-data-frame",
    "href": "posts/S09E10_functional-programming_03/index.html#using-map-to-iterate-across-columns-of-a-data-frame",
    "title": "Iterating part III: purrr‚Äôs map() function",
    "section": "5 Using map() to iterate across columns of a data frame",
    "text": "5 Using map() to iterate across columns of a data frame\nA data frame is really a special case of a list, one in which each vector is of the same length and constitutes a column. Therefore, iterating over a dataframe with a function like map() means that you‚Äôll repeat the operation for each column.\nFor example, it‚Äôs easy to check what type of data each column contains by using map_vec() with the class() function:\n\nmap_vec(.x = penguins, .f = class)\n\n          species            island    bill_length_mm     bill_depth_mm \n         \"factor\"          \"factor\"         \"numeric\"         \"numeric\" \nflipper_length_mm       body_mass_g               sex              year \n        \"integer\"         \"integer\"          \"factor\"         \"integer\" \n\n\nSimilarly, the n_distinct() function computes the number of distinct (unique) values, and we can run that on each column like so:\n\nmap_vec(.x = penguins, .f = n_distinct)\n\n          species            island    bill_length_mm     bill_depth_mm \n                3                 3               165                81 \nflipper_length_mm       body_mass_g               sex              year \n               56                95                 3                 3 \n\n\n\n\n\n\n\n\n\nAn alternative approach: the across() function (Click to expand)\n\n\n\n\n\nYou can also operate on multiple columns using dplyr‚Äôs across() function, which should be used inside another dplyr function, most commonly summarise() or mutate().\nFor usage in the simplest cases, like for our map() examples above, using across() is more verbose than map():\n\npenguins |&gt; summarise(across(.cols = everything(), .fns = n_distinct))\n\n# A tibble: 1 √ó 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n    &lt;int&gt;  &lt;int&gt;          &lt;int&gt;         &lt;int&gt;             &lt;int&gt;       &lt;int&gt;\n1       3      3            165            81                56          95\n# ‚Ñπ 2 more variables: sex &lt;int&gt;, year &lt;int&gt;\n\n\n\nNotes on the across() syntax as shown above:\n\nIts main arguments are:\n\n.cols ‚Äì corresponding to .x in map() (the things to operate on)\n.fns ‚Äì corresponding to .f in map() (the function to repeat)\n\nYou should always make an explicit column selection, so for the simplest case of operating across all columns, it‚Äôs best to use everything()1.\n\nOn the other hand, it is much eaier to perform group-wise computations with summarise(across()) than with map():\n\npenguins |&gt;\n  summarise(across(.cols = everything(), .fns = n_distinct), .by = species)\n\n# A tibble: 3 √ó 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;      &lt;int&gt;          &lt;int&gt;         &lt;int&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie         3             79            50                33          56\n2 Gentoo         1             76            40                26          48\n3 Chinstrap      1             55            33                25          34\n# ‚Ñπ 2 more variables: sex &lt;int&gt;, year &lt;int&gt;\n\n\n\nFinally, if you need to use additional arguments for the function that across() calls, you should use the anonymous function notation that was explained in the first box on this page:\n\npenguins |&gt;\n  summarise(across(\n    .cols = where(is.numeric),\n    .fns = function(x) mean(x, na.rm = TRUE)\n    ))\n\n# A tibble: 1 √ó 5\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1           43.9          17.2              201.       4202. 2008.\n\n\n\n\n\n\n\n Exercise 2\nA) Use map_vec() to compute the mean value for each column in the penguins dataframe. Why are you getting warning messages and NAs?\n\n\nClick here for the solution\n\n\nmap_vec(.x = penguins, .f = mean, na.rm = TRUE)\n\nWarning in mean.default(.x[[i]], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(.x[[i]], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(.x[[i]], ...): argument is not numeric or logical:\nreturning NA\n\n\n          species            island    bill_length_mm     bill_depth_mm \n               NA                NA          43.92193          17.15117 \nflipper_length_mm       body_mass_g               sex              year \n        200.91520        4201.75439                NA        2008.02907 \n\n\nThe warning messages and NAs (despite using na.rm = TRUE) appear because not some of the columns, like species and island, don‚Äôt contain numbers at all.\n\nB) Can you modify the penguins dataframe before passing it to map_vec() so it only contains columns with numbers?\n\n\nClick here for a hint on the general workflow\n\nYou could save the modified dataframe and then use map_vec(), but we‚Äôd prefer to use pipes as follows:\n\npenguins |&gt;\n  select(bill_length_mm) |&gt;\n  map_vec(.f = mean, na.rm = TRUE)\n\nbill_length_mm \n      43.92193 \n\n\n(The above only selects one column though, you‚Äôll still have to work on the select() function call!)\n\n\n\nClick here for a hint on column selection\n\nThe naive way to select all numeric columns would be to first figure out out which are numeric, and then simply list all of those inside select().\nHowever, there is a handy helper function to select columns by type: where(): see this Help page. Can you figure out how to use it to select numeric columns?\n\n\n\nClick here for the solution\n\n\npenguins |&gt;\n  select(where(is.numeric)) |&gt;\n  map_vec(.f = mean, na.rm = TRUE)\n\n   bill_length_mm     bill_depth_mm flipper_length_mm       body_mass_g \n         43.92193          17.15117         200.91520        4201.75439 \n             year \n       2008.02907 \n\n\n\nC) Count the number of NAs in each column of the penguins dataframe within map_vec().\n\n\nClick here for the solution\n\n\nmap_vec(.x = penguins, .f = function(x) sum(is.na(x)))\n\n          species            island    bill_length_mm     bill_depth_mm \n                0                 0                 2                 2 \nflipper_length_mm       body_mass_g               sex              year \n                2                 2                11                 0"
  },
  {
    "objectID": "posts/S09E10_functional-programming_03/index.html#footnotes",
    "href": "posts/S09E10_functional-programming_03/index.html#footnotes",
    "title": "Iterating part III: purrr‚Äôs map() function",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n The across() function does (still) work without .cols(), and will then select all columns, but this behavior is ‚Äúdeprecated‚Äù (outdated) and should not be used.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S07E10_tidy_05/index.html#introduction",
    "href": "posts/S07E10_tidy_05/index.html#introduction",
    "title": "Tidyverse 5: Reading in data",
    "section": "1 Introduction",
    "text": "1 Introduction\nSo far in code club this semester, all of the data we have used has been either made up by us or able to be loading from data embedded within base R or a package.\nToday we are going to go over reading in external data into R. The tidyverse core package that contains functions for reading in (and writing out) data is readr and readxl allows reading in Excel data. This package allows us to read in rectangular data. Some of the material from today is adapted from a past code club by Jelmer Poelstra.\nUseful references for today:\n\nreadr documentation (for reading in delimited files)\nreadxl docuemtation (for reading in Excel files)\nData import with the tidyverse cheatsheet\nData import chapter 7 in R for Data Science\n\nThere are other non-core tidyverse packages for reading in data (including directly from Google Drive), you can find them here though I will not go through them today.\nWe are going to use a new package today.\n\ninstall.packages(\"readxl\")\n\nAnd then will start by loading the libraries we need for today.\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nBut before we actually read in data, let‚Äôs talk a little bit about the different ways in which input data can be formatted."
  },
  {
    "objectID": "posts/S07E10_tidy_05/index.html#what-are-some-common-data-formatting-styles",
    "href": "posts/S07E10_tidy_05/index.html#what-are-some-common-data-formatting-styles",
    "title": "Tidyverse 5: Reading in data",
    "section": "2 What are some common data formatting styles?",
    "text": "2 What are some common data formatting styles?\n\n2.1 .csv\nThe most common formatting style for data is comma separated values, which often has the file extension .csv. This means that the data is delimited (i.e., separated) by commas. Often we open these files in a program like Excel, Numbers, or similar, which puts each value into its own cell, but the data actually looks like this:\nStudent ID,Full Name,favourite.food,mealPlan,AGE\n1,Sunil Huffmann,Strawberry yoghurt,Lunch only,4\n2,Barclay Lynn,French fries,Lunch only,5\n3,Jayendra Lyne,N/A,Breakfast and lunch,7\n4,Leon Rossini,Anchovies,Lunch only,\n5,Chidiegwu Dunkel,Pizza,Breakfast and lunch,five\n6,G√ºven√ß Attila,Ice cream,Lunch only,6\nHere, the first row are our column headers, and each subsequent row contains information about one student, including their student ID, full name, favorite food, meal plan, and age.\nIf we look at this data as a table, it looks like this:\n\n\n\n\n\n\n\n\n\n\n\n\nStudent ID\nFull Name\nfavourite.food\nmealPlan\nAGE\n\n\n\n\n1\nSunil Huffmann\nStrawberry yoghurt\nLunch only\n4\n\n\n2\nBarclay Lynn\nFrench fries\nLunch only\n5\n\n\n3\nJayendra Lyne\nN/A\nBreakfast and lunch\n7\n\n\n4\nLeon Rossini\nAnchovies\nLunch only\nNA\n\n\n5\nChidiegwu Dunkel\nPizza\nBreakfast and lunch\nfive\n\n\n6\nG√ºven√ß Attila\nIce cream\nLunch only\n6\n\n\n\n\n\n\n\n2.2 .tsv\nAnother common data format is as tab separated values, or .tsv. Here, instead of being separated by commas like in a .csv, the values are separated by tabs. Looking at the same students data in a .tsv format would look like this:\nStudent ID        Full Name        favourite.food        mealPlan        AGE\n1        Sunil Huffmann        Strawberry yoghurt        Lunch only        4\n2        Barclay Lynn        French fries        Lunch only        5\n3        Jayendra Lyne        N/A        Breakfast and lunch        7\n4        Leon Rossini        Anchovies        Lunch only        \n5        Chidiegwu Dunkel        Pizza        Breakfast and lunch        five\n6        G√ºven√ß Attila        Ice cream        Lunch only        6\n\nBoth comma-separated nad tab-separated values can also be stored with other file extensions like .txt.\n\n\n\n2.3 .xlsx and .xls\nThese are Microsoft-specific file formats created using the program Excel. Since using Excel spreadsheets so so common, there are special packages that allow the reading in of these file types. If you open up a file in Excel, you can save it in a variety of different file formats, just please do this with care, as Excel has reputation of turning gene names in to dates.\n\n\n2.4 Which file format to use?\nThe truth is all file formats can be read into R, and some might be better for certain instances. You might read on the internet that its better to use .csv files over .xlsx. and .xls for compatibility sake, but there are also benefits to Excel formats where lots of data can be stored in one file in different sheets.\n\nPick the data format that works best for your application."
  },
  {
    "objectID": "posts/S07E10_tidy_05/index.html#download-data-to-import",
    "href": "posts/S07E10_tidy_05/index.html#download-data-to-import",
    "title": "Tidyverse 5: Reading in data",
    "section": "3 Download data to import",
    "text": "3 Download data to import\nThe code below will let you download some (5) files to your computer for the exercise today, which you can then import. These files were created by Jelmer from R for Data Science for a code club many code clubs ago.\nThe code below allows you to download five files in different formats and with different data structure. We will practice data import with these files. Remember when you execute this code, your files will be downloaded to your working directory.\n\n# saves the url where the file is located\nurl_csv &lt;- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.csv\"\n# downloads the file and saves in your working directory as students.csv\ndownload.file(url = url_csv, destfile = \"students.csv\")\n\nurl_csv_noheader &lt;- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_noheader.csv\"\ndownload.file(url = url_csv_noheader, destfile = \"students_noheader.csv\")\n\nurl_csv_meta &lt;- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students_with_meta.csv\"\ndownload.file(url = url_csv_meta, destfile = \"students_with_meta.csv\")\n\nurl_tsv &lt;- \"https://github.com/biodash/biodash.github.io/raw/master/content/codeclub/S05E05/students.tsv\"\ndownload.file(url = url_tsv, destfile = \"students.tsv\")\n\nurl_excel &lt;- \"https://github.com/osu-codeclub/osu-codeclub.github.io/raw/main/posts/S07E10_tidy_05/students.xlsx\"\ndownload.file(url = url_excel, destfile = \"students.xlsx\")\n\nOnce you‚Äôve downloaded all these files, take a minute to open them all up on your computer (you can use Excel, Numbers, whatever) to see how they are different. Be sure not to make any changes to the filesa."
  },
  {
    "objectID": "posts/S07E10_tidy_05/index.html#reading-in-delimited-files",
    "href": "posts/S07E10_tidy_05/index.html#reading-in-delimited-files",
    "title": "Tidyverse 5: Reading in data",
    "section": "4 Reading in delimited files",
    "text": "4 Reading in delimited files\nThere are a few functions that allow you to read in tabular data in readr, and they are part of the read_*() family.\n\n\n\n[From the readr cheatsheet]\n\n\nThe following functions work similarly:\n\nread_csv(): reads in comma-separated values files\nread_csv2(): reads in semi-colon-separated values files where commas are the decimal point (common in Europe) instead of the period (as in the US)\nread_tsv(): reads in tab-separated values files\nread_delim(): reads in delimited files, where the delimiter can be specified. If you were to specify the delimiter to be ‚Äú,‚Äù, this could be the save as read_csv().\n\nLet‚Äôs start by reading in our ‚Äústudents.csv‚Äù file and then work through how changing how we set the arguments alters how our data is imported.\nThe first (and only required) argument to read_*() is the file, which we will provide in quotes as it is a string. If we were to have our file in a folder called ‚Äúdata‚Äù within our working directory, we could provide ‚Äúdata/students.csv‚Äù. If our file we wanted to read in was in some other location on our computer, we could provide the full path.\n\nstudents_csv &lt;- read_csv(\"students.csv\")\n\nRows: 6 Columns: 5\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe can see a message after we‚Äôve imported our data giving us information about how this process went. In this case, we‚Äôve read in a file with 6 rows and 5 columns. The delimiter is \",\" and we have information about what type our columns have been imported in. Here, the columns favourite.food, mealPlan, and AGE have been parsed as character type, and Student ID is numeric (i.e., dbl).\nWe can get a sense of our data by using the function head() to see the first 6 rows, all columns.\n\nhead(students_csv)\n\n# A tibble: 6 √ó 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 G√ºven√ß Attila    Ice cream          Lunch only          6"
  },
  {
    "objectID": "posts/S07E10_tidy_05/index.html#reading-in-excel-files",
    "href": "posts/S07E10_tidy_05/index.html#reading-in-excel-files",
    "title": "Tidyverse 5: Reading in data",
    "section": "5 Reading in Excel files",
    "text": "5 Reading in Excel files\nI expect many of you have data stored in .xlsx or .xls files that you‚Äôd like to read into R. The package readxl makes easy work of this. This packages has functions including:\n\nread_xlsx(): reads in .xlsx files\nread_xls(): reads in .xls files\nread_excel(): reads in both .xlsx and .xls files and tries to guess which one your file is. This usually but does not always works well.\n\n\nThere are subtle differences between .xlsx and .xls files but I don‚Äôt think they‚Äôre that important to get into here.\n\nLet‚Äôs read in our Excel file.\n\nstudents_excel &lt;- read_xlsx(\"students.xlsx\")\n\nhead(students_excel)\n\n# A tibble: 6 √ó 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 G‚àö¬∫ven‚àö√ü Attila  Ice cream          Lunch only          6    \n\n\nBy default the first sheet is read in. If we want to know what the names of the different sheets are, we can run the following code providing the name of our file.\n\nexcel_sheets(\"students.xlsx\")\n\n[1] \"students\"   \"students_2\"\n\n\nWe can set what sheet specifically we want to read in using the argument sheet = \"\".\n\nstudents_excel &lt;- read_xlsx(\"students.xlsx\",\n                            sheet = \"students\")"
  },
  {
    "objectID": "posts/S07E10_tidy_05/index.html#handling-file-reading-issues",
    "href": "posts/S07E10_tidy_05/index.html#handling-file-reading-issues",
    "title": "Tidyverse 5: Reading in data",
    "section": "6 Handling file reading issues",
    "text": "6 Handling file reading issues\n\n\n\nFrom the readr cheatsheet\n\n\n\n6.1 Specifying column types\nLet‚Äôs say that the column favourite.food is actually a factor (i.e., categorical), and not a character. We can specify that column should be a factor using the argument col_types =. The short codes you can specify in can be found here.\n\nstudents_csv_mealplan &lt;- read_csv(\"students.csv\",\n                             col_types = \"nccfc\")\n\nglimpse(students_csv_mealplan)\n\nRows: 6\nColumns: 5\n$ `Student ID`   &lt;dbl&gt; 1, 2, 3, 4, 5, 6\n$ `Full Name`    &lt;chr&gt; \"Sunil Huffmann\", \"Barclay Lynn\", \"Jayendra Lyne\", \"Leo‚Ä¶\n$ favourite.food &lt;chr&gt; \"Strawberry yoghurt\", \"French fries\", \"N/A\", \"Anchovies‚Ä¶\n$ mealPlan       &lt;fct&gt; Lunch only, Lunch only, Breakfast and lunch, Lunch only‚Ä¶\n$ AGE            &lt;chr&gt; \"4\", \"5\", \"7\", NA, \"five\", \"6\"\n\n\n\n\n6.2 Setting column names\nYou might have a datafile that doesn‚Äôt include headers, or column names. These functions by default use col_names = TRUE and assume that your file does have headers. If you don‚Äôt, you can set this argument to FALSE and provide column headers. Let‚Äôs just try reading in a file without headers just to see what the result is.\n\nstudents_no_headers &lt;- read_csv(\"students_noheader.csv\")\n\nRows: 5 Columns: 5\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (4): Sunil Huffmann, Strawberry yoghurt, Lunch only, 4\ndbl (1): 1\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(students_no_headers)\n\n# A tibble: 5 √ó 5\n    `1` `Sunil Huffmann` `Strawberry yoghurt` `Lunch only`        `4`  \n  &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;chr&gt;               &lt;chr&gt;\n1     2 Barclay Lynn     French fries         Lunch only          5    \n2     3 Jayendra Lyne    N/A                  Breakfast and lunch 7    \n3     4 Leon Rossini     Anchovies            Lunch only          &lt;NA&gt; \n4     5 Chidiegwu Dunkel Pizza                Breakfast and lunch five \n5     6 G√ºven√ß Attila    Ice cream            Lunch only          6    \n\n\nWe can see that the first row has become the column names, and this is not what we want. We can indicate the column names using the argument col_names =.\n\nstudents_no_headers &lt;- read_csv(\"students_noheader.csv\",\n                                col_names = c(\"Student ID\", \"Full Name\", \"favourite.food\",\n                                              \"mealPlan\", \"AGE\"))\n\nRows: 6 Columns: 5\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(students_no_headers)\n\n# A tibble: 6 √ó 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 G√ºven√ß Attila    Ice cream          Lunch only          6    \n\n\nThese column names are a bit sloppy, so we can also clean them up using janitor::clean_names(). If we apply clean_names(), we can see what happens.\n\nstudents_no_headers_clean &lt;- janitor::clean_names(students_no_headers)\n\nhead(students_no_headers_clean)\n\n# A tibble: 6 √ó 5\n  student_id full_name        favourite_food     meal_plan           age  \n       &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 G√ºven√ß Attila    Ice cream          Lunch only          6    \n\n\n\n\n6.3 Handling header or metadata lines\nSometimes the headers of your data might not be in the first row. In the case that you want to read in data that has non-data rows, you can indicate those to skip in the reading in process.\n\n\nstudents_metadata &lt;- read_delim(\"students_with_meta.csv\",\n                                delim = \",\",\n                                skip = 2) # since there are two lines we don't want to read in\n\nRows: 6 Columns: 5\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(students_metadata)\n\n# A tibble: 6 √ó 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 G√ºven√ß Attila    Ice cream          Lunch only          6    \n\n\nThis is particularly useful if you are reading in data that comes off an instrument or system that formats data in a specific way.\n\n\n6.4 What to do with NAs\nOften your dataset will have missing data, though different people will code NAs differently. They may be simply missing, N/A, 999, or in some other way. You can tell your data import function how NAs are coded so they can be parsed correctly.\nIn this data, we have NAs that are coded as ‚ÄúNA‚Äù, and ‚ÄúN/A‚Äù. The default NA values are R are na = c(\"NA\", \"\"), so our data deviates from what would by default be considered missing.\n\nstudents_missing &lt;- read_csv(\"students.csv\",\n                             na = c(\"NA\", \"N/A\", \"\")) # adding N/A as a NA option\n\nRows: 6 Columns: 5\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (4): Full Name, favourite.food, mealPlan, AGE\ndbl (1): Student ID\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(students_missing)\n\n# A tibble: 6 √ó 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    &lt;NA&gt;               Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          &lt;NA&gt; \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 G√ºven√ß Attila    Ice cream          Lunch only          6"
  },
  {
    "objectID": "posts/S07E10_tidy_05/index.html#practice",
    "href": "posts/S07E10_tidy_05/index.html#practice",
    "title": "Tidyverse 5: Reading in data",
    "section": "7 Practice",
    "text": "7 Practice\n\n\n\n\n\n\nRead in a file about dogs.\n\n\n\nDownload and successfully read in the file below. I would recommend that after you download it, you open it to have some information to guide your import.\n\n# where the file is located\ndogs_url &lt;- \"https://github.com/osu-codeclub/osu-codeclub.github.io/raw/main/posts/S07E10_tidy_05/dogs2.csv\"\n\n# download it\ndownload.file(url = dogs_url,\n              destfile = \"dogs.csv\")\n\n\n\nHint (click here)\n\nLook at your file and the documentation for read_*() to see what arguments you can set to aid in the import of your data. Take a look at comment = and skip =\n\n\n\nSolution (click here)\n\n\ndogs &lt;- read_csv(\"dogs2.csv\",\n                 comment = \"%\",\n                 skip = 3)\n\nRows: 195 Columns: 9\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (1): Breed\ndbl (8): 2013 Rank, 2014 Rank, 2015 Rank, 2016 Rank, 2017 Rank, 2018 Rank, 2...\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(dogs)\n\n# A tibble: 6 √ó 9\n  Breed  `2013 Rank` `2014 Rank` `2015 Rank` `2016 Rank` `2017 Rank` `2018 Rank`\n  &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1 Retri‚Ä¶           1           1           1           1           1           1\n2 Frenc‚Ä¶          11           9           6           6           4           4\n3 Germa‚Ä¶           2           2           2           2           2           2\n4 Retri‚Ä¶           3           3           3           3           3           3\n5 Bulld‚Ä¶           5           4           4           4           5           5\n6 Poodl‚Ä¶           8           7           8           7           7           7\n# ‚Ñπ 2 more variables: `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;\n\n\n\n\n\n\n7.1 Take some data that you have and try and read it into R\nThis you should do on your own! Find a file that you have and try and read it in and calculate some summary information."
  },
  {
    "objectID": "posts/S07E10_tidy_05/index.html#bonus-writing-out-data",
    "href": "posts/S07E10_tidy_05/index.html#bonus-writing-out-data",
    "title": "Tidyverse 5: Reading in data",
    "section": "8 Bonus, writing out data",
    "text": "8 Bonus, writing out data\nOften you will generate data in R that you want to write out to a spredsheet form. You can do this using the write_*() functions.\n\nwrite_delim() writes out a delimited file, where you specify the delimiter\nwrite_csv() writes out a csv file\n\nHere, we provide the name of the R object we want to write out, and it will be written to your working directory.\n\nwrite_csv(students_csv)"
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html",
    "href": "posts/S06E10_shiny_03/index.html",
    "title": "Shiny 03: Map viz.¬†in Shiny",
    "section": "",
    "text": "Welcome to our shiny app development class! Throughout this session, Dr.¬†Sandip Mondal will walk us through a case study to generate interactive maps using shiny app."
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html#shiny-app-to-visualize-maps.",
    "href": "posts/S06E10_shiny_03/index.html#shiny-app-to-visualize-maps.",
    "title": "Shiny 03: Map viz.¬†in Shiny",
    "section": "1 Shiny App to visualize maps.",
    "text": "1 Shiny App to visualize maps.\nTo follow step-by-step what we will cover today in class, please refer to this Shiny App.\nDataset description: This dataset was created by Prof.¬†Maxwell for use in his courses. A variety of attributes have been summarized at the county-level. A total of 3,104 records are provided representing the majority of the counties in the contiguous United States. A few counties were excluded due to their small size."
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html#types-of-spatial-data.",
    "href": "posts/S06E10_shiny_03/index.html#types-of-spatial-data.",
    "title": "Shiny 03: Map viz.¬†in Shiny",
    "section": "2 Types of Spatial Data.",
    "text": "2 Types of Spatial Data.\nThere are two types of spatial data: vector and raster. Below is a graphical explanation of these data.\n\n\n\nType of Spatial Data (Ahmed, 2023)"
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html#what-do-we-expect-to-achieve-by-the-end-of-this-tutorial.",
    "href": "posts/S06E10_shiny_03/index.html#what-do-we-expect-to-achieve-by-the-end-of-this-tutorial.",
    "title": "Shiny 03: Map viz.¬†in Shiny",
    "section": "3 What do we expect to achieve by the end of this tutorial.",
    "text": "3 What do we expect to achieve by the end of this tutorial.\nToday we will start with the output, understand the components of the shiny app and what we want achieve.\n\n\n\nDifferent parameters from Ohio, Pennsylvania, and Indiana in an interactive map."
  },
  {
    "objectID": "posts/S06E10_shiny_03/index.html#building-our-shiny-app.",
    "href": "posts/S06E10_shiny_03/index.html#building-our-shiny-app.",
    "title": "Shiny 03: Map viz.¬†in Shiny",
    "section": "4 Building our Shiny App.",
    "text": "4 Building our Shiny App.\nLet‚Äôs make a shiny app and see how this works!\nFirst download the following files and set it to a working directory.\n\n#import libraries used in the APP\n#setwd(\"...map_data/\")  ### Please make sure to use your own working directory\nlibrary(shiny)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(htmlwidgets)\nlibrary(htmltools)\nlibrary(ggplot2)\nlibrary(bslib)\nus &lt;- st_read(\"data/map_data/OH_IN_PA.shp\") \nus &lt;- us %&gt;% filter(STATE_A=='OH'| STATE_A=='IN'| STATE_A =='PA')  ### Ohio, Indiana, Pennsylvania\nus &lt;- st_transform(us, crs=4326)\nclass(us)\nhead(us)\nplot(us[7])\n# fist graph on ggplot = Income (boxplot)\ninc_p &lt;- ggplot(us, aes(x=STATE_A, y=med_ncm, fill=STATE_A)) +\n  geom_boxplot() \n# second graph on ggplot = Temperature (densityplot)\ntemp_p &lt;- ggplot(us, aes(x=tempmn, ..density.., fill=STATE_A))+\n  geom_density(alpha=0.5)\n# third graph on ggplot = Population vs Development (scatterplot)\npop_p &lt;- ggplot(us, aes(x=POPULAT, y=per_dev, color= STATE_A, size= med_ncm))+\n  geom_point()\n#color palette for Temperature, Income and Population\ntemp_pal &lt;- colorBin(palette=\"YlOrRd\", domain=us$tempmn, bin=5)\npop_pal &lt;- colorNumeric(palette= 'Purples', domain= us$POPULAT)\nncm_pal &lt;- colorNumeric(palette= 'Greens', domain= us$med_ncm)\n\n\n# Define UI for the APP\n\nui &lt;- fluidPage(\n  theme = bs_theme(version = 4, bootswatch = \"spacelab\"), # theme from the library(bslib)\n  \n  titlePanel(h1(\"Ohio, Indiana and Pennsylvania\",align = \"center\", style = \"color:#0d793e\")), # Main title of the App use h1\n  br(),### break the line two times\n  br(),\n  tabsetPanel(#the tabset panel layout will include the three tab\n    \n    \n    # Tab 1: Data Exploration\n    \n    tabPanel(\"Data explorer\", # title of the first tab\n             br(), \n             fluidRow(\n               column(3,\n                      selectInput(inputId = \"countryInput1\", #unique input ID\n                                  label= \"Choose a State\",\n                                  choices = unique(us$STATE_N),\n                                  selected = \"Ohio\"), \n               ), \n             ),\n             hr(),\n             DT::dataTableOutput(\"table\") #output ID\n    ),\n    \n    #Tab 2: Visualization \n    \n    tabPanel(\"Sum plots\", #title of the second tab\n             br(), \n             sidebarLayout(#left section of the page used by the user to select input    \n               sidebarPanel(\n                 \n                 selectInput(inputId = 'inc_pop_temp',#unique input ID\n                             label = 'Select a variable',\n                             choices = c('',\"Income\", \"Population vs Development\", 'Median Temperature'), ),\n              \n               ),\n               mainPanel( # right section of the page \n                 plotOutput(\"boxplot\")#output ID\n               ))),\n    \n    #Tab 3: Interactive Map\n    \n    tabPanel(\"Interactive Map\", #title of the third tab  \n             sidebarLayout(    \n               sidebarPanel(#left section of the page used by the user to select input\n                 selectInput(inputId = \"countryInput\", #unique input ID\n                             label= \"Choose a State\",\n                             choices = unique(us$STATE_N),\n                             selected = \"Ohio\"),\n                 selectInput(inputId = \"varInput\", #unique input ID\n                             label= \"Choose a variable\",\n                             choices = c(\"Temperature\", 'Population', 'Income'))\n                 ,),\n               mainPanel(# right section of the page \n                 leafletOutput(\"map\", #output ID  \n                               width = \"100%\", height = \"500px\"))))  \n  ),)\n\n# Define server logic \n\nserver &lt;- function(input, output) {\n  \n  selectedCountry1 &lt;- reactive({#reactive expression for the Data Explorer\n    us[us$STATE_N == input$countryInput1, ] #match input of the user with the state name\n  })\n  \n  selectedCountry &lt;- reactive({ #reactive expression for the Interactive Map\n    us[us$STATE_N == input$countryInput, ] #match input of the user with the state name\n  })\n  \n  output$table &lt;- DT::renderDataTable({ #Data Explorer tab output\n    \n    data = selectedCountry1()\n    \n  })\n  \n  output$boxplot &lt;- renderPlot({ #Visualization tab output\n    if (input$inc_pop_temp %in% \"Income\") # If input of the user is Income\n    {inc_p} #then print Income graph\n    else if (input$inc_pop_temp %in% \"Median Temperature\")# If input of the user is Median Temperature\n    {temp_p} #then print Temperature graph\n    \n    else if (input$inc_pop_temp %in% \"Population vs Development\")# If input of the user is Pop vs Dev\n    {pop_p} #then print Pop vs Dev graph\n    \n  })\n  \n  output$map &lt;- renderLeaflet({#Interactive Map tab output\n    leaflet('map', #base map\n            options = leafletOptions(zoomControl= FALSE)) %&gt;%\n      \n      htmlwidgets::onRender(\"function(el, x) {\n      L.control.zoom({ position: 'topright' }).addTo(this)\n  }\") %&gt;%\n      addTiles(group = \"OSM\") %&gt;%\n      \n      addProviderTiles(\"Esri.NatGeoWorldMap\", group=\"ESRI\") %&gt;%\n      \n      addProviderTiles(\"CartoDB.DarkMatter\", group= \"CartoDB\") %&gt;%\n      addLayersControl(baseGroups = c(\"CartoDB\",\"OSM\", \"ESRI\")) %&gt;%\n      \n      addLegend(position=\"bottomright\", pal=temp_pal, values=us$tempmn, title=\"Temperature\")%&gt;%\n      addLegend(position=\"bottomright\", pal=pop_pal, values=us$POPULAT, title=\"Population\")%&gt;%\n      addLegend(position=\"bottomleft\", pal=ncm_pal, values=us$med_ncm, title=\"Income in $\")%&gt;%\n      setView(lat= 39, lng=-80, zoom=6)\n  })\n  \n  observe({#observer\n    \n    state_popup &lt;- paste0(\"&lt;strong&gt;County: &lt;/strong&gt;\", #popup \n                          selectedCountry()$NAME,\n                          \"&lt;br&gt;&lt;strong&gt; Temperature: &lt;/strong&gt;\",\n                          round(selectedCountry()$tempmn,1),\"&#x2103\",\n                          \"&lt;br&gt;&lt;strong&gt; Median Income: &lt;/strong&gt;\",\n                          selectedCountry()$med_ncm,'$',\n                          \"&lt;br&gt;&lt;strong&gt; Population: &lt;/strong&gt;\",\n                          selectedCountry()$POPULAT)\n    \n    high_opt &lt;- highlightOptions(weight = 3, color = \"white\", bringToFront = FALSE) #highlight when user select county\n    \n    if (input$varInput %in% \"Temperature\") {\n      leafletProxy(\"map\", data = selectedCountry()) %&gt;%\n        #understand when to clearshapes\n        # clearShapes() %&gt;%\n        addPolygons(fillColor =  temp_pal(selectedCountry()$tempmn),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n    }\n    else if (input$varInput %in% \"Income\") {\n      leafletProxy(\"map\", data = selectedCountry()) %&gt;%\n        #understand when to clearshapes\n        # clearShapes() %&gt;%\n        \n        addPolygons(fillColor =  ncm_pal(selectedCountry()$med_ncm),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n      \n    }\n    else if (input$varInput %in% \"Population\") {\n      leafletProxy(\"map\", data = selectedCountry()) %&gt;%\n        #understand when to clearshapes\n        # clearShapes() %&gt;%\n        addPolygons(fillColor =  pop_pal(selectedCountry()$POPULAT),\n                    popup = state_popup,\n                    col=\"#302E2D\",\n                    fillOpacity = 1,\n                    weight = 1,\n                    highlight = high_opt )\n    }\n    \n    \n  })\n  \n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "posts/S07E11_ggplot_01/index.html#introduction",
    "href": "posts/S07E11_ggplot_01/index.html#introduction",
    "title": "Plotting 1: Intro to ggplot2",
    "section": "1 Introduction",
    "text": "1 Introduction\nIn this Code Club semester, we started with 5 sessions on R basics, followed by 5 sessions on tidyverse data wrangling basics. This session will be the first several on data visualization: creating plots with the ggplot2 package.\n\nSession Goals\n\nLearn the philosophy of coding a graphic.\nLearn the basic template of a ggplot graphic, so you can reuse it for multiple chart types.\nLearn how you can quickly add visual information to a graphic using aesthetics and layers."
  },
  {
    "objectID": "posts/S07E11_ggplot_01/index.html#the-ggplot-philosophy",
    "href": "posts/S07E11_ggplot_01/index.html#the-ggplot-philosophy",
    "title": "Plotting 1: Intro to ggplot2",
    "section": "2 The ggplot philosophy",
    "text": "2 The ggplot philosophy\nWe have seen that in R, instead of manually manipulating data with a mouse as you do when editing Excel spreadsheets, we code the operations we want to perform, e.g.¬†using dplyr verbs like select(). In a similar way, when performing visualization, instead of clicking on a chart type, we code the chart in R.\nAnd just as dplyr gives us efficient ways to manipulate data frames, ggplot2 (which is also part of the tidyverse) gives us efficient ways to manipulate charts/plots/graphics1. The gg in ggplot2 stands for grammar of graphics, a systematic approach for designing statistical plots. The idea is to ‚Äòpull apart‚Äô various plots into their component pieces, which leads to the idea of layers.\nThere‚Äôs a learning curve to such a systematic approach, but there are many advantages:\n\nFirst, every graphic shares a common template. Once you understand this structure you can ‚Äúsay‚Äù a lot of different things. The ggplot cheat sheet lists over 40 plot-types, but because ggplot is somewhat of a language in its own right, users can create their own extensions that you can also utilize, adding many more.\nSecond, because plots are built up using layers, you can gradually build up a graphic of increasing complexity; or on the other hand, take someone else‚Äôs code and simplify it by deleting layers. We add layers with + very similar to how we‚Äôve been piping operations with |&gt;.\nThird, and this is a more general point that applies to a lot of R code: because the graphic is now a piece of code, it is reusable. Once you have a little library of graphs you‚Äôve made, you can tweak them in various ways to make more. You can also share your code with others, so they can apply the same approach to their data."
  },
  {
    "objectID": "posts/S07E11_ggplot_01/index.html#our-data-set",
    "href": "posts/S07E11_ggplot_01/index.html#our-data-set",
    "title": "Plotting 1: Intro to ggplot2",
    "section": "3 Our data set",
    "text": "3 Our data set\n\n\n\nIllustration by Allison Horst\n\n\nWe are going to use a fun üêß data set from the package palmerpenguins. We‚Äôll have to install that package first:\n\ninstall.packages(\"palmerpenguins\")\n\npalmerpenguins is a package developed by Allison Horst, Alison Hill and Kristen Gorman, including a data set collected by Dr.¬†Kristen Gorman at the Palmer Station Antarctica, as part of the Long Term Ecological Research Network. It is a nice, relatively simple data set to practice data exploration and visualization in R.\nWe‚Äôll now load the package, along with the tidyverse (which includes ggplot2):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.0     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nOnce you‚Äôve loaded that package you will have a data frame called penguins at your disposal ‚Äî let‚Äôs take a look:\n\npenguins\n\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ‚Ñπ 334 more rows\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n# Or glimpse() for a sort of transposed view, so we can see all columns:\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S07E11_ggplot_01/index.html#a-first-ggplot2-example",
    "href": "posts/S07E11_ggplot_01/index.html#a-first-ggplot2-example",
    "title": "Plotting 1: Intro to ggplot2",
    "section": "4 A first ggplot2 example",
    "text": "4 A first ggplot2 example\nWhat is the correlation between bill-length and bill-width in these penguin species? Are longer bills also deeper? We can explore this with a scatterplot.\n\n\n\n\n\n\n\nA first plot attempt\nThe first thing that ggplot2 plot needs from you is a data frame ‚Äî just like the rest of the tidyverse, ggplot2 is oriented towards data frames. Specifically, the first argument to the ggplot() function is a data frame:\n\nggplot(data = penguins)\n\n\n\n\n\n\n\n\nThis is not very interesting! But it‚Äôs notable that it is something. ggplot() has created a base plot layer.\n\n\n\n\n\n\nWhile the name of the package is ggplot2, the name of the function is just ggplot().\n\n\n\n\n\n\n\n\n\nOur first complete plot\nOur initial plotting code was correct but incomplete. Next, we need to specify:\n\nThe plot type we want using one of many ‚Äúgeom‚Äù functions ‚Äî e.g., the geom for a scatterplot is geom_point().\nWhich columns in our data frame to plot in which ways, such along the x and y axes. In ggplot-speak, we are mapping variables to aesthetics, with the aesthetics being things like x and y coordinates as well shape and color.\n\nWe can add both these pieces of information in a single additional layer. The operator to add a layer is +, which is the ggplot equivalent of the pipe symbol (|&gt;), and best practice is to place it at the end of the line, just like the pipe. Here then is our complete first plot:\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm, y = bill_depth_mm))\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nTo recap, the three required ggplot elements that we used are:\n\nThe data: here penguins\nOne or more geoms: here geom_point()\nOne or more aesthetic mappings: here x = bill_length_mm, y = bill_depth_mm\n\nAlso, note that we provided three pieces of information from our data ‚Äî a data frame and two column names. After telling ggplot to use the penguins data frame, we can refer to columns in this data frame using their unquoted names.\n\n\n\n\n\n\nThe ggplot warning above\n\n\n\nggplot warned us that 2 rows were removed because they ‚Äúcontaining missing values or values outside the scale range‚Äù:\n\n‚ÄúMissing values‚Äù: If this were the case, there must be NAs in the bill length and/or bill depth columns.\n‚ÄúOutside the scale range‚Äù: This could happen if we manually set a ‚Äúscale range‚Äù, e.g.¬†restricting axis limits so some of the data can‚Äôt be plotted. We didn‚Äôt do this and ggplot wouldn‚Äôt automatically do it, so this doesn‚Äôt apply.\n\nSo, there are probably NAs ‚Äî let‚Äôs look for those, starting with the bill length column:\n\npenguins |&gt; filter(is.na(bill_length_mm))\n\n# A tibble: 2 √ó 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen             NA            NA                NA          NA\n2 Gentoo  Biscoe                NA            NA                NA          NA\n# ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nWe indeed get two rows, with NAs for all measurement, so those must have been the two rows ggplot was complaining about.\n\n\nAs for the relationship between bill length and bill depth ‚Äî this is not very clear, but I guess if you squint your eyes, you can see local positive correlations? We‚Äôll explore this relationship in more detail below.\n\n\n\nEach point in the plot has a bill length and an associated bill depth. How does ggplot know which bill lengths to associate with which bill depths? (Click for the answer)\n\n\nEach point comes from one row in the data frame: so ggplot assumes that the the bill length and bill depth given in one row derive from the same observation (here: the same penguin).\nAs such, to work with ggplot, your data frame needs to be in a ‚Äútidy‚Äù format (see our Code Club from a couple weeks ago). If you find yourself struggling to appropriately assign aesthetic mappings, you may have to pivot your data first, most often with a pivot_longer().\n\n\n\n\n Exercise 1\nCreate a scatterplot comparing body mass and flipper length. Does it look like there is any correlation there?\n\n\nHints (click here)\n\nTake another look at the penguins data frame to see which columns contain body mass and flipper length. It‚Äôs up to you which you assign to the x axis and the y axis.\n\n\n\nSolution (click here)\n\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = body_mass_g, y = flipper_length_mm))"
  },
  {
    "objectID": "posts/S07E11_ggplot_01/index.html#the-power-of-aesthetics",
    "href": "posts/S07E11_ggplot_01/index.html#the-power-of-aesthetics",
    "title": "Plotting 1: Intro to ggplot2",
    "section": "5 The power of aesthetics",
    "text": "5 The power of aesthetics\nWe saw above that the relationship between bill length and bill depth is not particularly clear, but that there might be some local patterns. Is it possible that these clusters correspond somehow to the three different penguin species: Adelie, Chinstrap, and Gentoo? That is, part of the problem with our original plot may be that we lumped the data from all three species together.\nWe can explore this by adding a third aesthetic, color. Our current plot maps bill_length_mm to the x aesthetic, and bill_depth_mm to the y aesthetic ‚Äî now, we‚Äôll add a mapping of species to the color aesthetic:\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = bill_length_mm,\n                           y = bill_depth_mm,\n                           color = species))\n\n\n\n\n\n\n\n\nNote that a legend is added automatically! It‚Äôs much clearer now that, within each species, there does seem to be a positive correlation between bill length and depth.\n\n\n Exercise 2\n\nGo back to your body mass/flipper plot from Exercise 1 and color points by species.\nThere are various aesthetics you can use for a categorical variable like species (see the help for geom_point() ‚Äî type ?geom_point to open the help page). One of these aesthetics is shape: try this instead of color and see which you prefer.\n\n\n\nSolutions (click here)\n\n\nColor point by species:\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = body_mass_g,\n                           y = flipper_length_mm,\n                           color = species))\n\n\n\n\n\n\n\n\nTry the shape aesthetic instead of color:\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = body_mass_g,\n                           y = flipper_length_mm,\n                           shape = species))"
  },
  {
    "objectID": "posts/S07E11_ggplot_01/index.html#syntax-variants",
    "href": "posts/S07E11_ggplot_01/index.html#syntax-variants",
    "title": "Plotting 1: Intro to ggplot2",
    "section": "6 Syntax variants",
    "text": "6 Syntax variants\n\nOmit the argument names\nSo far, we‚Äôve been using verbose syntax for clarity, but we can shorten this a bit: instead of‚Ä¶\n\nggplot(data = penguins) +\n  geom_point(mapping = aes(x = body_mass_g, y = flipper_length_mm))\n\n‚Ä¶we can omit the names of the arguments:\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, y = flipper_length_mm))\n\n\n\n\nPipe data into ggplot\nYou might also prefer to pipe the data frame into ggplot:\n\npenguins |&gt;\n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm))\n\nThe above example adds a line of code to say the same thing, but you might prefer this as it makes abundantly clear what your input data is. This style especially makes sense when you edit a dataframe prior to plotting it:\n\n# Make a plot only for the Adelie Penguin:\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt; \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you pipe data into ggplot, remember to switch between |&gt; and +!\n\n\n\n\n\n\n\n\n\nLocal vs.¬†global aesthetics\nSo far, we‚Äôve provided our aesthetic mappings (aes(...)) inside the geom function. However, it is also possible to do this inside the initial ggplot() function call. Compare these two:\n\n# Provide the aesthetic mappings inside geom_point():\npenguins |&gt; \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm))\n\n# Provide the aesthetic mappings inside ggplot():\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point()\n\nIn the above example, those two variants are functionally equivalent. However, it is possible to add multiple geoms in ggplot ‚Äî and once you do that, the following becomes important:\n\nMappings provided to a specific geom are ‚Äúlocal‚Äù: they do not carry over to other geoms.\nMappings provided to ggplot() are ‚Äúglobal‚Äù: they apply to all geoms in the plot.\n\nTherefore, if you have multiple geoms, it most often makes sense to put the aesthetics inside ggplot(), but there are exceptions ‚Äî and it is also possible to specify aesthetics in multiple places. More about this in the next section."
  },
  {
    "objectID": "posts/S07E11_ggplot_01/index.html#adding-geoms-and-geom_smooth",
    "href": "posts/S07E11_ggplot_01/index.html#adding-geoms-and-geom_smooth",
    "title": "Plotting 1: Intro to ggplot2",
    "section": "7 Adding geoms, and geom_smooth()",
    "text": "7 Adding geoms, and geom_smooth()\nIn the scatterplot for bill length vs.¬†depth, there wasn‚Äôt a clear overall (across-species) relationship. We can make this even more visually apparent by fitting a line to the data ‚Äî overlaying another geom in the same plot:\n\npenguins |&gt; \n  ggplot() +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nError in `geom_smooth()`:\n! Problem while computing stat.\n‚Ñπ Error occurred in the 2nd layer.\nCaused by error in `compute_layer()`:\n! `stat_smooth()` requires the following missing aesthetics: x and y.\n\n\n\n\n\nUh oh! What went wrong here? Can you think of two different ways to solve this? (Click for the answer)\n\nBecause we provided local aesthetics to geom_point() only, geom_smooth() has not been informed about any aesthetics, as the error message suggests. We can resolve this either by:\n\nProviding the same local aesthetics to both geom functions.\nProviding global aesthetics (i.e.¬†to the ggplot() function). This is the better option.\n\n\n\nIn our next attempt, we‚Äôll provide the aesthetics globally, that is, we specify them inside the ggplot() function:\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFitted lines\n\n\n\nBy default, the geom_smooth() function doesn‚Äôt use classical linear regression to fit the data. Instead it uses locally estimated scatterplot smoothing: loess. The resulting lines snake around and trying to find local best fits to the data. You can request different fit algorithms with the geom_smooth()‚Äôs method argument. See ?geom_smooth for details.\n\n\n\n\n Exercise 3\nA) Revisit your flipper/body_mass plot once again, and fit lines to each species.\n\n\nSolution (click here)\n\n\npenguins |&gt; \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nB) Perhaps you think there is too much going on in this plot, with the scatterplot data making the fitted line less clear. Modify your plot so it just shows the fitted line and not the points.\n\n\nSolution (click here)\n\nThis is as easy a removing the geom_point() line:\n\npenguins |&gt; \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nC) (Bonus)\n\nPipe your dataset into filter() to keep only the Gentoo data.\nPipe that data into ggplot() to create a scatterplot with a smoothed-line overlay for just that one species, colored by sex.\nIn a next attempt, can you get rid of the points for which the sex is unknown (NA)?\n\n\n\nSolution (click here)\n\n\nand 2.:\n\n\npenguins |&gt; \n  filter(species == \"Gentoo\") |&gt;\n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = sex)) +\n  geom_point() + \n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n‚Äî we add !is.na(sex) to the filter() call to remove penguins with unknown sex:\n\n\npenguins |&gt; \n  filter(species == \"Gentoo\", !is.na(sex)) |&gt;\n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = sex)) +\n  geom_point() + \n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nD) (Bonus) Modify your previous Gentoo penguin plot such that:\n\nYou have a single fitted line for penguins of both sexes\nPoints are still colored by sex\n\n\n\nSolution (click here)\n\nThis will require you to some aesthetics globally (x and y) and the color aesthetic locally, just for geom_point():\n\npenguins |&gt; \n  filter(species == \"Gentoo\", !is.na(sex)) |&gt;\n  ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +\n  geom_point(aes(color = sex)) + \n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "posts/S07E11_ggplot_01/index.html#footnotes",
    "href": "posts/S07E11_ggplot_01/index.html#footnotes",
    "title": "Plotting 1: Intro to ggplot2",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWe use these terms interchangeably.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/S09E03_ggplot_03/index.html",
    "href": "posts/S09E03_ggplot_03/index.html",
    "title": "Introduction to ggplot2 - 03",
    "section": "",
    "text": "Figure from Allison Horst\n\n\n\n\nWe have spent the last two Code Club sessions talking about plotting with ggplot2. We have gone through:\n\nCode structure, data, aesthetic mappings, and some geoms\nChanging colors ad checking accessibility\n\nThis week, we will go over:\n\nAdditional geoms\nCreating a faceted plot\nAdding labels\n\n\n\nThe first thing we will do is load the tidyverse so we can use the functions it contains.\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nWe are going to continue to use the penguins dataset we‚Äôve been working with for the last couple of weeks. Let‚Äôs load that data so we can use it.\n\nlibrary(palmerpenguins)\n\nWe can also take a ‚Äúglimpse‚Äù at our data with the function glimpse() to remind ourselves of what data is contained within penguins.\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S09E03_ggplot_03/index.html#loading-packages-and-data",
    "href": "posts/S09E03_ggplot_03/index.html#loading-packages-and-data",
    "title": "Introduction to ggplot2 - 03",
    "section": "",
    "text": "The first thing we will do is load the tidyverse so we can use the functions it contains.\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nWe are going to continue to use the penguins dataset we‚Äôve been working with for the last couple of weeks. Let‚Äôs load that data so we can use it.\n\nlibrary(palmerpenguins)\n\nWe can also take a ‚Äúglimpse‚Äù at our data with the function glimpse() to remind ourselves of what data is contained within penguins.\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel‚Ä¶\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse‚Ä¶\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ‚Ä¶\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ‚Ä¶\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186‚Ä¶\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ‚Ä¶\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male‚Ä¶\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007‚Ä¶"
  },
  {
    "objectID": "posts/S09E03_ggplot_03/index.html#bar-plot-be-wary",
    "href": "posts/S09E03_ggplot_03/index.html#bar-plot-be-wary",
    "title": "Introduction to ggplot2 - 03",
    "section": "2.1 Bar plot (be wary!)",
    "text": "2.1 Bar plot (be wary!)\nA bar plot is a very commonly used plot type, but often can hide the true distribution of your data, so be careful when you use it.\n\n2.1.1 Means\nIf we want to plot what the average body mass is per island, we need to either:\n\ncalculate a mean, and then plot it\nuse a function that calculates the mean for us\n\nFirst let‚Äôs calculate the mean manually. This way we can know what those averages should be, and we can reference this against our plot later.\nWe can go back to some content we‚Äôve gone over in Code Club in the past about the function summarize().\n\n# calculating the mean body mass for each island\npenguins |&gt; \n  summarize(mean_body_mass = mean(body_mass_g, \n                                  na.rm = TRUE), # remove missing values\n            .by = island) # summarize by island\n\n# A tibble: 3 √ó 2\n  island    mean_body_mass\n  &lt;fct&gt;              &lt;dbl&gt;\n1 Torgersen          3706.\n2 Biscoe             4716.\n3 Dream              3713.\n\n\nNow we can see what the average mass should be for each island. We can take that same code and pipe that into ggplot() to use that as the data to plot.\n\n# then plotting\npenguins |&gt; \n  summarize(mean_body_mass = mean(body_mass_g, \n                                  na.rm = TRUE), # remove missing values\n            .by = island) |&gt; # summarize by island\n  ggplot(aes(x = island, y = mean_body_mass)) +\n  geom_col()\n\n\n\n\nNote that the variable we are plotting to y is mean_body_mass - a new variable we calculated using summarize().\nSee how this is different from passing. your data directly to geom_col()? Pay careful attention to the y-axis values.\n\n# this is wrong\n# do not do this\npenguins |&gt; \n  ggplot(aes(x = island, y = body_mass_g)) +\n  geom_col()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_col()`).\n\n\n\n\n\nIf you don‚Äôt want to bother with the pre-calculation, you can use the function stat_summary() which will pre-calculate the mean for you, and plot via the geom of your choice.\n\npenguins |&gt; \n  ggplot(aes(x = island, y = body_mass_g)) +\n  stat_summary(geom  = \"col\") # geom should be column\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\nIt is a good idea to do these calculations yourself first, even if you end up using a function like stat_summary(), this way you can be sure that the result you are getting makes sense.\n\n\n2.1.2 Error bars\nIf we want to add error bars, we can do that too, and in the same way. We can either calculate the values we want to map to the error bars, and then add them, or use another stat_summary() to have ggplot2 calculate the values for us. I will show you code for both, but only go through doing this manually (as the other way is a little bit more complicated than I want to get into right now).how to do both.\nJust like we used summarize() to calculate the means, we can also use similar code to calculate a standard deviation. Let‚Äôs grab that code, and we can add to it.\n\npenguins |&gt; \n  summarize(mean_body_mass = mean(body_mass_g, \n                                  na.rm = TRUE), # remove missing values\n            sd_body_mass = sd(body_mass_g,\n                              na.rm = TRUE), # remove missing values\n            .by = island) # summarize by island\n\n# A tibble: 3 √ó 3\n  island    mean_body_mass sd_body_mass\n  &lt;fct&gt;              &lt;dbl&gt;        &lt;dbl&gt;\n1 Torgersen          3706.         445.\n2 Biscoe             4716.         783.\n3 Dream              3713.         417.\n\n\nNow we see both a standard deviation along with our mass. And we can plot this now.\n\npenguins |&gt; \n  summarize(mean_body_mass = mean(body_mass_g, \n                                  na.rm = TRUE), # remove missing values\n            sd_body_mass = sd(body_mass_g,\n                              na.rm = TRUE), # remove missing values\n            .by = island) |&gt; # summarize by island\n  ggplot(aes(x = island, y = mean_body_mass)) +\n  geom_col() + \n  geom_errorbar(aes(ymin = (mean_body_mass - sd_body_mass), # set min\n                    ymax = (mean_body_mass + sd_body_mass)), # set max\n                width = 0.2) # set width of the bars\n\n\n\n\nYou can have ggplot() make your error bars for you but it‚Äôs a little more complicated than what I want to get into. You can read more about it below.\n\n\n\n\n\n\nOr, we could have ggplot() calculate and make our error bars for us. We can start with our code from our original bar plot, and add to it.\n\n\n\n\n\n\npenguins |&gt; \n  ggplot(aes(x = island, y = body_mass_g)) +\n  stat_summary(geom  = \"col\") + # makes the bars\n  stat_summary(fun.data = mean_sdl, # function is mean_sd\n               fun.args = list(mult=1), # more arguments arguments to mean_sdl as a list\n               geom = \"errorbar\")\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n\n\n\n\n\n\n\n\n\n\n2.1.3 Counting\nWe could also use bar plots to ‚Äúcount‚Äù instead of to display a mean. For this, we use geom_bar().\n\npenguins |&gt; \n  ggplot(aes(x = island)) +\n  geom_bar()"
  },
  {
    "objectID": "posts/S09E03_ggplot_03/index.html#boxplot",
    "href": "posts/S09E03_ggplot_03/index.html#boxplot",
    "title": "Introduction to ggplot2 - 03",
    "section": "2.2 Boxplot",
    "text": "2.2 Boxplot\n\n\n\n\n\nFigure from Allison Horst\n\n\n\n\nThere is rarely a situation where a bar plot wouldn‚Äôt be improved by turning it into a boxplot. A boxplot allows us to see the distribution of our data (instead of just the mean). Lots can be hiding when you summarize before plotting!\nWe can make a boxplot simply by using geom_boxplot().\n\npenguins |&gt; \n  ggplot(aes(x = island, y = body_mass_g)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\nWe can supplement our boxplot with all our actual data too, as that might help us see trends in our data. This is a special type of geom_point() called geom_jitter(), which takes your data points and puts them, in this case, on top of your boxplot.\nHere I will color the points by sex so we can see what that effect is.\n\npenguins |&gt; \n  ggplot(aes(x = island, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter(aes(color = sex))\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "posts/S09E03_ggplot_03/index.html#practice",
    "href": "posts/S09E03_ggplot_03/index.html#practice",
    "title": "Introduction to ggplot2 - 03",
    "section": "2.3 Practice",
    "text": "2.3 Practice\nWe are going to try looking at some new geoms. Create a plot that shows you the distribution of value for flipper length across all the penguins.\n\n\nNeed a hint?\n\nTake a look at the ggplot cheatsheet and pick a geom that you think would be good for this data that is one continuous variable.\n\n\n\nNeed another hint?\n\nTry geom_density() or geom_histogram(). Keep in mind that when you have one continuous variable, count gets mapped to y and this happens automatically.\n\n\n\nClick for the solution\n\nA density plot:\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm)) + \n  geom_density()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\nA histogram, you can play around with bins = and binwidth = to make the plot look how you want:\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`)."
  },
  {
    "objectID": "posts/S09E03_ggplot_03/index.html#practice-1",
    "href": "posts/S09E03_ggplot_03/index.html#practice-1",
    "title": "Introduction to ggplot2 - 03",
    "section": "3.1 Practice",
    "text": "3.1 Practice\nCreate a faceted plot for different penguins species that shows the relationship between flipper length and bill length. Color your points by sex. Remove any missing values.\n\n\nNeed a hint?\n\nTry using the variables flipper_length, bill_length_mm, species and sex. Try faceting by species and coloring by sex. You can drop missing values with the function drop_na().\n\n\n\nClick for the solution\n\n\npenguins |&gt; \n  drop_na() |&gt; \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm, color = sex)) +\n  geom_point() + \n  facet_wrap(vars(species))\n\n\n\n\n\nTake your faceted plot and add a linear line showing the relationship flipper length and bill length for each species, by sex.\n\n\nNeed a hint?\n\nAdd another layer with geom_smooth(). If you want a linear line, you can set method = \"lm\".\n\n\n\nClick for the solution\n\n\npenguins |&gt; \n  drop_na() |&gt; \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm, color = sex)) +\n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  facet_wrap(vars(species))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/S09E03_ggplot_03/index.html#practice-2",
    "href": "posts/S09E03_ggplot_03/index.html#practice-2",
    "title": "Introduction to ggplot2 - 03",
    "section": "4.1 Practice",
    "text": "4.1 Practice\nTake the final plot from the last series of exercises and add some more descriptive labels for x, y, and a title.\n\n\nNeed a hint?\n\nUse labs() and set x, y, and title. You can also add others.\n\n\n\nClick for the solution\n\n\npenguins |&gt; \n  drop_na() |&gt; \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm, color = sex)) +\n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  facet_wrap(vars(species)) +\n  labs(x = \"Flipper length (mm)\",\n       y = \"Bill length (mm)\",\n       color = \"\", # remove the legend title, could also rename this way\n       title = \"Relationship between penguin flipper and bill length\",\n       subtitle = \"Data collected from LTER, Antarctica\")\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#introduction",
    "href": "posts/S07E06_tidy_01/index.html#introduction",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "1 Introduction",
    "text": "1 Introduction\nWe are going to introduce a new package and series of functions today that are designed for data science."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#what-is-the-tidyverse",
    "href": "posts/S07E06_tidy_01/index.html#what-is-the-tidyverse",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "2 What is the tidyverse?",
    "text": "2 What is the tidyverse?\n‚ÄúThe tidyverse‚Äù is a collection of packages called that are designed for data science. You can certainly use R without using the tidyverse, but it has many packages that I think will make your life a lot easier. We will be using mostly tidyverse functions in this class, with some base R syntax scattered throughout.\n\n\n\nFigure from teachdatascience.com\n\n\nThe ‚Äúcore tidyverse‚Äù contains the 8 packages below:\n\ndplyr: for data manipulation\nggplot2: a ‚Äúgrammar of graphics‚Äù for creating beautiful plots\nreadr: for reading in rectangular data (i.e., Excel-style formatting)\ntibble: using tibbles as modern/better dataframes\nstringr: handling strings (i.e., text or stuff in quotes)\nforcats: for handling categorical variables (i.e., factors) (meow!)\ntidyr: to make ‚Äútidy data‚Äù\npurrr: for enhancing functional programming (also meow!)\n\nWe will be using many of these other packages in Code Club and we will talk about them as we go. There are more tidyverse packages outside of these core eight, and we will talk about some of them another time.\n\ntl;dr Tidyverse has a lot of packages that make data analysis easier. None of them are required, but I think you‚Äôll find many tidyverse approaches easier and more intuitive than using base R."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#installing-new-packages",
    "href": "posts/S07E06_tidy_01/index.html#installing-new-packages",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "3 Installing new packages",
    "text": "3 Installing new packages\nSo far, we have used only functions and data that exist within ‚Äúbase R‚Äù - or the portion of R that comes with the default install. R is an open source language, meaning people all around the world can develop tools that can be used within R. These tools are always evolving, and there are way too many of them for them to all come pre-downloaded.\nThese tools mostly live within something called a ‚Äúpackage‚Äù. You can think about a package as a unit of code that can be shared and reused. These packages can include both functions and data. A person (or team) can create a package, make that available for download, and then anyone can use it.\nTo install packages in R that are on the Comprehensive R Archive Network (CRAN), you can use the function install.packages(). There are packages that are not on CRAN but we are not going to talk about them today. Be sure that you provide the name of your packages as a string, and put it in quotes.\n\ninstall.packages(\"tidyverse\")"
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#loading-packages",
    "href": "posts/S07E06_tidy_01/index.html#loading-packages",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "4 Loading packages",
    "text": "4 Loading packages\nOnce you have downloaded a package, you now have it, you can think about it as a book that you now own. When you want to read the book, you don‚Äôt need to go buy it again, you need to simply take it off your shelf and open it. Using the function library() takes your package from where it is stored on the ‚Äúshelf‚Äù in your computer, and opens it. I hope this is an ok metaphor.\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.4     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nIt‚Äôs a good habit to not ignore warnings/messages that R gives you.\n\n\n\n\n\n\nWhat does this warning mean?\n\n\n\n\n\n\n\nWe only need to install packages once. But, every time we want to use them, we need to ‚Äúload‚Äù them, and can do this using the function library()."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#practice",
    "href": "posts/S07E06_tidy_01/index.html#practice",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "5 Practice",
    "text": "5 Practice\n\n\n\n\n\n\nPlease install the tidyverse and then load it.\n\n\n\n\n\n\ninstall.packages(\"tidyverse\")\n\n\n# it doesn't matter here if you put tidyverse in quotes or not\n# without quotes will work since you can think about it as an object\n# that already exists (and not just a string of characters)\nlibrary(tidyverse) # works\nlibrary(\"tidyverse\") # also works"
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#data-for-today",
    "href": "posts/S07E06_tidy_01/index.html#data-for-today",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "6 Data for today",
    "text": "6 Data for today\nIn addition to having functions, packages also can contain data. Within the tidyverse package, there is a bunch of embedded data we can use to play around with.\nIf you type the function data() and then place your cursor between the parentheses and hit tab, you will see what pre-loaded data in R you have access to.\n\ndata()\n\n\nToday we are going to use a dataset called diamonds that is embedded within the package ggplot (which we have since it gets automatically installed when we load the tidyverse).\nLet‚Äôs learn about diamonds using some of the functions we learned already.\n\nstr(diamonds)\n\ntibble [53,940 √ó 10] (S3: tbl_df/tbl/data.frame)\n $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n $ cut    : Ord.factor w/ 5 levels \"Fair\"&lt;\"Good\"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...\n $ color  : Ord.factor w/ 7 levels \"D\"&lt;\"E\"&lt;\"F\"&lt;\"G\"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...\n $ clarity: Ord.factor w/ 8 levels \"I1\"&lt;\"SI2\"&lt;\"SI1\"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...\n $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n\n\nTidyverse has a version of str() called glimpse() which does a similar thing but tries to show you more data.\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.‚Ä¶\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver‚Ä¶\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,‚Ä¶\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, ‚Ä¶\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64‚Ä¶\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58‚Ä¶\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34‚Ä¶\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.‚Ä¶\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.‚Ä¶\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.‚Ä¶\n\n\n\nNote that we do not see diamonds as an object in our enrivonrment, even though clearly it‚Äôs there."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#the-pipe-or",
    "href": "posts/S07E06_tidy_01/index.html#the-pipe-or",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "7 The pipe |> or %>%",
    "text": "7 The pipe |&gt; or %&gt;%\nThe pipe |&gt; or %&gt;% is a tool that allows you to take the output of one function, and send it to the next function.\nYou can read the pipe as ‚Äúand then‚Äù - here is a theoretical example.\n\ntake_this_data |&gt;\n  then_this_function() |&gt;\n  then_another_function() |&gt; \n  finally_a_last_function()\n\nThe easiest way to see how the pipe works is with an example. We are going to go over some examples in a minute.\nSome reasons I like the pipe:\n\nits easier to read (and doesn‚Äôt have a lot of nested parentheses)\nit doesn‚Äôt require you to create lots of interim objects which you won‚Äôt use again\nits easy to troubleshoot\n\n\nThe keyboard shortcut for |&gt; is Ctrl/Cmd + Shift + M\n\nWe can change our R options so that the newer version of the pipe |&gt; is used over the older one %&gt;% when we use the keyboard shortcut. I try and remember to use the new one but it doesn‚Äôt always happen, so do be familiar with both.\nYou can go to Tools &gt; Global Options &gt; Code and make sure the tick mark is checked next to ‚ÄúUse the native pipe operator, |&gt; (requires R 4.1+).\n\nOf course you can assign the output of a pipe to something using the assignment operator &lt;- and then use it for other things.\nSsome functions are not ‚Äúpipe friendly‚Äù meaning they will not work using pipes. This is often because the data is not the first argument passed to the function. All tidyverse functions work with piping."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#selecting-columns-with-select",
    "href": "posts/S07E06_tidy_01/index.html#selecting-columns-with-select",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "8 Selecting columns with select()",
    "text": "8 Selecting columns with select()\nOften you will want to pick only certain columns in your dataframe, and you can do this with the function select(). You can pick columns by:\n\ntheir names\ntheir position (i.e., index)\ncharacteristics of that column\n\nIf we want to know how the arguments to select() work, we can access the documentation material about the function.\n\n?select()\n\nThe arguments to select() are:\n\nselect(.data, ...)\n\nThis tells us that select() accepts a data frame (that‚Äôs good, diamonds is one), and we can pass many other expressions.\nLet‚Äôs select first by name.\n\nselect(.data = diamonds, # our df\n       carat, cut, price) # the columns we want to pull\n\n# A tibble: 53,940 √ó 3\n   carat cut       price\n   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;\n 1  0.23 Ideal       326\n 2  0.21 Premium     326\n 3  0.23 Good        327\n 4  0.29 Premium     334\n 5  0.31 Good        335\n 6  0.24 Very Good   336\n 7  0.24 Very Good   336\n 8  0.26 Very Good   337\n 9  0.22 Fair        337\n10  0.23 Very Good   338\n# ‚Ñπ 53,930 more rows\n\n\nOr, we could more simply use the pipe |&gt; or %&gt;%\n\ndiamonds |&gt; \n  select(carat, cut, price)\n\n# A tibble: 53,940 √ó 3\n   carat cut       price\n   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;\n 1  0.23 Ideal       326\n 2  0.21 Premium     326\n 3  0.23 Good        327\n 4  0.29 Premium     334\n 5  0.31 Good        335\n 6  0.24 Very Good   336\n 7  0.24 Very Good   336\n 8  0.26 Very Good   337\n 9  0.22 Fair        337\n10  0.23 Very Good   338\n# ‚Ñπ 53,930 more rows\n\n\nWe can read this as, take the dataset diamonds, then select the columns carat, cut, and price. That was pretty easy to read!\nNote that when you use the pipe, the potential column names will auto-fill for you after you type 3 letters. You should use this option as it will help prevent misspellings. You can also hit tab to scroll through all the potential objects to select.\nWe can also select by index. In general I would recommend against this because its really hard to remember which column indices are which variables today, nevermind returning back to old code 1 year from now. Still I will show you how.\n\ndiamonds |&gt; \n  select(c(1, 2, 7)) # you could also use the colon syntax if your columns are sequential\n\n# A tibble: 53,940 √ó 3\n   carat cut       price\n   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt;\n 1  0.23 Ideal       326\n 2  0.21 Premium     326\n 3  0.23 Good        327\n 4  0.29 Premium     334\n 5  0.31 Good        335\n 6  0.24 Very Good   336\n 7  0.24 Very Good   336\n 8  0.26 Very Good   337\n 9  0.22 Fair        337\n10  0.23 Very Good   338\n# ‚Ñπ 53,930 more rows\n\n\nYou can also select using selection helpers like:\n\neverything(): picks all variables\nstarts_with(): starts with some prefix\ncontains(): contains a specific string\nwhere(): selects columns where the statement given in the argument is TRUE\n\nHere is an example of using where() to select only the columns that are numeric. The function where() asks whether the following function is TRUE or FALSE, and keeps only the occurences that evaluate to TRUE.\n\ndiamonds |&gt;\n  select(where(is.numeric))\n\n# A tibble: 53,940 √ó 7\n   carat depth table price     x     y     z\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23  61.5    55   326  3.95  3.98  2.43\n 2  0.21  59.8    61   326  3.89  3.84  2.31\n 3  0.23  56.9    65   327  4.05  4.07  2.31\n 4  0.29  62.4    58   334  4.2   4.23  2.63\n 5  0.31  63.3    58   335  4.34  4.35  2.75\n 6  0.24  62.8    57   336  3.94  3.96  2.48\n 7  0.24  62.3    57   336  3.95  3.98  2.47\n 8  0.26  61.9    55   337  4.07  4.11  2.53\n 9  0.22  65.1    61   337  3.87  3.78  2.49\n10  0.23  59.4    61   338  4     4.05  2.39\n# ‚Ñπ 53,930 more rows\n\n\nYou can find more helpers here.\nUsing select() will also set the order of your columns. More about this in practice."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#choosing-observations-with-filter",
    "href": "posts/S07E06_tidy_01/index.html#choosing-observations-with-filter",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "9 Choosing observations with filter()",
    "text": "9 Choosing observations with filter()\n\n\n\n\n\nFigure from Allison Horst\n\n\n\n\nSometimes you want to select observations (rows) based on values. To do this you use filter(). Try not to confuse this with select().\n\n\n\n\n\n\nselect() picks columns, while filter() picks rows.\n\n\n\n\n\n\nThe function filter() will keep only observations that meet your filtering criteria.\nLet‚Äôs say we want to only keep the diamonds that are bigger than 3 carats.\n\n# without the pipe\n# i find this harder to read\nfilter(.data = diamonds, \n       carat &gt; 3)\n\n# A tibble: 32 √ó 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67\n 2  3.11 Fair    J     I1       65.9    57  9823  9.15  9.02  5.98\n 3  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73\n 4  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66\n 5  3.02 Fair    I     I1       65.2    56 10577  9.11  9.02  5.91\n 6  3.01 Fair    H     I1       56.1    62 10761  9.54  9.38  5.31\n 7  3.65 Fair    H     I1       67.1    53 11668  9.53  9.48  6.38\n 8  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85\n 9  3.22 Ideal   I     I1       62.6    55 12545  9.49  9.42  5.92\n10  3.5  Ideal   H     I1       62.8    57 12587  9.65  9.59  6.03\n# ‚Ñπ 22 more rows\n\n# the pipe/my preferred way\ndiamonds |&gt; \n  filter(carat &gt; 3)\n\n# A tibble: 32 √ó 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67\n 2  3.11 Fair    J     I1       65.9    57  9823  9.15  9.02  5.98\n 3  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73\n 4  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66\n 5  3.02 Fair    I     I1       65.2    56 10577  9.11  9.02  5.91\n 6  3.01 Fair    H     I1       56.1    62 10761  9.54  9.38  5.31\n 7  3.65 Fair    H     I1       67.1    53 11668  9.53  9.48  6.38\n 8  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85\n 9  3.22 Ideal   I     I1       62.6    55 12545  9.49  9.42  5.92\n10  3.5  Ideal   H     I1       62.8    57 12587  9.65  9.59  6.03\n# ‚Ñπ 22 more rows\n\n\nHere I made use of the greater than &gt; sign, and there are other operators you could also use to help you filter.\n\n==: equal to (I usually read this as exactly equal to, and is different than using an equal sign in an equation)\n&lt;, &gt;: less than or greater than\n&lt;=, &gt;=: less than or equal to, great than or equal to\n&: and\n|: or\n!: not equal\nis.na: is NA\n\nYou can also layer your filtering. This can include in both an AND or OR fashion.\n\n# include diamonds that are bigger than 3 carats and a Premium cut\ndiamonds |&gt; \n  filter(carat &gt; 3 & cut == \"Premium\")\n\n# A tibble: 13 √ó 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  3.01 Premium I     I1       62.7    58  8040  9.1   8.97  5.67\n 2  3.01 Premium F     I1       62.2    56  9925  9.24  9.13  5.73\n 3  3.05 Premium E     I1       60.9    58 10453  9.26  9.25  5.66\n 4  3.24 Premium H     I1       62.1    58 12300  9.44  9.4   5.85\n 5  3.01 Premium G     SI2      59.8    58 14220  9.44  9.37  5.62\n 6  4.01 Premium I     I1       61      61 15223 10.1  10.1   6.17\n 7  4.01 Premium J     I1       62.5    62 15223 10.0   9.94  6.24\n 8  3.67 Premium I     I1       62.4    56 16193  9.86  9.81  6.13\n 9  3.01 Premium I     SI2      60.2    59 18242  9.36  9.31  5.62\n10  3.04 Premium I     SI2      59.3    60 18559  9.51  9.46  5.62\n11  3.51 Premium J     VS2      62.5    59 18701  9.66  9.63  6.03\n12  3.01 Premium J     SI2      60.7    59 18710  9.35  9.22  5.64\n13  3.01 Premium J     SI2      59.7    58 18710  9.41  9.32  5.59\n\n\n\n# include diamonds that are bigger than 3 carats OR a Premium cut\n# \"|\" (above the return key) is the symbol for \"or\"\ndiamonds |&gt; \n  filter(carat &gt; 3 | cut == \"Premium\")\n\n# A tibble: 13,810 √ó 10\n   carat cut     color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31\n 2  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63\n 3  0.22 Premium F     SI1      60.4    61   342  3.88  3.84  2.33\n 4  0.2  Premium E     SI2      60.2    62   345  3.79  3.75  2.27\n 5  0.32 Premium E     I1       60.9    58   345  4.38  4.42  2.68\n 6  0.24 Premium I     VS1      62.5    57   355  3.97  3.94  2.47\n 7  0.29 Premium F     SI1      62.4    58   403  4.24  4.26  2.65\n 8  0.22 Premium E     VS2      61.6    58   404  3.93  3.89  2.41\n 9  0.22 Premium D     VS2      59.3    62   404  3.91  3.88  2.31\n10  0.3  Premium J     SI2      59.3    61   405  4.43  4.38  2.61\n# ‚Ñπ 13,800 more rows\n\n\nYou can play around with combining these different operators to see what happens."
  },
  {
    "objectID": "posts/S07E06_tidy_01/index.html#practice-1",
    "href": "posts/S07E06_tidy_01/index.html#practice-1",
    "title": "Tidyverse 1: Introduction to the tidyverse",
    "section": "10 Practice",
    "text": "10 Practice\n\n\n\n\n\n\nCreate a new dataframe called small_diamonds that includes only the diamonds that are less than 0.5 carats. How many diamonds does this include?\n\n\n\n\n\n\nsmall_diamonds &lt;- diamonds |&gt;\n  filter(carat &lt; 0.5)\n\nnrow(small_diamonds)\n\n[1] 17674\n\n\n\n\n\n\n\n\n\n\n\nSubset diamonds into a new df (diamonds_subset) so that it only includes diamonds less than $10,000, and only information for carat, cut, price, and color, in that specific order.\n\n\n\n\n\n\ndiamonds_subset &lt;- diamonds |&gt;\n  filter(price &lt; 10000) |&gt;\n  select(carat, cut, price, color) # select both picks and orders!\n\n\n\n\n\n\n\n\n\n\nWhat is the mean and standard deviation of carat of the diamonds that passed your critieria in diamonds_subset?\n\n\n\n\n\nUsing the $\n\n# mean\nmean(diamonds_subset$carat)\n\n[1] 0.6968262\n\n# sd\nsd(diamonds_subset$carat)\n\n[1] 0.3574645\n\n\nUsing the pipe\n\n# mean another way\ndiamonds_subset |&gt;\n  pull(carat) |&gt; # this is necessary because mean requires a vector!\n  mean()\n\n[1] 0.6968262\n\n# or you could go full pipe!\ndiamonds |&gt;\n  filter(price &lt; 10000) |&gt;\n  pull(carat) |&gt;\n  mean()\n\n[1] 0.6968262\n\n# sd another way\ndiamonds_subset |&gt;\n  pull(carat) |&gt; # this is necessary because mean requires a vector!\n  sd()\n\n[1] 0.3574645\n\n# or you could go full pipe!\ndiamonds |&gt;\n  filter(price &lt; 10000) |&gt;\n  pull(carat) |&gt;\n  sd()\n\n[1] 0.3574645\n\n\n\n\n\n\n\n\n\n\n\nHow many diamonds in this dataset are both Ideal cut, less than $10,000, and bigger than 1.5 carats??\n\n\n\n\n\nWhen you are trying to filter using ‚Äúand‚Äù and have more than 2 items, use a comma in between them.\n\ndiamonds |&gt;\n  filter(price &lt; 10000, cut == \"Ideal\", carat &gt; 1.5) |&gt;\n  nrow()\n\n[1] 327"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code Club Sessions (starting with the most recent)",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nIntroduction to gt Tables - 03\n\n\nMaking Beautiful Tables in R.\n\n\n\n\ngt\n\n\ntables\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nApr 22, 2025\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to gt Tables - 02\n\n\nMaking Beautiful Tables in R.\n\n\n\n\ngt\n\n\ntables\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2025\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to gt Tables - 01\n\n\nMaking Beautiful Tables in R.\n\n\n\n\ngt\n\n\ntables\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nApr 8, 2025\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nIterating part III: purrr‚Äôs map() function\n\n\nA deeper dive into iterating with purrr‚Äôs map() function.\n\n\n\n\nfunctional programming\n\n\npurrr\n\n\n\n\n\n\n\n\n\n\n\nApr 1, 2025\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nIterating part II: writing custom functions and purrr:map()\n\n\nInstead of using loops, we can iterate with functions!\n\n\n\n\nfunctions\n\n\nfunctional programming\n\n\npurrr\n\n\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nIterating part I: for loops\n\n\nIn this first of a series of sessions on developing tools for doing things over and over, we will cover for loops.\n\n\n\n\nfor loops\n\n\nbase R\n\n\n\n\n\n\n\n\n\n\n\nMar 18, 2025\n\n\nJessica Cooperstone and Jelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nPlotting geographical maps in R: part III\n\n\nMaking choropleth maps and interactive, zoomable maps.\n\n\n\n\nmaps\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2025\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nPlotting geographical maps in R: part II\n\n\nAdding markers and text to maps.\n\n\n\n\nmaps\n\n\nggplot2\n\n\ndataviz\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2025\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nPlotting geographical maps in R: part I\n\n\nUsing ggplot to make maps and adding custom information to them.\n\n\n\n\nmaps\n\n\nggplot2\n\n\ndataviz\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2025\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to ggplot2 - 03 & 04\n\n\nMore geoms, faceting plots, and adding labels\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nplotting\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nJan 28, 2025\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to ggplot2 - 02\n\n\nMore about aesthetics.\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nplotting\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nJan 21, 2025\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to ggplot2 - 01\n\n\nCode structure, data, aesthetic mappings, and geoms\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nplotting\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nJan 14, 2025\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nAccessing and using R at the Ohio Supercomputer Center (OSC)\n\n\nAn intro to OSC, and accessing R/RStudio via OnDemand.\n\n\n\n\nreproducibility\n\n\nosc\n\n\nhpc\n\n\n\n\n\n\n\n\n\n\n\nDec 2, 2024\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nReproducibility 05: Making Changes with Git and GitHub üê±\n\n\nUsing Quarto/RStudio, GitHub, and GitHub Desktop to edit contents in a repositoryü§©Ô∏è.\n\n\n\n\ngit\n\n\ngithub\n\n\nversion control\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nNov 18, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nReproducibility 04: Getting started with Git and GitHub üê±\n\n\nUsing Quarto/RStudio, GitHub, and GitHub Desktop to post code to a repositoryü§©Ô∏è.\n\n\n\n\ngit\n\n\ngithub\n\n\nversion control\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nNov 4, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nReproducibility 3: More about Quarto\n\n\n\n\n\n\n\nreproducibility\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nOct 28, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nReproducibility 2: Introduction to Quarto\n\n\n\n\n\n\n\nreproducibility\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2024\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nReproducibility 1:  Intro, File Organization, and RStudio Projects\n\n\n\n\n\n\n\nreproducibility\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2024\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nData Wrangling 5: Tidy Data and Pivoting\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2024\n\n\nAaron Max Wiedemer and Horacio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nData Wrangling 4: Merging/Joining Data Frames\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nSep 23, 2024\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nData Wrangling 3: Counting and Summarizing Data by Group\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nSep 16, 2024\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nData wrangling: using select(), arrange(), and mutate()\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nSep 9, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nData wrangling: more on filter() and select()\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nAug 26, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nPlotting 4: Faceting and multi-panel figures\n\n\n\n\n\n\n\nplotting\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nApr 19, 2024\n\n\nJelmer Poelstra, Mike Sovic\n\n\n\n\n\n\n  \n\n\n\n\nPlotting 3: histogram, density, and bar plots\n\n\n\n\n\n\n\nplotting\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nApr 12, 2024\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nPlotting 2: aesthetics, violin, and boxplots\n\n\n\n\n\n\n\nplotting\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2024\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nPlotting 1: Intro to ggplot2\n\n\n\n\n\n\n\nplotting\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2024\n\n\nJelmer Poelstra, Michael Broe\n\n\n\n\n\n\n  \n\n\n\n\nTidyverse 5: Reading in data\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nMar 22, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nTidyverse 4: Tidy Data and Pivoting\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nMar 8, 2024\n\n\nAaron Max Wiedemer\n\n\n\n\n\n\n  \n\n\n\n\nTidyverse 3: Grouping and Summarizing Data\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nMar 1, 2024\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nTidyverse 2: More dplyr Data Wrangling\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nFeb 23, 2024\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nTidyverse 1: Introduction to the tidyverse\n\n\n\n\n\n\n\nr-basics\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nFeb 16, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 5: Data Manipulation With Base R\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 4: Vectorized Operations and Data Frames\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nFeb 2, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 3: Built-in functions, Vectors, and Help\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 2: Scripts and Objects\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nJan 19, 2024\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nR Basics 1: Getting Started\n\n\n\n\n\n\n\nr-basics\n\n\n\n\n\n\n\n\n\n\n\nJan 12, 2024\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nShiny 04: Deploying Shiny App\n\n\nDeploying Shiny App using ShinyLive .\n\n\n\n\nshiny\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2023\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nShiny 03: Map viz.¬†in Shiny\n\n\nExplore maps in Shiny App.\n\n\n\n\nshiny\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nNov 13, 2023\n\n\nSandip Mondal and Horacio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nShiny 02: Intro to Shiny (cont.)\n\n\nExplore additional features in Shiny App.\n\n\n\n\nshiny\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2023\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nShiny 01: Intro to Shiny\n\n\nWhat is Shiny? The Basic Structure of a Shiny App.\n\n\n\n\nshiny\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nHoracio Lopez-Nicora\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 7: making a presentation\n\n\nCreating a presentation with Quarto\n\n\n\n\nwebsite\n\n\nquarto presentations\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 6: Quarto features\n\n\nBasic formatting, citations, code chunks, tabsets, callouts, and more.\n\n\n\n\nwebsite\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2023\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 5: modifying your site\n\n\nMaking a fancy about page, drop down menu bars, and some (S)CSS styling.\n\n\n\n\nwebsite\n\n\ngit\n\n\n\n\n\n\n\n\n\n\n\nOct 2, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 4\n\n\nInteracting with our GitHub repository\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nSep 25, 2023\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 3: Deploying your website with GitHub üê±\n\n\nUsing GitHub, GitHub Desktop, and GitHub Pages to deploy our website ü§©Ô∏è.\n\n\n\n\nwebsite\n\n\ngit\n\n\n\n\n\n\n\n\n\n\n\nSep 18, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 2\n\n\nAdding a new page to your site & using YAML to modify the look and configuration of our new page and the entire site\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nSep 11, 2023\n\n\nJelmer Poelstra\n\n\n\n\n\n\n  \n\n\n\n\nQuarto website 1: Initiating a website üåê\n\n\n\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nWelcome to the new Code Club website!\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 18, 2023\n\n\nJelmer Poelstra, Jessica Cooperstone, Horacio Lopez-Nicora\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n Back to top"
  },
  {
    "objectID": "pages/previous.html#current-semester-spring-2025",
    "href": "pages/previous.html#current-semester-spring-2025",
    "title": "Previous Code Club sessions",
    "section": "Current semester (Spring 2025)",
    "text": "Current semester (Spring 2025)\n\n\n\nSession\nDate\nPresenter\nTopic & link\n\n\n\n\nS09E01\nJan 14\nJess\nData visualization with ggplot2 ‚Äì I\n\n\nS09E02\nJan 21\nHoracio\nData visualization with ggplot2 ‚Äì II\n\n\nS09E03\nJan 28\nJess\nData visualization with ggplot2 ‚Äì III\n\n\nS09E04\nFeb 04\nJess\nData visualization with ggplot2 ‚Äì IV\n\n\nS09E05\nFeb 18\nJelmer\nMaking maps in R ‚Äì I\n\n\nS09E06\nFeb 25\nJelmer\nMaking maps in R ‚Äì II\n\n\nS09E07\nMar 04\nJelmer\nMaking maps in R ‚Äì III\n\n\n-\nMar 11\n-\nNo Code Club (Spring Break)\n\n\nS09E08\nMar 18\nJess\nIteration I - for loops\n\n\nS09E09\nMar 25\nJess\nIteration II - writing functions and applying them with purrr:map()\n\n\n\n\n\n\n\n\n\nAsk us for access to the Zoom recordings of previous Code Club sessions!"
  },
  {
    "objectID": "pages/previous.html#previous-semesters",
    "href": "pages/previous.html#previous-semesters",
    "title": "Previous Code Club sessions",
    "section": "Previous semesters",
    "text": "Previous semesters\n\nFall ‚Äô24\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS08E01\nAug 26\nJess\nData wrangling 01: Filtering rows\n\n\nS08E02\nSept 9\nJess\nData wrangling 02: Selecting columns, sorting, and mutate()\n\n\nS08E03\nSept 16\nJelmer\nData wrangling 03: Counting and summarzing by group\n\n\nS08E04\nSept 23\nHoracio\nData wrangling 04: Merging/joining data frames\n\n\nS08E05\nSept 30\nHoracio\nData wrangling 05: Pivoting with pivot_longer()\n\n\nS08E06\nOct 7\nHoracio\nData wrangling 06: Pivoting with pivot_wider()\n\n\nS08E07\nOct 14\nJelmer\nReproducibility 01: File and project management and organization\n\n\nS08E08\nOct 21\nHoracio\nReproducibility 02: Quarto 1\n\n\nS08E08\nOct 28\nJess\nReproducibility 03: Quarto 2\n\n\nS08E09\nNov 4\nJess\nReproducibility 04: Github 1\n\n\nS08E10\nNov 18\nJess\nReproducibility 05: Github 2\n\n\nS08E11\nDec 2\nJelmer\nR at the Ohio Supercomputer Center\n\n\n\n\n\n\nSpring ‚Äô24\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS07E01\nJan 12\nJess\nR Basics 1: R, RStudio, and RStudio Projects\n\n\nS07E02\nJan 19\nJelmer\nR Basics 2: Scripts and objects\n\n\nS07E03\nJan 26\nHoracio\nR Basics 3: Built-in functions, vectors, and help\n\n\nS07E04\nFeb 02\nJess\nR Basics 4: Vectorized operations and data frames\n\n\nS07E05\nFeb 09\nHoracio\nR Basics 5: Data manipulation in base R\n\n\nS07E06\nFeb 16\nJess\nTidyverse 1: An introduction to the tidyverse\n\n\nS07E07\nFeb 23\nJelmer\nTidyverse 2: More basic data wrangling\n\n\nS07E08\nMar 01\nJelmer\nTidyverse 3: Grouping and summarizing data\n\n\nS07E09\nMar 08\nAaron Wiedemer\nTidyverse 4: Tidy data and pivot functions\n\n\nS07E10\nMar 22\nJess\nTidyverse 4: Data import\n\n\nS07E11\nMar 29\nJelmer\nPlotting 1: Intro to ggplot2\n\n\nS07E12\nApr 05\nHoracio\nPlotting 2: Aesthetics, violin, and boxplots\n\n\nS07E13\nApr 12\nHoracio\nPlotting 3: Histogram, density, and bar plots\n\n\nS07E14\nApr 19\nJelmer\nPlotting 4: Faceting, formatting, and saving plots\n\n\n\n\n\n\nFall ‚Äô23\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS06E01\nAug 28\nJess\nQuarto Website 1: Initiating a website\n\n\nS06E02\nSep 11\nJelmer\nQuarto Website 2: Adding a page & YAML formatting\n\n\nS06E03\nSep 18\nJess\nQuarto Website 3: Deploying to GitHub\n\n\nS06E04\nSep 25\nJelmer\nQuarto Website 4: Interacting with your repository\n\n\nS06E05\nOct 2\nJess\nQuarto Website 5: Modifying your site\n\n\nS06E06\nOct 9\nJelmer\nQuarto Website 6: Quarto features\n\n\nS06E07\nOct 16\nJess\nQuarto Website 7: Quarto presentations\n\n\nS06E08\nOct 30\nHoracio\nShiny Apps 01: Intro to Shiny\n\n\nS06E09\nNov 06\nHoracio\nShiny Apps 02: Intro to Shiny (cont.)\n\n\nS06E10\nNov 13\nHoracio & Sandip\nShiny Apps 03: Map viz.¬†in Shiny\n\n\nS06E10\nDec 04\nHoracio\nShiny Apps 04: Deploying our Shiny App\n\n\n\n\n\n\nSpring ‚Äô23\n\nR4DS = The R for Data Science book (2nd edition)\n\n\n\n\nSession\nDate\nPresenter\nTopic + link to BioDASH page\n\n\n\n\nS05E01\nJan 26\nJelmer\nR4DS, Ch. 4: Pipes\n\n\nS05E02\nFeb 02\nStephen\nR4DS, Ch. 6: Tidy Data, I\n\n\nS05E03\nFeb 09\nJessica & Daniel\nR4DS, Ch. 6: Tidy Data, II\n\n\nS05E04\nFeb 16\nMichael\nR4DS, Ch. 7: Code Style\n\n\nS05E05\nFeb 23\nJelmer\nR4DS, Ch. 8: Data Import, I\n\n\nS05E06\nMar 02\nStephen\nR4DS, Ch. 8: Data Import, II\n\n\nS05E07\nMar 09\nJessica\nR4DS, Ch. 9: Scripts & Projects\n\n\nS05E08\nMar 23\nJessica\nR4DS, Ch. 10: ggplot layers, part 1\n\n\nS05E09\nMar 30\nJelmer\nR4DS, Ch. 10: ggplot layers, part 2\n\n\n\n\n\n\nSummer & Fall ‚Äô22\n\nR4DS = The R for Data Science book (1st edition)\n\n\n\n\nSession\nDate\nPresenter\nTopic\n\n\n\n\nS04E01\nJune 09\nJelmer\nR4DS, Ch. 1: Intro\n\n\nS04E02\nJune 23\nMichael B.\nR4DS, Ch. 3.1- 3.4: Data viz I\n\n\nS04E03\nJune 30\nJessica\nR4DS, Ch. 3.5: Data viz II\n\n\nS04E04\nJuly 07\nJessica\nR4DS, Ch. 3.6: Data viz III\n\n\nS04E05\nJuly 14\nMike S.\nR4DS, Ch. 3.7: Data viz IV\n\n\nS04E06\nJuly 21\nJelmer\nR4DS, Ch. 3.8-3.10: Data viz V\n\n\nS04E07\nJuly 28\nMichael B.\nR4DS, Ch. 27: R Markdown\n\n\nS04E08\nSept 15\nJessica\nR4DS, Ch. 4, 6 & 8: Workflow\n\n\nS04E09\nSept 22\nJelmer\nR4DS, Ch. 5.1-5.2: Data transformation I - intro and filter()\n\n\nS04E10\nOct 06\nMichael B.\nR4DS, Ch. 5.3: Data transformation II - arrange()\n\n\nS04E11\nOct 20\nMichael B.\nR4DS, Ch. 5.4: Data transformation III - select()\n\n\nS04E12\nOct 27\nStephen\nR4DS, Ch. 5.5: Data transformation IV - mutate()\n\n\nS04E13\nNov 03\nMike S.\nR4DS, Ch. 5.6: Data transformation V - summarize() part 1\n\n\nS04E14\nNov 10\nJessica\nR4DS, Ch. 5.6: Data transformation V - summarize() part 2\n\n\nS04E15\nNov 17\nJelmer\nR4DS, Ch. 7.1-7.3: Exploratory Data Analysis I\n\n\nS04E16\nDec 01\nJelmer\nR4DS, Ch. 7.1-7.3: Exploratory Data Analysis II\n\n\nS04E17\nDec 08\nMichael B.\nR4DS, Ch. 10: Tibbles\n\n\n\n\n\n\nSpring ‚Äô22\n\n\n\nSession\nDate\nPresenter\nTopic (+ link)\nTopic block\n\n\n\n\nS03E01\nJan 13\nMike S.\nT-tests\nBasic statistics in R\n\n\nS03E02\nJan 20\nJessica\nANOVA\nBasic statistics in R\n\n\nS03E03\nJan 27\nJelmer\nPrincipal Component Analysis\nBasic statistics in R\n\n\nS03E04\nFeb 03\nJessica\nANOVA part II\nBasic statistics in R\n\n\nS03E05\nFeb 10\nStephen\nCorrelation\nBasic statistics in R\n\n\nS03E06\nFeb 17\nMichael B.\nData structures and subsetting\nBasic statistics in R\n\n\nS03E07\nFeb 24\nJelmer\nIntro to ‚ÄúDRY‚Äù and iteration\n‚ÄúDon‚Äôt repeat yourself‚Äù\n\n\nS03E08\nMar 03\nJelmer\nLoops\n‚ÄúDon‚Äôt repeat yourself‚Äù\n\n\nS03E09\nMar 10\nMike S.\nApply functions\n‚ÄúDon‚Äôt repeat yourself‚Äù\n\n\nS03E10\nMar 24\nMike S.\nPurrr map functions\n‚ÄúDon‚Äôt repeat yourself‚Äù\n\n\nS03E11\nApr 14\nMichael B.\nWriting functions part I\n‚ÄúDon‚Äôt repeat yourself‚Äù\n\n\nS03E12\nApr 21\nMichael B.\nIncorporating your own functions in loops\n‚ÄúDon‚Äôt repeat yourself‚Äù\n\n\n\n\n\n\nFall ‚Äô21\n\n\n\nSession\nDate\nPresenter\nTopic (+ link)\nTopic block\n\n\n\n\nS02E01\nAug 26\nJelmer\nR basics ‚Äì part I\nR basics\n\n\nS02E02\nSep 2\nMike S.\nR basics ‚Äì part II\nR basics\n\n\nS02E03\nSep 9\nMichael B.\nR Markdown\nR basics\n\n\nS02E04\nSep 16\nJessica\nTidyverse intro ‚Äì part I\nR basics\n\n\nS02E05\nSep 23\nStephen\nTidyverse intro ‚Äì part II\nR basics\n\n\nS02E06\nSep 30\nMichael B.\nggplot intro ‚Äì part I\nPlotting in R\n\n\nS02E07\nOct 07\nJelmer\nggplot intro ‚Äì part II\nPlotting in R\n\n\nS02E08\nOct 21\nMike S.\nFaceting plots\nPlotting in R\n\n\nS02E09\nOct 28\nMike S.\nFaceting and combining plots\nPlotting in R\n\n\nS02E10\nNov 04\nDaniel Moreno\nStatistical results in plots with ggpubr\nPlotting in R\n\n\nS02E11\nNov 18\nJulia Vrtilek\nBat vocalizations with R at OSC\nPutting code to practice\n\n\nS02E12\nDec 02\nMatthew Teegarden\nInteractive applications with Shiny\nPutting code to practice\n\n\nS02E13\nDec 09\nJessica\nInteractive plots with Plotly\nPlotting in R\n\n\n\n\n\n\nFall ‚Äô20 & Spring ‚Äô21\n\n\n\nSession nr.\nDate\nPresenter\nTopic (+ link)\nOther\n\n\n\n\nS01E01\nNov 18, 2020\nJelmer\nRStudio Projects & getting started\nslides\n\n\nS01E02\nDec 2, 2020\nJessica\ndplyr core verbs\n\n\n\nS01E03\nDec 9, 2020\nMike S.\nJoining datasets\n\n\n\nS01E04\nDec 16, 2020\nMichael B.\nggplot2 ‚Äì round 1\n\n\n\nS01E05\nJan 15, 2021\nJessica\nggplot2 ‚Äì round 2\n\n\n\nS01E06\nJan 22, 2021\nStephen\nFactors\n\n\n\nS01E07\nJan 29, 2021\nJelmer\nR Markdown\n\n\n\nS01E08\nFeb 5, 2021\nMike S.\nPivoting data\n\n\n\nS01E09\nFeb 12, 2021\nMichael B.\nSubsetting data\n\n\n\nS01E10\nFeb 19, 2021\nJessica\nFaceting, animating, and combining plots\n\n\n\nS01E11\nFeb 26, 2021\nStephen\nMaking maps with ggmap\n\n\n\nS01E12\nMar 5, 2021\nJelmer\nVectorization and loops\n\n\n\nS01E13\nMar 12, 2021\nMike S.\nThe apply family of functions\n\n\n\nS01E14\nMar 19, 2021\nMichael B.\nWriting your own functions\n\n\n\nS01E15\nMar 26, 2021\nJessica\nInteractive plots with Plotly\n\n\n\nS01E16\nApr 02, 2021\nStephen\nWorking with dates with lubridate\n\n\n\nS01E17\nApr 09, 2021\nJelmer\nIntroduction to regular expressions\n\n\n\nS01E18\nApr 16, 2021\nMike S.\nRegular Expressions: Part II\n\n\n\nS01E19\nApr 23, 2021\nMichael B.\nWord Clouds via tidytext\n\n\n\nS01E20\nApr 30, 2021\nJessica\nCleaning up variables names"
  },
  {
    "objectID": "pages/setup.html",
    "href": "pages/setup.html",
    "title": "Computer Setup (installations) for Code Club",
    "section": "",
    "text": "Here, you will find general information about software installations you should do before joining Code Club.\nIn summary, you only need to be able to access to R and RStudio, preferably via a local installation, and optionally via the Ohio Supercomputer Center (OSC).\nIf you run into issues or have questions, don‚Äôt hesitate to contact one of the Code Club organizers."
  },
  {
    "objectID": "pages/setup.html#install-r",
    "href": "pages/setup.html#install-r",
    "title": "Computer Setup (installations) for Code Club",
    "section": "1 Install R",
    "text": "1 Install R\n\nWindows: Download and run the .exe file for the latest version of R from https://cran.r-project.org/bin/windows/base/, by clicking the large Download R [version-number] for Windows link at the top of the gray box.\nMac: Download and run the .pkg file for the latest version of R from https://cran.r-project.org/bin/macosx/, by clicking the link just below Latest release.\n\n\n\n\n\n\n\nUsing an OSU-managed computer?\n\n\n\nIf you are using an OSU computer, you may not have the ‚Äúadministrative privileges‚Äù that are needed to install software on your computer the regular way.\nHowever, you should in that case have an OSU application on your computer that allows you to install a selection of approved software, and that selection should include R and RStudio. On Windows, this app seems to be simply called ‚ÄúSoftware Center‚Äù, whereas on Mac, it is called ‚ÄúOhio State Application Self Service‚Äù (names likely vary).\nIf you can‚Äôt find that application, or have trouble installing R and RStudio this way, you should contact OSU IT to help you.\n\n\n\n\n\n\n\n\nAlready have R installed?\n\n\n\n\nPlease check your version of R ‚Äì this information is printed to the console when you start R, and you can also get it by typing sessionInfo() and checking the first line of the output.\nCurrently (Spring 2025), we would recommend R version 4.3.0 or higher.\nTo update R, see the bottom of this page for instructions."
  },
  {
    "objectID": "pages/setup.html#install-rstudio",
    "href": "pages/setup.html#install-rstudio",
    "title": "Computer Setup (installations) for Code Club",
    "section": "2 Install RStudio",
    "text": "2 Install RStudio\nRStudio is a so-called Integrated Development Environment (IDE) for R, with side-by-side panes for an R script, an R concole, plots, help documents, and much more. While it is possible to use R without RStudio, RStudio has become the de facto standard for working with R and we can highly recommend it.\nTo install RStudio, go to the RStudio download page and download and run the installer file for your operating system."
  },
  {
    "objectID": "pages/setup.html#osc",
    "href": "pages/setup.html#osc",
    "title": "Computer Setup (installations) for Code Club",
    "section": "3 Alternative: Use RStudio Server at OSC",
    "text": "3 Alternative: Use RStudio Server at OSC\nUpon request (contact Jelmer), you can get access to the Ohio Supercomputer Center (OSC) Classroom Project for Code Club (PAS1838). This way, you can code in RStudio from your browser rather than with a local installation. This is a good option if you prefer not to install anything or if you run into problems during installations.\nAfter you asked for access to the OSC project, you should receive an email from OSC that you have been added to the Code Club OSC project.\n\nIf you already have an OSC account, you shouldn‚Äôt need to do anything to gain access, although the email may ask you to confirm/accept your being added to project.\nIf you do not yet have an OSC account, the email you received from OSC should have a link to do so. Alternatively, follow the instructions below to sign up and get access to the project.\n\n\n\n\n\n\n\nRun RStudio Server from the OSC OnDemand website (Click to expand)\n\n\n\n\n\nOSC OnDemand lets you access OSC resources through your browser and run applications like RStudio.\n\nTo get started, go to https://ondemand.osc.edu/ and log in with your OSC username and password.\nClick on ‚ÄúInteractive Apps‚Äù in the blue top bar, and select ‚ÄúRStudio Server‚Äù (near the bottom).\nNow, you‚Äôre on a page from which you can launch an RStudio server that will run on an OSC cluster. Select project PAS1838 in the dropdown menu and change the ‚ÄúNumber of hours‚Äù to 2. Then click ‚ÄúLaunch‚Äù.\nYou will be sent to a page where you can see the status of your ‚Äújob‚Äù It usually starts running within seconds, and the color of the top bar will then switch from blue (‚ÄúQueued‚Äù and then ‚ÄúStarting‚Äù) to green (‚ÄúRunning‚Äù).\nClick ‚ÄúConnect to RStudio Server‚Äù at the bottom of the box, and an RStudio Server instance will open."
  },
  {
    "objectID": "pages/setup.html#alternative-update-an-existing-r-installation",
    "href": "pages/setup.html#alternative-update-an-existing-r-installation",
    "title": "Computer Setup (installations) for Code Club",
    "section": "4 Alternative: Update an existing R installation",
    "text": "4 Alternative: Update an existing R installation\nConsider updating R if you have an older version of R installed. You can check which version of R you have by looking at the first lines of output when running the following command inside R:\nsessionInfo()\nTo update R:\n\nWindows: You can update R from within R. The updateR() function will also take care of updating your packages:\ninstall.packages(\"installr\")\ninstallr::updateR()\nMac: Download and install the latest .pkg file as if you were installing R for the first time.\n\n\nRe-installing your packages after updating (Mac and Linux)\nWhile the installr::updateR() function for Windows users takes care of reinstalling your packages along with updating R, Mac and Linux users will have to manually re-install their packages. Some people prefer to re-install these packages on the fly, which can end up being a way to get rid of packages you no longer use.\nBut if you want immediately reinstall all your packages, run this before you upgrade:\nmy_packages &lt;- installed.packages()\nsaveRDS(my_packages, \"my_packages.rds\")\nThen, after you‚Äôve installed the latest R version:\nmy_packages &lt;- readRDS(\"CurrentPackages.rds\")\ninstall.packages(my_packages[1, ])\nThis will only work for packages available on CRAN. Of course, you can check your list for Github-only and Bioconductor packages and then install those with their respective commands (see below). Yes, this can be a bit of a hassle!"
  },
  {
    "objectID": "pages/setup.html#new-to-r",
    "href": "pages/setup.html#new-to-r",
    "title": "Computer Setup (installations) for Code Club",
    "section": "5 New to R?",
    "text": "5 New to R?\nIf you are completely new to R, we recommend that you go through the online material of a one-day workshop that the Code Club organizers taught in February 2025."
  }
]
[
  {
    "objectID": "pages/schedule.html",
    "href": "pages/schedule.html",
    "title": "Schedule for Code Club",
    "section": "",
    "text": "Here is the schedule for upcoming Code Club sessions:\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS06E01\nAug 28\nJess\nInitiating a website"
  },
  {
    "objectID": "pages/previous.html#current-semester",
    "href": "pages/previous.html#current-semester",
    "title": "Previous Code Club sessions",
    "section": "Current semester",
    "text": "Current semester\n\n\n\nSession\nDate\nPresenter\nLink\n\n\n\n\nS06E01\nAug 28\nJess\nInitiating a website"
  },
  {
    "objectID": "pages/previous.html#previous-semesters",
    "href": "pages/previous.html#previous-semesters",
    "title": "Previous Code Club sessions",
    "section": "Previous semesters",
    "text": "Previous semesters\nAsk us for access to the Zoom recordings of previous Code Club sessions!\n\n\nSpring ’23\n\nR4DS = The R for Data Science book (2nd edition)\n\n\n\n\nSession\nDate\nPresenter\nTopic + link to BioDASH page\n\n\n\n\nS05E01\nJan 26\nJelmer\nR4DS, Ch. 4: Pipes\n\n\nS05E02\nFeb 02\nStephen\nR4DS, Ch. 6: Tidy Data, I\n\n\nS05E03\nFeb 09\nJessica & Daniel\nR4DS, Ch. 6: Tidy Data, II\n\n\nS05E04\nFeb 16\nMichael\nR4DS, Ch. 7: Code Style\n\n\nS05E05\nFeb 23\nJelmer\nR4DS, Ch. 8: Data Import, I\n\n\nS05E06\nMar 02\nStephen\nR4DS, Ch. 8: Data Import, II\n\n\nS05E07\nMar 09\nJessica\nR4DS, Ch. 9: Scripts & Projects\n\n\nS05E08\nMar 23\nJessica\nR4DS, Ch. 10: ggplot layers, part 1\n\n\nS05E09\nMar 30\nJelmer\nR4DS, Ch. 10: ggplot layers, part 2\n\n\n\n\n\n\nSummer & Fall ’22\n\nR4DS = The R for Data Science book (1st edition)\n\n\n\n\nSession\nDate\nPresenter\nTopic\n\n\n\n\nS04E01\nJune 09\nJelmer\nR4DS, Ch. 1: Intro\n\n\nS04E02\nJune 23\nMichael B.\nR4DS, Ch. 3.1- 3.4: Data viz I\n\n\nS04E03\nJune 30\nJessica\nR4DS, Ch. 3.5: Data viz II\n\n\nS04E04\nJuly 07\nJessica\nR4DS, Ch. 3.6: Data viz III\n\n\nS04E05\nJuly 14\nMike S.\nR4DS, Ch. 3.7: Data viz IV\n\n\nS04E06\nJuly 21\nJelmer\nR4DS, Ch. 3.8-3.10: Data viz V\n\n\nS04E07\nJuly 28\nMichael B.\nR4DS, Ch. 27: R Markdown\n\n\nS04E08\nSept 15\nJessica\nR4DS, Ch. 4, 6 & 8: Workflow\n\n\nS04E09\nSept 22\nJelmer\nR4DS, Ch. 5.1-5.2: Data transformation I - intro and filter()\n\n\nS04E10\nOct 06\nMichael B.\nR4DS, Ch. 5.3: Data transformation II - arrange()\n\n\nS04E11\nOct 20\nMichael B.\nR4DS, Ch. 5.4: Data transformation III - select()\n\n\nS04E12\nOct 27\nStephen\nR4DS, Ch. 5.5: Data transformation IV - mutate()\n\n\nS04E13\nNov 03\nMike S.\nR4DS, Ch. 5.6: Data transformation V - summarize() part 1\n\n\nS04E14\nNov 10\nJessica\nR4DS, Ch. 5.6: Data transformation V - summarize() part 2\n\n\nS04E15\nNov 17\nJelmer\nR4DS, Ch. 7.1-7.3: Exploratory Data Analysis I\n\n\nS04E16\nDec 01\nJelmer\nR4DS, Ch. 7.1-7.3: Exploratory Data Analysis II\n\n\nS04E17\nDec 08\nMichael B.\nR4DS, Ch. 10: Tibbles\n\n\n\n\n\n\nSpring ’22\n\n\n\nSession\nDate\nPresenter\nTopic (+ link)\nTopic block\n\n\n\n\nS03E01\nJan 13\nMike S.\nT-tests\nBasic statistics in R\n\n\nS03E02\nJan 20\nJessica\nANOVA\nBasic statistics in R\n\n\nS03E03\nJan 27\nJelmer\nPrincipal Component Analysis\nBasic statistics in R\n\n\nS03E04\nFeb 03\nJessica\nANOVA part II\nBasic statistics in R\n\n\nS03E05\nFeb 10\nStephen\nCorrelation\nBasic statistics in R\n\n\nS03E06\nFeb 17\nMichael B.\nData structures and subsetting\nBasic statistics in R\n\n\nS03E07\nFeb 24\nJelmer\nIntro to “DRY” and iteration\n“Don’t repeat yourself”\n\n\nS03E08\nMar 03\nJelmer\nLoops\n“Don’t repeat yourself”\n\n\nS03E09\nMar 10\nMike S.\nApply functions\n“Don’t repeat yourself”\n\n\nS03E10\nMar 24\nMike S.\nPurrr map functions\n“Don’t repeat yourself”\n\n\nS03E11\nApr 14\nMichael B.\nWriting functions part I\n“Don’t repeat yourself”\n\n\nS03E12\nApr 21\nMichael B.\nIncorporating your own functions in loops\n“Don’t repeat yourself”\n\n\n\n\n\n\nFall ’21\n\n\n\nSession\nDate\nPresenter\nTopic (+ link)\nTopic block\n\n\n\n\nS02E01\nAug 26\nJelmer\nR basics – part I\nR basics\n\n\nS02E02\nSep 2\nMike S.\nR basics – part II\nR basics\n\n\nS02E03\nSep 9\nMichael B.\nR Markdown\nR basics\n\n\nS02E04\nSep 16\nJessica\nTidyverse intro – part I\nR basics\n\n\nS02E05\nSep 23\nStephen\nTidyverse intro – part II\nR basics\n\n\nS02E06\nSep 30\nMichael B.\nggplot intro – part I\nPlotting in R\n\n\nS02E07\nOct 07\nJelmer\nggplot intro – part II\nPlotting in R\n\n\nS02E08\nOct 21\nMike S.\nFaceting plots\nPlotting in R\n\n\nS02E09\nOct 28\nMike S.\nFaceting and combining plots\nPlotting in R\n\n\nS02E10\nNov 04\nDaniel Moreno\nStatistical results in plots with ggpubr\nPlotting in R\n\n\nS02E11\nNov 18\nJulia Vrtilek\nBat vocalizations with R at OSC\nPutting code to practice\n\n\nS02E12\nDec 02\nMatthew Teegarden\nInteractive applications with Shiny\nPutting code to practice\n\n\nS02E13\nDec 09\nJessica\nInteractive plots with Plotly\nPlotting in R\n\n\n\n\n\n\nFall ’20 & Spring ’21\n\n\n\nSession nr.\nDate\nPresenter\nTopic (+ link)\nOther\n\n\n\n\nS01E01\nNov 18, 2020\nJelmer\nRStudio Projects & getting started\nslides\n\n\nS01E02\nDec 2, 2020\nJessica\ndplyr core verbs\n\n\n\nS01E03\nDec 9, 2020\nMike S.\nJoining datasets\n\n\n\nS01E04\nDec 16, 2020\nMichael B.\nggplot2 – round 1\n\n\n\nS01E05\nJan 15, 2021\nJessica\nggplot2 – round 2\n\n\n\nS01E06\nJan 22, 2021\nStephen\nFactors\n\n\n\nS01E07\nJan 29, 2021\nJelmer\nR Markdown\n\n\n\nS01E08\nFeb 5, 2021\nMike S.\nPivoting data\n\n\n\nS01E09\nFeb 12, 2021\nMichael B.\nSubsetting data\n\n\n\nS01E10\nFeb 19, 2021\nJessica\nFaceting, animating, and combining plots\n\n\n\nS01E11\nFeb 26, 2021\nStephen\nMaking maps with ggmap\n\n\n\nS01E12\nMar 5, 2021\nJelmer\nVectorization and loops\n\n\n\nS01E13\nMar 12, 2021\nMike S.\nThe apply family of functions\n\n\n\nS01E14\nMar 19, 2021\nMichael B.\nWriting your own functions\n\n\n\nS01E15\nMar 26, 2021\nJessica\nInteractive plots with Plotly\n\n\n\nS01E16\nApr 02, 2021\nStephen\nWorking with dates with lubridate\n\n\n\nS01E17\nApr 09, 2021\nJelmer\nIntroduction to regular expressions\n\n\n\nS01E18\nApr 16, 2021\nMike S.\nRegular Expressions: Part II\n\n\n\nS01E19\nApr 23, 2021\nMichael B.\nWord Clouds via tidytext\n\n\n\nS01E20\nApr 30, 2021\nJessica\nCleaning up variables names"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About OSU Code Club",
    "section": "",
    "text": "OSU Code Club is a regularly occurring, interactive, online and in-person gathering to improve coding skills. We aim for a supportive and fun culture of learning together, and hope to offer something to participants at any experience level.\nTeaching materials for each Code Club are added to this website and will continue to be available.\nCode Club has run since the fall of 2020, and materials for the 71 sessions in the semesters prior to autumn 2023 are currently available at https://biodash.github.io but will eventually be migrated to this website. By popular demand, Code Club has so far focused entirely on the R language and its surrounding ecosystem (R Markdown, Shiny, etc).\nThe fall semester of 2023 will …\nIf you have any suggestions or requests, …\n\nOrganizers\nThe current organizers of Code Club are …\nIn previous semesters we also had Michael Broe, Mike Sovic, Stephen Opiyo…\n\n\nLearn more about -and get ready for- Code Club\nForm to sign up\nSchedule with upcoming session\nComputer setup instructions\nResources and tips for R novices\nList of previous sessions by semester for AU20-SP23"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to the new Code Club website!",
    "section": "",
    "text": "Code Club has a new website, made with Quarto!\nWe were previously on the “BioDASH” website, which also contained some educational bioinformatics material unrelated to Code Club.\nThat website was created using R Markdown and “Hugo”. A lot has happened in the realm of R Markdown websites in the meantime, and even R Markdown itself now has a successor: Quarto.\nIn the AU23 semester, we will teach making a website with Quarto, and we therefore think it is fitting that the Code Club website itself is also made with Quarto. Additionally, we think it will be nice to have a website just for Code Club content."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#introduction",
    "href": "posts/website_01_initiation/index.html#introduction",
    "title": "Making a new website - first steps",
    "section": "Introduction",
    "text": "Introduction\nWe are going to begin this semester’s Code Club with a series on making yourself a website. There are lots of reasons why you might want a website, including to:\n\nhave a web presence about yourself (so when people google you, they can find your relevant info)\nhave a blog where you post about whatever it is you want to post about\nshare your research or data\n\nSome of you may already have a simple free or paid website for yourself, that you made through www.u.osu.edu, Squarespace, or Google Sites. These tools don’t require you to be able to code, and allow you to create a website with different levels of customization and interactivity.\nFor the next few sessions, we are going to go over making a website using Quarto. Quarto can be used as an open-source publishing system and you can integrate content from Jupyter notebooks, plain text markdown, Python, R, Julia and others. We are going to use Quarto integrated with R.\n\nTake a look at a gallery of Quarto website examples.\n\nWe picked this particular platform to go over in Code Club since its lightweight, customizable, free, and integrates with R which you’re probably learning anyway. I am going to start going through an example that will be my personal website. I picked this example because I thought this might be of interest to most of you."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#initiating-your-website-project",
    "href": "posts/website_01_initiation/index.html#initiating-your-website-project",
    "title": "Making a new website - first steps",
    "section": "Initiating your website project",
    "text": "Initiating your website project\nThe first step to getting a website is to open up a new project in RStudio.\nStart by going to File &gt; New Project &gt; New Directory. When asked which Project Type you want, pick Quarto Website. Note that you can also initiate a Quarto Blog which is a type of Quarto Website - since the website template is simpler we are going to start there, and can change back in the future if you want. If you want to read ahead, here is a nice website about making your Quarto website into a blog.\n\n\n\na screen shot of the new project wizard - we are picking Quarto Website, or the third from the bottom choice\n\n\nYou will then be asked where you want this website to live in your computer. Under Directory Name pick the name of the folder you want your content to be in, and Create project as subdirectory of as where you want the location on your computer. I have used the Knitr engine for website building.\n\n\n\na screen shot of the new project wizard where we indicate our directory name and where that directory will reside. we use knitr engine to run, and are not creating a git repo, using renv, or using visual markdown editor. we are opening in a new session\n\n\nI am not creating a git repository (since we haven’t gone over that yet, we will add it later after we finish our site), am not using renv with this project (which automatically saves your environment), and I am not default using the visual editor (which let’s you look at your markdown files how they will look when executed) since I want you to get used to looking at markdown. You can always toggle the visual editor later.\nOnce you do this basically you have all the bones of a website! Congratulations 🥳"
  },
  {
    "objectID": "posts/website_01_initiation/index.html#orienting-to-your-website",
    "href": "posts/website_01_initiation/index.html#orienting-to-your-website",
    "title": "Making a new website - first steps",
    "section": "Orienting to your website",
    "text": "Orienting to your website\nA new RStudio window should have opened (since we checked the box in the previous step Open in new session) that has your new R project opened.\nWe now see the four quadrants of RStudio:\n\n\n\na screenshot of four quadrants of rstudio\n\n\n\nthe top left where the two website files index.qmd and _quarto.yml are open\nthe bottom left where we see the console\nthe top right where we see the tabs: Environment (which is currently empty), History (which we won’t use), Connections (which we won’t use), Tutorial (which we won’t use), and a new one Build (which is how we render our site)\nthe bottom right where we see Files (which houses the new files that populate our website), Plots (which you’ve seen before and where plots can be rendered if you don’t like them inline), Packages (which shows all the packages loaded in your R), Help (which you’ve seen before, and where you can get help), Viewer (a new one where we can see a preview rendering of our website), and Presentation (where we can see a preview rendering a presentation but we aren’t doing that right now)."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#building-your-site",
    "href": "posts/website_01_initiation/index.html#building-your-site",
    "title": "Making a new website - first steps",
    "section": "Building your site",
    "text": "Building your site\nLet’s see what our website looks like before we’ve done anything. If you go to the Build tab in the top right quadrant and click Render Website your site will render and show up in the Viewer in the bottom right."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#looking-around",
    "href": "posts/website_01_initiation/index.html#looking-around",
    "title": "Making a new website - first steps",
    "section": "Looking around",
    "text": "Looking around\nYou can now click around in your new and very unexciting website. Let’s look around and then we will go through the file structure to see how the two are related.\nAlong the top, or if you click the three lines in the top right (depending on the size of your browser page) you can see by default we get a Home and About page. If we click ‘website’ at the top, we go back to Home. We also have a search bar that allows us to search on our site.\nNow that we know what information we see on our site, we can look at the files that are used to build the site and try and interpret them.\n\n\n\na screenshot of the files generated by creating our skeleton website in the bottom right quadrant\n\n\nBefore we open the files, let’s talk about the file extensions and what they mean:\n\n.yml is a YAML or the file that indicates how the website will be configured\n.qmd is a Quarto markdown document, and if you’re familiar with RMarkdown .Rmd documents its very similar. It contains both text written in markdown and executable code.\n.css is a Cascading Style Sheets file that indicates the way to style an HTML document (i.e., your website)\n.Rproj is a R Project file that designates your working directory\n\nWe also have a folder _site which houses the knitted website files. More about this later."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#index.qmd",
    "href": "posts/website_01_initiation/index.html#index.qmd",
    "title": "Making a new website - first steps",
    "section": "index.qmd",
    "text": "index.qmd\nThis index.qmd file indicates what the home page of the site will look like.\n\n\n\na screenshot of the index.qmd file\n\n\nIntuitively we can compare this file to what the homepage of the website looks like. You can try editing this website, saving, and then click Render and see how this changes what the site looks like in the Viewer (bottom right quadrant). You can check Render on Save so that whenever you save, the file automatically renders.\nPlay around with adding text, code, headers, images, whatever you might want on your website homepage."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#about.qmd",
    "href": "posts/website_01_initiation/index.html#about.qmd",
    "title": "Making a new website - first steps",
    "section": "about.qmd",
    "text": "about.qmd\nThis about.qmd file indicates what the about page of the site will look like.\n\n\n\na screenshot of the about.qmd file\n\n\nJust like with the index.qmd file, you can play around with this page."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#quarto.yml",
    "href": "posts/website_01_initiation/index.html#quarto.yml",
    "title": "Making a new website - first steps",
    "section": "_quarto.yml",
    "text": "_quarto.yml\nThe YAML file indicates how the site should be configured.\n\n\n\na screenshot of the _quarto.yml file\n\n\nYou’re probably not familiar with these .yml files but still its not horribly difficult to figure out what the different bits do.\nAt the top, project type is indicated as website. We don’t want to change that now.\nIn the next section beginning at line 4, we can have some specific information for how the website populates. The title is listed as “website” - we can change that to what we want at the top of our website. There is also a specification for what are the items in your navitation bar - here we have that the Home text will link to the index.qmd, and the next link is about.qmd. You can make more .qmd files that have other information and refer to them here and they will also populate in your navigation bar.\nIn the third section at line 12, we can see some information on the setting of the website format. We have a html site, the theme is something called “cosmo” (see here for some other options), we are using the styles.css file for css theming (actually that file is currently blank but thats ok), and we are indicating toc (or table of contents) as true, therefore we have a table of contents.\nHere you can find some documentation about all the different stuff you can put in your YAML for a website."
  },
  {
    "objectID": "posts/website_01_initiation/index.html#playing-around",
    "href": "posts/website_01_initiation/index.html#playing-around",
    "title": "Making a new website - first steps",
    "section": "Playing around",
    "text": "Playing around\nNow that we have a general understanding of whats in our site, try playing around to begin customization to be how you want. We will do this for the rest of the session and please ask any questions on problems you come across, or share cool things you find!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code Club blogroll",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nMaking a new website - first steps\n\n\n\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nJessica Cooperstone\n\n\n\n\n\n\n  \n\n\n\n\nWelcome to the new Code Club website!\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 18, 2023\n\n\nJelmer Poelstra, Jessica Cooperstone, Horacio Lopez-Nicora\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pages/r_resources.html#new-to-r",
    "href": "pages/r_resources.html#new-to-r",
    "title": "Getting Started with R",
    "section": "New to R?",
    "text": "New to R?\nIf you are completely new to R, we recommend watching at least the first couple of videos from Mike Sovic’s Youtube playlist of short videos on R, and ideally all of them, prior to attending Code Club. Here is the first video:\nTODO Embed?\n\nIn case you want to do more self-study (note that this is not required/needed), here are some additional resources:\n\nA useful and fun written tutorial is R for cats.\nFor a more systematic and lengthy introduction to R, see A Tutorial Introduction to R (this gets fairly advanced after section 9).\nExcellent comprehensive introductions are the R Basics and Visualization classes by Rafael Irizarry that can be freely accessed; you do have to create an account.\nOSU TDAI videos:\n\nInstalling R / R Studio\nR / R Studio Introduction\n\n\nAlso, don’t hesitate to reach out to the Code Club organizers if you have any questions!"
  },
  {
    "objectID": "pages/r_resources.html#miscellaneous-r-tips",
    "href": "pages/r_resources.html#miscellaneous-r-tips",
    "title": "Getting Started with R",
    "section": "Miscellaneous R tips",
    "text": "Miscellaneous R tips\n\nUseful settings\nBy default, R will try to save your “environment” (e.g., your loaded data, variables, etc) when you exit, and then reload everything the way it was upon restarting R. However, this is bad! You should always be able to reproduce your environment given a set of commands saved in an R script or R Markdown document, whereas saving and reloading your environment encourages you to be sloppy about this.\nTo disable this in RStudio, go to Tools &gt; Global Options &gt; General and set the options as follows:\n\n\n\n\nInstalling R packages\n\nCRAN packages\nTo install an R package that is available at CRAN, the default R package repository, from within R (e.g. in the R console in RStudio), use the install.packages() function.\nThe install.packages() function will handle dependencies within R — i.e., it will install other R packages that your package depends on. Occasionally, when the install function needs to compile a package from source, errors arise that relate to missing system dependencies (i.e. software outside of R).\nOn Mac and Linux, these system dependencies are best installed outside of R, such as with homebrew on Mac or apt on Ubuntu. The errror message you got when trying to install an R package should tell you which system dependencies are needed.\nOn Windows, you can use the installr package to install such dependencies or other software from within R — for example:\ninstall.packages(\"installr\")    # Install the installr package first\ninstalllr::install.RStudio()    # Install RStudio\ninstallr::install.python()      # Install Python\n\n\nInstalling packages from Github\nTo install a package from Github, use either the devtools or the remotes package – for example:\ninstall.packages(\"remotes\")                # Install the remotes package\nremotes::install_github(\"kbroman/broman\")  # Install from a repository using \"&lt;username&gt;/&lt;repo-name&gt;\"\nThis will install the package from source, so you will need to make sure you are able to do so by following the instructions in the section right above this one.\n\n\nInstalling packages from Bioconductor\nIf you’re doing bioinformatic analyses in R, you will probably run into packages that are not on CRAN but on Bioconductor. To install a package from Bioconductor, use the BiocManager package – for example:\ninstall.packages(\"BiocManager\")  # Install the BiocManager package\nBiocManager::install(\"edgeR\")    # Install the edgeR package from Bioconductor\n\n\n\n\nUpdating R\nConsider updating R if you have an older version of R installed. As of August 2023, we would recommend to update R if your version is below 4.1.\nYou can check which version of R you have by looking at the first lines of output when running the following command inside R:\nsessionInfo()\nTo update:\n\nWindows: You can update R from within R. The updateR() function will also take care of updating your packages:\ninstall.packages(\"installr\")\ninstallr::updateR()\nMac: Download and install the latest .pkg file as if you were installing it for the first time.\n\n\n\nRe-installing your packages after updating (Mac and Linux)\nWhile the installr::updateR() function for Windows users takes care of reinstalling your packages along with updating R, Mac and Linux users will have to manually re-install their packages. Some people prefer to re-install these packages on the fly, which can end up being a way to get rid of packages you no longer use.\nBut if you want immediately reinstall all your packages, run this before you upgrade:\nmy_packages &lt;- installed.packages()\nsaveRDS(my_packages, \"my_packages.rds\")\nThen, after you’ve installed the latest R version:\nmy_packages &lt;- readRDS(\"CurrentPackages.rds\")\ninstall.packages(my_packages[1, ])\nThis will only work for packages available on CRAN. Of course, you can check your list for Github-only and Bioconductor packages and then install those with their respective commands (see below). Yes, this can be a bit of a hassle!"
  },
  {
    "objectID": "pages/setup.html",
    "href": "pages/setup.html",
    "title": "Computer Setup for Code Club",
    "section": "",
    "text": "Here, you will find general information about computer setup for Code Club. Additional setup instructions for individual sessions will appear in the posts for each session.\nIn summary, you just need to get access to R and RStudio, preferably via a local installation, and optionally via the Ohio Supercomputer Center (OSC).\nIf you run into issues or have questions, don’t hesitate to contact one of the organizers. You can also come to Code Club 15 minutes early, and one or more of the organizers should be there already."
  },
  {
    "objectID": "pages/setup.html#local",
    "href": "pages/setup.html#local",
    "title": "Computer Setup for Code Club",
    "section": "Local installation",
    "text": "Local installation\n\n\n\n\n\n\nAlready have R installed?\n\n\n\n\nPlease check your version of R – this information is printed to the console when you start R, and you can also get it by typing sessionInfo() and checking the first line of the output.\nCurrently (August 2023), we would recommend R version 4.2.0 or higher. And since we’ll work with the “base R pipe”, you’ll definitely need version 4.1.0 or higher.\nTo update R, see this page for instructions.\n\n\n\n\nInstall R\n\nWindows: Download and run the .exe file for the latest version of R from https://cran.r-project.org/bin/windows/base/, by clicking the large Download R [version-number] for Windows link at the top of the gray box.\nMac: Download and run the .pkg file for the latest version of R from https://cran.r-project.org/bin/macosx/, by clicking the link just below Latest release.\nOn a Linux distribution, you can also install R using the website above, but you may prefer to use a package manager instead – for instance, seee these instructions for installing the latest R version on Ubuntu 20.04 using the apt package manager.\n\n\n\nInstall RStudio\nRStudio is a so-called Integrated Development Environment (IDE) for R, with side-by-side panes for an R script, an R concole, plots, help documents, and much more. While it is perfectly possible to use R without RStudio, RStudio has become the de facto standard for working with R and is very useful.\nTo install RStudio, go to the RStudio download page and download and run the installer file for your operating system."
  },
  {
    "objectID": "pages/setup.html#osc",
    "href": "pages/setup.html#osc",
    "title": "Computer Setup for Code Club",
    "section": "Alternative: Use RStudio Server at OSC",
    "text": "Alternative: Use RStudio Server at OSC\nUpon request (contact Jelmer), you can get access to the Ohio Supercomputer Center (OSC) Classroom Project for Code Club (PAS1838). This way, you can code in RStudio from your browser rather than with a local installation. This is a good option if you prefer not to install anything or if you run into problems during installations.\nAfter you asked for access to the OSC project, you should receive an email from OSC that you have been added to the Code Club OSC project.\n\nIf you already have an OSC account, you shouldn’t need to do anything to gain access, although the email may ask you to confirm/accept your being added to project.\nIf you do not yet have an OSC account, the email you received from OSC should have a link to do so. Alternatively, follow the instructions below to sign up and get access to the project.\n\n\n\nRun RStudio Server from the OSC OnDemand website\nOSC OnDemand lets you access OSC resources through your browser and run applications like RStudio.\n\nTo get started, go to https://ondemand.osc.edu/ and log in with your OSC username and password.\nClick on “Interactive Apps” in the blue top bar, and select “RStudio Server” (near the bottom).\nNow, you’re on a page from which you can launch an RStudio server that will run on an OSC cluster. Select project PAS1838 in the dropdown menu and change the “Number of hours” to 2. Then click “Launch”.\nYou will be sent to a page where you can see the status of your “job” It usually starts running within seconds, and the color of the top bar will then switch from blue (“Queued” and then “Starting”) to green (“Running”):\nClick “Connect to RStudio Server” at the bottom of the box, and an RStudio Server instance will open."
  },
  {
    "objectID": "pages/setup.html#more",
    "href": "pages/setup.html#more",
    "title": "Computer Setup for Code Club",
    "section": "More info",
    "text": "More info\nPlease see our R Resources and Tips if you are new to R or need to update your R version!"
  }
]